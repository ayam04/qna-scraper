[
    {
        "question": "1) What is MariaDB?",
        "answer": "MariaDB is a popular, open source, and the community-based project developed by MySQL developers. It is a relational database management technology which provides the same features as MySQL. It is a new replacement for MySQL.\nMariaDB turns data into structured wide array of applications, ranging from banking to websites. MariaDB is used because it is fast, scalable, and robust with a reach ecosystem of storage engine, plugin, and many other tools make it versatile for a wide variety of use cases.\nThe latest version of MariaDB (version 10.4) also includes GIS and JSON features.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "2) What are the main features of MariaDB?",
        "answer": "MariaDB provides the same features of MySQL with some extensions. It is relatively new and advance.\nA list of the features of MariaDB:\nADVERTISEMENT\nMariaDB can run on different operating systems and support a wide variety of programming languages.\nMariaDB is licensed under GPL, LGPL, or BSD.\nMariaDB follows a standard and popular query language.\nMariaDB provides Galera cluster technology.\nMariaDB provides supports for PHP which is the most popular web development language.\nMariaDB includes a wide selection of storage engines, including high-performance storage engines for working with other RDBMS data sources.\nMariaDB also offers many operations and commands unavailable in MySQL and eliminates/replaces features impacting performance negatively.\nMariaDB's speed is one of its prominent features. It is remarkably scalable and can handle tens of thousands of tables and billions of rows of data.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "3) How to create database in MariaDB?",
        "answer": "CREATE DATABASE command is used to create a database in MariaDB, CREATE SCHEMA is a synonym for creating a database.\nSyntax:\nCREATE DATABASE Database_name;  \nIf the optional OR REPLACE clause is used, it acts as a shortcut for:\nDROP DATABASE IF EXISTS db-name;  \nCREATE DATABASE db-name;  \nIF NOT EXISTS:\nWhen IF NOT EXISTS clause is used, MariaDB will return a warning instead of an error if the specified database is already exist.\nFor example\nCREATE DATABASE student;  \nOutput:\nQuery OK, 1 row affected (0.01 sec)\nCREATE OR REPLACE DATABASE student;  \nOutput:\nQuery OK, 2 rows affected (0.00 sec)\nCREATE DATABASE IF NOT EXISTS student;  \nOutput:\nQuery OK, 1 row affected, 1 warning (0.01 sec) \nWarning:\nLevel Code Message\nNote 1007 Can't create database 'student' ; database exists\nSHOW DATABASE: This command is used to see the database you have created\nSyntax:\nSHOW DATABASES;  \nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "4) How to use database in MariaDB?",
        "answer": "USE DATABASE command is used to select and use a database in MariaDB. The USE db-name' statement tells MariaDB to use the db_name database as default (current) database for subsequent statements. The database remains the default until the end of the session, or another USE statement is issued:\n\nSyntax:\nUSE database_name;     \nExample\nUSE student;  \nSELECT COUNT (*) FROM mytable;    # selects from student.mytable  \nUSE faculty;  \nSELECT COUNT (*) FROM mytable;    # selects from faculty.mytable  \nThe DATABASE () and SCHEMA () returns the default database.   \nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "5) How to delete a database in MariaDB ?",
        "answer": "DROP DATABASE command is used to drop a database in MariaDB. Be very careful with this statement! To use a DROP DATABASE, you need to DROP privileges on the database. DROP SCHEMA is a synonym for DROP DATABASE\nNOTE: When a database is dropped, user privileges on the database are not automatically\nSyntax:\nDROP DATABASE Database_name;   \nIF EXISTS statement:\n\nUse IF EXISTS to prevent an error from occurring for the database that does not exist. A note is generated for each non-existent database when using IF EXISTS statement.\nExample\nDROP DATABASE student;  \nOutput:\nQuery OK, 0 rows affected (0.39 sec) \nDROP DATABASE student;  \nOutput:\nERROR (1008): can't drop database; database doesn't exists [\\]w: show warning enabled\nDROP DATABASE IF EXISTS student;  \nOutput:\nQuery OK, 0 rows affected, 1 warning (0.00 sec)\nNote (code 1008): can't drop database 'student'; database doesn't exists\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "6) How to create a table in MariaDB's database?",
        "answer": "First, you have to create a database in MariaDB follows by selecting the database and then create a table by using the CREATE TABLE statement. You must have the CREATE privilege for a table or on the database to create a table.\nCreate table statement creates a table name followed by a list of columns, indexes, and constraints. By default, a table is created in the default database\nSyntax:\nCREATE TABLE table_name (column_name column_type);     \nFor example\n1.  CREATE TABLE Students(    \n2.  student_id INT NOT NULL AUTO_INCREMENT,    \n3.  student_name VARCHAR(100) NOT NULL,    \n4.  student_address VARCHAR(40) NOT NULL,    \n5.  admission_date DATE,    \n6.  PRIMARY KEY ( student_id ));  \nOutput:\nQuery OK, 0 rows affected (0.312 sec)\nYou can verify that whether the table is created by using SHOW TABLES command.\nSHOW TABLES;     \nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "7) How to delete a table in MariaDB's database?",
        "answer": "DROP TABLE command is used to delete a table from a database in MariaDB. It deletes the table permanently and cannot be recovered. You must have DROP privilege for each table. All table data and the table definitions are removed, as well as triggers associated with the table so very careful with this statement!\nIf any of the tables named in the argument list do not exist, MariaDB returns an error indicating by name which not existing tables it was not unable to drop, but it also drops all of the tables in the list that does exist.\nSyntax:\nDROP TABLE table_name ;          \nExample\nDrop the table \"Students\" created within \"Javatpoint\" database.  \nDROP TABLE Students;  \n\nYou can verify whether the table is deleted or not.\nSHOW TABLES; //command  \nOutput\n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "8) How to insert records in a table in MariaDB database?",
        "answer": "INSERT INTO statement is used to insert records in a table in the MariaDB database.\nSyntax:\nINSERT INTO tablename (field, field2,...) VALUES (value, value2,...);     \nOr\n1.  INSERT INTO     \n2.  (column1, column2,... )    \n3.  VALUES    \n4.  (expression1, expression2, ... ),    \n5.  (expression1, expression2, ... ),    \n6.  ...;     \nOr you can use it also with WHERE condition\n1.  INSERT INTO table    \n2.  (column1, column2, ... )    \n3.  SELECT expression1, expression2, ...    \n4.  FROM source_table    \n5.  [WHERE conditions];     \nFor example\nSpecify the column name:\nINSERT INTO person (first_name, last_name) VALUES ('Mohd', 'Pervez');  \nInsert more than 1 row at a time:\nINSERT INTO abc VALUES (1,\"row 1\"), (2, \"row 2\");  \nSelect from another table:\nINSERT INTO abc SELECT * FROM person WHERE status= 'c';  \nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "9) How to retrieve records from a table in MongoDB database?",
        "answer": "The SELECT statement is used to retrieve records from a table in the MongoDB database. You can choose, single, multiple or all records from a table by using different keywords.\nSyntax:\nSELECT expressions      \nFROM tables      \n[WHERE conditions];    \nFROM clause indicates the table or tables from which to retrieve rows.\nThe SELECT statement can be used with UNION statement, ORDER BY clause, LIMIT clause, WHERE clause, GROUP BY clause, HAVING clause, etc.\nSELECT [ ALL | DISTINCT ]    \nexpressions    \nFROM tables    \n[WHERE conditions]    \n[GROUP BY expressions]    \n[HAVING condition]    \n[ORDER BY expression [ ASC | DESC ]];    \nExample\nWe have a table \"Students\", having some data. So retrieve all records from \"Students\".\nSELECT * FROM Students;     \n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "10) How can you retrieve limited number of records from a table?",
        "answer": "LIMIT clause is used with SELECT statement to select a limited number of records from a table. It facilitates you to retrieve records according to your use.\nSyntax:\n SELECT expressions      \nFROM tables      \n[WHERE conditions]      \n[ORDER BY expression [ ASC | DESC ]]      \nLIMIT row_count;    \nExample\nRetrieve records in descending order:\nLet's use SELECT statement with LIMIT clause in \"Students\" table. The result is displayed in descending order and LIMIT is 4.\nSELECT student_id, student_name, student_address    \nFROM Students    \nWHERE student_id <= 7    \nORDER BY student_id DESC    \nLIMIT 4;    \n\n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "11) How can you change or update the already inserted records of a MariaDB table?",
        "answer": "The UPDATE statement is used to change, update or modify the existing records of a MariaDB table. It can be used with WHERE, ORDER BY and LIMIT clauses.\nSyntax:\n\nUPDATE table_name SET field=new_value, field2=new_value2,...    \n[WHERE ...]   \nFor example\nWe have a table \"Test\", having the following data:\n\nLet's change the 'title' \"Welcome to MariaDB\" where 'title' was \"Hello\".\n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "12) What is the use of DELETE statement in MariaDB?",
        "answer": "The MariaDB DELETE statement is used to delete one or more records from the table in the database. It can be used to delete records from the table as well the whole table if you use it without WHERE condition.\nSyntax:\nDELETE FROM table      \n[WHERE conditions]      \n[ORDER BY expression [ ASC | DESC ]]      \n[LIMIT number_rows];          \nLet's delete data using one condition.\nExample\nDELETE FROM Students    \nWHERE student_name = 'Mahesh';     \n\nThe query is executed successfully. You can now see that selected data is deleted.\nSELECT * FROM Students;    \n\nYou can see that \"Mahesh\" is not available in the table.\nSimilarly, you can delete data using multiple conditions.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "13) What is the use of TRUNCATE statement? How is it different from DELETE statement?",
        "answer": "TRUNCATE TABLE statement is used to delete a table permanently. It deletes all the records from the table.\nSyntax:\nTRUNCATE [TABLE] [database_name.]table_name;  \nDifference between DELETE and TRUNCATE statement:\nDELETE statement is used to remove one or more columns from a table as well as the whole table. On the other hand, the TRUNCATE TABLE statement is used to delete the whole table permanently.\nTRUNCATE TABLE statement is same as DELETE statement without a WHERE clause.\nDELETE statement removes rows one at a time and records an entry in the transaction log for each deleted row.\nTRUNCATE TABLE removes the data by deallocating the data pages used to store the table data and record only the page deallocations in the transaction log. Hence it is faster than delete statement.\nExample\nLet's truncate the table \"Students\".\nTRUNCATE TABLE javatpoint.Students;     \nOutput:\n Query OK, 0 rows affected (0.031sec).\nThe TRUNCATE query is executed successfully. You can see that the records of \"Student\" table have been deleted permanently.\nSELECT * FROM Students;     \nOutput:\nNo record found.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "14) What is an aggregate function? How many types of aggregate functions in MariaDB?",
        "answer": "In relational database management system, aggregate functions are the functions where the values of multiple rows are grouped together as input on certain criteria and provide a single value of more significant meaning such as a list, set, etc.\nFollowing is a list of aggregate function in MariaDB:\nMariaDB COUNT Function: In MariaDB database, COUNT function is used to return the count of an expression.\nSyntax:\nSELECT COUNT(aggregate_expression)    \nFROM tables    \n[WHERE conditions];     \nThe COUNT () Function counts only NOTNULL values.\nMariaDB SUM Function: MariaDB SUM function is used to return the summed value of an expression.\nSyntax:\nSELECT SUM(aggregate_expression)    \nFROM tables    \n[WHERE conditions];     \nMariaDB MIN Function: MariaDB MIN () function is used to retrieve the minimum value of the expression.\nSyntax:\nSELECT MIN(aggregate_expression)    \nFROM tables    \n[WHERE conditions];     \nMariaDB MAX Function: MariaDB MAX () function is used to retrieve the maximum value of the expression.\nSyntax:\nSELECT MAX(aggregate_expression)    \nFROM tables    \n[WHERE conditions];     \nMariaDB AVG Function: MariaDB AVG() function is used to retrieve the average value of an expression.\nSyntax:\nSELECT AVG(aggregate_expression)    \nFROM tables    \n[WHERE conditions];     \nOr\nSELECT expression1, expression2, ... expression_n,    \nAVG(aggregate_expression)    \nFROM tables    \n[WHERE conditions]    \nGROUP BY expression1, expression2, ... expression_n;     \nMariaDB BIT_AND Function: Returns the bitwise AND of all bits in exp.\nSyntax:\nBIT_AND (exp)  \nMariaDB BIT_OR: Returns the bitwise OR of all bits in exp.\nSyntax:\nBIT_OR (exp)  \nMariaDB BIT_XOR: Returns the bitwise XOR of all bits in exp.\nSyntax:\nBIT_XOR (exp)",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "15) What are the different types of clauses used in MariaDB?",
        "answer": "MariaDB supports all clauses used in RDBMS. For example:\nMariaDB Where Clause: In MariaDB, WHERE clause is used with SELECT, INSERT, UPDATE and DELETE statement to select or change a specific location where we want to change.\nIt has appeared after the table name in a statement.\nSyntax:\n[COMMAND] field,field2,... FROM table_name,table_name2,... WHERE [CONDITION]   \nNote: WHERE clause is an optional clause. It can be used with AND, OR, AND & OR, LIKE operators.\nMariaDB Like Clause: In MariaDB, LIKE clause is used with SELECT statement to retrieve data when an operation needs an exact match. It can be used with SELECT, INSERT, UPDATE and DELETE statement.\nIt is used for pattern matching and returns a true or false. The patterns used for comparison accept the following wildcard characters:\n\"%\" wildcard character: It matches numbers of characters (0 or more).\n\"_\" wildcard character: It matches a single character. It matches characters within its set.\nSyntax:\nSELECT field, field2,.... FROM table_name, table_name2,...   \nWHERE field LIKE condition  \nMariaDB Order By Clause: In MariaDB database, ORDER BY Clause is used to sort the records in your result set in ascending or descending order.\nSyntax:\nSELECT expressions    \nFROM tables    \n[WHERE conditions]    \nORDER BY expression [ ASC | DESC ];  \nNote: You can sort the result without using ASC/DESC attributes. By default, the result will be stored in ascending order.\nMariaDB DISTINCT Clause: MariaDB DISTINCT Clause is used to remove duplicates from the result when we use it with a SELECT statement.\nSyntax:\nSELECT DISTINCT expressions    \nFROM tables    \n[WHERE conditions];.  \nNote: When you use the only expression in a DISTINCT clause, the query will return the unique values for that expression. When you use multiple expressions in the DISTINCT clause, the query will return unique combinations for the multiple expressions listed.\nThe DISTINCT clause doesn't ignore NULL values. So when using the DISTINCT clause in your SQL statement, your result set will include NULL as a distinct value.\nMariaDB FROM Clause: MariaDB FROM Clause is used to fetch data from a table. It is also used to join the tables which you will study later.\nSyntax:\nSELECT columns_names FROM table_name;  \nEtc.",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "16) What is the use of WHERE clause?",
        "answer": "The WHERE clause is used to select or change a specific location to fetch the records from a table. It is used with SELECT, INSERT, UPDATE and DELETE statement.\nSyntax:\n[COMMAND] field,field2,... FROM table_name,table_name2,... WHERE [CONDITION]         \nWHERE Clause with Single Condition\nExample\nWe have a table \"Students\" having some data. Let's retrieve all records from the \"Student\" table where student_id is less than 6.\nSELECT *     \nFROM Students    \nWHERE student_id < 6;     \nOutput:\n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "17) What is the use of LIKE clause in MariaDB?",
        "answer": "MariaDB LIKE clause is used with SELECT, INSERT, UPDATE and DELETE statement to retrieve data when an operation needs an exact match.\nIt is used for pattern matching and returns a true or false. The patterns used for comparison accept the following wildcard characters:\n\"%\" wildcard character: It matches numbers of characters (0 or more).\n\"_\" wildcard character: It matches a single character. It matches characters within its set.\nSyntax:\nSELECT field, field2,... FROM table_name, table_name2,...      \nWHERE field LIKE condition        \nWe have a table \"Employees\", having the following data.\n\nLet's use % wildcard with LIKE condition to find all of the names which begins with \"L\".\nSELECT name    \nFROM Employees    \nWHERE name LIKE 'L%';    \n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "18) What is the use of ORDER BY clause in MariaDB?",
        "answer": "MariaDB ORDER BY Clause is used to sort the records in your result set in ascending or descending order.\nNote: You can sort the result without using ASC/DESC attribute. By default, the result will be stored in ascending order.\nSyntax:\nSELECT expressions      \nFROM tables      \n[WHERE conditions]      \nORDER BY expression [ ASC | DESC ];       \nORDER BY Clause without using ASC/DESC attributes:\n\"Employees\" table, having the following data:\nId Name address\n1 Lucky Australia\n2 Mayank Ghaziabad\n3 Rahul Noida\n4 Lily LA\nSELECT * FROM Employees    \nWHERE name LIKE '%L%'   \nORDER BY id;     \nOutput:\nId Name address\n4 Lily LA\n3 Rahul Noida\n2 Mayank Ghaziabad\n1 Lucky Australia\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "19) What is the use of MariaDB DISTINCT clause?",
        "answer": "MariaDB DISTINCT Clause is used to remove duplicates from the result when it is used with a SELECT statement.\nSyntax:\nSELECT DISTINCT expressions      \nFROM tables      \n[WHERE conditions];  \nNote: When you use the only expression in the DISTINCT clause, the query will return the unique values for that expression. When you use multiple expressions in the DISTINCT clause, the query will return unique combinations for the multiple expressions listed.\nThe DISTINCT clause doesn't ignore NULL values. So when using the DISTINCT clause in your SQL statement, your result set will include NULL as a distinct value.\nSingle Expression:\nWe have a table name \"Students\", having some duplicate entries. A name \"Ajeet\" is repeated three times.\n\nLet's use the DISTINCT clause to remove duplicates from the table.\nSELECT DISTINCT student_name    \nFROM Students    \nWHERE student_name = 'Ajeet';     \nOutput:\n\nYou can see that \"Ajeet\" is repeated three times in the original \"Students\" table but after using DISTINCT clause, it is returned one time and duplicate entries are deleted.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "20) Why do we use FROM clause with SELECT statement?",
        "answer": "The FROM clause is used with SELECT statement to retrieve data from the table. It is also used to join tables.\nSyntax:\nSELECT columns_names FROM table_name;      \nExample\nLet's retrieve all employees from the table \"Employees\".\nSELECT * FROM Employees;   \nOutput\n\nAs we know that FROM clause used along with the SELECT clause to join the data of two tables too.\n\nLet's take an example of INNER JOIN: one of the most common types of join which returns all rows from multiple tables where the join condition is satisfied.\nWe have two tables \"Student\" and \"Employee\".\n\n\nUse the following syntax to join both tables according to the given parameters:\nSELECT Students.student_id, Students.student_name, Employee.salary    \nFROM Students     \nINNER JOIN Employee  \nON Students.student_id = Employee.emp_id;     \nOutput:\n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "21) What is the use of COUNT() aggregate function?",
        "answer": "MariaDB COUNT() aggregate function is used to return the count of an expression.\nThe COUNT () Function counts only NOT NULL values.\nCOUNT (*) counts the total number of rows in a table.\nCOUNT () would return 0 if there were no matching rows.\nSyntax:\nSELECT COUNT(aggregate_expression)      \nFROM tables      \n[WHERE conditions];        \nExample\nWe have a table \"Students\", having the following data:\n\nCount \"student_id\" from \"Students\" table:\nSELECT COUNT(student_id)    \nFROM Students;     \n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "22) What is the use of MariaDB SUM() function?",
        "answer": "MariaDB SUM function is used to return the summed value of an expression.\nIf the table has no any rows, then SUM () returns NULL. The DISTINCT keyword is also used with SUM () to sum only the distinct values of an expression.\nSyntax:\nSELECT SUM(aggregate_expression)      \nFROM tables      \n[WHERE conditions];     \nExample\nCREATE TABLE EMP (emp_id, emp_salery);  \nINSERT INTO EMP VALUES (1,1000),(2,2000),(3,5000);  \nSELECT *FROM EMP;  \nTable: EMP\nemp_id emp_salery\n1 1000\n2 2000\n3 5000\nSELECT SUM (emp_salery) FROM EMP WHERE emp_id>2;  \n\nOutput:\n5000\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "23) What is the usage of MIN() function in MariaDB?",
        "answer": "MariaDB MIN() function is used to retrieve the minimum value of the expression.\nMIN () can take string argument too, in which case it returns the minimum string values.\nMIN() returns NULL if there were no matching rows.\nSyntax:\nSELECT MIN(aggregate_expression)      \nFROM tables      \n[WHERE conditions];        \nExample\nWe have a table \"Student\", having the following data:\n\nLet's retrieve lowest salary by using MIN () function.\nSELECT MIN(salary) AS \"Lowest Salary\"    \nFROM Student;     \nOutput:\n\nLet's take another example:\n\nSELECT name, MIN(score) FROM student GROUP BY name;  \n\nTo check MIN string:\nSELECT MIN(name) FROM student;  \n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "24) What is the usage of MAX() function in MariaDB?",
        "answer": "MariaDB MAX() function is used to retrieve the maximum value of the expression.\nMAX () can take string argument too, in which case it returns the maximum string values.\nMAX () returns NULL if there were no matching rows.\nSyntax:\nSELECT MAX(aggregate_expression)      \nFROM tables      \n[WHERE conditions];  \nExample\nWe have a \"student\" table\n\nTo list out the student name with maximum score:\n\nTo check maximum string name:\n\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "25) What is the usage of AVG() function in MariaDB database?",
        "answer": "MariaDB AVG() function is used to retrieve the average value of an expression.\nAVG() returns NULL if there were no matching rows.\nSyntax:\nSELECT AVG(aggregate_expression)      \nFROM tables      \n[WHERE conditions];    \nOr\nSELECT expression1, expression2, ... expression_n,    \nAVG (aggregate_expression)    \nFROM tables    \n[WHERE conditions]    \nGROUP BY expression1, expression2, ... expression_n;     \nExample\nWe have a table \"Employee2\", having the following data:\n\nLet's retrieve the average salary of the employees from the table.\nSELECT AVG(salary) AS \"Average Salary\"    \nFROM Employee2;    \nOutput\n\nNote: We can Use Average function With formula and ORDER BY clause too.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "26) What is JOIN? How many types of JOIN in MariaDB?",
        "answer": "JOIN is used to retrieve data from two or more tables. By default, JOIN is also called INNER JOIN. It is used with SELECT statement.\nThere are mainly two types of joins in MariaDB:\nINNER JOIN:\nMariaDB INNER JOIN is the most common type of join which returns all rows from multiple tables where the join condition is satisfied.\nSyntax:\nSELECT columns    \nFROM table1     \nINNER JOIN table2    \nON table1.column = table2.column;    \n\nExample\nWe have two tables \"Students\" and \"Employee2\".\nStudent table\n\nEmployee2 Table\n\nExecute the following commands:\nSELECT Students.student_id, Students.student_name, Employee2.salary    \nFROM Students     \nINNER JOIN Employee2    \nON Students.student_id = Employee2.emp_id;   \nOutput\n\nOUTER JOIN:\nAgain OUTER JOIN is divided into two types:\nLEFT JOIN:\nMariaDB LEFT OUTER JOIN is used to return all rows from the left-hand table specified in the ON condition and only those rows from the other table where the joined condition is satisfied.\nLEFT OUTER JOIN is also called LEFT JOIN.\nSyntax:\nSELECT columns    \nFROM table1    \nLEFT [OUTER] JOIN table2    \nON table1.column = table2.column;     \n\nExample\nSELECT Students.student_id, Students.student_name,     \nStudents.student_address,     \nEmployee2.salary, Employee2.emp_address    \nFROM Students     \nLEFT JOIN Employee2    \nON Students.student_id = Employee2.emp_id;    \nOutput\n\nRIGHT JOIN:\nMariaDB RIGHT OUTER JOIN is used to return all rows from the right-hand table specified in the ON condition and only those rows from the other table where the joined fields are satisfied with the conditions.\nMariaDB RIGHT OUTER JOIN is also called RIGHT JOIN.\nSyntax:\nSELECT columns    \nFROM table1    \nRIGHT [OUTER] JOIN table2    \nON table1.column = table2.column;     \n\nExample\nSELECT Students.student_id, Students.student_name,     \nStudents.student_address, Employee2.salary,     \nEmployee2.emp_address    \nFROM Students     \nRIGHT JOIN Employee2    \nON Students.student_id = Employee2.emp_id;",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "27) What is MariaDB INNER JOIN?",
        "answer": "MariaDB INNER JOIN is the most common type of join which returns all rows from multiple tables where the join condition is satisfied.\nSyntax:\nSELECT columns      \nFROM table1       \nINNER JOIN table2      \nON table1.column = table2.column;       \nExample:\nWe have two tables' sites and pages:\nSites table:\nsite_id site_name\n100 javatpoint.com\n200 Facebook.com\n300 Yahoo.com\n400 Google.com\nPages table:\npage_id site_id page_title\n1 100 MariaDB\n2 100 MySQL\n3 200 Java interview questions\n4 300 Software testing\n5 500 Flight booking\nNow execute the following commands:\nSELECT sites.site_id, sites.site_name, pages.page_id, pages.page_title FROM sites INNER JOIN pages ON sites.site_id= page.site_id  \nOutput:\nsite_id site_name page_id page_title\n100 javatpoint 1 MariaDB\n100 javatpoint 2 MySQL\n200 Facebook.com 3 Java interview questions\n300 Yahoo.com 4 Software testing\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "Example:",
        "answer": "We have two tables' sites and pages:\nSites table:\nsite_id site_name\n100 javatpoint.com\n200 Facebook.com\n300 Yahoo.com\n400 Google.com\nPages table:\npage_id site_id page_title\n1 100 MariaDB\n2 100 MySQL\n3 200 Java interview questions\n4 300 Software testing\n5 500 Flight booking\nNow execute the following commands:\nSELECT sites.site_id, sites.site_name, pages.page_id, pages.page_title FROM sites INNER JOIN pages ON sites.site_id= page.site_id  \nOutput:\nsite_id site_name page_id page_title\n100 javatpoint 1 MariaDB\n100 javatpoint 2 MySQL\n200 Facebook.com 3 Java interview questions\n300 Yahoo.com 4 Software testing\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "28) What is LEFT OUTER JOIN in MariaDB?",
        "answer": "MariaDB LEFT OUTER JOIN is used to return all rows from the left-hand table specified in the ON condition and only those rows from the other table where the joined condition is satisfied.\nLEFT OUTER JOIN is also called LEFT JOIN.\nSyntax:\nSELECT columns      \nFROM table1      \nLEFT [OUTER] JOIN table2      \nON table1.column = table2.column;      \nExample\nWe have two tables' sites and pages:\nSites table:\nsite_id site_name\n100 javatpoint.com\n200 Facebook.com\n300 Yahoo.com\n400 Google.com\nPages table:\npage_id site_id page_title\n1 100 MariaDB\n2 100 MySQL\n3 200 Java interview questions\n4 300 Software testing\n5 500 Flight booking\nNow execute the following commands:\nSELECT sites.site_id, sites.site_name, pages.page_id, pages.page_title FROM sites LEFT JOIN pages ON sites.site_id= pages.site_id  \nOutput:\nsite_id site_name page_id page_title\n100 javatpoint 1 MariaDB\n100 javatpoint 2 MySQL\n200 Facebook.com 3 Java interview questions\n300 Yahoo.com 4 Software testing\n400 Google.com null null\nSite_name Google.com is also included because of LEFT JOIN.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "29) What is RIGHT OUTER JOIN in MariaDB?",
        "answer": "MariaDB RIGHT OUTER JOIN is used to return all rows from the right-hand table specified in the ON condition and only those rows from the other table where the joined fields are satisfied with the conditions.\nMariaDB RIGHT OUTER JOIN is also called RIGHT JOIN.\nSyntax:\nSELECT columns      \nFROM table1      \nRIGHT [OUTER] JOIN table2      \nON table1.column = table2.column;   \nExample\nWe have two tables' sites and pages:\nSites table:\nsite_id site_name\n100 javatpoint.com\n200 Facebook.com\n300 Yahoo.com\n400 Google.com\nPages table:\npage_id site_id page_title\n1 100 MariaDB\n2 100 MySQL\n3 200 Java interview questions\n4 300 Software testing\n5 500 Flight booking\nNow execute the following commands:\nSELECT sites.site_id, sites.site_name, pages.page_id, pages.page_title FROM sites RIGHT JOIN pages ON sites.site_id= pages.site_id  \nOutput:\nsite_id site_name page_id page_title\n100 javatpoint 1 MariaDB\n100 javatpoint 2 MySQL\n200 Facebook.com 3 Java interview questions\n300 Yahoo.com 4 Software testing\nnull null 5 Flight booking\nHere page_id and page_title contains value because of RIGHT JOIN.\nFor more information: Click Here",
        "reference": "javatpoint.com",
        "role": "mariadb"
    },
    {
        "question": "30) What is function in MariaDB? How can you create and drop a function in MariaDB?",
        "answer": "MariaDB function is a stored program that is used to pass parameters into them and return a value\nWe can easily create and drop functions in MariaDB.\n# Create Function (MariaDB):\nYou can create your own function in MariaDB:\nSyntax:\nCREATE     \n[ DEFINER = { CURRENT_USER | user_name } ]     \nFUNCTION function_name [ (parameter datatype [, parameter datatype]) ]    \nRETURNS return_datatype [ LANGUAGE SQL    \n| DETERMINISTIC    \n| NOT DETERMINISTIC    \n| { CONTAINS SQL     \n| NO SQL    \n| READS SQL DATA    \n| MODIFIES SQL DATA }    \n| SQL SECURITY { DEFINER | INVOKER }    \n| COMMENT 'comment_value'    \nBEGIN    \n   declaration_section    \n   executable_section    \nEND;     \nExample\nCreate a function CalcValue in MariaDB database.\nDELIMITER //    \nCREATE FUNCTION CalcValue ( starting_value INT )    \nRETURNS INT DETERMINISTIC    \nBEGIN    \nDECLARE total_value INT;    \n   SET total_value = 0;    \n   label1: WHILE total_value <= 3000 DO    \n     SET total_value = total_value + starting_value;    \n   END WHILE label1;    \n   RETURN total_value;    \nEND; //    \nDELIMITER ;     \nDEFINER clause: it is an optional clause. If not specified, the definer is the user that created the function. If you wish to specify a different definer, you must include the DEFINER clause where user_name is the definer for the function.\nfunction_name: It specifies the name to assign to this function in MariaDB.\nreturn_datatype: It specifies the data type of the function's return value.\nLANGUAGE SQL: It is in the syntax for portability but will have no impact on the function.\nDETERMINISTIC: It means that the function will always return one result given a set of input parameters.\nNOT DETERMINISTIC: It means that the function may return a different result given a set of input parameters. The result may be affected by table data, random numbers or server variables.\nCONTAINS SQL: It is the default. It is an informative clause that tells MariaDB that the function contains SQL, but the database does not verify that this is true.\nNo SQL: An informative clause that is not used and will have no impact on the function.\nREADS SQL DATA: An informative clause that tells MariaDB that the function will read data using SELECT statements but does not modify any data.\nMODIFIES SQL DATA: An informative clause that tells MariaDB that the function will modify SQL data using INSERT, UPDATE, DELETE, or other DDL statements.\ndeclaration_section: The place in the function where you declare local variables.\nexecutable_section: The place in the function where you enter the code for the function.\nOutput:\n\nMariaDB DROP Function\nYou can drop your created function very easily from your database.\nSyntax:\nDROP FUNCTION [ IF EXISTS ] function_name;     \nParameter Explanation\nfunction_name: It specifies the name of the function that you want to drop.\nExample\nWe have created a function name \"CalcValue\". Now drop the function.\nDROP FUNCTION CalcValue;  \nNow you can see that function is deleted and not present in the list anymore.",
        "reference": "javatpoint.com",
        "role": "mariadb"
    }
]