[
    {
        "question": "1. How do you define Maven?",
        "answer": "Typically used in Java-based projects, Maven is a powerful build automation and project management tool. It offers a methodical and effective way to handle dependencies, compile code, execute tests, package applications, and distribute them. It follows the principle of convention over configuration, which implies that it imposes a typical project structure and specified build lifecycle steps, minimizing the need for manual configuration. Through the use of a central repository system, Maven also facilitates reusability by making it easier to manage project dependencies. Overall, Maven makes building software easier and aids in maintaining a stable, controllable project structure.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "2. What are the various components that Maven handles?",
        "answer": "Project object model (POM), dependency management, build lifecycle, plugins, and repository management are all handled by Maven.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "3. What components go into making a pom.xml file?",
        "answer": "The configuration file for the project in Maven is called a pom.xml file, and it comprises numerous components. These are the primary components that are commonly present in a pom.xml file:\nGroup ID: Specifies the group’s or organization’s distinctive identity.\nArtifact ID: Specifies the special code for the project’s artifact, which is typically the project’s name.\nVersion: Identifies the project’s version number.\nDependencies: This section lists the external frameworks and libraries that the project depends on.\nCreate plugins: This step includes creating plugins that enhance Maven’s capability for activities like code compilation, test execution, packaging, and more.\nThe build configuration, which includes compiler versions, source directories, output directories, and other build-related configurations, contains settings and parameters particular to the build process.\nReporting plugins: Describes the plugins that are used to produce reports on numerous aspects of the project, including code quality, code coverage, and documentation.\nRepositories: Specifies the local and remote repository locations where Maven should look for project dependencies.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "4. What purposes do Maven plugins serve? What categories do Maven plugins fall under?",
        "answer": "The following are the functions of Maven plugins:\nIncrease Maven’s capabilities\nAutomate development and build processes\nImprove analysis and code quality\nProduce metrics-based project reports\nMake distribution and deployment easier\nProduce resources and code\nInclude source control management integration\nEncourage deployment orchestration and containerization\nThe following categories apply to Maven plugins:\nBuild tasks.\nAnalysis and code quality\nReporting\nDistribution and deployment\nCreation of code\nSource code management\nOrchestration of deployment and containerization",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "5. How can Maven be installed on Ubuntu?",
        "answer": "These steps can be used to install Maven on Ubuntu:\nUpdation of package lists: Run the following command in the terminal after opening it: sudo apt update\nInstall Maven. To do this, type “sudo apt install maven” into your terminal.\nConfirm the installation: Once the installation is finished, you can confirm it by looking at the Maven version: ”’ mvn –version ”’\nIn the event that the installation was successful, this command will show the Maven version and additional information.\nYour Ubuntu system now has Maven installed and is ready for use. For your Java projects, you can start utilizing its build and dependency management features.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "6. Could you explain the meanings of Clean, Default, and Site in the context of Maven?",
        "answer": "In Maven, the “Clean” phase eliminates build artifacts, “Default” is the primary build phase, and “Site” produces project reports and documentation.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "7. What is the best way to run test classes in Maven?",
        "answer": "To execute test classes in Maven, simply use the command “mvn test“. This triggers the execution of test classes within the project. Maven handles the compilation of source code, packaging of dependencies, and running the tests based on the configured testing framework. Test results are presented in the console, indicating the success or failure of the tests. Additionally, Maven generates a comprehensive test report that includes detailed information about the results and highlights any failures or errors encountered during the testing phase.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "8. What is a Maven Repository?",
        "answer": "A Maven Repository serves as a storage location comprised of packaged JAR files and associated metadata. It encompasses three types: local repository (located on the developer’s machine), remote repository (hosted on a server), and central repository (the default public repository). These repositories facilitate the efficient retrieval of dependencies for Maven projects.\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "9. Explain the workings of the Maven architecture.",
        "answer": "A Maven architecture revolves around the Project Object Model (POM), an XML file that defines project configuration. Here are some working references: \nMaven follows a plugin-based approach, where plugins extend its functionality for various tasks.\nThe build process is organized into build lifecycle phases, representing sequential steps.\nMaven handles dependency management, automatically downloading and including dependencies.\nThe repository system consists of local (developer’s machine) and remote repositories.\nMaven follows convention over configuration, enforcing standard project structure and naming conventions.\nBy executing Maven commands, the build process is automated, including compilation, testing, packaging, and more.\nAlso, read more about Maven in Selenium.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "10. Tell us about the naming conventions typically followed for Maven projects.",
        "answer": "In Maven, a project’s full name consists of the following components: GroupId, artifactId, and version. This naming format is exemplified by an example such as “org.apache.maven: maven: 2.0.1”.\n\nIntermediate Maven Interview Questions",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "11. What are the stages of the Clean Lifecycle in Maven?",
        "answer": "The Clean Lifecycle in Maven encompasses three stages:\nPre-clean: This stage performs any necessary preparations or actions before the actual clean process begins.\nClean: The clean stage is responsible for removing any generated files or artifacts from previous builds, ensuring a clean build environment.\nPost-clean: After the clean phase, the post-clean stage allows for executing additional tasks or actions if required. These stages collectively make up the Clean Lifecycle in Maven.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "12. What distinguishes Convention from Configuration in Maven?",
        "answer": "In Maven, convention refers to predefined rules and defaults, while configuration involves explicitly specifying project settings.\nConvention methods streamline project development with predefined standards.\nConfiguration allows customization of conventions through explicit configurations.\nConvention promote consistency and reduce manual configuration.\nConfiguration provides flexibility for project-specific requirements.\nConvention focuses on common structures, names, and defaults.\nConfiguration fine-tunes build settings, dependencies, and plugins.\nConvention simplifies project setup and improves maintainability.\nConfiguration offers control for tailored customization.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "13. What does the term 'Goal' mean in Maven?",
        "answer": "In Maven terminology, a “goal” refers to a specific task that contributes to the build and organization of a project. Goals are accomplished by executing the phases, which define the sequence in which these desired tasks are performed throughout the build lifecycle.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "14. What does the term 'System Dependency' mean in Maven?",
        "answer": "The term “System Dependency” in Maven refers to a type of dependency with the scope of “system.” These dependencies are used to inform Maven about dependencies provided by the JDK or the VM (Virtual Machine).\nSystem dependencies are commonly utilized to resolve dependencies on artifacts that are supplied by the JDK or VM itself.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "15. What distinguishes 'maven package' from 'maven install'?",
        "answer": "The “maven package” command transforms compiled code into a distributable format, typically a JAR file.\nOn the other hand, “maven install” not only packages the code but also adds it to the local repository. This enables the packaged code to be utilized as a dependency in other projects.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "16. Where can the class files be located after compiling a Maven project?",
        "answer": "The class files can be found at the directory path “${basedir}/target/classes/”.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "17. What is the meaning of 'Snapshot' in Maven?",
        "answer": "In Maven terminology, a “Snapshot” refers to the dynamic version of a project stored in the remote repository. It represents the most recent development iteration or work in progress. Maven continuously checks for updates to the Snapshot version in the remote repository during the build process.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "18. How can you exclude a dependency in Maven?",
        "answer": "One can exclude a dependency in Maven by utilizing the exclusion element. Excluding dependencies in Maven is valuable for avoiding conflicts, compatibility problems, and unnecessary dependencies. It grants you precise control over your project’s dependencies, ensuring that only the necessary ones are included, thus promoting a streamlined and error-free development process.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "19. What is the Maven Archetype?",
        "answer": "Maven Archetype refers to a Maven plugin that can generate a project structure based on a template.\nThese archetypes are just project templates generated by Maven when a new project is established.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "20. What does the term 'Maven Clean' mean?",
        "answer": "Maven Clean is, as the name implies, a plugin that attempts to clean the files and directories generated by Maven during the build process.\nThe plugin deletes the target folder, which includes all of the class files, documentation, and JAR files.\n\nAdvanced Maven Interview Questions",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "21. How do you mention profiles in Maven?",
        "answer": "The profiles are mentioned in Maven via a subset of components in the pom file.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "22. What is the command for creating a new project based on a hard drive?",
        "answer": "The mvn archetype: create is used to start a new project. The archetype is built after reading the source and resource files, as well as the values of its parameters and other properties.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "23. What exactly does 'Super POM' mean?",
        "answer": "Super POM refers to Maven’s default POM. Maven POMs can be derived from a parent or created by default. Effective POM is employed to carry out specific objectives. Super POM allows developers to configure the pom.xml file with the fewest settings possible.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "24. What exactly is the settings.xml file in Maven?",
        "answer": "The Maven settings.xml file provides elements that define the values required to customize Maven execution.\nIt is made up of the following configurations:\nConfiguration of a proxy server\nConfiguration of the local repository\nConfiguration of a remote repository\nConfiguration of the central repository",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "25. What does 'Transitive Dependency' mean in Maven?",
        "answer": "By incorporating transitive dependencies automatically, Maven eliminates the need to discover and define libraries that dependencies require.\nIf X is dependent on Y and Y is dependent on Z, then X is dependent on both Y and Z.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "26. What are Maven's key features?",
        "answer": "Maven’s primary characteristics include:\nSimple to use: Maven provides simple project configurations based on best practices.\nQuick: In Maven, you can get a new project or module started in less than a second.\nMaven usage and commands are fairly simple to learn across all projects. As a result, the ramp-up period for new developers joining a project is quite short.\nMaven offers enhanced dependency management, including automated updates and transitive dependencies.\nNumerous Projects: Using Maven, you can easily work on numerous projects at the same time.\nMaven provides a big and increasing repository of libraries and metadata that may be used right now.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "27. What are the benefits of using Maven?",
        "answer": "It speeds up project setup by avoiding cumbersome build files such as build.xml. Maven’s heart is the pom.xml file. POM.xml is a set of Java Project dependencies that can be specified to Maven. Following that, Maven will download all of them from the internet and put them in one of three repositories: local, central, or remote.\nIt is beneficial to bundle all of the jars in your package, i.e., in your War or Ear file, because they will all be saved in the repository. So, the next time you install this application, that repository will be used to look up any requirements. As a result, your deployment file will be.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "28. What exactly do you mean when you say Maven prefers convention over configuration?",
        "answer": "In the case of settings, developers must manually define the build processes and specify each setting in detail. However, Maven follows a pattern that eliminates the need for developers to set up build processes manually. Furthermore, users are not required to provide the settings in detail for the sake of tradition. When a developer creates a Maven project, Maven will automatically generate a structure. Developers only need to place the files correctly. There is no need to provide any configuration information in the pom.xml file.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "29. What would the mvn clean dependency:copy-dependencies package command accomplish?",
        "answer": "This command will clean the project, clone its dependencies, and package it (completing all steps up to package).",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "30. What are the different sorts of Maven repositories?",
        "answer": "Maven repositories are classified into three types:\nLocal: A Maven local repository is a folder location on your machine. It is created the first time you perform any Maven command. Maven’s local repository is a directory where you can find all of your project’s dependencies (library jars, plugin jars, and so on).\nCentral: This is a repository made available by the Maven community. It has a large collection of widely used libraries. When Maven cannot identify a dependency in the local repository, it searches the central repository at http://repo1.maven.org/maven2/.\nRemote: If Maven is unable to locate a specified dependency in the central repository, the build process is terminated, and an output error is generated.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "31. What is the 'Maven Assembly Plugin,' and how does it work in a Maven project?",
        "answer": "The Maven Assembly Plugin enables you to create distribution packages that include files, configurations, and resources in addition to the conventional JAR or WAR files. It can be used to package custom configurations, scripts, and other artifacts for distribution or deployment.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "32. Explain what Maven Profiles are. How do you enable a specific profile throughout the construction process?",
        "answer": "Maven Profiles enable you to define collections of configurations for certain environments or scenarios. They can be used to tailor the build process to specific circumstances such as development, testing, or production. During the build process, you can activate a specific profile by using the “-P” command-line option followed by the profile name, or by defining the profile to activate based on specified criteria in the pom.xml file.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "33. What is the aim of the 'Maven Surefire Plugin,' and how does it assist with test execution?",
        "answer": "The Maven Surefire Plugin is used in Maven projects to run unit tests. It detects and runs test classes automatically depending on the name convention (“Test” or “*Test”). It creates output on test successes and failures and generates complete test reports.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "34. How do you omit unit tests during the Maven build process?",
        "answer": "The “-DskipTests” or “-Dmaven.test.skip=true” command-line options in Maven allow you to skip unit tests throughout the build process. Any of these parameters will prevent the running of tests.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "35. Describe the Maven Parent POM idea. How can it be used to share configurations between projects?",
        "answer": "A Maven Parent POM is a project that serves as a container or parent for additional projects (child projects). It contains common setups and parameters that its descendant projects can inherit. You may declare shared dependencies, plugin configurations, and build settings using a Parent POM, assuring consistency across numerous projects.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "36. What is the 'Maven Dependency Management Plugin' for? How does it help with project dependency analysis?",
        "answer": "The Maven Dependency Management Plugin assists you in analyzing project dependencies and transitive dependencies. It can provide a tree-like structure of all dependencies, including versions and conflicts. This plugin facilitates the identification and resolution of dependency issues.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "37. In a Maven project, how can you override properties defined in the Parent POM?",
        "answer": "You can override properties defined in the Parent POM by redefining them in the pom.xml file of the child project. The child project’s properties will take precedence over the parent project’s settings, and the overridden values will be used by the child project.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "38. What are the Maven Phases and Goals? Explain the distinction between them.",
        "answer": "Maven Goals are specified actions that can be performed throughout the build process, such as compilation, testing, packaging, installation, and deployment. Each goal is linked to a unique Maven plugin. Maven Phases, on the other hand, represent a predefined series of actions or tasks that are run during the build lifecycle. Clean, validate, compile, test, package and other steps of the build lifecycle are related to phases. To describe the construction process, goals might be linked to certain phases.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "39. How do you make your own Maven Archetypes for project generation?",
        "answer": "To generate custom Maven Archetypes, use the Maven Archetype Plugin’s “archetype:create-from-project” aim. This goal generates an archetype based on a previously created Maven project. After you’ve built the archetype, you can add it to your local or remote Maven repository and use it to generate new projects.",
        "reference": "intellipaat.com",
        "role": "maven"
    },
    {
        "question": "1. What is Maven's inheritance order?",
        "answer": "In Maven, the order of inheritance is: Settings\nCLI parameters\nParent POM\nProject POM Settings CLI parameters Parent POM Project POM",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "2. Discuss the core concepts of Maven.",
        "answer": "The core concepts of Maven are: POM Files: Project Object Model (POM) files are XML files that include information about the project and configuration information used by Maven to construct the project, such as dependencies, source directory, plugin, goals, and so on. When you want to run a maven command, you provide it with a POM file to run. To complete its configuration and functions, Maven reads the pom.xml file.\nDependencies and Repositories: Repositories are folders containing bundled JAR files, and dependencies are external Java libraries necessary for Project. The local repository is simply a folder on your computer's hard drive. Maven retrieves dependencies from a central Maven repository and places them in your local repository if they aren't found in the local Maven repository.\nBuild Life Cycles, Phases, and Goals: A build life cycle is made up of a series of build phases, each of which contains a set of goals. A build lifecycle, phase, or goal is referred to as a Maven command. When a lifecycle is asked to be run using the maven command, all of the build steps in that life cycle are likewise run. When a build phase is requested to be executed, it is followed by all build phases in the given sequence.\nBuild Profiles: Build Profiles are a set of configuration parameters that allow you to build your project using a variety of setups. For example, you might need to develop and test your project on your local computer. You can add different build profiles to your POM files using its profile elements to enable different builds, which can be triggered in a variety of ways.\nBuild Plugins: Build Plugins are used to accomplish a certain task. A plugin can be added to the POM file. Maven comes with various pre-installed plugins, but you can also write your own in Java. POM Files: Project Object Model (POM) files are XML files that include information about the project and configuration information used by Maven to construct the project, such as dependencies, source directory, plugin, goals, and so on. When you want to run a maven command, you provide it with a POM file to run. To complete its configuration and functions, Maven reads the pom.xml file. POM Files: Dependencies and Repositories: Repositories are folders containing bundled JAR files, and dependencies are external Java libraries necessary for Project. The local repository is simply a folder on your computer's hard drive. Maven retrieves dependencies from a central Maven repository and places them in your local repository if they aren't found in the local Maven repository. Dependencies and Repositories: Build Life Cycles, Phases, and Goals: A build life cycle is made up of a series of build phases, each of which contains a set of goals. A build lifecycle, phase, or goal is referred to as a Maven command. When a lifecycle is asked to be run using the maven command, all of the build steps in that life cycle are likewise run. When a build phase is requested to be executed, it is followed by all build phases in the given sequence. Build Life Cycles, Phases, and Goals: Build Profiles: Build Profiles are a set of configuration parameters that allow you to build your project using a variety of setups. For example, you might need to develop and test your project on your local computer. You can add different build profiles to your POM files using its profile elements to enable different builds, which can be triggered in a variety of ways. Build Profiles: Build Plugins: Build Plugins are used to accomplish a certain task. A plugin can be added to the POM file. Maven comes with various pre-installed plugins, but you can also write your own in Java. Build Plugins:",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "3. How does Maven work?",
        "answer": "  Maven works in three steps: Reading the pom.xml file is the first step.\nThe dependencies mentioned in pom.xml are then downloaded from the central repository into the local repository.\nFinally, it builds and generates a report based on the requirements, as well as handles life cycles, phases, goals, plugins, and other tasks. Reading the pom.xml file is the first step. The dependencies mentioned in pom.xml are then downloaded from the central repository into the local repository. Finally, it builds and generates a report based on the requirements, as well as handles life cycles, phases, goals, plugins, and other tasks.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "4. List a few differences between Maven and ANT.",
        "answer": "Ant Maven\nBecause Ant lacks formal conventions, we must include project structure information in the build.xml file. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file.\nAnt is procedural, so you'll need to write code to tell it what to do and when to do it. You must maintain order. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file.\nAnt has no life cycle. Maven has a life cycle.\nAnt is a toolbox. Maven is a framework.\nAnt is primarily a build tool. Maven is primarily a project management tool.\nThe ant scripts can not be reused. The maven plugins can be reused. Ant Maven\nBecause Ant lacks formal conventions, we must include project structure information in the build.xml file. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file.\nAnt is procedural, so you'll need to write code to tell it what to do and when to do it. You must maintain order. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file.\nAnt has no life cycle. Maven has a life cycle.\nAnt is a toolbox. Maven is a framework.\nAnt is primarily a build tool. Maven is primarily a project management tool.\nThe ant scripts can not be reused. The maven plugins can be reused. Ant Maven Ant Maven Ant Maven Because Ant lacks formal conventions, we must include project structure information in the build.xml file. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file.\nAnt is procedural, so you'll need to write code to tell it what to do and when to do it. You must maintain order. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file.\nAnt has no life cycle. Maven has a life cycle.\nAnt is a toolbox. Maven is a framework.\nAnt is primarily a build tool. Maven is primarily a project management tool.\nThe ant scripts can not be reused. The maven plugins can be reused. Because Ant lacks formal conventions, we must include project structure information in the build.xml file. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file. Because Ant lacks formal conventions, we must include project structure information in the build.xml file. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file. Ant is procedural, so you'll need to write code to tell it what to do and when to do it. You must maintain order. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file. Ant is procedural, so you'll need to write code to tell it what to do and when to do it. You must maintain order. Maven has a convention for storing source code, compiled code, and so forth. As a result, we don't need to provide project structure information in the pom.xml file. Ant has no life cycle. Maven has a life cycle. Ant has no life cycle. Maven has a life cycle. Ant is a toolbox. Maven is a framework. Ant is a toolbox. Maven is a framework. Ant is primarily a build tool. Maven is primarily a project management tool. Ant is primarily a build tool. Maven is primarily a project management tool. The ant scripts can not be reused. The maven plugins can be reused. The ant scripts can not be reused. The maven plugins can be reused.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "5. What elements are used for creating a pom.xml file?",
        "answer": "The following elements are necessary for creating a pom.xml file: project- The root element of the pom.xml file is the project.\nmodelVersion- It identifies which version of the POM model you're working with. For Maven 2 and Maven 3, use version 4.0.0.\ngroupId- groupId is the project group's identifier. It is unique, and you will most likely use a group ID that is similar to the project's root Java package name.\nartifactId- It is used for naming the project you're working on.\nversion- The version number of the project is contained in the version element. If your project has been released in multiple versions, it is helpful to list the versions. project- The root element of the pom.xml file is the project. project modelVersion- It identifies which version of the POM model you're working with. For Maven 2 and Maven 3, use version 4.0.0. modelVersion groupId- groupId is the project group's identifier. It is unique, and you will most likely use a group ID that is similar to the project's root Java package name. groupId artifactId- It is used for naming the project you're working on. artifactId version- The version number of the project is contained in the version element. If your project has been released in multiple versions, it is helpful to list the versions. version Other Pom.xml File Elements dependencies- This element is used to establish a project's dependency list.\ndependency- dependency is used inside the dependencies tag to define a dependency. The groupId, artifactId, and version of each dependency are listed.\nname- This element is used to give our Maven project a name.\nscope- This element is used to specify the scope of this maven project, which can include compile, runtime, test, among other things.\npackaging- The packaging element is used to package our project into a JAR, WAR, and other output formats. dependencies- This element is used to establish a project's dependency list. dependencies dependency- dependency is used inside the dependencies tag to define a dependency. The groupId, artifactId, and version of each dependency are listed. dependency name- This element is used to give our Maven project a name. name scope- This element is used to specify the scope of this maven project, which can include compile, runtime, test, among other things. scope packaging- The packaging element is used to package our project into a JAR, WAR, and other output formats. packaging",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "6. What are the different types of Maven repositories? Discuss.",
        "answer": "The three types of repositories of Maven are: Local repository\nCentral repository\nRemote repository Local repository Central repository Remote repository Maven scans these repositories for dependencies. Maven looks in the Local repository first, then the Central repository, and finally the Remote repository if the Remote repository is defined in the POM. Local Repository: Local repository is a directory on the developer's device. The local repository contains all of Maven's dependencies. Even though several projects rely on dependencies, Maven only needs to download them once.\nCentral Repository: The Maven community has built the central Maven repository. Maven searches this central repository for any dependencies that aren't available in your local repository. The dependencies are subsequently downloaded into your local repository by Maven.\nRemote Repository: Maven may download dependencies from a remote repository hosted on a web server. It is frequently used to host internal organization projects. The dependencies are subsequently downloaded into your local repository by Maven. Local Repository: Local repository is a directory on the developer's device. The local repository contains all of Maven's dependencies. Even though several projects rely on dependencies, Maven only needs to download them once. Local Repository Central Repository: The Maven community has built the central Maven repository. Maven searches this central repository for any dependencies that aren't available in your local repository. The dependencies are subsequently downloaded into your local repository by Maven. Central Repository Remote Repository: Maven may download dependencies from a remote repository hosted on a web server. It is frequently used to host internal organization projects. The dependencies are subsequently downloaded into your local repository by Maven. Remote Repository",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "7. What command should one use to install JAR files in the Local Repository?",
        "answer": "JAR files are installed in the local repository using mvn install.\nThe following plugin is used to manually install the JAR into the local Maven repository: install-file-Dfile = <file path> JAR files are installed in the local repository using mvn install. The following plugin is used to manually install the JAR into the local Maven repository: install-file-Dfile = <file path>",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "8. In Maven, what do you mean by Clean, Default, and Site?",
        "answer": "The three built-in build life cycles are: Clean: The clean lifecycle is in charge of project cleaning.\nDefault: The project deployment is handled by the default lifecycle.\nSite: The creation of the project's site documentation is referred to as the site lifecycle. Clean: The clean lifecycle is in charge of project cleaning. Clean Default: The project deployment is handled by the default lifecycle. Default Site: The creation of the project's site documentation is referred to as the site lifecycle. Site",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "9. What are the different phases of the default life cycle?",
        "answer": "The different phases of the default lifecycle are: Validate: Make sure the project is correct and that you have all of the necessary information.\nTest: Test the compiled source code using an appropriate unit testing framework. These tests should not demand that the code be packed or deployed; instead, take the compiled code and package it in a manner that can be distributed, such as a JAR.\nCompile: Compile the project's source code.\nVerify: Perform any necessary checks on integration test findings to ensure that quality criteria are met.\nInstall: Adds the package to the local repository, allowing it to be used as a dependency in other projects.\nDeploy: Copies the entire package to the remote repository for sharing with other developers and organizations, and is done in the build environment. Validate: Make sure the project is correct and that you have all of the necessary information. Validate Test: Test the compiled source code using an appropriate unit testing framework. These tests should not demand that the code be packed or deployed; instead, take the compiled code and package it in a manner that can be distributed, such as a JAR. Test Compile: Compile the project's source code. Compile: Verify: Perform any necessary checks on integration test findings to ensure that quality criteria are met. Verify Install: Adds the package to the local repository, allowing it to be used as a dependency in other projects. Install: Deploy: Copies the entire package to the remote repository for sharing with other developers and organizations, and is done in the build environment. Deploy:",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "10. What are Maven plugins used for? What are the types of Maven plugins?",
        "answer": "Maven Plugins are used for: Creating JAR files.\nCreating WAR files.\nCompiling the source code files.\nUnit testing of the code.\nCreating the project documentation.\nCreating project reports. Creating JAR files. Creating WAR files. Compiling the source code files. Unit testing of the code. Creating the project documentation. Creating project reports. Maven plugins are divided into two categories: Build plugins:  These plugins are used throughout the build process and are configured in the pom.xml file's <build/> element.\nReporting plugins: These plugins are configured in the pom.xml's <reporting/> element and run during stage generation. Build plugins:  These plugins are used throughout the build process and are configured in the pom.xml file's <build/> element. Build plugins: Reporting plugins: These plugins are configured in the pom.xml's <reporting/> element and run during stage generation. Reporting plugins:",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "11. “Maven uses convention over configuration” - Why is it so?",
        "answer": "Because developers simply need to establish a Maven project while employing convention,  Maven uses convention over configuration. The rest of the structure is generated automatically. In the case of configuration, build processes are to be created manually.\nFor setting up a project, creating artifacts, releasing code, and running unit tests, Maven has a number of conventions. Because developers simply need to establish a Maven project while employing convention,  Maven uses convention over configuration. The rest of the structure is generated automatically. In the case of configuration, build processes are to be created manually. For setting up a project, creating artifacts, releasing code, and running unit tests, Maven has a number of conventions.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "12. When should one use Maven?",
        "answer": "The Maven Build Tool can be used in the following conditions: When the project has a large number of dependencies. Then, using Maven, you can easily manage those dependencies.\nWhen the version of a dependency changes frequently. To update dependencies, simply update the version ID in the pom file.\nMaven makes it simple to handle continuous builds, integration, and testing.\nWhen you need a quick way to generate documentation from source code, this is the tool you use. It helps in compiling source code, and then packaging it into JAR or ZIP files. When the project has a large number of dependencies. Then, using Maven, you can easily manage those dependencies. When the version of a dependency changes frequently. To update dependencies, simply update the version ID in the pom file. Maven makes it simple to handle continuous builds, integration, and testing. When you need a quick way to generate documentation from source code, this is the tool you use. It helps in compiling source code, and then packaging it into JAR or ZIP files.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "13. In Maven, what is a snapshot?",
        "answer": "A snapshot is a specific version of a project that shows the most recent development copy of the project being worked on. Maven always checks out a SNAPSHOT of the project in the remote repository for each build. As a result, anytime Maven discovers a newer SNAPSHOT of the project, it downloads and replaces the project's older .jar file in the local repository.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "14. What are the locations where Maven dependencies are stored?",
        "answer": "Maven saves all of the JARs, dependency files, and other things it downloads in the Maven local repository. All of the artifacts are kept locally in the Maven local repository, which is a folder on the local machine.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "15. What are the different types of Maven build profiles? In what ways can build profiles of maven be activated?",
        "answer": "The different types of Maven build profiles are: Per-User: This is defined in the Maven settings.xml file.\nPer Project: This is defined in the project’s pom.xml.\nGlobal: This is defined in the global Maven settings.xml file. Per-User: This is defined in the Maven settings.xml file. Per-User Per Project: This is defined in the project’s pom.xml. Per Project Global: This is defined in the global Maven settings.xml file. Global Maven build profiles can be activated or triggered in the following ways: Using explicit commands\nMaven settings\nOn the basis of environment variables\nConfiguration of the operating system\nPresent/missing files Using explicit commands Maven settings On the basis of environment variables Configuration of the operating system Present/missing files",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "16. How would you refer to a property declared in your pom.xml file?",
        "answer": "In order to refer to a property declared in your pom.xml, the property name makes use of the names of the XML components that designate the value, with \"pom\" being accepted as a synonym for the project (root) element. So ${pom.name} is the project's name, ${pom.version} is the project's version, ${pom.build.finalName} is the final name of the file generated when the built project is packaged, and so on.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "17. How to generate javadocs in Maven?",
        "answer": "The maven-javadoc plugin is used by Maven to generate a project's javadocs. To create javadocs, this plugin internally uses the JDK\\bin\\javadoce.exe command. The javadocs for the project are generated when the project is deployed with the mvn install command.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "18. What exactly is MOJO?",
        "answer": "Every Maven plain Old Java Object (MOJO) is an executable goal, and a plugin pertains to the distribution of these MOJOs. MOJO allows Maven to add functionalities that it doesn't already have. In Maven, a MOJO is a single unit of the task.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "19. What do you understand about the term ‘Super POM’?",
        "answer": "Any POM file has the ability to point to its parent POM. There is a system-wide POM file that is automatically considered as the parent POM file if the parent POM element is absent. The super POM is the name given to this POM file. Finally, the super POM is used to extend all of the application POM files. The apex of the POM hierarchy is the super POM file. The super POM file contains all of the default configurations. All of the configurations defined in the super POM file will be inherited by even the simplest version of a POM file. You can alter any option you want by redefining the same section in your application POM file.  ",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "20. What is a 'Dependency Scope'? What are the different types of Dependency Scopes?",
        "answer": "The dependency scope pertains to all dependencies related to the present stage of the build. The following are the several sorts of dependence scopes: Compile- It's the default scope, and it shows which dependencies are available in the project's classpath.\nProvided- It denotes that the dependency is delivered at runtime by the JDK, web server, or container.\nRuntime- This indicates that the dependency is not required during compilation but is necessary during execution.\nTest- It claims that dependencies are only available during the test compilation and execution phases.\nSystem- It implies that you must specify the system path.\nImport- This means that the dependencies in that POM's section should be used instead of the identified or specified POM. Compile- It's the default scope, and it shows which dependencies are available in the project's classpath. Compile Provided- It denotes that the dependency is delivered at runtime by the JDK, web server, or container. Provided Runtime- This indicates that the dependency is not required during compilation but is necessary during execution. Runtime Test- It claims that dependencies are only available during the test compilation and execution phases. Test System- It implies that you must specify the system path. System Import- This means that the dependencies in that POM's section should be used instead of the identified or specified POM. Import",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "1. Discuss the profile element in settings.xml file.",
        "answer": "The settings.xml profile element is a trimmed version of the pom.xml profile element. It is made up of the elements: activation, repositories, pluginRepositories, and properties. These four components are the only ones included in the profile elements since they deal with the build system as a whole (which is what the settings.xml file is for), not individual project object model settings. If a profile is activated from settings, its values will override any POM or profiles.xml profiles with the same ID. Activation: The strength of a profile, like that of the POM's profiles, comes from its capacity to modify specific values only under certain conditions, which are stated via an activation element.\nRepositories: Repositories are remote collections of projects that Maven utilizes to populate the build system's local repository.\npluginRepositories: Maven plugins are a unique form of artifact in themselves. Plugin repositories may be segregated from other repositories as a result of this. Each of the pluginRepository components specifies a remote source where Maven can look for new plugins.\nProperties: Maven properties, like Ant properties, value placeholders. The notation ${X}, where X is the property, can be used to obtain their values anywhere within a POM. Activation: The strength of a profile, like that of the POM's profiles, comes from its capacity to modify specific values only under certain conditions, which are stated via an activation element. Activation Repositories: Repositories are remote collections of projects that Maven utilizes to populate the build system's local repository. Repositories pluginRepositories: Maven plugins are a unique form of artifact in themselves. Plugin repositories may be segregated from other repositories as a result of this. Each of the pluginRepository components specifies a remote source where Maven can look for new plugins. pluginRepositories Properties: Maven properties, like Ant properties, value placeholders. The notation ${X}, where X is the property, can be used to obtain their values anywhere within a POM. Properties",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "2. What are the phases of the clean lifecycle?",
        "answer": "The Maven clean lifecycle takes care of eliminating all temporary files from the output directory, including generated source files, compiled classes, and previous JAR files, among other things. pre-clean- performs tasks that are necessary prior to actual project cleaning.\nclean- delete all files created by the previous build.\npost-clean- performs tasks that are necessary to finalize project cleaning. pre-clean- performs tasks that are necessary prior to actual project cleaning. clean- delete all files created by the previous build. post-clean- performs tasks that are necessary to finalize project cleaning.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "3. What are the phases of the site lifecycle?",
        "answer": "Everything related to generating documentation for your project is handled by the Maven site lifecycle. pre-site- performs tasks that are necessary prior to actual project site generation.\nsite- develop the project’s site generation.\npost-site- performs tasks that are necessary to finalize project site generation, also prepares for site deployment.\nsite-deploy- deploy the developed site documentation to the web server of your choice. pre-site- performs tasks that are necessary prior to actual project site generation. pre-site site- develop the project’s site generation. site post-site- performs tasks that are necessary to finalize project site generation, also prepares for site deployment. post-site site-deploy- deploy the developed site documentation to the web server of your choice. site-deploy",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "4. Explain the three commonly used plugins: clean, surefire, antrun.",
        "answer": "Maven clean is a plugin that, as the name implies, attempts to clean the files and directories generated by Maven during the build process. The target folder, which contains all of the class files, documentation, and JAR files, is removed by the plugin. clean The Surefire Plugin is used to run an application's unit tests during the test phase of the build lifecycle. It can generate reports in one of two file formats: plain text files or XML files. Surefire The Antrun Plugin allows you to perform Ant tasks directly from within Maven. Your Ant scripts can even be embedded in the POM! Antrun",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "5. What is the settings.xml file in Maven?",
        "answer": "A Maven installation is configured using the settings.xml file. It's comparable to a pom.xml file, but it's either global or user-specific. The Maven settings.xml file provides elements that define the values required to configure Maven's execution in several ways. These values include the location of the local repository, authentication information, and alternate remote repository servers among others. Let's look at the elements in the settings.xml file that we can change. The settings.xml file's main element, settings, can include up to nine predefined child elements: <settings xmlns = \"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n   <localRepository/>\n   <interactiveMode/>\n   <offline/>\n   <pluginGroups/>\n   <servers/>\n   <mirrors/>\n   <proxies/>\n   <profiles/>\n   <activeProfiles/>\n</settings> <settings xmlns = \"http://maven.apache.org/SETTINGS/1.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n     xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">\n   <localRepository/>\n   <interactiveMode/>\n   <offline/>\n   <pluginGroups/>\n   <servers/>\n   <mirrors/>\n   <proxies/>\n   <profiles/>\n   <activeProfiles/>\n</settings> The following configurations are included: Proxy configuration\nLocal repository configuration\nRemote repository configuration\nCentral repository configuration Proxy configuration Local repository configuration Remote repository configuration Central repository configuration",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "6. What is dependency mediation and dependency management?",
        "answer": "When multiple versions of an artifact are encountered, Maven determines which version of the dependency should be used. The earliest declared dependence will be used if two dependency versions are at the same depth in the dependency tree. This is referred to as \"dependency mediation.\" Dependency management allows project authors to declare the versions of artifacts that are to be utilized when they are discovered in transitive dependencies or dependencies that have no version specified.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "7. What do you mean by the term “system dependency”?",
        "answer": "The term \"system dependency\" refers to the scope system's dependency. These dependencies are typically used to let Maven know the dependencies the JDK or VM provides. System dependencies are typically used to resolve dependencies on JDK-provided artifacts. Some common examples are the Java Authentication and Authorization Service (JAAS) or the JDBC standard extensions.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "8. What is the use of an Optional Dependency?",
        "answer": "When splitting a project into submodules isn't practicable (for some reason), optional dependencies are employed. The concept is that some of the dependencies are just required for particular project features and will not be required if those features are not used. Such a feature should ideally be divided into a sub-module that is dependent on the project's main functionality. Only non-optional dependencies would be included in this new subproject, as you'd need them all if you wanted to use the subproject's features. If a user wants to use functionality associated with an optional dependency, they must redeclare it in their own project. Optional dependencies save storage and memory. They prevent troublesome jars from being packed into a WAR, EAR, fat jar, or other formats if they violate a license agreement or cause classpath difficulties.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "9. What do you understand about ‘Transitive Dependency’ in Maven? What is dependency exclusion?",
        "answer": "By incorporating transitive dependencies automatically, Maven eliminates the need to discover and define libraries that the dependencies require. According to transitive dependency, if X is dependent on Y and Y is dependent on Z, then X is dependent on both Y and Z. The \"exclusion\" element can be used to exclude any transitive dependency. If X is reliant on Y and Y is reliant on Z, then X can declare Z as excluded.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "10. What are the elements that must be defined for each external dependency?",
        "answer": "The Maven software relies heavily on external dependencies. It is an intrinsic component of the system without which it is impossible to find dependencies in a system. We'll need the following information to specify the external dependency: It necessitates a group ID that is identical to the library name.\nIt necessitates an artifact ID that is identical to the library name.\nThe system's dependency scope must be mentioned.\nThe system path that corresponds to the project position must be mentioned. It necessitates a group ID that is identical to the library name. It necessitates an artifact ID that is identical to the library name. The system's dependency scope must be mentioned. The system path that corresponds to the project position must be mentioned.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "11. What are user-defined properties?",
        "answer": "You have the opportunity to define your own arbitrary properties in addition to the implicit properties. A POM or a Profile can be used to define properties. The properties defined in a POM or a Maven Profile can be referenced in Maven just like any other property. User-defined properties can be used to filter resources via the Maven Resource plugin, or they can be referenced in a POM. In a Maven POM, here's an example of defining some arbitrary properties. <project>\n   ...\n   <properties>\n       <arbitrary.property.x>Text</arbitrary.property.x>\n       <hibernate.version>3.2.1.ga</hibernate.version>\n   </properties>\n   ...\n   <dependencies>\n       <dependency>\n           <groupId>org.hibernate</groupId>\n           <artifactId>hibernate</artifactId>\n           <version>${hibernate.version}</version>\n       </dependency>\n   </dependencies>\n   ...\n</project> <project>\n   ...\n   <properties>\n       <arbitrary.property.x>Text</arbitrary.property.x>\n       <hibernate.version>3.2.1.ga</hibernate.version>\n   </properties>\n   ...\n   <dependencies>\n       <dependency>\n           <groupId>org.hibernate</groupId>\n           <artifactId>hibernate</artifactId>\n           <version>${hibernate.version}</version>\n       </dependency>\n   </dependencies>\n   ...\n</project> arbitrary.property.x and hibernate.version are two properties defined in the preceding example. In a dependency declaration, hibernate.version is mentioned. It's usual practice in Maven POMs and Profiles to use the period character as a separator in property names. The following example demonstrates how to define a property in a Maven POM profile. <project>\n   ...\n   <profiles>\n       <profile>\n           <id>random-profile</id>\n           <properties>\n               <arbitrary.property>Text</arbitrary.property>\n           </properties>\n       </profile>\n   </profiles>\n   ...\n</project> <project>\n   ...\n   <profiles>\n       <profile>\n           <id>random-profile</id>\n           <properties>\n               <arbitrary.property>Text</arbitrary.property>\n           </properties>\n       </profile>\n   </profiles>\n   ...\n</project>",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "12. What command is used to create a new project from a hard drive?",
        "answer": "The -mvn archetype: create is used to start a new project.\nAfter reading the source and resource files, as well as the values of its parameters and other properties, the archetype is constructed. -mvn archetype: create ",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "13. What is maven-release plugin and how does it work?",
        "answer": "The maven release plugin is used to automate the build and release process. When maven executes the maven-release-plugin, the following activities are performed: mvn release:clean - clears the workspace from the previous build and prepares it for a new one.\nmvn release:rollback - If the previous process failed, it rollbacks the workspace.\nmvn release:prepare - It performs the following tasks:\nChecks the local workspace for any uncommitted files.\nChecks for SNAPSHOT dependencies and verifies they aren't present.\nPrepares the final version for release.\nUpdates the pom to SCM (SVN/Git/Mercurial/CVS).\nRuns the test cases.\nExecutes the ultimate commit to the SCM.\nTags the script/code.\nIncreases the version number and includes the SNAPSHOT as part of the subsequent releases.\nmvn release:perform - fetches the code from the repository and executes the maven goal to develop and deploy the artifacts. mvn release:clean - clears the workspace from the previous build and prepares it for a new one. mvn release:clean mvn release:rollback - If the previous process failed, it rollbacks the workspace. mvn release:rollback mvn release:prepare - It performs the following tasks:\nChecks the local workspace for any uncommitted files.\nChecks for SNAPSHOT dependencies and verifies they aren't present.\nPrepares the final version for release.\nUpdates the pom to SCM (SVN/Git/Mercurial/CVS).\nRuns the test cases.\nExecutes the ultimate commit to the SCM.\nTags the script/code.\nIncreases the version number and includes the SNAPSHOT as part of the subsequent releases. mvn release:prepare Checks the local workspace for any uncommitted files.\nChecks for SNAPSHOT dependencies and verifies they aren't present.\nPrepares the final version for release.\nUpdates the pom to SCM (SVN/Git/Mercurial/CVS).\nRuns the test cases.\nExecutes the ultimate commit to the SCM.\nTags the script/code.\nIncreases the version number and includes the SNAPSHOT as part of the subsequent releases. Checks the local workspace for any uncommitted files. Checks for SNAPSHOT dependencies and verifies they aren't present. Prepares the final version for release. Updates the pom to SCM (SVN/Git/Mercurial/CVS). Runs the test cases. Executes the ultimate commit to the SCM. Tags the script/code. Increases the version number and includes the SNAPSHOT as part of the subsequent releases. mvn release:perform - fetches the code from the repository and executes the maven goal to develop and deploy the artifacts. mvn release:perform",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "14. Why are exclusions made on a dependency-by-dependency basis instead of at the POM level?",
        "answer": "This is primarily to ensure that the dependency graph is predictable, as well as to prevent inheritance effects from eliminating a dependent that should not be excluded. If you have to use the method of last resort and add an exclusion, make sure you know which of your dependencies is causing the undesirable transitive dependency. The banned dependencies rule can be specified to fail the build if a troublesome dependency is identified, regardless of path. You'll need to add specific exclusions to each path the enforcer detects if the build fails.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "15. Explain the default and the advanced configuration inheritance.",
        "answer": "The default behavior includes merging the content of the configuration element according to the element name. If a certain element exists in the child POM, that value becomes the effective value. The parent value becomes the effective value if the child POM does not have an element but the parent does. It's important to note that this is solely an XML operation, with no code or plugin settings involved. Only the elements are involved, not their values. Advanced configuration inheritance includes adding attributes to the children of the configuration element to regulate how child POMs inherit configuration from parent POMs. Combine.children and combine.self are the two attributes. These attributes can be used in a child POM to regulate how Maven integrates the parent's plugin configuration with the child's explicit configuration.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "16. Explain Project Aggregation.",
        "answer": "Project Aggregation specifies the modules from the parent POM instead of specifying the parent POM from the module. As a result, the parent project is aware of its modules, and if a Maven command is issued against the parent project, the Maven command is also applied to the parent's modules. For Project Aggregation, you must accomplish the following: Change the packaging of the parent POMs to \"pom.\"\nSpecify the modules' directories in the parent POM (children POMs). Change the packaging of the parent POMs to \"pom.\" Specify the modules' directories in the parent POM (children POMs).",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "17. What is the use of the Maven Wagon plugin?",
        "answer": "The Maven Wagon Plugin, as its name suggests, allows you to access numerous Maven Wagon functionalities. To transfer resources to and from Maven repositories, Maven Wagon offers a layer of abstraction over the core transport protocols. Maven Wagon's unified API includes implementations for seven transports. The following picture depicts the architecture of the Maven Wagon:   The plugin allows you to use the wagon to upload resources from your build to a remote site, get resources from a repository and list the contents of a repository. Finally, it may merge a Maven repository to another in a generic fashion by merging the upload and download capabilities.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "18. How is Doxia used by Maven?",
        "answer": "Doxia is a content creation framework that aims to give powerful approaches for creating static and dynamic content to its users: Doxia can be used to create static web pages in a web-based publication context, as well as in dynamic content creation systems such as blogs, wikis, and content management systems. Maven makes substantial use of Doxia, which powers the project's complete documentation system. It enables Maven to take any Doxia-supported document and output it in any format. For instance, 'mvn site' is the command used by Maven to produce javadocs for a specific project. Maven calls Doxia document generation and other report generating plugins when this command is run.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "19. How will you run JUnit tests in parallel with a Maven build?",
        "answer": "It is now possible to run tests in parallel without utilizing TestNG in junit 4.7. It's been feasible since 4.6, but 4.7 will include a number of improvements that will make it a realistic alternative. You may also use spring to execute parallel tests. You can also use this maven plugin: <build>\n <plugins>\n   <plugin>\n     <groupId>org.apache.maven.plugins</groupId>\n     <artifactId>maven-surefire-plugin</artifactId>\n     <version>2.6.0</version>\n     <configuration>\n       <parallel>classes</parallel>\n       <threadCount>4</threadCount>\n     </configuration>\n   </plugin>\n </plugins>\n</build> <build>\n <plugins>\n   <plugin>\n     <groupId>org.apache.maven.plugins</groupId>\n     <artifactId>maven-surefire-plugin</artifactId>\n     <version>2.6.0</version>\n     <configuration>\n       <parallel>classes</parallel>\n       <threadCount>4</threadCount>\n     </configuration>\n   </plugin>\n </plugins>\n</build>",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "20. How can you skip running the tests for a particular project?",
        "answer": "Set the skipTests attribute to true to skip the tests for a certain project. <groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-surefire-plugin</artifactId>\n<version>2.13.0</version>\n<configuration>\n         <skipTests>true</skipTests>\n</configuration> <groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-surefire-plugin</artifactId>\n<version>2.13.0</version>\n<configuration>\n         <skipTests>true</skipTests>\n</configuration> You may also skip the tests by using the following command from the command line: mvn install -DskipTests mvn install -DskipTests You can also use the maven.test.skip option to avoid compiling the tests if you have to. Surefire, Failsafe, and the Compiler Plugin all recognize maven.test.skip. mvn install -Dmaven.test.skip=true mvn install -Dmaven.test.skip=true You must go through a properties section in the pom if you want to skip tests by default but have the possibility to re-enable tests from the command line: <properties>\n   <skipTests>true</skipTests>\n</properties> <properties>\n   <skipTests>true</skipTests>\n</properties> And, <groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-surefire-plugin</artifactId>\n<version>2.13.0</version>\n<configuration>\n      <skipTests>${skipTests}</skipTests>\n</configuration> <groupId>org.apache.maven.plugins</groupId>\n<artifactId>maven-surefire-plugin</artifactId>\n<version>2.13.0</version>\n<configuration>\n      <skipTests>${skipTests}</skipTests>\n</configuration> This will allow you to run tests with the default tests disabled and execute them with the following command:  mvn install -DskipTests=false mvn install -DskipTests=false The \"skip\" parameter and other booleans on the plugin can be used in the same way.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "21. What is the difference between the maven package and the maven install?",
        "answer": "package: converts the compiled code into a distributable format, such as a JAR. package: install: adds the package to the local repository, allowing it to be used as a dependency in other projects. install:  Important Resource Important Resource Maven Vs Gradle Maven Vs Gradle",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "22. What do you mean by a Maven Archetype? How will you create a new project based on an Archetype?",
        "answer": "Maven Archetype is a Maven plugin that makes it possible to create a project structure based on a template. These archetypes are essentially project templates that Maven generates when you create a new project. Archetype is a Maven project templating toolkit, in a nutshell. After getting to the directory where the project is located, type the command: – mvn archetype: generate in the command prompt. This aids in creating a new project based on an archetype. mvn archetype: generate There are four steps for creating a project from an archetype: prepare a repository reference\nthe choice of an archetype,\nthat archetype's configuration,\nthe efficient creation of the project using the data gathered prepare a repository reference the choice of an archetype, that archetype's configuration, the efficient creation of the project using the data gathered In most cases, an archetype is procured from a remote repository. You're ready to go if that repository can be reached using your Maven configuration. You must add the repository to your settings.xml if the repository is not managed and you wish to refer to it directly.",
        "reference": "interviewbit.com",
        "role": "maven"
    },
    {
        "question": "1) What is Maven?",
        "answer": "Maven is a project management tool. It is based on POM (Project Object Model). More details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "2) What aspects are managed by Maven?",
        "answer": "ADVERTISEMENT\nBuilds\nDocumentation\nReporting\nSCMs\nReleases\nDistribution\nMore details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "3) What are the advantages of Maven?",
        "answer": "No need to add jar file in each project\nCreates right directory structure\nBuilds and deploys the project\nMore details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "4) What is the command to check the maven version?",
        "answer": "Type the following command on console to know the maven version.\nmvn -version  \nMore details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "5) What does the build tool?",
        "answer": "Generates source code (if the auto-generated code is used)\nGenerates documentation from source code\nCompiles source code\nPackages compiled code into a JAR or ZIP file\nInstalls the packaged code in the local repository, server repository, or central repository\nMore details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "6) What is the difference between Ant and Maven?",
        "answer": "Ant Maven\nIt is a toolbox. It is a framework.\nIt is mainly a build tool. It is mainly a project management tool.\nThere is no life cycle. There is alife cycle.\nAnt doesn't have formal conventions. Maven has a convention to place source code, compiled code etc.\nAnt is procedural. Maven is declarative.\nThe ant scripts are not reusable. The Maven plugins are reusable.\nMore details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "7) Why is the use of the profile required in Maven?",
        "answer": "For providing probability to projects, we use profiles.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "8) What is the syntax for offline project creation?",
        "answer": "The syntax for project creation is:\n\n\nmvn o packg.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "9) How is the propagation of plugins to child POMs stopped?",
        "answer": "It can be done using the following syntax:\nset<inherited> to false.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "10) What is the use of the exclusion element?",
        "answer": "The element is used to exclude dependencies.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "",
        "answer": "The snapshot indicates the current development copy.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "",
        "answer": "It is a Maven plugin which is designed for the creation of project structure.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "What does central repository consist of?",
        "answer": "It consists of a large number of libraries that are frequently used.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "",
        "answer": "mvn install",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "",
        "answer": "The lifecycle of cleaning consist of:\npre-clean\nclean\npost-clean",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "15) What is the purpose of mvn clean command?",
        "answer": "The command removes the target directory before the starting of a build process.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "16) What is a MOJO?",
        "answer": "A MOJO stands for Maven plain Old Java Object. Each MOJO is an executable goal in Maven, and a plugin is a distribution of one or more related MOJOs.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "17) What is a repository?",
        "answer": "A repository is a directory or place where all the jars and pom.xml file are stored. There are 3 types of a repository in Maven:\nLocal Repository\nCentral Repository\nRemote Repository\nMore details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "18) What is a local repository?",
        "answer": "Maven local repository is created by maven in your local system when you run any maven command. More details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "19) What is a central repository?",
        "answer": "Maven community creates maven central repository on the web. More details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "20) What is a remote repository?",
        "answer": "Maven remote repository is located on the web by different vendors. So you need to define the dependency in pom.xml file manually. It is important because most of the libraries are missing from the central repository. More details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "21) What is POM?",
        "answer": "POM stands for Project Object Model. The pom.xml file contains information of project and project configuration. More details.",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "22) What are the build phases in Maven?",
        "answer": "validate\ncompile\ntest\npackage\nintegration-test\nverify\ninstall\ndeploy",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "23) What is the command to package maven project?",
        "answer": "mvn -package",
        "reference": "javatpoint.com",
        "role": "maven"
    },
    {
        "question": "24) What is the fully qualified artifact name of maven project?",
        "answer": "<groupId>:<artifactId>:<version>",
        "reference": "javatpoint.com",
        "role": "maven"
    }
]