[
    {
        "question": "1. Explain different types of Web Services.",
        "answer": "There are basically two types of web services:   SOAP (Simple Object Access Protocol) Web Services: It is also referred to as transport-independent messaging protocol whose main purpose is to transfer a message, and is based on XML protocol. \n\nRESTful (Representational State Transfer) Web Services: It is developed to fulfill the shortcomings of SOAP and to make the web services more effective. SOAP (Simple Object Access Protocol) Web Services   RESTful (Representational State Transfer) Web Services",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "2. What are the important features of Web services?",
        "answer": "Some of the important features of web services include: Used to standardized XML messaging system. \nNot tied to any one programming language or any operating system. \nDiscoverable via a simple find mechanism. \nAvailable over the internet or private networks. \nSupports loosely coupled connections between systems. \nCan be synchronous or asynchronous. \nSupports the transparent exchange of data to facilitate business integration. \nSupports communication among different apps with HTML, XML, WSDL, SOAP, etc. \nSupports RPC (Remote Procedure Calls). Used to standardized XML messaging system. Not tied to any one programming language or any operating system. Discoverable via a simple find mechanism. Available over the internet or private networks. Supports loosely coupled connections between systems. Can be synchronous or asynchronous. Supports the transparent exchange of data to facilitate business integration. Supports communication among different apps with HTML, XML, WSDL, SOAP, etc. Supports RPC (Remote Procedure Calls).",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "3. What are the different components of Web Services?",
        "answer": "There are various components of web services as given below: SOAP (Simple Object Access Protocol) \nUDDI (Universal Description, Discovery, and Integration) \nWSDL (Web Services Description Language) \nRDF (Resource Description Framework) \nXML (Extensible Markup Language) SOAP (Simple Object Access Protocol) UDDI (Universal Description, Discovery, and Integration) WSDL (Web Services Description Language) RDF (Resource Description Framework) XML (Extensible Markup Language)",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "4. Explain the term Synchronicity.",
        "answer": "Synchronicity generally refers to the binding of the client to the function’s execution and it can be done in two ways i.e., synchronous and asynchronous. In Synchronous invocations, the client blocks and waits until the service complete its operation before continuing its work. In Asynchronous invocations, clients are allowed to invoke a service and execute other functions.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "5. Write the difference between API and Web services.",
        "answer": "API (Application Programming Interface): It acts as an interface between two devices so that they can communicate with each other without any user intervention. Some of its features include customizable, easy integration with GUI, time effective, language-independent, etc. All APIs are not web services. \nWeb Service: It facilitates interaction between two devices over a network. They are widely used for exchanging data among systems or applications. Some of its features include loosely coupled, supports document exchange, interoperability, extensibility, etc. All Web services are APIs. API (Application Programming Interface)  Web Service API Web Service\nIt can be online or offline. It must use a network.\nThey are lightweight architecture. They require SOAP to send and receive network data therefore, are not lightweight architectures.\nIt can use any design style or protocol. It can only use SOAP but sometimes UDDI, XML, RPC, and REST also.\nIt supports HTTP/HTTPS protocol and also supports XML and JSON. It supports HTTP protocol and also supports XML.\nIt doesn’t require any network for its operation. It requires a network for its operation.\nThey are open source and are used for XML. They are not open source and are used to understand JSON (JavaScript Object Notation). API Web Service\nIt can be online or offline. It must use a network.\nThey are lightweight architecture. They require SOAP to send and receive network data therefore, are not lightweight architectures.\nIt can use any design style or protocol. It can only use SOAP but sometimes UDDI, XML, RPC, and REST also.\nIt supports HTTP/HTTPS protocol and also supports XML and JSON. It supports HTTP protocol and also supports XML.\nIt doesn’t require any network for its operation. It requires a network for its operation.\nThey are open source and are used for XML. They are not open source and are used to understand JSON (JavaScript Object Notation). API Web Service API Web Service API Web Service It can be online or offline. It must use a network.\nThey are lightweight architecture. They require SOAP to send and receive network data therefore, are not lightweight architectures.\nIt can use any design style or protocol. It can only use SOAP but sometimes UDDI, XML, RPC, and REST also.\nIt supports HTTP/HTTPS protocol and also supports XML and JSON. It supports HTTP protocol and also supports XML.\nIt doesn’t require any network for its operation. It requires a network for its operation.\nThey are open source and are used for XML. They are not open source and are used to understand JSON (JavaScript Object Notation). It can be online or offline. It must use a network. It can be online or offline. It must use a network. They are lightweight architecture. They require SOAP to send and receive network data therefore, are not lightweight architectures. They are lightweight architecture. They require SOAP to send and receive network data therefore, are not lightweight architectures. It can use any design style or protocol. It can only use SOAP but sometimes UDDI, XML, RPC, and REST also. It can use any design style or protocol. It can only use SOAP but sometimes UDDI, XML, RPC, and REST also. It supports HTTP/HTTPS protocol and also supports XML and JSON. It supports HTTP protocol and also supports XML. It supports HTTP/HTTPS protocol and also supports XML and JSON. It supports HTTP protocol and also supports XML. It doesn’t require any network for its operation. It requires a network for its operation. It doesn’t require any network for its operation. It requires a network for its operation. They are open source and are used for XML. They are not open source and are used to understand JSON (JavaScript Object Notation). They are open source and are used for XML. They are not open source and are used to understand JSON (JavaScript Object Notation).",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "6. Name the tools that are used to test web services.",
        "answer": "There are various tools used to test web service as given below: SoapUI \nPoster \nPostman \nREST client \nJMeter SoapUI Poster Postman REST client JMeter",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "7. What is WSDL?",
        "answer": "WSDL (Web Services Description Language), as the name suggests, is considered the standard format that is used to describe the availability of web services and how to access them. It is based on XML protocol for exchanging data in decentralized and distributed environments. It also describes the technical details or locates the user interface to the web service. WSDL document contains some important information as given below: Method name and parameters  \nPort types \nService endpoint \nHeader information, etc. Method name and parameters Port types Service endpoint Header information, etc.  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "8. What is XML-RPC?",
        "answer": "XML-RPC (Remote procedure call) is considered the most basic and simplest XML-based protocol to exchange data among different devices on a network. It uses HTTP as a transport protocol for quickly and easily transferring the information or data between two devices. XML-RPC can also be used with different programming languages such as Perl, Java, Python, C, C++, PHP, etc.  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "9. What are the features of XML-RPC?",
        "answer": "There are various features of XML-RPC that includes: Platform independent \nAllows diverse applications to communicate \nConsidered as the easiest and simplest way to get started with web services \nUses XML to encode its calls and HTTP as the transport protocol Platform independent Allows diverse applications to communicate Considered as the easiest and simplest way to get started with web services Uses XML to encode its calls and HTTP as the transport protocol",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "10. What do you mean by UDDI?",
        "answer": "UDDI (Universal Description, Discovery, and Integration) is a directory service used for describing, publishing, and finding web services. It is also used for creating business registries. It is based on a set of web standards including HTTP, XML, SOAP, WSDL, XML Schema. Its main goal is to streamline digital transactions and e-commerce among company systems.  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "11. What are the important features of UDDI?",
        "answer": "Some important features of UDDI include: Platform independent \nUses WSDL for describing interfaces to web services \nCan communicate through SOAP, Java RMI, and CORBA Protocol \nThe delineation between interface and implementation \nNeutral in terms of protocols Platform independent Uses WSDL for describing interfaces to web services Can communicate through SOAP, Java RMI, and CORBA Protocol The delineation between interface and implementation Neutral in terms of protocols",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "12. Name the language that is commonly used by UDDI.",
        "answer": "The language commonly used by UDDI is WSDL (Web Service Description Language).",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "13. Explain web service Architecture.",
        "answer": "Every framework requires some type of architecture to ensure that the entire framework works perfectly as desired, the same goes for web services. Web service architecture is used to assist the developer with steps and procedures that are essential to complete the creation. Web service architecture includes three distinct roles i.e., service provider, service requester, and service registry. It also includes three different operations that include:  \n\nPublish (Publication of Service Descriptions): A service description needs to be published so that the service requestor can locate and have access to it. It can be published anywhere depending upon the requirements of the application. \n\nFind (Finding of Services Descriptions): A service description is retrieved directly by a service requestor. The requestor consults the broker to locate a web service that is already published. \n\nBind (Invoking of Service based on Service Description): Every service needs to be invoked. To locate, contact, and invoke the service, the service requestor initiates the interaction with the service at runtime using details of binding in the service description.   Publish (Publication of Service Descriptions)   Find (Finding of Services Descriptions)   Bind (Invoking of Service based on Service Description)  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "14. What is a Web Service Provider?",
        "answer": "Web service generally creates web services and provides access to the client application who wants it. Its main purpose is to implement the service and make it available on the Internet so that client applications can use it whenever required. In simple words, it is a platform that creates and hosts web services.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "15. What is a Web service Requestor?",
        "answer": "Web service requestor is the client application that requests for web service to use it. Its main purpose is to use an existing web service by opening a network connection and sending an XML request. In simple words, they are consumers of the web service.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "16. What is a Web Service Registry?",
        "answer": "The web service registry is basically like a ‘phone book’ for web services. It allows client applications to be able to publish new services or can locate the already existing ones. Two widely-used registry standards are generally supported by application servers i.e., ebXML (Electronic Business using XML) and UDDI (Universal Description, Discovery, and Integration).",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "17. What are the different layers of the web service protocol stack?",
        "answer": "The implementation of web services generally depends on technologies that are often organized in a layered stack. Examining the web service protocol stack is considered as the second option for viewing the web service architecture. In simple words, it is the set of protocols that are used to explore and execute web services. Currently, the web service protocol stack has four layers as given below:   Service Transport: It is generally responsible to transport messages between applications. It basically defines technology standards for communication and allows messages or information to move across the network without any difficulty. It uses HTTP, SMTP, FTP, and DEEP protocols to transfer information.  \nXML Messaging: It is generally responsible to encode messages into XML format so that one can understand these messages at either end. This layer generally includes XML-RPC and SOAP.  \nService Description: It is generally responsible to describe the public interface to a specific web service. WSDL is generally used to handle service descriptions.\nService Discovery: It is generally responsible to centralize service into a common registry and provides easy functionality for publishing or finding web services. UDDI is generally used to handle service discovery. Service Transport  XML Messaging  Service Description  Service Discovery",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "18. What are RESTful Web Services?",
        "answer": "REST (Representational State Transfer) is a stateless client-server architecture style used for developing applications that are accessible over the web. It is a type of web service whose main goal is to make web services more effective. It can be defined as the web service that uses HTTP methods for implementing the REST architecture. Unlike SOAP which is protocol-based, Restful services are architecturally based. It does not contain any contract or WSDL file.  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "19. What are the advantages of RESTful web service?",
        "answer": "There are several advantages of RESTful web services as given below: Platform independent. \nSimple and easy to implement and test. \nSupport different formats such as JSON, XML, HTML, etc. \nCan be written in different programming languages and executed on any platform. \nLightweight, manageable, scalable, and reusable. \nFaster and provide better performance. \nConsume less bandwidth and resources. \nA lot of automation framework is available Platform independent. Simple and easy to implement and test. Support different formats such as JSON, XML, HTML, etc. Can be written in different programming languages and executed on any platform. Lightweight, manageable, scalable, and reusable. Faster and provide better performance. Consume less bandwidth and resources. A lot of automation framework is available",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "20. Which protocol is used by RESTful web services?",
        "answer": "The protocol used by RESTful web services is HTTP.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "21. Explain the term statelessness with respect to RESTful web Services. Write its advantages.",
        "answer": "Statelessness is basically a condition or restriction where RESTful web services are not allowed to keep a client state on the server as per the REST architecture. Clients are responsible to pass their context to the server. To process the client’s request, the server then further stores this context.  \n\nAdvantages:   Advantages: No need to maintain previous interactions with clients.\nIndependent treatment of each method request.\nLess complexity and simplified application design. No need to maintain previous interactions with clients. Independent treatment of each method request. Less complexity and simplified application design. Example: Simple GET Request using NodeJS Example: We have the following sample data in users.json file.\nFilename: users.json  Filename: users.json {\n  \"user1\" : {\n     \"name\" : \"gourav\",\n     \"password\" : \"password1\",\n     \"profession\" : \"officer\",\n     \"id\": 1\n  },\n  \n  \"user2\" : {\n     \"name\" : \"nikhil\",\n     \"password\" : \"password2\",\n     \"profession\" : \"teacher\",\n     \"id\": 2\n  }\n} {\n  \"user1\" : {\n     \"name\" : \"gourav\",\n     \"password\" : \"password1\",\n     \"profession\" : \"officer\",\n     \"id\": 1\n  },\n  \n  \"user2\" : {\n     \"name\" : \"nikhil\",\n     \"password\" : \"password2\",\n     \"profession\" : \"teacher\",\n     \"id\": 2\n  }\n} \"user1\" \"name\" \"gourav\" \"password\" \"password1\" \"profession\" \"officer\" \"id\" 1 \"user2\" \"name\" \"nikhil\" \"password\" \"password2\" \"profession\" \"teacher\" \"id\" 2 Implement our RESTful API listUsers using the following code in a server.js file.\nFilename: server.js  Filename: server.js // Requiring module\nvar express = require('express');\nvar app = express();\nvar fs = require(\"fs\");\n// Sample GET API\napp.get('/listUsers', function (req, res) {\n  fs.readFile( __dirname + \"/\" + \"users.json\", 'utf8', function (err, data) {\n     console.log( data );\n     res.end( data );\n  });\n})\n// Server setup\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"Example app listening at http://%s:%s\", host, port)\n}) // Requiring module\nvar express = require('express');\nvar app = express();\nvar fs = require(\"fs\");\n// Sample GET API\napp.get('/listUsers', function (req, res) {\n  fs.readFile( __dirname + \"/\" + \"users.json\", 'utf8', function (err, data) {\n     console.log( data );\n     res.end( data );\n  });\n})\n// Server setup\nvar server = app.listen(8081, function () {\n  var host = server.address().address\n  var port = server.address().port\n  console.log(\"Example app listening at http://%s:%s\", host, port)\n}) // Requiring module var require 'express' var var require \"fs\" // Sample GET API '/listUsers' function (req, res) function req, res \"/\" \"users.json\" 'utf8' function (err, data) function err, data console // Server setup var 8081 function () function  var var console \"Example app listening at http://%s:%s\" Now open a browser and go to http://127.0.0.1:8081/listUsers,  we will get the following response: http://127.0.0.1:8081/listUsers {\n  \"user1\" : {\n     \"name\" : \"gourav\",\n     \"password\" : \"password1\",\n     \"profession\" : \"officer\",\n     \"id\": 1\n  },\n  \n  \"user2\" : {\n     \"name\" : \"nikhil\",\n     \"password\" : \"password2\",\n     \"profession\" : \"teacher\",\n     \"id\": 2\n  }\n} {\n  \"user1\" : {\n     \"name\" : \"gourav\",\n     \"password\" : \"password1\",\n     \"profession\" : \"officer\",\n     \"id\": 1\n  },\n  \n  \"user2\" : {\n     \"name\" : \"nikhil\",\n     \"password\" : \"password2\",\n     \"profession\" : \"teacher\",\n     \"id\": 2\n  }\n} \"user1\" \"name\" \"gourav\" \"password\" \"password1\" \"profession\" \"officer\" \"id\" 1 \"user2\" \"name\" \"nikhil\" \"password\" \"password2\" \"profession\" \"teacher\" \"id\" 2",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "22. Name HTTP methods that can be used with RESTful web services.",
        "answer": "Some of the HTTP methods that can be used with RESTful web services include: GET: Used to get and read a resource. \nPOST: Used to create a new resource. \nPUT: Used to update existing resources. \nDELETE: Used to delete the resource. \nPATCH: Used to apply partial modifications to a resource. GET: Used to get and read a resource. POST: Used to create a new resource. PUT: Used to update existing resources. DELETE: Used to delete the resource. PATCH: Used to apply partial modifications to a resource.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "23. What are the written status codes for REST API?",
        "answer": "REST API generally returns the following status codes in HTTP response: 200 OK\n201 Created\n202 Accepted\n302 Found\n400 Bad Request\n401 Unauthorized \n404 Not Found\n405 Method Not Allowed\n409 Conflict\n500 Internal Server Error 200 OK 201 Created 202 Accepted 302 Found 400 Bad Request 401 Unauthorized 404 Not Found 405 Method Not Allowed 409 Conflict 500 Internal Server Error",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "24. What do you mean by SOAP? Write its advantages.",
        "answer": "SOAP (Simple Object Access Protocol) is an XML-based protocol that is used to access web services. It is simply used to interchange data or information between two devices or computers using request and response based on XML format over transport protocols like HTTP, SMTP, etc.   Advantages: Advantages: Language and Information independent. \nCan be written in different programming languages or operating systems. \nProvide data transport for web services.  \nCan extend HTTP for XML messaging. \nDefines and uses its own WS security. \nEasy to debug and eliminate firewall issues. Language and Information independent. Can be written in different programming languages or operating systems. Provide data transport for web services. Can extend HTTP for XML messaging. Defines and uses its own WS security. Easy to debug and eliminate firewall issues.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "25. What are the different elements of the SOAP Document or message?",
        "answer": "The SOAP message is basically an ordinary XML document consists of three parts as given below: \n\nSOAP Envelope: It is a mandatory element that identifies XML documents as a SOAP message. It simply defines the start and the end of the message.  \n\nSOAP Header: It is an optional element that contains header information.  \n\nSOAP Body: It is a mandatory element that contains call and response information. It includes XML data consisting of the message that is being sent.   SOAP Envelope   SOAP Header   SOAP Body   The following block depicts the general structure of SOAP XML request and response: XML Request XML Request <Envelope xmlns=?http://schemas.xmlsoap.org/soap/envelop/?>   \n<Body>   \n    <getCourseDetailRequest xmlns=?http://udemy.com/course?>   \n       <id>course1</id>   \n    <getCourseDetailRequest>   \n</Body>   \n</Envelope> <Envelope xmlns=?http://schemas.xmlsoap.org/soap/envelop/?>   \n<Body>   \n    <getCourseDetailRequest xmlns=?http://udemy.com/course?>   \n       <id>course1</id>   \n    <getCourseDetailRequest>   \n</Body>   \n</Envelope> <Envelope xmlns=?http://schemas.xmlsoap.org/soap/envelop/?> Envelope xmlns ?http://schemas.xmlsoap.org/soap/envelop/? <Body> Body <getCourseDetailRequest xmlns=?http://udemy.com/course?> getCourseDetailRequest xmlns ?http://udemy.com/course? <id> id </id> id <getCourseDetailRequest> getCourseDetailRequest </Body> Body </Envelope> Envelope XML Response XML Response <SOAP-ENV:Envelope xmlns:SOAP-ENV=?http://schemas.xmlsoap.org/soap/envelope/?>   \n      <SOAP-ENV:Header />          <!?empty header-->   \n       <SOAP-ENV:Body>             <!?body begin-->   \n              <ns2:getCourseDetailsResponse xmlns:ns2=?http://in28mi> <!--content of the response-->   \n               <ns2:course>   \n                <ns2:id>Course1</ns2:id>   \n                <ns2:name>Spring<ns2:name>   \n                <ns2:description>10 Steps</ns1:description>   \n                </ns2:course>   \n                </ns2:getCourseDetailResponse>   \n           </SOAP-ENV:Body>    <!?body end-->   \n</SOAP-ENV:Envelope> <SOAP-ENV:Envelope xmlns:SOAP-ENV=?http://schemas.xmlsoap.org/soap/envelope/?>   \n      <SOAP-ENV:Header />          <!?empty header-->   \n       <SOAP-ENV:Body>             <!?body begin-->   \n              <ns2:getCourseDetailsResponse xmlns:ns2=?http://in28mi> <!--content of the response-->   \n               <ns2:course>   \n                <ns2:id>Course1</ns2:id>   \n                <ns2:name>Spring<ns2:name>   \n                <ns2:description>10 Steps</ns1:description>   \n                </ns2:course>   \n                </ns2:getCourseDetailResponse>   \n           </SOAP-ENV:Body>    <!?body end-->   \n</SOAP-ENV:Envelope> <SOAP-ENV:Envelope xmlns:SOAP-ENV=?http://schemas.xmlsoap.org/soap/envelope/?> SOAP-ENV:Envelope xmlns:SOAP-ENV ?http://schemas.xmlsoap.org/soap/envelope/? <SOAP-ENV:Header /> SOAP-ENV:Header <SOAP-ENV:Body> SOAP-ENV:Body <ns2:getCourseDetailsResponse xmlns:ns2=?http://in28mi> ns2:getCourseDetailsResponse xmlns:ns2 ?http://in28mi <!--content of the response--> <ns2:course> ns2:course <ns2:id> ns2:id </ns2:id> ns2:id <ns2:name> ns2:name <ns2:name> ns2:name <ns2:description> ns2:description </ns1:description> ns1:description </ns2:course> ns2:course </ns2:getCourseDetailResponse> ns2:getCourseDetailResponse </SOAP-ENV:Body> SOAP-ENV:Body </SOAP-ENV:Envelope> SOAP-ENV:Envelope",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "26. What do you mean by SOA?",
        "answer": "SOA (Service Oriented Architecture) is basically an architectural approach that is specially designed to support service orientation. It enabled services to communicate or interact across different platforms and languages to form applications. Applications in SOA are developed on the basis of services. It can be easily implemented using different protocols such as HTTP, JMS, HTTPS, RPC, RMI, etc.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "27. What are the advantages of using SOA",
        "answer": "Some of its advantages include: Easy to integrate. \nServices are platform-independent. \nManage complexity so that integration becomes more manageable. \nServices are easier to test and debug. \nEasily available to any requester. Easy to integrate. Services are platform-independent. Manage complexity so that integration becomes more manageable. Services are easier to test and debug. Easily available to any requester.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "28. Name three primary security issues of Web Services?",
        "answer": "The three primary security issues of web services include: Confidentiality \nAuthentication \nNetwork Security Confidentiality Authentication Network Security",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "29. Name some components that are needed to be published while deploying a web service.",
        "answer": "Components that are needed to be published while deploying a web service includes: Web Application Directory \nWebservice.asmx File \nWebservice.Disco File \nWeb.Config File \nBin Directory Web Application Directory Webservice.asmx File Webservice.Disco File Web.Config File Bin Directory",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "1. What do you mean by sun-jaxws.xml file?",
        "answer": "Sun-jaxws.xml file is simply used to provide endpoint details when JAX-WS web services are deployed as a standard WAR archive on a servlet container like Tomcat. It is also available in the WEB-INF directory. \n\nExample:   Example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<endpoints xmlns=\"http://java.sun.com/xml/ns/jax-ws/ri/runtime\" version=\"2.0\"> \n <endpoint \n    name=\"HelloWorldWS\" \n    implementation=\"org.arpit.javapostsforlearning.webservice.HelloWorldImpl\" \n    url-pattern=\"/HelloWorldWS\"/> \n</endpoints> <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<endpoints xmlns=\"http://java.sun.com/xml/ns/jax-ws/ri/runtime\" version=\"2.0\"> \n <endpoint \n    name=\"HelloWorldWS\" \n    implementation=\"org.arpit.javapostsforlearning.webservice.HelloWorldImpl\" \n    url-pattern=\"/HelloWorldWS\"/> \n</endpoints> <?xml version=\"1.0\" encoding=\"UTF-8\"?> <endpoints xmlns=\"http://java.sun.com/xml/ns/jax-ws/ri/runtime\" version=\"2.0\"> endpoints xmlns \"http://java.sun.com/xml/ns/jax-ws/ri/runtime\" version \"2.0\" <endpoint \n    name=\"HelloWorldWS\" \n    implementation=\"org.arpit.javapostsforlearning.webservice.HelloWorldImpl\" \n    url-pattern=\"/HelloWorldWS\"/> endpoint name \"HelloWorldWS\" implementation \"org.arpit.javapostsforlearning.webservice.HelloWorldImpl\" url-pattern \"/HelloWorldWS\" </endpoints> endpoints",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "2. Explain the term Distributed Technologies.",
        "answer": "Distributed technologies are in high demand nowadays because of the increasing ratio of distributed applications. It simply enables segmenting of application units and transferring these units to various computers on different networks.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "3. Is there any need for a special application to have access to the Web service?",
        "answer": "No, there is no need for a special application to have access to the Web service. One can access web applications from any of the applications that support XML-based object requests and responses.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "4. Name two Microsoft solutions for distributed applications.",
        "answer": "The two Microsoft solutions for distributed applications include: .NET Web Services \n.NET Remoting .NET Web Services .NET Remoting",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "5. Name some important annotations of JAX-RS API.",
        "answer": "Some important annotations of the JAX-RS API include: @Path: It is specially used to specify the relative path of resource class and methods. This annotation can be used on any class or method in code. It binds the URI pattern to a Java method.\n@GET, @PUT, @POST, @DELETE, @HEAD: It is specially used to specify HTTP request type for a method. These annotations can be specified on the JAX-RS method.\n@Produces: This annotation is specially used to specify HTTP responses generated by web services.\n@Consumes: This annotation is specially used to specify HTTP Requests.  \n@PathParam: It is specially used to specify parameters to path value by parsing. @Path: It is specially used to specify the relative path of resource class and methods. This annotation can be used on any class or method in code. It binds the URI pattern to a Java method. @Path @GET, @PUT, @POST, @DELETE, @HEAD: It is specially used to specify HTTP request type for a method. These annotations can be specified on the JAX-RS method. @GET, @PUT, @POST, @DELETE, @HEAD @Produces: This annotation is specially used to specify HTTP responses generated by web services. @Produces @Consumes: This annotation is specially used to specify HTTP Requests. @Consumes @PathParam: It is specially used to specify parameters to path value by parsing. @PathParam",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "6. What do you mean by JAX-RS API? Write some implementations of JAX-RS API.",
        "answer": "JAX-RS (Java API for RESTful web services) is basically an essential part of the Java EE platform that is being used for developing or building RESTful web services. There are basically two important implementations of JAX-RS API: Jersey \nRESTEasy Jersey RESTEasy",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "7. Name some important annotations of JAX-WS.",
        "answer": "Some important annotations of JAX-WS include: @WebService \n@WebMethod \n@SOAPBinding \n@WebResult \n@WebServiceClient @WebService @WebMethod @SOAPBinding @WebResult @WebServiceClient",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "8. What do you mean by JAX-WS API? Write some implementations of JAX-WS API.",
        "answer": "JAX-WS (Java API for SOAP Web Services) is basically an essential part of the Java EE platform that is being used for developing or building SOAP web services and clients that communicate using XML. It enables developers to write message-oriented and RPC-oriented web services. There are basically two important implementations of JAX-WS: \n\nRPC Style: It generates WSDL documents on the basis of the method name and its parameters. There are no type definitions present in the WSDL document.   RPC Style Document Style: In this, one can transport XML messages as a part of SOAP requests unlike in RPC-style web service. Document Style",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "9. What do you mean by Java Web services? Name the methods to create web services.",
        "answer": "Java web services is basically a type of web service that is being designed to develop and deploy basic web service on the Java platform. Java web service applications perform communication through WSDL and these applications can be accessed by different programming languages including .Net, PHP, etc. Two ways to write java web application code include SOAP and RESTful.  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "10. What do you mean by EIS and EPS?",
        "answer": "EIS (Entrust Identification Service): It is basically generated from Entrust security platform which allows or enables the corporates simply to handle and control the identities that are trusted to perform transactions for web service transactions.  \n\nEPS (Entrust Privacy Service): It deals with security and confidentiality simply by encrypting data. It is done to make sure that only concerned parties or authorized ones can have access to data. EIS (Entrust Identification Service)   EPS (Entrust Privacy Service)",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "11. What is an Entrust Entitlement Service?",
        "answer": "EES (Entrust Entitlement Service), generally refers to a service that verifies entities that attempt to access a web service.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "12. Explain wsimport?",
        "answer": "Wsimport is basically a command-line tool that processes an existing WSDL file to generate all required web service artifacts for a web service client to access the published web services. It also supports a top-down approach for developing JAX-WS web services. In simple words, it generates Java classes from WSDL.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "13. What do you mean by DISCO?",
        "answer": "DISCO (Discovery), as the name suggests, is a Microsoft technology that is being used to discover web services. It is the process of locating and interrogating web service descriptions which is a preliminary step for having access to web services over the Internet.  The organization that provides web services generally provides a DISCO file on its server that includes the links of all the available web services so that it can be used within the local network.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "14. What is BEEP?",
        "answer": "BEEP (Blocks Extensible Exchange Protocol) is basically an IETF (Internet Engineering Task Force) framework that is generally used to develop network application protocols. One can create these new protocols for different applications such as instant messaging, network management, file transfer, content syndication, etc. It is directly layered over TCP. BEEP has various in-build features such as authentication, security, initial handshake protocol, error handling, etc.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "15. Give an example of working for a Web Service Provider.",
        "answer": "using System;   \nusing System.Web.Services;   \nusing System.Xml.Serialization;   \n[WebService(Namespace=\"http://localhost/MyWebServices/\")]   \npublic class FirstService : WebService  \n{   \n  [WebMethod]   \n  public int Add(int a, int b)  \n  {   \n  return a + b;   \n  }   \n [WebMethod]   \n  public String SayHello()  \n  {   \n  return \"Hello World\";   \n  }   \n} using System;   \nusing System.Web.Services;   \nusing System.Xml.Serialization;   \n[WebService(Namespace=\"http://localhost/MyWebServices/\")]   \npublic class FirstService : WebService  \n{   \n  [WebMethod]   \n  public int Add(int a, int b)  \n  {   \n  return a + b;   \n  }   \n [WebMethod]   \n  public String SayHello()  \n  {   \n  return \"Hello World\";   \n  }   \n} using using using WebService(Namespace=\"http://localhost/MyWebServices/\") \"http://localhost/MyWebServices/\" public class FirstService WebService WebMethod public int Add(int a, int b) public int Add int a, int b int int return WebMethod public String SayHello() public SayHello  return \"Hello World\"",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "16. What is the importance of URI in REST based web services?",
        "answer": "In REST-based web services, URI (Uniform Resource Locator) is generally used to locate resources on the server that is hosting the web service. Each resource in service will have at least one URI that is used to identify it. Web services clients generally use URI to access the resource. Its format is given below: <protocol>://<service-name>/<ResourceType>/<ResourceID> <protocol>://<service-name>/<ResourceType>/<ResourceID> ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "17. What's the importance of security in web services?",
        "answer": "Security is considered a very important feature in any web application. It is essential in web services so that we can make confidential or sensitive information and transactions more reliable. In web services, the security is attained through SSL (Service Socket Layer) that helps in developing EST (Entrust Secure Transaction) platform.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "18. What’s the difference between Web services and CORBA or DCOM?",
        "answer": "Web service CORBA and DCOM \nWeb services basically transfer messages to applications or receive messages from applications using the HTTP protocol. To encode data, a web service uses XML.  They basically transfer messages to applications or receive messages from applications using non-standard protocols like RPC, IIOP (Inter Internet Object Protocol), etc.\nWSDL is used to define web services. CORBA Interface Description Language is used to define CORBA components and Microsoft Interface Definition Language is used to define DCOM components.\nUDDI is used to discover web services. CORBA registry is used to define CORBA components and DCOM registry is used to define DCOM components. \nThey are firewalls friendly. CORBA uses IIOP protocol i.e., non-internet friendly. Web service CORBA and DCOM \nWeb services basically transfer messages to applications or receive messages from applications using the HTTP protocol. To encode data, a web service uses XML.  They basically transfer messages to applications or receive messages from applications using non-standard protocols like RPC, IIOP (Inter Internet Object Protocol), etc.\nWSDL is used to define web services. CORBA Interface Description Language is used to define CORBA components and Microsoft Interface Definition Language is used to define DCOM components.\nUDDI is used to discover web services. CORBA registry is used to define CORBA components and DCOM registry is used to define DCOM components. \nThey are firewalls friendly. CORBA uses IIOP protocol i.e., non-internet friendly. Web service CORBA and DCOM Web service CORBA and DCOM Web service CORBA and DCOM Web services basically transfer messages to applications or receive messages from applications using the HTTP protocol. To encode data, a web service uses XML.  They basically transfer messages to applications or receive messages from applications using non-standard protocols like RPC, IIOP (Inter Internet Object Protocol), etc.\nWSDL is used to define web services. CORBA Interface Description Language is used to define CORBA components and Microsoft Interface Definition Language is used to define DCOM components.\nUDDI is used to discover web services. CORBA registry is used to define CORBA components and DCOM registry is used to define DCOM components. \nThey are firewalls friendly. CORBA uses IIOP protocol i.e., non-internet friendly. Web services basically transfer messages to applications or receive messages from applications using the HTTP protocol. To encode data, a web service uses XML.  They basically transfer messages to applications or receive messages from applications using non-standard protocols like RPC, IIOP (Inter Internet Object Protocol), etc. Web services basically transfer messages to applications or receive messages from applications using the HTTP protocol. To encode data, a web service uses XML. They basically transfer messages to applications or receive messages from applications using non-standard protocols like RPC, IIOP (Inter Internet Object Protocol), etc. WSDL is used to define web services. CORBA Interface Description Language is used to define CORBA components and Microsoft Interface Definition Language is used to define DCOM components. WSDL is used to define web services. CORBA Interface Description Language is used to define CORBA components and Microsoft Interface Definition Language is used to define DCOM components. UDDI is used to discover web services. CORBA registry is used to define CORBA components and DCOM registry is used to define DCOM components. UDDI is used to discover web services. CORBA registry is used to define CORBA components and DCOM registry is used to define DCOM components. They are firewalls friendly. CORBA uses IIOP protocol i.e., non-internet friendly. They are firewalls friendly. CORBA uses IIOP protocol i.e., non-internet friendly.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "19. What are .NET Web services and .NET Remoting? Write the difference between them.",
        "answer": ".NET Remoting: It is a method that enables objects to communicate or interact with each other across application domains, processes, and machine boundaries, whether application components are present in one computer or different computers across the entire world. .NET Remoting .NET Web service: It is a method that enables cross-platform integration by using XML, HTTP, and SOAP for communication among two devices over WWW. It simply shares business logic, processes, and data through programmatic interfaces across a network. .NET Web service Both of them are powerful technologies that provide suitable frameworks and thus support the development of distributed technologies and application integration. There is some difference between these two technologies as given below. Web Services .NET Remoting\nIt uses HTTP protocol.  It uses TCP/HTTP/SMTP protocol. \nIts performance is slow as compared to .NET Remoting.  It provides faster communication and performance when one uses the TCP channel and the binary formatter. \nThese services are hosted using IIS and therefore, are more reliable.  It is less reliable as compared to .NET Web services. \nIt supports the XML Schema type system and provides a very simple programming model along with broad cross-platform reach. It supports a runtime type system and provides a complex programming model along with very limited reach. Web Services .NET Remoting\nIt uses HTTP protocol.  It uses TCP/HTTP/SMTP protocol. \nIts performance is slow as compared to .NET Remoting.  It provides faster communication and performance when one uses the TCP channel and the binary formatter. \nThese services are hosted using IIS and therefore, are more reliable.  It is less reliable as compared to .NET Web services. \nIt supports the XML Schema type system and provides a very simple programming model along with broad cross-platform reach. It supports a runtime type system and provides a complex programming model along with very limited reach. Web Services .NET Remoting Web Services .NET Remoting Web Services .NET Remoting It uses HTTP protocol.  It uses TCP/HTTP/SMTP protocol. \nIts performance is slow as compared to .NET Remoting.  It provides faster communication and performance when one uses the TCP channel and the binary formatter. \nThese services are hosted using IIS and therefore, are more reliable.  It is less reliable as compared to .NET Web services. \nIt supports the XML Schema type system and provides a very simple programming model along with broad cross-platform reach. It supports a runtime type system and provides a complex programming model along with very limited reach. It uses HTTP protocol.  It uses TCP/HTTP/SMTP protocol. It uses HTTP protocol. It uses TCP/HTTP/SMTP protocol. Its performance is slow as compared to .NET Remoting.  It provides faster communication and performance when one uses the TCP channel and the binary formatter. Its performance is slow as compared to .NET Remoting. It provides faster communication and performance when one uses the TCP channel and the binary formatter. These services are hosted using IIS and therefore, are more reliable.  It is less reliable as compared to .NET Web services. These services are hosted using IIS and therefore, are more reliable. It is less reliable as compared to .NET Web services. It supports the XML Schema type system and provides a very simple programming model along with broad cross-platform reach. It supports a runtime type system and provides a complex programming model along with very limited reach. It supports the XML Schema type system and provides a very simple programming model along with broad cross-platform reach. It supports a runtime type system and provides a complex programming model along with very limited reach.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "20. How to implement web services in .NET?",
        "answer": "HTTP Handles are generally used to implement web services in .NET because HTTP handles interrupt requests to .asmx files.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "21. What is the importance of using @XmlRootElement?",
        "answer": "The main purpose of @XmlRootElement is to transform or convert Java objects to XML and vice versa. It is generally the base common annotation used for JAXB API. It uniquely associates a root element with a class.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "22. Explain the term JAXP.",
        "answer": "JAXP (Java API for XML Processing) is basically a Java API that allows parsing, transform, validate, and queries XML files with DOM (Document Object Model), SAX (Simple API for XML), or StAX (Streaming API for XML) Parsers/Parsing interfaces. It is used for processing XML data using applications that are written in Java programming language.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "23. What is JAXB? Name three different packages in JAXB binding framework.",
        "answer": "JAXB (Java Architecture for XML Binding) is basically a Java standard that is used to define how Java objects get converted into XML and vice-versa. Using Java facilitates the reading and writing of XML. It makes it easier to access XML documents from applications that are written in the Java programming language. There are three different packages in JAXB binding framework that includes: xml.bind \nxml.bind.util \nxml.bind.helper xml.bind xml.bind.util xml.bind.helper  ",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "24. Name the web service method that is read-only, and is idempotent?",
        "answer": "The web service method that is read-only and safe is the GET method, and the web service methods that are idempotent are PUT and DELETE operations. Idempotent refers to the operations whose results will always be the same even if these operations are invoked so many times.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "25. Explain Spring Web Service.",
        "answer": "Spring WS (Web Service) is basically a product of the spring community whose main focus is to develop document-driven web services. It only aims to facilitate contract-first SOAP service development. It allows the development of web services that are flexible.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "26. Spring-WS support contract last development approach. Yes, or no?",
        "answer": "No, Spring-WS does not support the contract's last development approach. It only supports the contract-first development approach.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "27. Why is Web service important?",
        "answer": "Web services are very important as they provide standardized web protocols I.e., HTTP or HTTPS simply to interoperate, communicate, and exchange information in XML format via the internet. Some of its advantages include: Allows devices to talk to each other and share data or services between themselves. \nMakes the application platform and technology independent. \nUses standardized standard protocol for communication.  \nUser SOAP over HTTP protocol so that one can use their low-cost internet for implementing web services. \nAllows business logic of different systems to be available over the web. \nCan be used at the same time by many client applications. Allows devices to talk to each other and share data or services between themselves. Makes the application platform and technology independent. Uses standardized standard protocol for communication. User SOAP over HTTP protocol so that one can use their low-cost internet for implementing web services. Allows business logic of different systems to be available over the web. Can be used at the same time by many client applications.",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "1. Conclusion",
        "answer": "Web services are considered as one of the key elements of programmable Web that allows individuals to communicate and share relevant information on two applications over the same network. It has become an essential and critical element of development for web developers. These services are effectively used to participate in and set up B2B transactions. The above given are the most important interview questions regarding Web services. Sharpen your knowledge before you face the interviewer. Recommended Resources: Web API Interview Web API Interview REST API Interview REST API Interview",
        "reference": "interviewbit.com",
        "role": "web-services"
    },
    {
        "question": "1) What is Web Service?",
        "answer": "The Web Service is a standard software system used for communication between two devices (client and server) over the network. Web services provide a common platform for various applications written in different languages to communicate with each other over the network.\nJava Web Services API\n\n\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "2) How does a web service work?",
        "answer": "A web service is used to communicate among various applications by using open standards such as HTML, XML, WSDL, and SOAP. You can build a Java-based web service on Solaris that is accessible from your Visual Basic program that runs on Windows. You can also use C# to develop new web services on Windows invokes from your web application that is based on Java Server Pages (JSP) and runs on Linux.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "3) What are the advantages of web services?",
        "answer": "These are some of the important advantages of web services:\nADVERTISEMENT\nADVERTISEMENT\nInteroperability: With the help of web services, an application can communicate with other application developed in any language.\nReusability: We can expose the web service so that other applications can use it.\nModularity: With the help of web service, we can create a service for a specific task such as tax calculation.\nA Standard protocol for every application program: Web services use standard protocol so that all the client applications written in different languages can understand it. This Standard protocol helps in achieving cross-platform.\nCheaper cost for communication: Web services uses SOAP over HTTP so that anybody can use existing internet for using web services.\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "4) What are the different types of web services?",
        "answer": "There are two types of web services:\nSOAP - It is an XML-based protocol for accessing web services.\nRESTful - It is an architectural style, not a protocol.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "5) What are the main features of web services?",
        "answer": "Following is a list of main features of web services:\nIt is available over the Internet or private (intranet) networks.\nIt uses a standardized XML messaging system.\nIt is not tied to any one operating system or programming language.\nIt is self-describing via a common XML grammar.\nIt is discoverable via a simple find mechanism.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "6) What is SOAP?",
        "answer": "The SOAP stands for Simple Object Access Protocol. It is an XML-based protocol for accessing web services. It is platform independent and language independent. By using SOAP, you can interact with other programming language applications. More details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "7) What are the advantages of SOAP web services?",
        "answer": "These are some of the important advantages of SOAP web services:\nWS Security - SOAP defines its security known as WS Security.\nLanguage Independent - Its web services can be written in any programming language\nPlatform Independent - Its web services can be executed on any platform.\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "8) What are the disadvantages of SOAP web services?",
        "answer": "These are some of the important disadvantages of SOAP web services:\nSlow - It uses XML format that must be parsed to be read and defines many standards that must be followed while developing the SOAP applications. So it is slow and consumes more bandwidth and resource.\nWSDL Dependent - It uses WSDL and doesn't have any other mechanism to discover the service.\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "9) What are the main features of SOAP?",
        "answer": "The following list specifies the features of SOAP:\nSOAP is a communication protocol.\nSOAP communicates between applications.\nSOAP is a format for sending messages.\nSOAP is designed to communicate via Internet.\nSOAP is platform independent.\nSOAP is language independent.\nSOAP is simple and extensible.\nSOAP allows you to get around firewalls.\nSOAP developed as a W3C standard.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "10) What is WSDL?",
        "answer": "The WSDL stands for Web Services Description Language. It is an XML document containing information about web services such as method name, method parameter. The Client needs a data dictionary which contains information about all the web services with methods names and parameters list to invoke them for the web services. The Web Service Description Language bridge up this gap, by providing all necessary information to the client.\n\nSome Important elements used in Web Services Description language are as follows:\n<message>: The message element in WSDL is used to define all different data elements for each operation performed by the web service.\n<portType>: The port type element is used to determine the operation which can be performed by the web service. This operation can have two messages one is input and the second one is the output message.\n<binding>: This element contains the used protocol.\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "11) What is UDDI?",
        "answer": "The UDDI stands for Universal Description, Discovery and Integration. It is a XML based framework for describing, discovering and integrating web services. It contains a list of available web services. WSDL is the part of UDDI. More details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "12) What is RESTful web services?",
        "answer": "The REST stands for Representational State Transfer. It is an architectural style. It is not a protocol like SOAP. More details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "13) What are the advantages of RESTful web services?",
        "answer": "These are some of the important advantages of RESTful web services:\nFast - The Web Services are fast because there is no strict specification of SOAP. It consumes less bandwidth and resource.\nLanguage Independent - The web services can be written in any programming language.\nPlatform Independent - The web services can be executed on any platform.\nCan use SOAP - The web services can use SOAP web services as the implementation.\nAllows different data format - The web service permits different data format such as Plain Text, HTML, XML, and JSON.\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "14) What is the difference between SOAP and REST web services?",
        "answer": "No. SOAP REST\n1) SOAP is a protocol. REST is an architectural style.\n2) SOAP stands for Simple Object Access Protocol. REST stands for Representational State Transfer.\n3) SOAP can't use REST because it is a protocol. REST can use SOAP web services because it is a concept and can use any protocol like HTTP, SOAP.\n4) SOAP uses services interfaces to expose the business logic. REST uses URI to expose business logic.\n5) SOAP defines standards to be strictly followed. REST does not define too much standards like SOAP.\n6) SOAP permits XML data format only. REST permits different data format such as Plain text, HTML, XML, JSON.\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "15) What is SOA?",
        "answer": "SOA stands for Service Oriented Architecture. It is a design pattern to provide services to other application through protocol.\n\n\n\nMore details..",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "16) What tools are used to test web services?",
        "answer": "The tools used to test web services are:\nSoapUI tool for testing SOAP and RESTful web services\nPoster for firefox browser\nPostman extension for Chrome",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "17) What is the advantage of XML in web service?",
        "answer": "In Web service, an XML is used to tag the data, format the data.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "18) What is the usage of WSDL in a web service?",
        "answer": "WSDL is used in web service to describe the availability of service.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "19) What is Interoperability in Web services?",
        "answer": "The Web services facilitate various applications to communicate with each other and share data and services among themselves. Other applications can also use the web services. For example, a VB or .NET application can communicate with a Java web services and vice versa. Web services are used to make the application platform and technology independent.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "",
        "answer": "A consumer of a web service is not tied to that web service directly. The web service interface can change over time without compromising the client's ability to interact with the service. A tightly coupled system implies that the client and server logic are closely tied to one another, implying that if one interface changes, the other must be updated. Adopting a loosely coupled architecture tends to make software systems more manageable and facilitates simpler integration between different systems.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "21) What are the advantages of having XML based Web services?",
        "answer": "Using XML eliminates any networking, operating system, or platform binding. So Web Services based applications are highly interoperable application at their core level.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "22) What do you mean by synchronicity?",
        "answer": "Synchronicity is used to bind the client to the execution of the service. In synchronous invocations, the client blocks and waits for the service to complete its operation before continuing. On the other hand, synchronous operations facilitate a client to invoke a service and then execute different functions.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "23) What is the usage of Service Transport Layer in Web service protocol stack?",
        "answer": "The Service Transport Layer is used to transport messages between applications.\nThis layer includes Hypertext Transport Protocol (HTTP), Simple Mail Transfer Protocol (SMTP), File Transfer Protocol (FTP), and newer protocols like Blocks Extensible Exchange Protocol (BEEP).",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "24) What is the usage of Service Description layer in Web Service Protocol Stack?",
        "answer": "The Service Description layer is used to describe the public interface to a specific web service. Currently, service description is handled via the Web Service Description Language (WSDL).",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "25) What is the usage of Service Discovery layer in Web Service Protocol Stack?",
        "answer": "The Service Discovery layer is used for centralizing services into a universal registry and providing easy publish/find functionality.\nCurrently, service discovery is handled via Universal Description, Discovery, and Integration (UDDI).",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "26) What is a remote procedure call (RPC)?",
        "answer": "The Remote procedure calls refer to the calls made to the methods which are hosted by related web service.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "27) What is meant by SOAP message?",
        "answer": "The SOAP message refers to the data sent to the application from web services. SOAP message is an XML document which is sent through web services to provide data to the client application written in any programming language.\nSOAP message sends via using hypertext transfer protocol.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "28) What is the need of <Envelope> element in the SOAP document?",
        "answer": "The <Envelope> element is used as the root element of every SOAP message.\nThe Root element is known as the first element in the XML Document.\nThe envelope, in turn, separated into two parts. One is the header part and second is the body part. The header contains the routing data which stores the source and destination address of the client. So the body includes the actual data.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "29) Explain web service protocol stack and its layers?",
        "answer": "The web services consist of four layers, as mentioned below:\nService transport:\nThis layer is the first layer in the web services protocol stack used in transporting XML files between various clients applications. Protocols used in the layer is as follows:\nHTTP (Hypertext transfer protocol)\nSMTP (Simple Mail Transfer Protocol)\nFTP (File Transfer Protocol)\nBEEP (Block Extensible Exchange Protocol)\nXML Messaging:\nThis layer is the second layer in the web services protocol stack based on XML model where messages are encoded in common XML format which can be understandable to other client applications. This layer includes the following protocols:\nXML - RPC\nSOAP (Simple Object Access Protocol)\nService Description:\nThis layer provides the service description to the public interface like the location of web service, Available functions, And the data types for XML messaging. This layer only includes one language:\nWSDL: WSDL stands for Web Service Description Language.\nService Discovery:\nThis layer in the Web Services protocol stack is used to publish or finding web services over the web. This layer includes:\nUDDI (Universal Description, Discovery, and integration).",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "30) Explain web service architecture?",
        "answer": "The web service framework includes three different layers.\nThe roles of these layers are:\nService Provider: Role of Service provider is to make the web service which makes it accessible to the client applications over the Web.\nService Requestor: Service requestor refers to any consumer of web service like any client application. Client applications are written in any language contact web service for any functionality by sending XML request over the available network connection.\nService Registry: Service Registry is the centralized directory System which helps to locate the web services for client applications. Used to find the existing web services, as well as developers, can also create the brand new one web service also.\nThe Service Provider uses the interface named as ?Publish? interface of Service Registry to make the existing web services available to client applications. With all the information provided by the service registry, service requestor able to find or invoke services.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "31) What is XML-RPC?",
        "answer": "The RPC is Remote Procedure Call. It is the method used for calling a procedure or function available on any remote computer on the web.\nXML-RPC refers to a simple protocol used to perform RPCs by using XML messaging. It is an excellent tool for connecting different environments and also establishing connections between wide varieties of computers.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "32) Explain BEEP?",
        "answer": "The BEEP stands for Blocks Extensible Exchange Protocol. BEEP is an alternative to HTTP and FTP. BEEP is determined as building new protocols for the variety of applications such as instant messaging, network management, file transfer. It is termed as new Internet Engineering Task Force (IETF) which is layered directly over TCP.\nSome of the Build-in features of BEEP protocol are listed below:\nAuthentication\nSecurity\nError handling\nInitial Handshake Protocol",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "33) What are the requirements to access a Web Service?",
        "answer": "The requirement for accessing web services from any application is that should support XML-based request and response. Hence there is no need to install any app for accessing web services.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "34) Which language does UDDI use?",
        "answer": "The UDDI uses the language known as WSDL (Web Service Description Language).",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "35) Explain different HTTP methods supported by RESTful web services?",
        "answer": "Enlisted below are some common HTTP methods along with their functions that are supported by RESTful web services.\nGET: Read-only access to the resource.\nPUT: Creation of new resource.\nDELETE: Removal of a resource.\nPOST: Update of an existing resource.\nOPTIONS: Get supported operations on the resource.\nHEAD: Returns HTTP header only, nobody.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "36) What are the steps involved in accessing a web service?",
        "answer": "These are the steps involved in accessing a web service:\nClient application bundled the information and into a SOAP message.\nSOAP message sends to the server as a body of Hyper-Text markup language using POST method.\nWeb service unpacks the SOAP message and converts it into a command understandable by the application.\nApplication processes the information and in turn bundled the info and send it back to the client as a SOAP message.\nA Client then unpacks the SOAP message to obtain the results.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "37) How many Communication protocols can be used to implement a SOAP message? Is SOAP messages are tied to any protocol?",
        "answer": "Communication protocol refers to the protocols which were used to transmit information over the web. By using Transport protocols, applications from the different background can quickly communicate with each other without knowing the inside functioning of the various systems. HTTP (Hyper-Text Transfer Protocol) can be used to implement a SOAP message whereas FTP (File Transfer Protocol) can be used as the reliable transport mechanism. SMTP and BEEP can also be used for transport mechanism.\nSOAP message is not tied to any protocol. It can use any of the open Transport protocol.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "38) How are the terms \"Platform independent\" and \"Diverse Application\" are related to each other in the context of XML-RPC?",
        "answer": "The terms \"Platform independent\" and \"Diverse Application\" were related to each other because XML-RPC uses HTTP for transporting SOAP messages over the web. The HTTP is a universal standard protocol for exchanging information on the Web. Hence, it leads to Cross Platform support/ Platform independent. So because it is Platform independent, it leads to the diverse application capable of accessing the web services.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "",
        "answer": "The role of a Web Service provider is to implement web service and make it available to the web service requestor/ consumer.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "",
        "answer": "The role of Web Service Requestor / Consumer is to utilize the pre-existing web service provided by the Web Service Provider/ Publisher. Web Service Requestor/ Consumer request the Web Service provider for the information by sending a SOAP message to the Web Service provider. Then in-Turn Web Service Publisher sends the requested information back to the requestor in the form of a SOAP message.",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "",
        "answer": "Here is the example of a Web Service Provider:\nusing System;  \nusing System.Web.Services;  \nusing System.Xml.Serialization;  \n  [WebService(Namespace=\"http://localhost/MyWebServices/\")]  \npublic class FirstService : WebService{  \n   [WebMethod]  \n   public int Add(int a, int b) {  \n      return a + b;  \n   }  \n     [WebMethod]  \n   public String SayHello() {  \n      return \"Hello World\";  \n   }  \n}",
        "reference": "javatpoint.com",
        "role": "web-services"
    },
    {
        "question": "",
        "answer": "As the name suggests Web Service Provider provides the web services to the various application irrespective of their background, and Web Service Requestor/ Consumer as the name suggests is the requestor for the web services.",
        "reference": "javatpoint.com",
        "role": "web-services"
    }
]