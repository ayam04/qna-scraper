[
    {
        "question": "1. Which according to you is considered the best approach in Entity Framework?",
        "answer": "It is impossible to define one approach as the optimal approach when using the Entity Framework. Project requirements and the type of project determine which development approach should be used. Database First is a good approach if there is a database present. Model First is the optimal choice if no database and model classes exist. As long as the domain classes are available, the Code First method is the best choice.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "2. Explain the advantages of the Entity Framework.",
        "answer": "Entity Framework has the following advantages: With its excellent prototypes, it is possible to write object-oriented programs.  \nBy allowing auto-migration, it is simple to create a database or modify it.   \nIt simplifies the developer's job by reducing the code length with the help of alternate commands.   \nIt reduces development time, development cost, and provides auto-generated code.   \nA unique syntax (LINQ / Yoda) is provided for all object queries, whether they are databases or not.  \nIt enables the mapping of multiple conceptual models to a single storage schema. \nBusiness objects can be mapped easily (with drag & drop tables). With its excellent prototypes, it is possible to write object-oriented programs. By allowing auto-migration, it is simple to create a database or modify it. It simplifies the developer's job by reducing the code length with the help of alternate commands. It reduces development time, development cost, and provides auto-generated code. A unique syntax (LINQ / Yoda) is provided for all object queries, whether they are databases or not. It enables the mapping of multiple conceptual models to a single storage schema. Business objects can be mapped easily (with drag & drop tables).",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "3. Describe some of the disadvantages of the Entity Framework.",
        "answer": "Entity Framework has the following disadvantages: If the developer does not use raw SQL codes, things can become complicated sometimes.   \nIt is a slower form of the Object Relational Mapper.   \nFor a big domain model, it's not ideal.  \nSome RDMS do not offer this feature.   \nEF's main drawback is its lazy loading   \nThis requires a non-traditional approach to handling data that isn't available for every database.  \nSince the data migration functionality is weak, it isn't fully effective in practice. If the developer does not use raw SQL codes, things can become complicated sometimes. It is a slower form of the Object Relational Mapper. For a big domain model, it's not ideal. Some RDMS do not offer this feature. EF's main drawback is its lazy loading This requires a non-traditional approach to handling data that isn't available for every database. Since the data migration functionality is weak, it isn't fully effective in practice.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "4. What are the features of the Entity Framework?",
        "answer": "Below are some of Entity Framework's basic features:   Cross-Platform: It is lightweight, extensible, open-source, and can be used on Windows, Linux, and Mac.\nQuerying: It allows us to retrieve data from underlying databases using LINQ queries, which are then transformed into database-specific query languages.\nModeling: EDMs (Entity Data Models) are typically created based on POCOs (Plain Old CLR Objects), which are entities with get/set properties of different types. This model is used when querying and saving entity data to the underlying database.\nChange Tracking: By using the SaveChanges method of the context, EF tracks changes to entities and their relationships and ensures the correct updates are performed on the database. Change tracking is enabled by default in EF but can be disabled by setting the AutoDetectChangesEnabled property of DbContext to false.\nSaving: Upon calling the \"SaveChanges()\" method, EF executes the INSERT, UPDATE, and DELETE commands to the database based on the changes made to entities. \"SaveChangesAsync()\" is another asynchronous method provided by EF.\nConcurrency: EF provides built-in support for Optimistic Concurrency to prevent an unknown user from overwriting data from the database.\nTransaction: EF's transaction management capabilities automate the querying and saving of data. Furthermore, you can customize the way that transactions are managed.\nCaching: First-level caching of entities is supported out of the box in the EF. Repeated queries will retrieve data from the cache rather than the database in this case.\nBuilt-in Conventions: EF conforms to the conventions of configuration programming and has a set of default settings that automatically configure the model.\nConfiguration: By using the data annotation attribute or Fluent API, we can configure the EF model and override the default conventions.\nMigrations: EF provides migration commands that are executable on the command-line interface or NuGet Package Manager Console to incrementally update the database schema to keep it in sync with the application's data model. Cross-Platform: It is lightweight, extensible, open-source, and can be used on Windows, Linux, and Mac. Cross-Platform: Querying: It allows us to retrieve data from underlying databases using LINQ queries, which are then transformed into database-specific query languages. Querying: Modeling: EDMs (Entity Data Models) are typically created based on POCOs (Plain Old CLR Objects), which are entities with get/set properties of different types. This model is used when querying and saving entity data to the underlying database. Modeling: Change Tracking: By using the SaveChanges method of the context, EF tracks changes to entities and their relationships and ensures the correct updates are performed on the database. Change tracking is enabled by default in EF but can be disabled by setting the AutoDetectChangesEnabled property of DbContext to false. Change Tracking: Saving: Upon calling the \"SaveChanges()\" method, EF executes the INSERT, UPDATE, and DELETE commands to the database based on the changes made to entities. \"SaveChangesAsync()\" is another asynchronous method provided by EF. Saving: Concurrency: EF provides built-in support for Optimistic Concurrency to prevent an unknown user from overwriting data from the database. Concurrency: Transaction: EF's transaction management capabilities automate the querying and saving of data. Furthermore, you can customize the way that transactions are managed. Transaction: Caching: First-level caching of entities is supported out of the box in the EF. Repeated queries will retrieve data from the cache rather than the database in this case. Caching: Built-in Conventions: EF conforms to the conventions of configuration programming and has a set of default settings that automatically configure the model. Built-in Conventions: Configuration: By using the data annotation attribute or Fluent API, we can configure the EF model and override the default conventions. Configuration: Migrations: EF provides migration commands that are executable on the command-line interface or NuGet Package Manager Console to incrementally update the database schema to keep it in sync with the application's data model. Migrations:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "5. What are the main components of Entity Framework Architecture?",
        "answer": "Entity Framework Architecture consists of the following components:   Entity Data Model (EDM): EDMs abstract logical or relational schema and expose conceptual schema of data with a three-layered model, i.e., Conceptual (C-Space), Mapping (C-S Space), and Storage (S - Space).\nLINQ to Entities (L2E): L2E is basically a query language generally used to write queries against the object model. The entities defined in the conceptual model are returned by L2E.\nEntity SQL (E-SQL): Similar to L2E, E-SQL is another query language (for EF6 only). The developer must however learn it separately since it is more difficult than L2E. Internally, E-SQL queries are translated or converted to data store-dependent SQL queries. EF is used for converting E-SQL queries to their respective datastore queries, such as T-SQL.\nEntity Client Data Provider: This layer's main task is to convert E-SQL or L2E queries into SQL queries that the database understands. In turn, the ADO.Net data provider sends and retrieves data from the database.\nNet Data Provider: It uses standard ADO.NET to enable interaction with the database.\nObject Service: It is a service that facilitates access to a database, and returns data for analysis when necessary. By using it, you are able to translate data coming from entity clients into entity object structures. Entity Data Model (EDM): EDMs abstract logical or relational schema and expose conceptual schema of data with a three-layered model, i.e., Conceptual (C-Space), Mapping (C-S Space), and Storage (S - Space). Entity Data Model (EDM): LINQ to Entities (L2E): L2E is basically a query language generally used to write queries against the object model. The entities defined in the conceptual model are returned by L2E. LINQ to Entities (L2E): Entity SQL (E-SQL): Similar to L2E, E-SQL is another query language (for EF6 only). The developer must however learn it separately since it is more difficult than L2E. Internally, E-SQL queries are translated or converted to data store-dependent SQL queries. EF is used for converting E-SQL queries to their respective datastore queries, such as T-SQL. Entity SQL (E-SQL): Entity Client Data Provider: This layer's main task is to convert E-SQL or L2E queries into SQL queries that the database understands. In turn, the ADO.Net data provider sends and retrieves data from the database. Entity Client Data Provider: Net Data Provider: It uses standard ADO.NET to enable interaction with the database. Net Data Provider: Object Service: It is a service that facilitates access to a database, and returns data for analysis when necessary. By using it, you are able to translate data coming from entity clients into entity object structures. Object Service:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "6. Explain different parts of the entity data model.",
        "answer": "The Entity Data Model consists of 3 core components that form the basis for Entity Framework. The three main components of EDM are as follows:   Conceptual Model: It is also referred to as the Conceptual Data Definition Language Layer (C-Space). Typically, it consists of model classes (also known as entities) and their relationships.   Your database table design will not be affected by this. It makes sure that business objects and relationships are defined in XML files.\nMapping Model: It is also referred to as the Mapping Schema Definition Language layer (C-S Space). Information about how the conceptual model is mapped to the storage model is usually included in this model. In other words, this model enables the business objects and relationships defined at the conceptual layer to be mapped to tables and relationships defined at a logical layer.\nStorage Model: It is also referred to as the Store Space Definition Language Layer (S-Space). Schematically, it represents the storage area in the backend. Therefore, the storage model is also known as a database design model that is composed of tables, keys, stored procedures, views, and related relationships. Conceptual Model: It is also referred to as the Conceptual Data Definition Language Layer (C-Space). Typically, it consists of model classes (also known as entities) and their relationships.   Your database table design will not be affected by this. It makes sure that business objects and relationships are defined in XML files. Conceptual Model: Mapping Model: It is also referred to as the Mapping Schema Definition Language layer (C-S Space). Information about how the conceptual model is mapped to the storage model is usually included in this model. In other words, this model enables the business objects and relationships defined at the conceptual layer to be mapped to tables and relationships defined at a logical layer. Mapping Model: Storage Model: It is also referred to as the Store Space Definition Language Layer (S-Space). Schematically, it represents the storage area in the backend. Therefore, the storage model is also known as a database design model that is composed of tables, keys, stored procedures, views, and related relationships. Storage Model:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "7. Explain what the .edmx file contains.",
        "answer": "First of all, a database lets you reverse engineer a model from an existing database. Entity Framework Designer is used to view and edit models stored and created in EDMX files (.edmx extensions). Using the EDMX file, you automatically generate classes that you can interact with within your application. EDMX files represent conceptual models, storage models, and their mappings. This file contains all the mapping information between SQL tables and objects. In addition, it also includes essential information required for rendering models graphically with ADO.NET Entity Data Designer. Furthermore, it is divided into three divisions, CSDL, MSL, and SSDL.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "8. What do you mean by migration? Write its type.",
        "answer": "Migration is a tool that was introduced in EF to update the database schema automatically when a model is modified without losing any data or other objects. Migrate Database To Latest Version is a new database initializer used by it. Entity Framework offers two types of migration: Automated Migration: Entity Framework 4.3 was the first to introduce automated migration so you don't have to manually migrate databases every time you alter a domain class. For example, you must also change the domain classes for each time you make a change, but with automated migration, you can simply run a command through the Package Manager Console.\nCode-based Migration: When you use a code-based migration, you can configure additional aspects of the migration, like setting the default value of a column, configuring a computed column, etc. Automated Migration: Entity Framework 4.3 was the first to introduce automated migration so you don't have to manually migrate databases every time you alter a domain class. For example, you must also change the domain classes for each time you make a change, but with automated migration, you can simply run a command through the Package Manager Console. Automated Migration: Code-based Migration: When you use a code-based migration, you can configure additional aspects of the migration, like setting the default value of a column, configuring a computed column, etc. Code-based Migration:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "9. What are different types of Entity framework approaches?",
        "answer": "Three different approaches to implement Entity Framework are as follows:   Code First Approach: The Code First approach primarily uses classes to create the model and its relations, which are then used to create a database. This way, developers can work in an object-oriented manner without considering the database structure. By following this model, developers first write POCO classes and then use these classes to create the database. Code First is the method used by most developers using Domain-Driven Design (DDD).\nModel First Approach: In contrast, the Model First approach uses ORM to build model classes and their relationships. Following the successful creation of the model classes and relationships, the physical database is created using these models.\nDatabase-First Approach: In Entity Framework, Database First approach is used to build entity models based on existing databases and reduce the amount of code required. By using this approach, domain and context classes can be created based on existing classes. Code First Approach: The Code First approach primarily uses classes to create the model and its relations, which are then used to create a database. This way, developers can work in an object-oriented manner without considering the database structure. By following this model, developers first write POCO classes and then use these classes to create the database. Code First is the method used by most developers using Domain-Driven Design (DDD). Code First Approach: Model First Approach: In contrast, the Model First approach uses ORM to build model classes and their relationships. Following the successful creation of the model classes and relationships, the physical database is created using these models. Model First Approach: Database-First Approach: In Entity Framework, Database First approach is used to build entity models based on existing databases and reduce the amount of code required. By using this approach, domain and context classes can be created based on existing classes. Database-First Approach:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "10. What do you mean by Deferred Execution in EF?",
        "answer": "Deferred Execution refers to the process of delaying the evaluation of an expression until its realized value is actually required. As a result, performance is greatly improved since unnecessary execution is avoided. Queries are deferred until the query variable or query object is iterated over a loop.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "11. What do you mean by the term navigation property in the entity framework?",
        "answer": "A foreign key relationship in the database is represented by the navigation property supported by the Entity Framework. It is possible to specify relationships between entities in a database using this property type. Relationships are defined in a way as to remain coherent in object-oriented code.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "12. What are different entity states in EF?",
        "answer": "There are five possible states where an entity can exist: Added: It is a state in which an entity exists within the context but does not exist within the database. When the user invokes the SaveChanges method, DbContext usually generates an INSERT SQL query to insert the data into the database. Upon successful completion of the SaveChanges method, the entity's state changes to unchanged.\nDeleted: This state indicates that the entity is marked for deletion has not been removed from the database. Also, it indicates the existence of the entity in the database. When the user invokes the SaveChanges method, DbContext usually generates a DELETE SQL query to delete or remove the entity from the database. Upon successful completion of the delete operation, DbContext removes the entity.\nModified: When the entity is modified, its state becomes Modified. Also, it indicates the existence of the entity in the database. When the user invokes the SaveChanges method, DbContext usually generates an UPDATE SQL query to update the entity from the database. Upon successful completion of the SaveChanges method, the entity's state changes to unchanged.\nUnchanged: Since the context retrieved the entity's property values from the database, the values have not changed. This entity is ignored by SaveChanges.\nDetached: This state indicates that the entity is not tracked by the DbContext. If an entity was created or retrieved outside the domain of the current instance of DbContext, then its entity state will be Detached. Added: It is a state in which an entity exists within the context but does not exist within the database. When the user invokes the SaveChanges method, DbContext usually generates an INSERT SQL query to insert the data into the database. Upon successful completion of the SaveChanges method, the entity's state changes to unchanged. Added: Deleted: This state indicates that the entity is marked for deletion has not been removed from the database. Also, it indicates the existence of the entity in the database. When the user invokes the SaveChanges method, DbContext usually generates a DELETE SQL query to delete or remove the entity from the database. Upon successful completion of the delete operation, DbContext removes the entity. Deleted: Modified: When the entity is modified, its state becomes Modified. Also, it indicates the existence of the entity in the database. When the user invokes the SaveChanges method, DbContext usually generates an UPDATE SQL query to update the entity from the database. Upon successful completion of the SaveChanges method, the entity's state changes to unchanged. Modified: Unchanged: Since the context retrieved the entity's property values from the database, the values have not changed. This entity is ignored by SaveChanges. Unchanged: Detached: This state indicates that the entity is not tracked by the DbContext. If an entity was created or retrieved outside the domain of the current instance of DbContext, then its entity state will be Detached. Detached: The following diagram represents the different entity states in Entity Framework:  ",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "13. Write the importance of the T4 entity in Entity Framework.",
        "answer": "In Entity Framework code generation, T4 files are crucial. EDMX XML files are read by T4 code templates, which generate C# behind code. The generated C# behind code consists only of your entity and context classes.  ",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "14. Explain CSDL, SSDL, and MSL sections in an Edmx file?",
        "answer": "CSDL: This stands for Conceptual Schema Definition Language. Basically, it's a conceptual abstraction that is exposed to the application. In this file, you will find a description of the model object.\nSSDL: This stands for Storage Schema Definition Language. In this section, we define the mapping to our RDBMS data structure.\nMSL: This stands for Mapping Schema Language. SSDL and CSDL are connected by it. It bridges the gap between the CSDL and SSDL or maps the model and the storage. CSDL: This stands for Conceptual Schema Definition Language. Basically, it's a conceptual abstraction that is exposed to the application. In this file, you will find a description of the model object. CSDL: SSDL: This stands for Storage Schema Definition Language. In this section, we define the mapping to our RDBMS data structure. SSDL: MSL: This stands for Mapping Schema Language. SSDL and CSDL are connected by it. It bridges the gap between the CSDL and SSDL or maps the model and the storage. MSL:  ",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "15. Explain the ways to increase the performance of EF.",
        "answer": "Entity Framework's performance is enhanced by following these steps: Choose the right collection for data manipulation.\nDo not put all DB objects into one entity model.\nWhen the entity is no longer required, its tracking should be disabled and altered.\nUse pre-generating Views to reduce response time for the first request.\nDon't fetch all fields unless needed.\nWhenever possible, avoid using Views and Contains.\nBind data to a grid or paging only by retrieving the number of records needed.\nOptimize and debug LINQ queries.\nWhenever possible, use compiled queries. Choose the right collection for data manipulation. Do not put all DB objects into one entity model. When the entity is no longer required, its tracking should be disabled and altered. Use pre-generating Views to reduce response time for the first request. Don't fetch all fields unless needed. Whenever possible, avoid using Views and Contains. Bind data to a grid or paging only by retrieving the number of records needed. Optimize and debug LINQ queries. Whenever possible, use compiled queries.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "16. Write some XML generation methods provided by the dataset object.",
        "answer": "DataSet objects provide the following methods for generating XML: ReadXml(): This method reads an XML document into a DataSet object.\nGetXml(): This method returns a string containing an XML document.\nWriteXml(): This method writes XML data to disk. ReadXml(): This method reads an XML document into a DataSet object. ReadXml(): GetXml(): This method returns a string containing an XML document. GetXml(): WriteXml(): This method writes XML data to disk. WriteXml():",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "17. What do you mean by the migration history table in Entity Framework?",
        "answer": "EF6's Migration's history table (__MigrationHistory) is basically a database table that is used to store data about migrations applied to a database by Code First Migrations. A table like this is created when the first migration is applied to the database. Within a given database, this table contains meta-data describing the EF Code First models' schema versions. When you used the Microsoft SQL Server database, this table was considered a system table in EF5.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "18. Explain how EF supports transactions.",
        "answer": "The SaveChanges() method in EF always wraps any operation involving inserting, updating, or deleting data into a transaction. Hence, you do not have to explicitly open the transaction scope.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "1. Write difference between LINQ and Entity Framework.",
        "answer": "LINQ Entity Framework\nIn order to operate, LINQ relies only on SQL Server Databases.  In order to operate, the entity framework relies on several databases including SQL Server, Oracle, MYSQL, DB2, etc.  \nIt generates a .dbml to maintain the relationship.   In this case, an .edmx file is generated first, then an .edmx file is maintained using three separate files- .csdl, .msl, and .ssdl. \nDataContext enables you to query data.  ObjectContext, DbContext, and EntitySQL can all be used to query data.\nComplex types are not supported.   Complex types are supported.   \nA database is not created from the model. A database can be created from the model. \nApplication is developed more quickly using SQL Server. Applications are developed more quickly using SQL Server and other databases like MYSQL, Oracle, DB2, etc. \nIt consists of a tightly coupled mechanism.  It consists of a loosely coupled mechanism.  \nOnly one-to-one mappings are allowed.  One-to-one, one-to-many & many-to-many mappings are allowed.  \nIt displays rapid development. It takes longer to develop than LINQ, but it provides more capabilities. LINQ Entity Framework\nIn order to operate, LINQ relies only on SQL Server Databases.  In order to operate, the entity framework relies on several databases including SQL Server, Oracle, MYSQL, DB2, etc.  \nIt generates a .dbml to maintain the relationship.   In this case, an .edmx file is generated first, then an .edmx file is maintained using three separate files- .csdl, .msl, and .ssdl. \nDataContext enables you to query data.  ObjectContext, DbContext, and EntitySQL can all be used to query data.\nComplex types are not supported.   Complex types are supported.   \nA database is not created from the model. A database can be created from the model. \nApplication is developed more quickly using SQL Server. Applications are developed more quickly using SQL Server and other databases like MYSQL, Oracle, DB2, etc. \nIt consists of a tightly coupled mechanism.  It consists of a loosely coupled mechanism.  \nOnly one-to-one mappings are allowed.  One-to-one, one-to-many & many-to-many mappings are allowed.  \nIt displays rapid development. It takes longer to develop than LINQ, but it provides more capabilities. LINQ Entity Framework LINQ Entity Framework LINQ Entity Framework In order to operate, LINQ relies only on SQL Server Databases.  In order to operate, the entity framework relies on several databases including SQL Server, Oracle, MYSQL, DB2, etc.  \nIt generates a .dbml to maintain the relationship.   In this case, an .edmx file is generated first, then an .edmx file is maintained using three separate files- .csdl, .msl, and .ssdl. \nDataContext enables you to query data.  ObjectContext, DbContext, and EntitySQL can all be used to query data.\nComplex types are not supported.   Complex types are supported.   \nA database is not created from the model. A database can be created from the model. \nApplication is developed more quickly using SQL Server. Applications are developed more quickly using SQL Server and other databases like MYSQL, Oracle, DB2, etc. \nIt consists of a tightly coupled mechanism.  It consists of a loosely coupled mechanism.  \nOnly one-to-one mappings are allowed.  One-to-one, one-to-many & many-to-many mappings are allowed.  \nIt displays rapid development. It takes longer to develop than LINQ, but it provides more capabilities. In order to operate, LINQ relies only on SQL Server Databases.  In order to operate, the entity framework relies on several databases including SQL Server, Oracle, MYSQL, DB2, etc. In order to operate, LINQ relies only on SQL Server Databases. In order to operate, the entity framework relies on several databases including SQL Server, Oracle, MYSQL, DB2, etc. It generates a .dbml to maintain the relationship.   In this case, an .edmx file is generated first, then an .edmx file is maintained using three separate files- .csdl, .msl, and .ssdl. It generates a .dbml to maintain the relationship. In this case, an .edmx file is generated first, then an .edmx file is maintained using three separate files- .csdl, .msl, and .ssdl. DataContext enables you to query data.  ObjectContext, DbContext, and EntitySQL can all be used to query data. DataContext enables you to query data. ObjectContext, DbContext, and EntitySQL can all be used to query data. Complex types are not supported.   Complex types are supported. Complex types are not supported. Complex types are supported. A database is not created from the model. A database can be created from the model. A database is not created from the model. A database can be created from the model. Application is developed more quickly using SQL Server. Applications are developed more quickly using SQL Server and other databases like MYSQL, Oracle, DB2, etc. Application is developed more quickly using SQL Server. Applications are developed more quickly using SQL Server and other databases like MYSQL, Oracle, DB2, etc. It consists of a tightly coupled mechanism.  It consists of a loosely coupled mechanism. It consists of a tightly coupled mechanism. It consists of a loosely coupled mechanism. Only one-to-one mappings are allowed.  One-to-one, one-to-many & many-to-many mappings are allowed. Only one-to-one mappings are allowed. One-to-one, one-to-many & many-to-many mappings are allowed. It displays rapid development. It takes longer to develop than LINQ, but it provides more capabilities. It displays rapid development. It takes longer to develop than LINQ, but it provides more capabilities.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "2. Write the steps to retrieve data from database using Entity Framework in MVC.",
        "answer": "The following steps will show you how to retrieve data from a database in MVC (Model View Controller) using Entity Framework: As a first step, we must create a new project.\nThe next step is to add an Entity Framework reference from the NuGet package manager.\nThen, a new class has to be created within the model inside the table structure.\nAfter that, we are required to add a connection string in the web.config.connection. It should be matched with the context.\nThe next step is to open the Global.asax.cs class and add the new namespace of EF. We must then initialize the database.\nYou will now need to right-click on the Controller folder and add a new controller, followed by a model reference in the section namespace.\nLast but not least, right-click on the controller's name and add the sections you want to retrieve. As a first step, we must create a new project. The next step is to add an Entity Framework reference from the NuGet package manager. Then, a new class has to be created within the model inside the table structure. After that, we are required to add a connection string in the web.config.connection. It should be matched with the context. The next step is to open the Global.asax.cs class and add the new namespace of EF. We must then initialize the database. You will now need to right-click on the Controller folder and add a new controller, followed by a model reference in the section namespace. Last but not least, right-click on the controller's name and add the sections you want to retrieve.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "3. Explain the term dbcontext and dbset.",
        "answer": "DbSet: An entity set is represented by a DbSet class that can be used for creating, reading, updating, and deleting operations on it. Those DbSet type properties, which map to database tables and views, must be included in the context class (derived from DbContext). DbSet: DbContext: It is considered an essential class in EF API that bridges the gap between an entity or domain class and the database. Communication with the database is its primary responsibility. DbContext:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "4. Difference between ADO.Net and Entity Framework.",
        "answer": "Below are the differences between Aadonet and Entity Framework: A few data layer codes are created by Ado.Net that Entity Framework doesn't create.\nEntity Framework, unlike ADO.Net, generates code for intermediate layers, data access layers, and mappings automatically. This results in a reduction in development time.\nOn a performance basis, ADO.Net is more efficient and faster than Entity Framework. A few data layer codes are created by Ado.Net that Entity Framework doesn't create. Entity Framework, unlike ADO.Net, generates code for intermediate layers, data access layers, and mappings automatically. This results in a reduction in development time. On a performance basis, ADO.Net is more efficient and faster than Entity Framework.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "5. Explain the role of Pluralize and Singularize in the entity framework.",
        "answer": "Objects in Entity Framework are primarily assigned names using Pluralize and Singularize. This feature is available when adding a .edmx file. Entity Framework automatically assigns the Singular or Plural coding conventions when using this feature. In convention names, an additional 's' is added if there is more than one record in the object.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "6. What is the difference between Dapper and Entity Framework?",
        "answer": ".NET developers are allowed to work with relational data using domain-specific objects by object-relational mappers such as Entity Framework (EF) and Dapper. Performance-wise, Dapper is the King of Micro ORMs. Dapper: A simple micro ORM, Dapper is considered a powerful system used for data access in the .NET world. As a means to address and open-source their issues, the Stack Overflow team created Dapper. Adding this NuGet library to your .NET project allows you to perform database operations. In terms of speed, it is the king of Micro ORMs and is almost as fast as using raw ADO.NET data readers.\nEntity Framework: It is a set of .NET APIs used in software development for performing data access. It is Microsoft's official tool for accessing data. Dapper: A simple micro ORM, Dapper is considered a powerful system used for data access in the .NET world. As a means to address and open-source their issues, the Stack Overflow team created Dapper. Adding this NuGet library to your .NET project allows you to perform database operations. In terms of speed, it is the king of Micro ORMs and is almost as fast as using raw ADO.NET data readers. Dapper: Entity Framework: It is a set of .NET APIs used in software development for performing data access. It is Microsoft's official tool for accessing data. Entity Framework: Microsoft's official tool Comparison Comparison According to NuGet downloads and performance, Dapper is the world's most popular Micro ORM. In contrast, Entity Framework is significantly slower than Dapper.\nIn comparison to other ORMs, such as the Entity Framework, Dapper does not generate as much SQL, but it does an excellent job mapping from database columns to CLR properties.\nSince Dapper uses RAW SQL, it can be difficult to code, especially when multiple relationships are involved, but when a lot of data is involved and performance matters, it is worth the effort.\nSince Dapper uses IDbConnection, developers can execute SQL queries to the database directly rather than put data in other objects as they do in Entity Framework. According to NuGet downloads and performance, Dapper is the world's most popular Micro ORM. In contrast, Entity Framework is significantly slower than Dapper. In comparison to other ORMs, such as the Entity Framework, Dapper does not generate as much SQL, but it does an excellent job mapping from database columns to CLR properties. Since Dapper uses RAW SQL, it can be difficult to code, especially when multiple relationships are involved, but when a lot of data is involved and performance matters, it is worth the effort. Since Dapper uses IDbConnection, developers can execute SQL queries to the database directly rather than put data in other objects as they do in Entity Framework.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "7. Explain POCO Classes in EF.",
        "answer": "POCO stands for 'Plain Old CLR Objects'. Yet, it does not mean these classes are plain or old. A POCO class is defined as a class that contains no reference to the EF Framework or the .NET Framework at all. In EF applications, Poco entities are known as available domain objects. POCO class is just like other normal .NET classes as these classes don't depend on any framework-specific base class, unlike the standard .NET class. Persistence-ignorant objects, or POCOs, support LINQ queries, which are supported by entities derived from the Entity Object itself. Both EF 6 and EF Core support POCO entities.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "8. In Entity Framework, what are the ways to use stored procedures?",
        "answer": "This figure shows how stored procedure mapping details can be used in EDMX:  ",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "9. Explain database concurrency and the way to handle it.",
        "answer": "Database concurrency in EF means that multiple users can simultaneously modify the same data in one database. Concurrency controls help safeguard data consistency in situations like these. Optimistic locking is usually used to handle database concurrency. We must first right-click on the EDMX designer and then change the concurrency mode to Fixed in order to implement locking. With this change, if there is a concurrency issue, we will receive a positive concurrency exception error.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "10. What are different types of loading available to load related entities in EF?",
        "answer": "Entity Framework offers the following types of loading: Eager Loading\nLazy Loading\nExplicit Loading Eager Loading Lazy Loading Explicit Loading",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "11. What do you mean by lazy loading, eager loading and explicit loading?",
        "answer": "Lazy Loading: This process delays the loading of related objects until they are needed. During lazy loading, only the objects needed by the user are returned, whereas all other related objects are only returned when needed.\nEager Loading: This process occurs when you query for an object and all of its related objects are returned as well. Aside from that, all related objects will load with the parent object automatically. When the Include method is used, eager loading can be achieved in EF6.\nExplicit Loading: Explicit loading occurs only when lazy loading is desired, even when lazy loading is disabled. We must explicitly call the relevant load method on the related entities to process explicit loading. When the Load method is used, explicit loading can be achieved in EF6. Lazy Loading: This process delays the loading of related objects until they are needed. During lazy loading, only the objects needed by the user are returned, whereas all other related objects are only returned when needed. Lazy Loading: Eager Loading: This process occurs when you query for an object and all of its related objects are returned as well. Aside from that, all related objects will load with the parent object automatically. When the Include method is used, eager loading can be achieved in EF6. Eager Loading: Explicit Loading: Explicit loading occurs only when lazy loading is desired, even when lazy loading is disabled. We must explicitly call the relevant load method on the related entities to process explicit loading. When the Load method is used, explicit loading can be achieved in EF6. Explicit Loading:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "12. What are the pros and cons of different types of loading?",
        "answer": "1. Lazy Loading 1. Lazy Loading Pros Pros When the relationships are not too high, use Eager Loading. So you can reduce further queries on the server by using Eager Loading.\nIf you know that related entities will be used everywhere with the main entity, use Eager Loading. When the relationships are not too high, use Eager Loading. So you can reduce further queries on the server by using Eager Loading. If you know that related entities will be used everywhere with the main entity, use Eager Loading. Cons Cons Adding the extra lines of code to implement lazy load makes the code more complicated.\nIt can affect a website's search engine ranking sometimes because the unloaded content is not properly indexed. Adding the extra lines of code to implement lazy load makes the code more complicated. It can affect a website's search engine ranking sometimes because the unloaded content is not properly indexed. 2. Eager Loading 2. Eager Loading Pros Pros Upon executing the code, the system initializes or loads the resource.\nAdditionally, related entities that are referenced by a resource must be pre-loaded.\nIt is advantageous when resources need to be loaded in the background.\nIt saves you time by avoiding the need to execute extra SQL queries. Upon executing the code, the system initializes or loads the resource. Additionally, related entities that are referenced by a resource must be pre-loaded. It is advantageous when resources need to be loaded in the background. It saves you time by avoiding the need to execute extra SQL queries. Cons Cons Since everything must be loaded to begin running, starting the application takes a longer time. Since everything must be loaded to begin running, starting the application takes a longer time. Choosing the right tool Choosing the right tool When you know you will use related entities with your main entity everywhere, use Eager Loading.\nYou should use Lazy Loading whenever you have one-to-many collections.\nUse lazy loading only if you are sure you won't need related entities right away.\nWhen you are unsure about whether or not an entity will be used, use explicit loading after you have turned off Lazy Loading. When you know you will use related entities with your main entity everywhere, use Eager Loading. You should use Lazy Loading whenever you have one-to-many collections. Use lazy loading only if you are sure you won't need related entities right away. When you are unsure about whether or not an entity will be used, use explicit loading after you have turned off Lazy Loading.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "13. Write different types of inheritance supported by Entity Framework.",
        "answer": "In Entity Framework, inheritance is primarily divided into three types: Table per Hierarchy (TPH): The TPH inheritance representation shows one table per inheritance hierarchy class. A discriminator column also aids in distinguishing between inheritance classes. This is Entity Framework's default inheritance mapping technique.\nTable per Type (TPT): In this inheritance method, each domain class has its own table.\nTable per Concrete Class (TPC): TPC demonstrates a single table per concrete class, but does not include the abstract class. Because of this, if an abstract class is inherited by many concrete classes, then the tables in all those concrete classes will have the same properties as that of an abstract class. Table per Hierarchy (TPH): The TPH inheritance representation shows one table per inheritance hierarchy class. A discriminator column also aids in distinguishing between inheritance classes. This is Entity Framework's default inheritance mapping technique. Table per Hierarchy (TPH): Table per Type (TPT): In this inheritance method, each domain class has its own table. Table per Type (TPT): Table per Concrete Class (TPC): TPC demonstrates a single table per concrete class, but does not include the abstract class. Because of this, if an abstract class is inherited by many concrete classes, then the tables in all those concrete classes will have the same properties as that of an abstract class. Table per Concrete Class (TPC):",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "14. Explain Complex Type in Entity Framework.",
        "answer": "Complex types are defined as the non-scalar properties of entity types that assist in organizing scalar properties within entities. In addition to scalar properties, complex types may also have other complex type properties. Instances of complex types are complex objects.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "15. What do you mean by Micro ORM?",
        "answer": "Rather than creating database schemas, modifying database schemas, tracking changes, etc., Micro ORMs focus on working with database tables. EF 6.x and EF Core provide a full set of capabilities and features, making them ORMs.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "16. Explain EF Data access Architecture.",
        "answer": "There are two types of Data Access Architecture supported by the ADO.NET Framework: Disconnected data access: Disconnected data access is possible with the Data Adapter object. Datasets work independently of databases, and the data can be edited.\nConnected data access: A Data Reader object of a Data Provider allows you to access linked data. Data can be accessed quickly, but editing is not permitted. Disconnected data access: Disconnected data access is possible with the Data Adapter object. Datasets work independently of databases, and the data can be edited. Disconnected data access: Connected data access: A Data Reader object of a Data Provider allows you to access linked data. Data can be accessed quickly, but editing is not permitted. Connected data access:",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "17. What do you mean by SQL injection attack?",
        "answer": "SQL injection is a method that hackers use to access sensitive information from an organization's database. This application-layer attack is the result of inappropriate coding in our applications, allowing hackers to inject SQL statements into your SQL code. The most common cause of SQL Injection is that user input fields allow SQL statements to pass through and directly query the database. ADO.NET Data Services queries are commonly affected by SQL Injection issues.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "18. What is the best way to handle SQL injection attacks in Entity Framework?",
        "answer": "The injection-proof nature of Entity Framework lies in the fact that it generates parameterized SQL commands that help prevent our database from SQL injections. By inserting some malicious inputs into queries and parameter names, one can generate a SQL injection attack in Entity SQL syntax. It is best to never combine user inputs with Entity SQL commands text to prevent or avoid this problem.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "19. Explain the ObjectSet in EF.",
        "answer": "ObjectSet is generally considered as a specific type of data set that is commonly used to read, update, create, and remove operations from existing entities. Only the ObjectContext instance can be used to create it. No Entity SQL method is supported by it.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "20. Write the namespace that is used to include .NET Data provider for SQL server in .NET code.",
        "answer": "NET Data Provider for SQL Server is included in .NET code by using the namespace System.Data.SqlClient.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "21. Explain EDM and write the process to create it.",
        "answer": "In Entity Framework, EDM refers to the 'Entity Data Model'. It is considered as an entity-relationship prototype that assigns some basic prototypes for the data using various modeling procedures. Moreover, it is defined as a set of principles pertaining to the formation of data, regardless of how it is collected. Shortly, it's just a simple link or connection created between the database and the prototype. The steps for creating an Entity Data Model are as follows: Entity Data Model Right-click on a project in the Solution Explorer.\nSelect the Add>New Item option from the menu.\nSelect the ADO.Net Entity Data Model arrangement or template.\nPlease enter a name and click the 'Add' button. Right-click on a project in the Solution Explorer. Select the Add>New Item option from the menu. Select the ADO.Net Entity Data Model arrangement or template. Please enter a name and click the 'Add' button.",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "22. What do you mean by DbEntityEntry Class in EF?",
        "answer": "An important class, DbEntityEntry helps you retrieve a variety of information about an entity. DbContext offers the Entry method for retrieving an instance of DBEntityEntry of a specific entity. Example: Example: DbEntityEntry studentEntry = dbcontext.Entry(entity); DbEntityEntry studentEntry = dbcontext.Entry(entity); You can access the entity state, as well as the current and original values of all properties of an entity using the DbEntityEntry. EntityState can be set using the DbEntityEntry, as shown below. context.Entry(student).State = System.Data.Entity.EntityState.Modified; context.Entry(student).State = System.Data.Entity.EntityState.Modified; Conclusion: With .NET Framework 3.5, Microsoft introduced Entity Framework in 2008. Since then, the company has released a number of Entity Framework versions. EF 6 and EF Core are the two latest versions of Entity Framework. With Entity Framework, .NET developers can work with a database using .NET objects. By doing this, the traditional method of accessing data through code is eliminated. Basically, it allows you to read and write data from a database. We have compiled a list of the top Entity Framework interview questions to assist freshers and experienced developers who are seeking new career opportunities and skills that require Entity Framework knowledge and skills. .NET developers",
        "reference": "interviewbit.com",
        "role": "entity-framework"
    },
    {
        "question": "1) What is meant by the Entity Framework?",
        "answer": "An Entity Framework (EF) is an open-source ORM (Object-Relational Mapper) from Microsoft. It allows developers to work with .NET applications and other domain-specific objects. It helps streamline mapping between different objects within the software by providing tables and columns.\nA framework uses objects of domain-specific classes and also provides an option to store and access data in the database automatically. This concept is derived from MVC. However, the Entity framework does not focus on the original database columns and tables used to store data. This makes it easier to operate an abstraction of a higher level while creating new applications or maintaining the existing ones.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "2) Why should we use the Entity Framework?",
        "answer": "It is a kind of a problematic task when it comes to writing and managing ADO.NET codes. Therefore, Microsoft introduced the Entity Framework to make this tedious task more manageable. Entity Framework reduces a significant amount of code-based tasks by providing relational data in the form of domain-specific objects.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "NET EF?",
        "answer": "ADO.NET Entity Framework is an ORM framework that allows us to work with different relational databases, such as Oracle, MYSQL, SQL Server, DB2, etc. It enables us to work with the data either as objects or entities.\nApart from this, ADO.NET also helps create senior abstract object model on the top of ADO.NET components. This eventually enables us to use advanced level domain objects, such as customers, suppliers, etc.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "NET from Entity Framework?",
        "answer": "We can differentiate ADO.NET from Entity framework using the following table:\nADO.NET Entity Framework\nADO.NET is fast. Entity Framework is comparatively slower.\nIt creates several data layer codes. It does not create any data layer codes.\nIt does not create codes for the data access layers, intermediate layers, and mapping codes by itself. It automatically creates codes for the data access layers, intermediate layers, and mapping codes. This eventually helps developers cut down the development of work and time.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "5) What are the main advantages and disadvantages of the Entity Framework?",
        "answer": "Advantages:\nADVERTISEMENT\nIt provides a wide range of prototypes that helps write object-oriented codes.\nIt includes auto migration support that helps configure or manage a database easily and quickly.\nIt provides many alternate commands that help shorten codes and make a coding job a lot easier.\nDisadvantages:\nIt is considered a slower form of ORM.\nIf a user does not use raw SQL codes, things might become difficult.\nIt directs the shape of the entire model when it comes to difficult projects. Additionally, cleaning a model is not possible without an ORM technique.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "The following are the main components of the Entity Framework Architecture:\nEntity Data Model (EDM): It consists of the three parts, such as storage model, conceptual model, and mapping.\nEntity SQL: It is an alternate query language used in Entity Frameworks along with L2E. However, L2E is comparatively more straightforward.\nLINQ to Entities (L2E): It is a query language that helps write queries against the object, which further helps to retrieve the entities based on the definitions specifies in the conceptual model.\nEntity Client Data Provider: It is defined as the layer that helps convert the L2E queries to SQL queries to be easily understood by the database. Additionally, it can interact with the ADO.NET data provider to transfer or retrieve data from different databases.\nNet Data Provider: It is another layer that helps interact with the database by using standard ADO.NET.\nObject Service: It is an entry point into the database used to access and send back the data when needed. It helps convert the data coming from an entity client data provider into an entity object structure.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "7) What are the primary functions of the Entity Framework?",
        "answer": "The following are the primary functions of EF:\nIt helps map domain classes to the database schema translates.\nIt keeps tracks of changes in the entities.\nIt helps execute LINQ queries to SQL.\nIt stores the changes stats to the database.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "Entity Framework contains a migration tool that automatically helps users update the entire database whenever there is a change in the model. The tool updates the database without losing the stored data or any database objects.\nThere are mainly two types of migration in Entity Framework:\nAutomated Migration\nCode-based Migration",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "9) What are the processes used to load related entities in the Entity Framework?",
        "answer": "We can use any of the following processes to load related entities in the Entity Framework:\nLazy Loading: This process delays the loading of related objects until there is a requirement of them. Lazy loading only returns objects needed by the user, and all other related objects are only returned when required in the process.\nEager Loading: This process mainly takes place when we query for an object. Eager loading returns all the related objects. Additionally, all the related objects are automatically loaded with the parent object.\n\nExplicit Loading: This process only occurs when we want to use lazy loading, even when we have already disabled lazy loading. To process explicit loading, we are required to call the relevant load method on the related entities explicitly.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "10) What are the different types of inheritance supported in Entity Framework?",
        "answer": "There are mainly three types of inheritance supported in Entity Framework, such as:\nTable per Hierarchy (TPH): This type of inheritance depicts a single table for the entire inheritance hierarchy class. Besides, the table consists of a discriminator column that helps distinguish different inheritance classes. It is the default inheritance mapping technique in Entity Framework.\nTable per Type (TPT): This type of inheritance depicts a separate or specific table for all and each domain class.\nTable per Concrete Class (TPC): This type of inheritance depicts a single table for a single concrete class, but it does not include the abstract class. Therefore, if an abstract class is inherited in various concrete classes, then every concrete class table will have the same properties as the abstract class.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "11) What are the primary parts of the Entity Data Model?",
        "answer": "There are mainly three parts of the Entity Data Model, such as:\nStorage Model\nConceptual Model\nMapping",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "12) What is meant by a model in context to Entity Framework?",
        "answer": "A model is nothing but a class mainly used to represent the data. In context to EF, a model represents the data from a table inside the existing database.\nExample: The following codes display the basic customer model:\npublic class Customer  \n{  \n  public int ID { get; set; }  \n  public string Name { get; set; }  \n  public DateTime JoinDate { get; set; }  \n}",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "13) How will you differentiate LINQ from Entity Framework?",
        "answer": "We can differentiate LINQ from Entity Framework with the help of the following table:\nLINQ Entity Framework\nIt only operates with the help of the SQL Server Database. It has various databases, such as SQL Server, MYSQL, Oracle, DB2, etc.\nIt supports one to one mapping between entity classes and the relational tables. It supports one to one, one to many, and many to many mapping types between the entity classes and the relational tables.\nIt maintains a relation by creating a .dbml file. It first creates the .edmx file. After that, it maintains a relation using three types of files: .ssdl, .msl and .csdl.\nIt does not support complex types. It supports complex types.\nIt cannot generate a database by using the model. It can generate a database using the model.\nIt enables users to query the data with DataContext. It allows users to query the data with DbContext, ObjectContext, and EntitySQL.\nIt contains a tightly coupled mechanism. It contains a loosely coupled mechanism.\nIt is mainly used for faster application developments with SQL Server. It is primarily used for faster application developments using SQL Server and other databases like MYSQL, Oracle, DB2, etc.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "14) How will you define the Conceptual Model?",
        "answer": "The conceptual model is usually defined as the model class that consists of relationships. This type of model remains independent of the database structure.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "15) How will you explain the Storage Model?",
        "answer": "The storage model is usually explained as the database design model that consists of database tables, stored procs, views, and keys with relationships.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "EDM in EF is a short form of 'Entity Data Model'. It is defined as the entity-relationship prototype that helps assign basic prototypes for the data utilizing various modeling procedures. Additionally, it is referred to as a collection of core principles that define data that disregards its aggregated form. In short, it is nothing but a simple connection formed between the database and the prototype.\nThe following are the steps that help create an Entity Data Model:\nFirst, we need to right-click on the project's name given in the solution explorer tab.\nNext, we are required to click on 'Add a new item from the menu'.\nAfter that, we are required to select the ADO.NET Entity Data Model arrangement or any template.\nFinally, we must specify a name for the model and click on the 'ADD' button.\nThat is how we can create EDM in Entity Framework.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "The following are the steps required to retrieve data from the database in MVC with the help of Entity Framework:\nFirst of all, we need to create a new project.\nNext, we need to add Entity Framework reference from the NuGet package manager.\nThen, we need to create a new class within the model inside the table structure.\nAfter that, we are required to add a connection string in the web.config.connection. It should be matched with the context.\nNext, we need to open the Global.asax.cs class, and implement the new namespace of EF. Then, we need to initialize the database.\nWe are now required to right-click on the Controller folder and add a new controller along with the model reference in section namespace.\nFinally, we need to right-click on the Controller name and add the sections we want to retrieve.\nThat is how we can view or retrieve the data from the database in MVC using EF.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "18) What is meant by dbcontext and dbset?",
        "answer": "DbContext is referred to as a class in the Entity Framework API that helps create a communication between the database and the domain/entity class. In simple terms, it is a class mainly used for communicating with the database.\nDbSet is also referred to as a class that helps represent an entity set for different operations, such as creating, updating, reading, and deleting. The context class in DbContext must include the DbSet type properties for all such entities that help join database tables and views.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "19) How will you define POCO classes concerning the Entity Framework?",
        "answer": "The term POCO is a short form of 'Plain Old CLR Objects'. However, it does not mean that the classes used here are plain or old. POCO classes are usually defined as the classes that do not include any reference specific to the EF or .NET framework. The POCO entities are referred to as the available domain objects in the Entity Framework application.\nUnlike standard .NET class, POCO class of any object is independent of a framework-specific base class. POCO classes support various LINQ queries that are supported by the derived entities of the Entity Object.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "20) What are the different types of approaches used in Entity Framework?",
        "answer": "There are mainly three types of approaches used in Entity Framework, such as:\nModel First Approach\nCode First Approach\nDatabase First Approach",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "Code First Approach: In Entity Framework, the Code First approach is mainly used to create a model and its relationships using classes, which further help create a database. This enables developers to work in an object-oriented manner without thinking about the structure of the database. In this approach, the developers first write POCO classes and then create the database with the help of these POCO classes. Most developers following Domain-Driven Design (DDD) technique use the Code First approach.\nAdvantages of Code First Approach:\nIt allows developers to decide the database structure according to business objects, making it more beneficial for smaller applications.\nIt enables developers to decide which classes should be serialized. It also allows us to specify the collection to eager load.\nModel First Approach: On the other side, the Model First approach is used to create model classes and their relationships using ORM. Once the model classes and relationships are created successfully, the physical database is created with the help of these models.\nAdvantages of Model First Approach:\nIt offers flexibility for designing the Entity Models separately and provides options to improve them in further stages.\nIt does not use many databases because we can create model classes by drawing them using the EDMX designer.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "In terms of the Entity Framework, the Database First approach is the method of generating an entity model from the available database. The primary motive of this approach is to lower the number of codes to be written. This approach mainly helps create domain and context classes based on the existing classes.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "23) Which, according to you, is the best approach in the Entity Framework?",
        "answer": "There is no particular approach that can be referred to as the best approach in Entity Framework. The selection of the development approach primarily depends on the project requirements and the project's types. If there is the database's existence, then it is good to use the Database First approach. If there is no database and the model classes, then the Model First approach is the best selection. If there is the availability of the domain classes, the Code First approach is the most suitable choice.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "In the context of Entity Framework, a .edmx file is a simple XML file that may contain storage models, conceptual models, and the mapping between them. It contains all the mapping information of how object maps with SQL tables. Besides, it can include information required by ADO.NET Entity Data Designer to render a model graphically.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "25) What is meant by database concurrency and how to handle it?",
        "answer": "EF's database concurrency is defined as the scenario when multiple users access and modify the same data in the same database simultaneously. The systems that protect the consistency of data in such situations are known as concurrency controls.\nThe database concurrency is usually handled by implementing optimistic locking. To implement the locking, we must first right-click on the EDMX designer and then set the concurrency mode to Fixed. After making this change, we will get a positive concurrency exception error if there is a concurrency issue.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "26) What are the different types of properties supported in Entity Framework?",
        "answer": "There are mainly three types of properties supported in Entity Framework, such as:\nNavigational Property\nComplex Property\nScalar Property",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "27) How will you define Mapping in Entity Framework?",
        "answer": "The mapping in Entity Framework is defined as the information that explains how the conceptual models are mapped to the storage models.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "28) What do you understand by LINQ to Entities?",
        "answer": "LINQ to Entities (L2E) is defined as one of the popular query languages in Entity Framework. L2E mainly helps write queries against the objects to retrieve entities based on the conceptual model's definitions.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "29) What do you understand by the Entity SQL?",
        "answer": "Entity SQL is an alternate query language that is similar to a LINQ to Entities. However, it is more complicated than LINQ to Entities. Developers who want to use this language will have to learn it separately.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "30) What is the role of Pluralize and Singularize in Entity Framework?",
        "answer": "In Entity Framework, Pluralize and Singularize are primarily responsible for assigning meaningful naming conventions to objects. We can access this feature while adding a .edmx file. While using this feature, the Entity Framework will assign to Singular or Plural coding conventions. An extra 's' is added while giving convention names if there is more than one record within the object.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "31) What are the methods used for executing plain SQL in Entity Framework?",
        "answer": "The following are the methods used for executing plain SQL in Entity Framework:\nSqlQuery()\nDatabase.SqlQuery()\nDatabase.ExecuteSqlCommand()",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "32) What do you understand by the SQL injection attack?",
        "answer": "SQL injection attacks involve attackers stealing confidential information from an organization's database. This type of attack is usually done by adding SQL commands to the existing applications' coding based on SQL statements. This is an application-layer attack, meaning front-end attack, as attackers use and modify existing code, which is improperly coded.\nSQL injection attack is usually inserted using the fields that are available for user input. It occurs as these fields allow SQL statements to be pass through it and query the database directly. The SQL injection problem is a common problem with ADO.NET data service queries. Besides, Entity Framework is an injection safe because it creates parameterized SQL commands every time to secure the database from SQL injection. Also, the developers should never combine user inputs with Entity SQL command text. This will add extra layers of security.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "In Entity Framework, the navigation property is used to represent a foreign key relationship in the database. This type of property allows users to assign specific relationships between the entities within the database. A relationship is defined in such a way that they remain coherent in the object-oriented language.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "34) What do you know about ComplexType in Entity Framework?",
        "answer": "In Entity Framework, ComplexType is a non-scalar property of entity types. This type of property helps users to assign scalar relationships between entities.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "",
        "answer": "The O/RMs listed below can be used with .NET based applications:\nEntity Framework 6.x\nEntity Framework Core\nN Hibernate\nDapper",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "36) How will you explain Micro O/RMs?",
        "answer": "A Micro ORM is designed to focus on the essential task of working with database tables rather than creating database schemas, modifying database schemas, tracking changes, etc. Entity Framework 6.x and Entity Framework core are called O/RMs because they provide a complete set of features and functionalities.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "37) What is meant by a Dapper?",
        "answer": "Dapper is a simple micro ORM that helps map the native query's output to a domain or any c# class. It is a powerful system used for data access in the .NET world. Dapper was developed by the StackOverflow team and released as an open-source project. It consists of a NuGet library that can be easily inserted into any.NET project based on database operations.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "38) What can we do to improve the performance of the Entity Framework?",
        "answer": "We can use the following ways to improve the performance of the Entity Framework:\nWe can use compiled queries whenever required.\nWe must avoid the use of Views and Contains.\nWe can disable and alter tracking for the entity when it is not needed.\nWe can Debug and Optimize the LINQ query.\nIf not obligatory, we must try to evade fetching all the fields.\nWe should retrieve only the desired number of records when binding data to the grid.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "39) What is meant by the Object Set in Entity Framework?",
        "answer": "Object set is a specific type of entity set that can be used to read, update, create, and remove operations from any existing entity. It can only be created by using Object Context instance. It does not support any kind of Entity SQL method.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    },
    {
        "question": "40) What are the different Entity states present in Entity Framework?",
        "answer": "Each entity contains a specific state throughout the lifecycle. Various states are defined by an enum (known as EntityState), with a particular value next to it, such as added, deleted, modified, detached, or unchanged.",
        "reference": "javatpoint.com",
        "role": "entity-framework"
    }
]