[
    {
        "question": "What is the advantage of using Macros?",
        "answer": "A VBA macro is a set of instructions (or code) stored in the Visual Basic module in a VBA Editor. The VBA Macros are written in a module. To insert a module go the VBA editor and click on Insert ->Module\nBy running VBA macro, the excel users can automate common repetitive tasks daily weekly. Therefore using macros can save your time, improve productivity, and deliver on time to clients.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "2) Define the basic object model of Excel?",
        "answer": "Following is the basic Object model of Excel.\nClick on Application -> Workbooks -> Worksheets -> Range / Chart",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "3) What is the quickest way to open the VBA editor screen?",
        "answer": "The easy and fastest way to go to the Visual Basic editor window is by using the keyboard shortcut i.e., 'Alt + F11'",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "4) What do you understand by the term 'Option Explicit'?",
        "answer": "Option Explicit is used in VBA to force the variables to be declared before using the variable. It helps the VBA developers to dodge the type errors and create a bug free code.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "5) What are the types of core Modules present in Visual Basic Editor?",
        "answer": "There are three different modules available in VBE:\nClass Module: These are default modules commonly used to write functions.\nUserForms: They help to design and develop GUI applications.\nClass Modules: They helps the user to create new objects, methos, procedures and events.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "6) Is it possible to run the macros automatically while opening a worksheet in Excel VBA? IS yes, how is it?",
        "answer": "Yes, by using the VBA macros we can automatically open a worksheet in Excel. For execute the same we will use the Workbook_Open() Event to run macros.\nFollowing are the steps to run Workbook_Open() Event in VBA Excel:\nClick Alt+F11 to open the VBA Editor.\nGo to the Project Explorer and select the 'ThisWorkbook'.\nYou will see two drop down lists in the right panel of the pane.\nFrom the first drop down select the 'Workbook' option and from the second drop down choose the 'Open' option.\nIn the editor window, you will see the below given code.\nPrivate Sub Workbok_Open_Example()  \n     'Your Statements.....  \nEnd Sub  \nWrite the VBA macros in-between the above lines to run the macros automatically while opening a worksheet in Excel VBA.\nSave and close the workbook\nReopen the same workbook to test the created macro.\nExample\nPrivate Sub Workbook_Open_Example()  \n    MsgBox \"The workbook has Opened automatically.\", vbInformation  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "7) In VBA, how many scope variables are there?",
        "answer": "In VBA editor, there exists different levels of scope variables. Though we can define the variable in three levels that are as follows:\nADVERTISEMENT\nLocal Level: The Local Level variables are defined with a DIM statement in a procedure or function.\nModule Level: The Module level scope variables are defined with the DIM keywords on top of a VBA code. The special thing about these variables is that they can be accessed in the entire module.\nGlobal Level: The Global Level variables are defined using a Public keyword at the top of your VBA programming module. They can be accessed anywhere in the entire VBA project.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "?",
        "answer": "We can create object variable and late it can be used in the entire macro.\nFollowing is the VBA macro to create object for workbook, worksheet, etc.\nSub Create_Obj_Wrkbok()  \n    'creating a workbook object  \nDim Wrbk As Workbook  \n'Assigning  the Active Workbook to 'Wrbk' object  \nSet Wrbk = ActiveWorkbook  \n    'Using MsgBox to display the first worksheet name  \nMsgBox Wrbk.Sheets(1).Name  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "9) What is an Array? How will you create or define array in VBA?",
        "answer": "An array is a set of variables that contains data of similar data type. They are used to refer to a specific array value by using array name and the index number.\nWe can create and define size of an array variable in the following way.\nSyntax\nDim NameOfArray (IndexNumber) As Datatype  \nExample:\nDim arrVal(5) As Integer  \nIn the above procedure 'arrVal' is an array name and '5' represents the array size.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "10) How do I stop recording macro?",
        "answer": "Below given are the steps to stop recording macro in your active Excel workbook:\nStep 1: Open your Excel workbook. Click on the 'Developer tab' located in the main ribbon menu of Excel window.\n\nStep 2: Click on 'Stop Recording' button to stop from the recording your active macro.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "11) How do I delete macros from the workbook?",
        "answer": "Please find the following steps to delete macros from the workbook.\nStep 1: Open your Excel workbook. Click on the 'Developer tab' located in the main ribbon menu of Excel window.\nStep 2: Next, click on the Macros button to check all the existing macros present in your Excel workbook.\nStep 3: It will open the Macro dialog box on the screen.\nStep 4: Select the macro name which you want to delete, and then click on 'Delete' command button.\n\nStep 5: The confirmation dialog box will appear. Click on Ok to confirm the delete of the selected macro.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "12) What are the different ways to speed up the VBA macro?",
        "answer": "This is one of the most common VBA questions frequently asked in the interview round. By asking it, the interviewer wants to understand your real experience in VBA coding and how to take care of coding techniques.\nWhile writing VBA code, we have several best practices to follow. We can speed up the execution of VBA macros by following the given techniques.\nDeclare your variables without using the 'Variant' Data Type. As it takes more space.\nAlways remember to turn Off the 'Screen Updating'\nTurn Off the automatic calculations\nAlways remember to disable the Events\nUse With Statement\nUse the vbNullString instead of \"\".\nRelease all the memory objects at the end of the procedure.",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "13) What are the different built-in Class modules available in VBA:",
        "answer": "The different built-in classes are as follows:\nWorkbook modules\nWorksheet modules",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to create a table in the required database:\n'Create table in the required database using VBA  \nSub Create_MSAcsess_Table()  \n       Dim DataBse As Database  \n    'Open your required Database  \n    Set DataBse= OpenDatabase(\"C:\\Users\\Reema \\Documents\\AccessDatabase.accdb\")   \n    ' Create a table with three employee fields.  \n    DataBse.Execute \"CREATE TABLE MyTable \" _  \n        & \"(EmpName CHAR, EmpNumber INT, EmpAddress CHAR);\"  \n    DataBse.Close  \n  End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to quickly insert records in the MS Access database table:\n'Add or Insert records to the access database table using VBA  \nSub Insert_Records_Table()  \n       Dim DataBse As Database  \n    Dim SQLQry As String  \n    'Open the required Access Database  \n       Set DataBse= OpenDatabase(\"C:\\Users\\Reema \\Documents\\AccessDatabase.accdb\")   \n    'Write the SQL query to insert 3 fields in table  \n    SQLQry = \"INSERT INTO MyTable values('Reema',5678,'India');\"  \n    ' Adding records in the database table  \n    DoCmd.RunSQL SQLQry  \n    DataBse.Close  \n   End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to update an existing record in the Ms Access database table:\n'Updating the existing records in the Ms Access database table   \nSub Update_Existing_Records_Tble()  \n       Dim DataBse As Database  \n    Dim sSQL As String  \n    'Open your Access Database  \n Set DataBse= OpenDatabase(\"C:\\Users\\Reema \\Documents\\AccessDatabase.accdb\")    \n    'SQL query to update the existing field in the table  \n    sSQL = \"Update MyTable set EmpAddress='U.K' where EmpNumber =5678;\"  \n    ' Updating the records in the existing table  \n    DoCmd.RunSQL strSQL  \n    DataBse.Close  \n   End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to delete records present in the Ms Access database:\n'Delete a record from the Ms Access database table  \nSub Delete_Records_DatabaseTable()  \n       Dim DataBse As Database  \n    Dim sSQL As String  \n    'Open the Access Database  \n    Set DataBse= OpenDatabase(\"C:\\Users\\Reema \\Documents\\AccessDatabase.accdb\")    \n    'SQL query to update the existing field in the table  \n    stQL = \"Delete from MyTable where EmpNumber=5678;\"  \n    ' Deleting the record from the table  \n    DoCmd.RunSQL sSQL  \n    DataBse.Close  \n   End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to export the Ms Access Table to Excel.\n'Export the access table to MS Excel  \nSub Export_Access_Table_Excel()  \n          'Declaring the Variables  \n    Dim sTble As String  \n    Dim sWorkbook As String  \n          'Change the target file path  \n    strWorkbook = \"E:/MyTable.xlsx\"  \n          'Assigning the source table name  \n    sTble = \"MyTable\"  \n          'Exporting the table to Excel  \n    DoCmd.TransferSpreadsheet transfertype:=acExport, spreadsheettype:=acSpreadsheetTypeExcel12, _  \n    tablename:=sTble, FileName:=strWorkbook, hasfieldnames:=True  \n         End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro code to change the existing table name in the Ms Access Database:\n'Changing the name of existing table in access database  \nSub Change_Existing_Table_Name()  \n          'Declaring the variables  \n    Dim stOTble As String  \n    Dim stNTble As String  \n    'Specifying the Old Table name  \n    stOTble = \"MyTable\"  \n    'Specifying the New Table Name  \n    stNTble = \"EmpTable\"  \n    'Export table to Excel  \n    DoCmd.Rename stNTble, acTable, stOTble  \n            End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "1) Can you open a new document in word using VBA procedure?",
        "answer": "Below given is the VBA macro code to open a new document in word:\n'Creating a new word document   \nSub Create_Word_Document()        \nDocuments.Add  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Below given is the VBA macro to quickly open a new work document from the existing word document:\n'Creating a new word document from the existing word document  \nSub Create_New_Word_Doc()  \n    Documents.Add Template:=\"E:/Word.doc\", NewTemplate:=True  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Below given is the VBA macro to create an existing word document as a read only document:\n'Creating an Existing Word Document as Read Only Document  \nSub Create_Work_Doc_As_ReadOnly()  \n    Documents.Open FileName:=\"E:/Word.doc\", ReadOnly:=True  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Below given is the VBA macro to SaveAs a word document if already not saved:\n'VBA macro to SaveAs Word Document  \nSub SaveAs_Word_Doc()  \n    ActiveDocument.SaveAs (\"E:/Word.doc\")  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Below given is the VBA snippet to quickly select the current line in a Ms word document:\n'Selecting the current line in a Ms word document  \nSub Select_CurrentLine_Word()  \n    Selection.HomeKey Unit:=wrdLine  \n    Selection.EndKey Unit:=wrdLine, Extend:=wrdExtend  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Below given is the VBA snippet to quickly select the entire Ms word document:\n'Selecting the current line in a Ms word document  \nSub Select_Entire _Word_Doc()  \nSelection.WholeStory  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to quickly change the font size of the third paragraph of your word document file.\n'Changing the font size of third paragraph in word document  \nSub Paragraph_Font_Size_Word ()  \n     ActiveDocument.Paragraphs(3).Range.Font.Size = 13  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "1) Write the VBA code to sent an email using Outlook?",
        "answer": "Below given is the VBA code to send an email using Outlook:\n'Sending an email using Microsoft Outlook  \nSub VBA_Send_Email()  \n          'Declaring the objects  \n    Dim OutApp As New Outlook.Application  \n    Dim outMsg As MailItem  \n        'Create the application objects  \n    Set OutApp= New Outlook.Application  \n    Set outMsg= OLApp.CreateItem(olMailItem)     \n     'Fill the email fields  \n    With outMsg  \n        .To = \"reemapanda18@gmail.com\"  \n        .Subject = \"VBA Test Email\"  \n        .Body = \"Hello VBA. Test Verified.\"  \n           .Send  \n    End With  \n         Set objMail = Nothing  \n    Set objOL = Nothing  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to quickly add an attachment to an email using Microsoft Outlook.\n'Inserting an attachment to an email using Microsoft Outlook  \nSub Insert_Attachment_Email ()  \n              'Variable Declaration  \n    Dim oMsg As Outlook.MailItem  \n    Dim oAttach As Outlook.Attachments  \n          'Create the Objects  \n    Set oMsg = Application.CreateItem(olMailItem)  \n    Set oAttach = oMsg.Attachments  \n          'Add the attachment from the file  \n    oAttach.Add \"E:/Data.doc\", olByValue, 1, \"Data\"  \n    oMsg.Display  \n     End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA snippet to add attachment and send an email simultaneously using Ms Outlook.\n'Add attachment and send an email using Microsoft Outlook  \nSub Send_Outlook_Email_With_Attachment()  \n              'Declaring the variables  \n    Dim oMsg As Outlook.MailItem  \n    Dim oAttach As Outlook.Attachments  \n    'Create the Objects  \n    Set oMsg = Application.CreateItem(olMailItem)  \n    Set oAttach = oMsg.Attachments  \n    'Add the attachment  \n    oAttach.Add \"E:/data.doc\", olByValue, 1, \"data\"  \n          'Add the message fields  \n    With outMsg  \n        .To = \"reemasharma@javatpoint.com\"  \n        .Subject = \"Test Attachment Email\"  \n        .Body = \"Type your Body here.\"  \n        .Send  \n    End With  \n      End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "4) Can we also create a Task in Ms Outlook using VBA macro?",
        "answer": "Yes, we can create a Task in Ms Outlook using VBA macros. Following is the VBA snippet to do so.\n'Create a Task in Outlook  \nSub Create_Task()  \n          'Variable Declaration  \n    Dim Task As TaskItem  \n          'Create object  \n    Set myTask = Application.CreateItem(ItemType:=olTaskItem)  \n      End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Yes, VBA can also automate the various PowerPoint tasks. Following is the VBA snippet to create a new PowerPoint Presentation:\n'Creating a new PowerPoint Presentation  \nSub New_PPT_Presentation()  \n    Presentations.Add  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA snippet to add a new slide in a PowerPoint Presentation:\nSub Add_New_PPT_Slide_Example1()  \n    With Presentations.Add  \n    .Slides.Add Index:=1, Layout:=ppLayoutTitle  \n    End With  \nEnd Sub  \n'OR\nSub Add_New_PPT_Slide_Example2()  \n    With Presentations.Add  \n    .Slides.Add 1, 1  \n    End With  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA macro to create and save a PowerPoint Presentation:\nSub Create_Save_PPT_Presentation()      \n    'Variable Declaration  \n    Dim NewPres As Presentation  \n          'Creating a new Presentation  \n    Set NewPPT = Presentations.Add  \n              'Save the above Presentation in a file  \n    NewPPT.SaveAs FileName:=\"e:/VBApptPresentation.pptx\"  \n      End Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "4) Can you move a PPT slide from one position 1 to 4 in a PowerPoint Presentation?",
        "answer": "Yes, using VBA macro we can move a PPT slide from one position 1 to 4 in a PowerPoint Presentation. Refer to the following macro:\n'Moving ppt slide from position one to four  \nSub Move_PPT_Slide()  \n    ActivePresentation.Slides(4).MoveTo topos:=2  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    },
    {
        "question": "",
        "answer": "Following is the VBA snippet to start the PowerPoint slide show:\n'Starting a PowerPoint slide show  \nSub Start_PPT_SlideShow()  \n    ActivePresentation.SlideShowSettings.Run  \nEnd Sub",
        "reference": "javatpoint.com",
        "role": "vba"
    }
]