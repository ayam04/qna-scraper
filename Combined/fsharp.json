[
    {
        "question": "1) What is F#?",
        "answer": "F# is a Computer programming language. It was designed and developed by Microsoft. It supports functional, object-oriented and imperative programming approaches. You can create an application by using this programming language.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "2) What are the features of F#?",
        "answer": "F# has many features. Following are the main features of F#:\n\nADVERTISEMENT\nType inference\nType extension\nLess code\nImmutable data\nPattern matching\nAssertion\nLambda expression\nFunction composition and pipelining\nObject expression\nLazy computation and many more",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "3) What are the available data types in F#?",
        "answer": "F# provides a rich set of data types. It helps to deal with any data whether it is scientific data, data of business analysis, etc. You can see the table of data types here.\nData Types in F#\nTypes Data Types\nPrimitive data types char, byte, bool, int, float\nDerived data types class, array, list, records, sequence\nEnumeration enum\nUnit type It is used if other data types are not specified.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "4) What is the unit type in F#?",
        "answer": "The unit type is a type which indicates the absence of specific value. The unit type has only a single value. This value acts as a placeholder when no other value exist.\nExample:\nlet function1 x y = x + y                 \n  function1 10 20      // this line results a compiler warning  \n      // changing the code to the following and eliminates the warning  \nlet result = function1 10 20  \n  // Use this if you are calling the function and don't want the return value  \nfunction1 10 20 |> ignore",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "5) What is upcasting and downcasting in F#?",
        "answer": "Casting is a process of converting one type to another type. F# provides mainly two operators to deal with upcasting and downcasting. The :> operator is used to upcast object and :?> operator is used to downcast object.\nExample:\ntype BaseClass() =  \n class  \n  member this.ShowClassName()=  \n    printfn \"BaseClass\"  \n end  \n  type DerivedClass() =   \n class  \n  inherit BaseClass()  \n  member this.ShowClassName()=  \n   printfn \"DerivedClass\"  \n end  \n  let baseClass = new BaseClass()              \nlet derivedClass : DerivedClass = new DerivedClass()  \nbaseClass.ShowClassName()      \nderivedClass.ShowClassName()  \nlet castIntoBaseClass = derivedClass :> BaseClass        // upcasting   \ncastIntoBaseClass.ShowClassName()  \nlet castIntoDerivedClass = baseClass :?> DerivedClass   // downcasting  \ncastIntoDerivedClass.ShowClassName()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "6) What are available operators in F#?",
        "answer": "An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, bitwise, logical, etc.\nThere are following types of operators to perform different types of operations in F# language.\nArithmetic operators: The Arithmetic operators take numerical values as their operands and return a single numerical value.\nBoolean operators: The Boolean operators are used to check conditional expressions. It returns true if expression satisfies the condition otherwise it returns false.\nBitwise operators: In F#, the bitwise operator works on individual bits and return a result after evaluation.\nNullable operators: The Nullable operators are used to work with database queries. It handles null values which are stored in tables in place of data.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "7) Which tokens are available in F#?",
        "answer": "Keywords: It contains the links to information about all F# language keywords.\nSymbol and operators: It contains a table of symbols and operators that are used in the F# language.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "8) What is function composition and pipelining in F#?",
        "answer": "In F#, functions can be composed from other functions. It is a process of composing in which a function represents the application of two composed functions. F# function pipelining allows us to call functions in the chain. Pipelining operator takes a function and an argument as operands and returns a value.\nF# Function Composition Example\nlet function1 name=   \n  name + \" FSharp\"  \nlet function2 name =   \n   name + \" Programming\"  \n  let programmingName = function1 >> function2  \nlet result = programmingName \"Hello\"  \nprintf \"%s\" result  \nF# Function Pipelining Example\nlet function1 name=   \n  name + \" FSharp\"  \nlet function2 name =   \n   name + \" Programming\"  \n  let result = \"Hello\" |> function1 |> function2  \nprintf \"%s\" result",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "9) What is lambda expression in F#?",
        "answer": "Lambda expression is an unnamed or anonymous function. Sometimes instead of defining a full name function, you may create a lambda expression. It optimizes the code. You must use a fun keyword to define lambda expression.\nExample\nlet result = (fun a -> a+1) 100  \nprintf \"%d\" result",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "10) What is an inline function in F#?",
        "answer": "The F# inline function is a function that is integrated directly into the calling code. It helps to optimize code and sometimes can improve performance too.\nExample\ntype InlineClass() =  \n  class  \n    member inline this.inlineFunction(a) = a*a  \n  end  \n   let obj = new InlineClass()  \nlet result = obj.inlineFunction 2  \nprintf \"%d\" result",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "11) What is let bindings in F#?",
        "answer": "Binding is a process of associating of identifier or function to a value. Let keyword is used to bind an identifier to a value. In F#, We use let keyword to declare variable, function and private class members.\nF# Let binding in function\nWe use let keyword to define a function in F#.\nlet ShowName() =   \n printf \"Hello FSharp\"  \nShowName()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "12) What is \"do bindings\" in F#?",
        "answer": "Do binding is used to execute code without defining a function or any type. You can write independent code by using do binding in F#.\nExample\ntype DoBindingClass() =   \n class  \n  do printf \"Hello FSharp\"     \n end  \nnew DoBindingClass()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "13) What is type annotation in F#?",
        "answer": "F# allows type annotation so that you can explicitly mention the type of identifier or parameter or return type of a function. You must use: (colon) to apply annotation in F#.\nExample\nlet a:int = 10  \nprintf \"%d\" a",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "14) What is Type Inference in F#?",
        "answer": "Type inference means when you are writing code then you don't need to specify the type of values or variables. F# compiler is strong enough to infer the type of value.\nExample\nlet add a b =      //Here, all parameters are inferred to int because of passing values during calling  \n a+b               // Return type of this function is int because the type of this expression is int.  \nprintf \"%d\" (add 10 20)",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "15) What is Automatic Generalization in F#?",
        "answer": "When code does not specify any type explicitly, then the compiler considers generic type. It is called an automatic generalization. It helps to write generic code without increasing complexity.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "16) What are the Tuples in F#?",
        "answer": "In F#, tuples are a collection of anonymous values. Values may be the same or different types. It allows us to put expression as a value also.\nExample\nlet (id,name) = (1, \"Fsharp\")  \nprintfn \"%d\" id  \nprintfn \"%s\" name",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "17) Can a function return multiple values in F#?",
        "answer": "Yes, by using a tuple, you can return multiple values in a function.\nExample\nlet TupleExample a b =   \n let c = a+b  \n let d = a-b  \n (c, d)  \n   let tupleValues = TupleExample 50 10   \nprintf \"%A\" tupleValues",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "18) What is a list in F#?",
        "answer": "It is an immutable collection of same type elements. It maintains the order of elements.\nF# List Example\nlet list = [1;2;3;4;5;6;7;8;9]  \nfor i  in list do  \n printfn \"%d\" i",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "19) What is Array in F#?",
        "answer": "Arrays are mutable collections of data of the same type. It starts from index 0 and goes to n-1 where n is the length of arrays.\nExample\nlet arr = [| 1; 2; 3; 4; 5; |]               // Creating and initializing array  \nfor i = 0 to arr.Length-1 do                // Traversing of array  \n  printfn \"%d\" arr.[i]",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "20) What is Sequence in F#?",
        "answer": "The Sequence is a series of the same type of elements. It provides better performance than list.\nExample\nYou can create sequence expression like following. Here, we have used Seq.iter () function to iterate sequence. We can also use for loop or array format specifier to iterate sequence elements.\nlet seq1 =  \n seq { 0 .. 10 }  \nSeq.iter(fun a->printf \" %d\" a)seq1",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "21) What are the options in F#?",
        "answer": "Options type is used when there is no value present for function or variable. It provides an expression Some and a value None for handling the empty values or variables.\nExample\nlet sub a b =  \n if(a>b) then  \n  Some(a-b)  \n  else None  \nprintf \"%A\" (sub 20 10)",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "22) What is Generics in F#?",
        "answer": "F# allows you to write a generic function, method, type, variable, etc. It helps to avoid repeating of code for each type. By writing generic code, you can apply it for any type or value.\nExample\nlet genericFunctionExample<'T> x y =  \n    printfn \"%A %A\" x y  \n  genericFunctionExample<int> 1 2",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "23) What are the Records in F#?",
        "answer": "Records are used to store elements in the form of label and value. It can store any data. You are not bound to store same type values as a list. Records are immutable by default so you can't modify original records.\nExample\ntype RecordExample = { x : float; y: float; z: float; }  \nlet getRecordValues = { x = 2.0; y = 1.0; z = 0.0; }  \nprintf \"%A\\n\" getRecordValues           // Access all values of record  \nprintf \"%f\" getRecordValues.x   // Access individual values of record",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "24) What is Enumeration in F#?",
        "answer": "Enumeration is popularly known as enums. It is a combination of label and value pair. Labels are assigned to a subset of the values. You can use them in place of literals to make the code more readable and maintainable.\nExample\ntype Year =  \n   | January = 0  \n   | Fabruary = 1  \n   | March = 2  \n   | April = 3  \n  // Use of an enumeration.  \nlet monthName = enum<Year>(3)  \nprintf \"%A\" monthName  \nlet monthLiteral : Year = Year.January  \nlet n = int monthLiteral  \nprintf \"\\n%d\" n",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "25) What are Reference cells in F#?",
        "answer": "Reference cells refer to memory locations. It allows you to create mutable values. F# uses immutable data structure by default.\nExample\nlet refVariable = ref 50  \nprintf \"%d\" refVariable.Value",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "26) What is a structure in F#?",
        "answer": "The F# structure is a data structure which is used to organize data, and it is value types and efficient than class. It does not allow let binding, so you must declare fields by using val keyword.\nExample\ntype Book = struct  \n   val title : string  \n   val author: string  \n   val price : float  \n   new (title, author, price) =           // Constructor  \n      {title = title; author = author; price = price;}  \nend  \nlet book = new Book(\"FSharp Programming\", \"Chris Smith\", 100.0)   // Calling Constructor  \nprintfn \"Title  : %s \" book.title  \nprintfn \"Author : %s\"  book.author  \nprintfn \"Price  : $%0.2f\"  book.price",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "27) What is Discriminated Union in F#?",
        "answer": "It is a useful data structure. It helps to store heterogeneous data. The Union is used to represent tree data structures. It provides cases, and each case consists of heterogeneous data.\nExample\ntype Calcualte =    \n    | Add of val1 : int * val2 : int    \n    | Multiply of val1 : int * val2 : int    \n    let compute vall =    \n   match vall with    \n     | Add (val1, val2) -> val1+val2    \n     | Multiply (val1, val2)->val1*val2    \n    let addition = compute (Add(10,10))    \nlet multiplication = compute (Multiply(2,5))    \n    printf \"Addition = %d\\nMultiplication = %d\" addition multiplication",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "28) What is Object in F#?",
        "answer": "The Object is a real-world entity. It can be anything like - cell phone, car, football, etc.\nThe Object is an instance of the class we can access all the members of the class by using object of this class.\nLet's see an example of how to create an object in F#.\nlet objectName = new ClassName()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "29) What is a class in F#?",
        "answer": "The Class is a template or blueprint of an object. It is used to encapsulate data members and member methods. It can contain fields, methods, constructor, static method, etc.\nExample\ntype Student (id,name)=   \n class  \n  member x.show =   \n  printf \"%d \\n%s\" id name   \n   end  \nlet a = new Student (12,\"FSharp\")  \na.show",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "30) What is a constructor in F#?",
        "answer": "In F#, Constructor is somewhat different than other .Net languages. There are always primary constructors that may or may not have parameters. The Scope of these parameters is throughout the class.\nExample\ntype Employee(name) =   \n class  \n  do printf \"%s\" name  \n end  \nlet e = new Employee(\"FSharp\")",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "31) What is a self in F#?",
        "answer": "In F#, a self is used to refer the current object of class type. Self is the same as this keyword in C# and Java. You can name the self-identifier however you want. You are not restricted to names such as this or self as in .Net languages.\nExample\ntype Employee(id,name) as this =  \n    let id = id  \n    let name = name  \n    do this.Display()           // This is how we can use self(this) object  \n    member this.Display() =  \n        printf \"%d %s\" id name  \nlet e =new Employee(100, \"Rajkumar\")",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "32) What is static in F#?",
        "answer": "In F#, static is a keyword. It is used to make the static field or static method. Static is not the part of the object. It has its memory space to store static data. It is used to share common properties among objects.\nExample\ntype Account(accno,name) = class  \n static let rateOfInterest = 8.8  \n member this.display()=  \n  printfn \"%d %s %0.2f\" accno name rateOfInterest   \nend  \nlet a1 = new Account(101,\"Rajkumar\")  \nlet a2 = new Account(102, \"john\")  \na1.display()  \na2.display()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "33) What is an inheritance in F#?",
        "answer": "In F#, inheritance is a process in which child class acquires all the properties and behaviors of its parent class automatically. It is used to reuse the code.\nExample\ntype Employee(name:string) =  \n class  \n  member this.ShowName() = printf\"Name = %s\\n\" name  \n end  \ntype Manager(name,salary:int) =  \n class  \n  inherit Employee(name)  \n  member this.ShowSalary() = printf\"Salary = $%d\" salary  \n end  \nlet manager = new Manager(\"Rajkumar\",10000)  \nmanager.ShowName()  \nmanager.ShowSalary()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "34) What is method overriding in F#?",
        "answer": "Method overriding is a feature of Object-oriented programming approach. It helps to achieve polymorphism. We can achieve method overriding using inheritance.\nExample\ntype Employee() =  \n class  \n  abstract ShowName : unit -> unit  \n  default this.ShowName() = printfn\"This is base class method\"  \n end   \ntype Manager() =  \n class  \n  inherit Employee()  \n  override this.ShowName() = printf \"This is derived class method\"  \n end  \n  let employee = new Employee()  \nlet manager = new Manager()  \nemployee.ShowName()  \nmanager.ShowName()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "35) What is an abstract class?",
        "answer": "Abstract classes are used to provide the full implementation of class members. It may contain non-abstract methods. A class that inherits abstract class must provide an implementation of all abstract methods of the abstract class.\nExample\n[<AbstractClass>]  \ntype AbstractClass() =   \n class  \n  abstract member ShowClassName : unit -> unit  \n end  \ntype DerivedClass()  =   \n class  \n  inherit AbstractClass()  \n  override this.ShowClassName() = printf \"This is derived class.\"  \n end  \n  let a = new DerivedClass()  \na.ShowClassName()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "36) What is an interface in F#?",
        "answer": "F# provides Interface type. It provides pure abstraction. It is a collection of abstract methods.\nExample\ntype IEmployee =  \n   abstract member ShowName : unit -> unit  \ntype Manager(id:int, name:string) =  \n   interface IEmployee with  \n      member this.ShowName() = printfn \"Id = %d \\nName = %s\" id name  \n  let manager = new Manager(100,\"RajKumar\")  \n//manager.ShowName()    // error: you can't directly access interface abstract method by using class object.  \n// so, we need to upcast class type object to interface type by using :> operator.  \n(manager :> IEmployee).ShowName()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "37) What is type extension in F#?",
        "answer": "Type extension allows you to add new members to your previously defined object type.\nExample\ntype ClassExtension() =  \n member this.ShowBefore() = printfn\"Class before extension\"  \n  // Define type extension.  \ntype ClassExtension with  \n member this.ShowAfter() = printfn\"Class after extension\"  \n  let classExtension = new ClassExtension()  \nclassExtension.ShowBefore()  \nclassExtension.ShowAfter()",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "38) What is a delegate in F#?",
        "answer": "In F#, delegates are reference types. It allows us to call the function as an object. It is a feature of this language. It gives an advantage over the other functional programming languages.\nExample\ntype Deligate() =  \n  static member mul(a : int, b : int) = a * b  \n  member x.Mul(a : int, b : int) = a * b  \ntype Multiply = delegate of (int * int) -> int  \n  let getIt (d : Multiply) (a : int) (b: int) =  \n   d.Invoke(a, b)  \nlet d : Multiply = new Multiply( Deligate.mul )  \nfor (a, b) in [(5, 8) ] do  \n  printfn \"%d * %d = %d\" a b (getIt d a b)",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "39) What is the object expression in F#?",
        "answer": "F# object expression is a special expression. It creates a new instance of anonymous object type which is based on an existing base type, interface, or set of interfaces.\nExample\nlet ex =  \n {  \n      new System.Exception() with member x.ToString() = \"Hello FSharp\"   \n }  \nprintfn \"%A\" ex",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "40) What is Exception handling?",
        "answer": "Exception handling is a standard mechanism to handle abnormal termination of the program. The Exception is a situation that occurs during program execution. It may lead to terminate program abnormally like divide by zero or a null pointer.\nExample\nlet ExExample a b =  \n let mutable c = 0  \n c <- (a/b)  \n printfn \"Rest of the code\"  \n  ExExample 10 0",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "41) What is a try-with block in F#?",
        "answer": "In F#, you can create a user-defined exception. It provides flexibility to define custom exceptions according to requirement.\nExample\nlet ExExample a b =  \n  let mutable c = 0  \n  try  \n    c <- (a/b)  \n  with  \n    | :? System.DivideByZeroException as e -> printfn \"%s\" e.Message  \n  printfn \"Rest of the code\"  \n  ExExample 10 0",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "42) What is FailWith and InvalidArg in F#?",
        "answer": "In F#, you can throw exceptions explicitly. You are allowed to throw a custom exception. You can also throw exceptions by using predefined methods of Exception like Failwith and InvalidArgs.\nExample of FailWith keyword\nlet TestAgeValidation age  =  \n  try  \n     if (age<18) then failwith \"Sorry, Age must be greater than 18\"  \n  with  \n     | Failure(e) -> printfn \"%s\" e;   \n  printf \"Rest of the code\"  \nTestAgeValidation 10  \nExample of InvalidArg keyword\nlet TestInvalidArgument age =  \n if(age<18) then  \n  invalidArg \"TestInvalidArgument\" (\"Sorry, Age must be greater than 18\")  \n  TestInvalidArgument 10",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "43) What is an assertion in F#?",
        "answer": "The assert expression is a debugging feature of F#. You can use it to test an expression. It generates a system error dialog box upon failure in Debug mode.\nExample\nlet divide (x:int, y:int):int =  \n assert (x>0)  \n let z = (x/y)  \n z  \n  let result = divide(10,2)  \nprintf \"%d\" result",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "44) What is a module in F#?",
        "answer": "The Module is a collection of classes, functions, and types. It helps to organize related code so we can maintain code easily.\nExample\nopen Arithmetic  \nprintf \"%d\" (sub 20 10)",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "45) What is the access control in F#?",
        "answer": "Access control specifies the accessibility of code. By using these, you can specify the scope of data, method, class, etc.\nThere are 3 types of access control in F#.\nPublic: Public access control also known as default. It is accessible for all. If you don't specify any access control explicitly in your code, by default it follows public access control.\nPrivate: F# provides private keyword to declare private members in the class or type. The scope of private is limited to the local block in which it is declared.\nInternal: Internal access control is only accessible from the same assembly. An assembly is a file which is automatically generated by your compiler after compilation of F# code.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "46) What is Resource management in F#?",
        "answer": "F# manages resources with the help of use and using keywords. Resources may be data, a file or network, etc. It acquires a resource from the operating system or other service providers so that it can be provided to other application.\nExample\nopen System.IO  \nlet ReleaseFile fileName content =  \n    using (System.IO.File.CreateText(fileName)) ( fun textFile ->  \n        textFile.WriteLine(\"{0}\", content.ToString() )  \n    )  \n  ReleaseFile \"file/textFile.txt\" \"This is a text file. \\nIt contains data.\"",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "47) What are the attributes in F#?",
        "answer": "In F#, the attribute is used to enable metadata for a program code construct. The attribute can be applied to any construct like function, module, method, and type.\nExample\nopen System  \n[<Obsolete(\"Do not use. Use newFunction instead.\")>]  \nlet updateSystem() =   \n printf \"updating...\"  \n  updateSystem",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "48) What is a signature in F#?",
        "answer": "In F#, the signature file contains information about the public signatures. Signatures can be of a set of program elements, such as types, namespaces, and modules.\nSignature file named as signature.fsi\nnamespace FSharpPrograms  \n  module Arithmetic =  \n    val add : int * int -> int  \n    val sub : int * int -> int",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "49) What is an open keyword in F#?",
        "answer": "An import declaration specifies a module or namespace. You can reference its elements without using a fully qualified name.\nExample\nopen System  \nConsole.WriteLine(\"Hello, this is F# here.\")",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "50) What is the purpose of 'base' keyword?",
        "answer": "The 'base' keyword is used as the name of the base class object.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "51) What is the purpose of 'begin' keyword?",
        "answer": "It is used to signify the starting of a code block.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "52) What is the purpose of 'elif' keyword?",
        "answer": "It is used same as else if branching.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "53) What is the purpose of 'yield' keyword?",
        "answer": "Yield keyword finds its use in the sequence expressions to produce a sequence value.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "54) What is the purpose of 'rec' keyword?",
        "answer": "It is used to indicate a recursive function.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "55) What is the purpose of 'extern' keyword?",
        "answer": "It is used to indicate that the program element declared is defined in some other assembly or binary.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "",
        "answer": "type name =   \n| case-identifier1 [of [ fieldname1 : ] type1 [ * [ fieldname2 : ]   \ntype2 ...]  \n| case-identifier2 [of [fieldname3 : ]type3 [ * [ fieldname4 : ]type4 ...]",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "",
        "answer": "It means, once the value is assigned to a variable it cannot be altered.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "58) What is the use of 'raise' function?",
        "answer": "It is used for the indication of error occurrence.",
        "reference": "javatpoint.com",
        "role": "fsharp"
    },
    {
        "question": "59) What is lazy computation in F#?",
        "answer": "Lazy computation is a feature of F#. Lazy computation does not evaluate immediately. It is executed when the result is needed.\nExample\nlet add x y  = x+y  \nlet result = lazy (add 10 10)  \nprintfn \"%d\" (result.Force())",
        "reference": "javatpoint.com",
        "role": "fsharp"
    }
]