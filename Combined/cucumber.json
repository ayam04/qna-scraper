[
    {
        "question": "1. What is Cucumber? Explain the need of using Cucumber.",
        "answer": "Cucumber is a behavior-driven development (BDD) testing tool. The BDD framework's major goal is to bring together a variety of project responsibilities, such as quality assurance, developers, and business analysts, to understand the application without diving too deeply into the technical components.\nTesters use Cucumber to create test cases for evaluating program behaviour. It is an important tool to automate acceptance tests written in logical language that customers can understand. It's primarily used to develop acceptance tests for web apps based on their features' behaviour. ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "2. What is Gherkin Language?",
        "answer": "Gherkin is a readable business language that allows you to define business activity without getting bogged down in implementation specifics. It's a domain-specific language for defining specs tests in Cucumber format. It describes use cases in plain English and helps users to remove logic elements from behaviour testing.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "3. What is the principle of Behaviour Driven Development?",
        "answer": "Behaviour Driven Development (BDD) is a synthesis and refinement of practices stemming from Test Driven Development (TDD) and Acceptance Test-Driven Development (ATDD). BDD augments TDD and ATDD by\napplying the “Five Why’s” principle to each proposed user story so that its purpose is clearly related to business outcomes. Five Why's is an iterative interrogative approach for uncovering the cause-and-effect links at the root of a problem. The main purpose of this technique is to uncover the core cause of a flaw or problem by asking \"Why?\" repeatedly. Each response serves as the foundation for the next question.   ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "4. What are the primary keywords in Cucumber?",
        "answer": "Following are the primary keywords in Cucumber:- Feature: The Feature keyword's aim is to collect relevant scenarios and provide a high-level description of a software feature.\nRule: The Rule keyword is used to express a single business rule that should be followed. It adds to the information about a feature.\nExample: This is a practical illustration of a business rule. It comprises a series of steps.\nGiven: The given steps are used to describe the system's initial context - the scenario's scene. It usually refers to an event that occurred in the past.\nWhen: When describing an occurrence or an action, When is employed. It could be a user interacting with the system or an event generated by another system.\nThen: Then steps are employed to indicate an anticipated outcome, or result.\nBackground: A background helps you to give the situations that follow it some context. It can have one or more Given steps, which are executed prior to each scenario but after any Before hooks. Feature: The Feature keyword's aim is to collect relevant scenarios and provide a high-level description of a software feature. Feature: Rule: The Rule keyword is used to express a single business rule that should be followed. It adds to the information about a feature. Rule: Example: This is a practical illustration of a business rule. It comprises a series of steps. Example: Given: The given steps are used to describe the system's initial context - the scenario's scene. It usually refers to an event that occurred in the past. Given: When: When describing an occurrence or an action, When is employed. It could be a user interacting with the system or an event generated by another system. When: Then: Then steps are employed to indicate an anticipated outcome, or result. Then: Background: A background helps you to give the situations that follow it some context. It can have one or more Given steps, which are executed prior to each scenario but after any Before hooks. Background:",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "5. Which language is used in Cucumber?",
        "answer": "Cucumber understands Gherkin. It's a straightforward English representation of the app's functionality. It is used for defining test cases. It is intended to be non-technical and human-readable, and it describes use cases for a software system as a whole. It's a domain-specific (DSL), business-friendly language.  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "6. What do you mean by scenario in Cucumber Testing?",
        "answer": "Scenario is a fundamental Gherkin structure. Every scenario begins with the keyword \"Scenario:\" (or a localized version of it) and ends with a scenario title. Every feature can have one or more scenarios, each of which has one or more steps. As an example of a scenario, consider the following:\n\nScenario − Verify My Orders Functionality.\nExplanation: When a user clicks on the My Orders option he/ she should be taken to the My Orders page.   Scenario  Explanation:",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "7. What do you mean by Scenario Outline?",
        "answer": "Consider the situation when we need to run a test scenario multiple times. Assume we need to ensure that the login feature is functional for all types of subscribers. This necessitates repeating the login functionality scenario. Copying and pasting the identical instructions to just re-run the code does not appear to be a good approach. Gherkin adds another framework, the scenario outline, to help with this. The scenario outline is similar to scenario, with the exception that several inputs are provided.\nExample:-\n\nScenario Outline - Sign In Feature for a website.\nExplanation: The website can have multiple users and so we need to consider all the users while implementing the sign-in functionality.    Scenario Outline  Explanation:",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "8. What do you mean by feature in Cucumber?",
        "answer": "A project's feature can be described as a stand-alone unit or functionality. A list of scenarios to test for a feature is frequently included with it. The Feature File is a file in which we store features, descriptions of features, and situations to be evaluated. For each feature under test, it is recommended that a separate feature file be created. The feature file must have the extension \".feature.\" You can make as many feature files as you want.\nHere's an example:-  For an e-commerce website, we can have the following features:- User registers and signs up on the website.\nUser tries to log in to their account using their credentials.\nUsers add a product to their cart.\nUser clicks on checkout now.\nUser pays for their items.\nUser logs out from the website. User registers and signs up on the website. User tries to log in to their account using their credentials. Users add a product to their cart. User clicks on checkout now. User pays for their items. User logs out from the website.   All these are different features. The website will have many such features. All these features will have a separate Feature File.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "9. What are the basic requirements to run Cucumber Web test cases?",
        "answer": "We need the following minimum requirements to successfully run a Cucumber Web test case:- The compiler and the development kit for the programming language we will be using. Example: JDK and JRE for using Java as our programming language.\nAn IDE (Integrated Development Environment) wherein we can write our code. Example: Eclipse.\nBuild tools so as to do tasks such as compiling code, packaging code to a jar, creating source code. Example: Maven, Gradle. The compiler and the development kit for the programming language we will be using. Example: JDK and JRE for using Java as our programming language. An IDE (Integrated Development Environment) wherein we can write our code. Example: Eclipse. Build tools so as to do tasks such as compiling code, packaging code to a jar, creating source code. Example: Maven, Gradle.  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "10. What are the advantages of using Cucumber?",
        "answer": "Following are the advantages of using Cucumber:- Cucumber supports a variety of programming languages, including Java.net and Ruby.\nIt serves as a link between commercial and technical language. This can be done by writing a test case in plain English text.\nIt enables the test script to be developed without any prior knowledge of programming, as well as the participation of non-programmers.\nUnlike other tools, it functions as an end-to-end test framework.\nCucumber allows for code reuse thanks to its simple test script architecture. Cucumber supports a variety of programming languages, including Java.net and Ruby. It serves as a link between commercial and technical language. This can be done by writing a test case in plain English text. It enables the test script to be developed without any prior knowledge of programming, as well as the participation of non-programmers. Unlike other tools, it functions as an end-to-end test framework. Cucumber allows for code reuse thanks to its simple test script architecture.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "11. What are Step Definitions in the context of Cucumber?",
        "answer": "Step definitions connect Gherkin steps to programming code. The mapping between each step of the scenario defined in the feature file and a code of the function to be executed is stored in the steps definition file. A step definition carries out the action that should be performed by the step. So step definitions hard-wire the specification to the implementation.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "12. What are annotations in Cucumber?",
        "answer": "An annotation is a type of text that has been pre-defined and has a specified meaning. It tells the compiler/interpreter what to do when the program runs. The annotations on Cucumber are as follows: Given: It specifies the requirements for running the test.\nExample: Given I have an account on Interviewbit.\nWhen: It establishes the starting point for any test scenario.\nExample: When I log in to Interviewbit.\nThen: It contains the expected result of the test which is to be executed.\nExample: Then registration should be successful.\nAnd: Between any two statements, it gives the logical AND condition. AND can be combined with the GIVEN, WHEN, and THEN statements.\nExample: When I enter my account number AND CVV.\nBut: It denotes a logical OR relationship between two propositions. OR can be combined with the GIVEN, WHEN, and THEN statements.\nExample: Then I should be logged in BUT I must enter the OTP. Given: It specifies the requirements for running the test.\nExample: Given I have an account on Interviewbit. Given:  Example When: It establishes the starting point for any test scenario.\nExample: When I log in to Interviewbit. When:  Example: Then: It contains the expected result of the test which is to be executed.\nExample: Then registration should be successful. Then:  Example: And: Between any two statements, it gives the logical AND condition. AND can be combined with the GIVEN, WHEN, and THEN statements.\nExample: When I enter my account number AND CVV. And:  Example: But: It denotes a logical OR relationship between two propositions. OR can be combined with the GIVEN, WHEN, and THEN statements.\nExample: Then I should be logged in BUT I must enter the OTP. But:  Example:",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "13. Enlist the files needed in the Cucumber framework.",
        "answer": "The following are the files required for a Cucumber framework: Feature File: It has plain text descriptions of single or numerous test situations. Keywords like Then, When, Background, Scenario Outline, Feature, And, But, and so on are used in the tests. As a result, it's a file that keeps track of features and their descriptions.\nStep Definition File: It has the extension .java. It essentially acts as a translator between the test scenario steps provided in the feature file and the automation code. Cucumber searches the step definition file and executes the relevant functions that are assigned to that step when it runs a step described in the feature file.\nTestRunner: .java is the file extension for this file. It connects the feature file and the step definition file. It allows the user to run one or more feature files at the same time. It contains the locations of the step definition and feature files. Feature File: It has plain text descriptions of single or numerous test situations. Keywords like Then, When, Background, Scenario Outline, Feature, And, But, and so on are used in the tests. As a result, it's a file that keeps track of features and their descriptions. Feature File Step Definition File: It has the extension .java. It essentially acts as a translator between the test scenario steps provided in the feature file and the automation code. Cucumber searches the step definition file and executes the relevant functions that are assigned to that step when it runs a step described in the feature file. Step Definition File TestRunner: .java is the file extension for this file. It connects the feature file and the step definition file. It allows the user to run one or more feature files at the same time. It contains the locations of the step definition and feature files. TestRunner",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "14. How do you comment the code in Cucumber? What is the importance of comments?",
        "answer": "A comment is a chunk of code that is intended for documentation rather than execution. To make it more legible and clear, whether it's a step definition file or a feature file. As a result, it's critical to use/insert comments in the right places throughout the file. This is also beneficial for troubleshooting the code. Comments can be added to Cucumber feature files at any time. To add comments, simply begin the statement with the “#” sign.\nDifferent programming languages have different standards for commenting. Let's see how Cucumber handles the situation:  For Step Definition File, if you're using Java as a platform, start your comments with \"/.\"\nIn the case of a feature file, we only need to type # before starting our comment. For Step Definition File, if you're using Java as a platform, start your comments with \"/.\" In the case of a feature file, we only need to type # before starting our comment.  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "15. What are hooks in Cucumber?",
        "answer": "Hooks are code blocks that execute before or after each Cucumber scenario in the execution cycle. This enables us to better control the development workflow and decrease code redundancy. Setting up the web driver and terminating the web driver session resembles a test setup. When dealing with different scenarios, it's best to do the setup and clean up only once. Hooks are used to bringing optimization. Certain preconditions, such as executing the program, creating a database connection, preparing the test data, and so on, may be required in some cases. There are also several postconditions to be fulfilled, such as ending the database connection, closing the browser, refreshing test data, and logging out of the program. Cucumber handles all of these situations with the use of hooks.   The methods @Before and @After can be used to define hooks anywhere in the project or step definition layers. Before hook is executed before any other test situations, and after the hook is executed after all test scenarios have been completed.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "16. What are tags in Cucumber and why are they important?",
        "answer": "When we only have one, two, or maybe five situations in a feature file, it appears to be simple. In reality, however, this does not occur. In a single feature file, we may have 10, 20, or even more scenarios for each feature under test. They could reflect various purposes (smoke test/regression test), perspectives (developer/QA/BA), and statuses (ready for execution/work in progress).\nTags in cucumber provide a way to run scenarios in a specific sequence from a runner file. Each situation can be labeled with a useful tag. Later, in the runner file, we may specify which tag (and hence which scenario(s)) Cucumber should run. “@” is the first character in a tag. Any relevant content after \"@\" can be used to define your tag.\nExample - ‘@InitialTest’  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "17. What is Cucumber Dry Run?",
        "answer": "The purpose of the Cucumber dry run is to verify compilation faults and compile the Step Definition and Feature files. Dry run's value might be either true or false. Dry run has the value false by default and it is present in the Test Runner Class file. If the dry run value is true, Cucumber will check all steps in the Feature file. Within the Step Definition file, it will also check the implementation code of steps in the Feature file. If any of the steps in the Feature file is missing its implementation in the Step Definition file, a message is thrown. The @CucumberOptions has a dry run parameter that is used to configure the test parameters.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "18. What do you mean by profile in Cucumber?",
        "answer": "When testing a feature, cucumber profiles make it simple to define groupings of tests in a feature file so that we can choose to execute only a subset of them rather than all of them. It was created to help people save time. In a cucumber.yml file, the user can reuse commonly used cucumber flags.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "19. What programming languages are used by Cucumber?",
        "answer": "Cucumber supports a variety of programming languages, including Java,.NET, Ruby, and others. It can also be used with other tools like Capybara and Selenium.   The Gherkin text serves as a skeleton for your automated tests and serves as documentation. Gherkin is based on TreeTop Grammar, which is used in more than 37 languages. As a result, you can write your gherkin in more than 37 different spoken languages.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "1. Explain briefly how Behavioral Driven Development works?",
        "answer": "There are majorly three steps in the working of BDD. They are as follows:- Behaviour Description: We list down the features of our application first in the feature file.\nMaking the Step Definition file: The mapping between each step of the scenario defined in the feature file and a code of the function to be executed is stored in the steps definition file.\nTesting and running: We run the test cases to check if we pass. In general, a lot of failures are observed before achieving the final code. Behaviour Description: We list down the features of our application first in the feature file. Behaviour Description Making the Step Definition file: The mapping between each step of the scenario defined in the feature file and a code of the function to be executed is stored in the steps definition file. Making the Step Definition file Testing and running: We run the test cases to check if we pass. In general, a lot of failures are observed before achieving the final code. Testing and running  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "2. What is a test harness in the context of Cucumber?",
        "answer": "The test harness in Cucumber helps in separating the task of establishing the context and interacting with the browser from cleaning up the step definition files. It gathers the stubs, drivers, and other tools needed to enable test execution automation in testing.   The following is the purpose of the test harness:- To run a set of tests either within the framework or with the help of the test harness\nTo enter data into the program being tested.\nDebugging becomes more flexible and supported.\nTo record the outputs of the software under test\nTo keep track of the test results (pass/fail) for each test.\nAids developers in determining code coverage at the code level. To run a set of tests either within the framework or with the help of the test harness To enter data into the program being tested. Debugging becomes more flexible and supported. To record the outputs of the software under test To keep track of the test results (pass/fail) for each test. Aids developers in determining code coverage at the code level. The advantages of the test harness are as follows:- As a result of automation, productivity increases.\nImproved software quality as a result of automation allows us to be more productive.\nTests can be scheduled.\nCan handle complex conditions that testers have a hard time simulating. As a result of automation, productivity increases. Improved software quality as a result of automation allows us to be more productive. Tests can be scheduled. Can handle complex conditions that testers have a hard time simulating.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "3. What is the difference between RSpec and Cucumber?",
        "answer": "RSpec and Cucumber are two examples of testing frameworks. Traditional Unit Testing is used by RSpec. It refers to the practice of testing a section of an application separately from the remaining part of the application. As a result, your model performs what it's expected to do, the controller does what it's expected to do, and so on. Both RSpec and Cucumber are used for Acceptance Testing, also known as ATDD, BDD, and other terms.\nThe following are the major differences between RSpec and Cucumber:-  The fundamental distinction between RSpec and Cucumber is the element of business readability.\nUnit testing is the primary purpose of RSpec. Cucumber, on the other hand, is primarily utilized in behavior-driven development. It can be used for System and Integration Testing as well.\nCucumber separates the specs or features from the test code, allowing product owners to provide or review the specification without having to walk through the code.\nRSpec includes a similar method, but instead of elaborating a step with a Describe, it executes the statement using the business specification. This method is easier for developers to use, but a little more difficult for non-technical people. The fundamental distinction between RSpec and Cucumber is the element of business readability. Unit testing is the primary purpose of RSpec. Cucumber, on the other hand, is primarily utilized in behavior-driven development. It can be used for System and Integration Testing as well. Cucumber separates the specs or features from the test code, allowing product owners to provide or review the specification without having to walk through the code. RSpec includes a similar method, but instead of elaborating a step with a Describe, it executes the statement using the business specification. This method is easier for developers to use, but a little more difficult for non-technical people.  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "4. Difference between Selenium and Cucumber.",
        "answer": "Open-source testing tools, Selenium and Cucumber are both used for functional testing. However, there are some distinctions between them. Here are some key distinctions between Selenium and Cucumber: Cucumber is a behavior-driven development automation tool that may be used with Selenium. Selenium is a web browser automation tool for web projects (or Appium).\nCucumber is used for acceptance testing, while Selenium is used for automated UI testing.\nTechnical teams (SDETs/programmers) favour Selenium, while non-technical teams often choose Cucumber (business stakeholders and testers).\nCucumber isn't required for Selenium to work. Cucumber's step-definition implementation is based on Selenium or Appium.\nThe script creation with Selenium is complicated, whereas Cucumber is straightforward. Cucumber is a behavior-driven development automation tool that may be used with Selenium. Selenium is a web browser automation tool for web projects (or Appium). Cucumber is used for acceptance testing, while Selenium is used for automated UI testing. Technical teams (SDETs/programmers) favour Selenium, while non-technical teams often choose Cucumber (business stakeholders and testers). Cucumber isn't required for Selenium to work. Cucumber's step-definition implementation is based on Selenium or Appium. The script creation with Selenium is complicated, whereas Cucumber is straightforward.  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "5. Why do we need to use Cucumber with Selenium?",
        "answer": "Cucumber and Selenium are two widely used testing frameworks and technologies. Selenium is widely used for functional testing in many organizations. These companies use Cucumber in conjunction with Selenium because Cucumber makes the application flow easier to read and comprehend. The most important advantage of combining Cucumber and Selenium is that it allows developers to build test cases in simple feature files that managers, non-technical stakeholders, and business analysts can understand. It allows you to develop tests in Gherkin, a human-readable programming language. Java,.NET, PHP, Python, Perl, and other programming languages are supported by the Selenium-Cucumber framework. Selenium",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "6. In a feature file, what is the maximum number of scenarios?",
        "answer": "A feature file in Cucumber can include a maximum of 10 scenarios. This quantity can differ from one project to the next and from one organization to the next. It's advisable to keep the number of scenarios in the feature file to a minimum.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "7. What do you mean by Test Driven Development (TDD)?",
        "answer": "TDD is an abbreviation that stands for Test-Driven Development. This is a development practice in which the test cases are created first, followed by the code that underpins the test cases. TDD may also be used to construct automation testing. TDD takes longer to develop due to the fact that it finds fewer flaws. The TDD development practice has increased the quality of code, which is more reusable and flexible as a result. TDD also aids developers in achieving high test coverage, ranging from 90% to 100%. The sole disadvantage of TDD for developers is that they must build test cases before producing code.   The following is a list of the TDD methodology's basic six-step process: First, all the test cases are written. Based on your requirements, you must create an automated test case.\nCarry out all of the tests: Carry out these automated test cases on the code that has been developed so far.\nModify the code for that test case: You must develop the code to make that test casework as intended if it fails throughout this step.\nRerun the test cases: Now you must rerun the test cases to ensure that all of the previously developed test cases have been implemented.\nModularize your code as follows: This is a step that can be skipped. However, refactoring your code to make it more readable and reusable is recommended. That is why it is necessary.\nFor new test scenarios, repeat steps 1–5: This is the final phase in the process. You must now repeat the process for the remaining test cases till all of them have been implemented. First, all the test cases are written. Based on your requirements, you must create an automated test case. Carry out all of the tests: Carry out these automated test cases on the code that has been developed so far. Modify the code for that test case: You must develop the code to make that test casework as intended if it fails throughout this step. Rerun the test cases: Now you must rerun the test cases to ensure that all of the previously developed test cases have been implemented. Modularize your code as follows: This is a step that can be skipped. However, refactoring your code to make it more readable and reusable is recommended. That is why it is necessary. For new test scenarios, repeat steps 1–5: This is the final phase in the process. You must now repeat the process for the remaining test cases till all of them have been implemented.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "8. Difference between TDD and BDD.",
        "answer": "TDD BDD\nTest-Driven Development (TDD) is a method of developing software that is driven by tests. This means that the developers must first write the test cases before writing the code. BDD is an acronym for behavior-driven development. It's a behavior-based development approach.\nTDD tests are developed in a variety of programming languages, including Java,.NET, Python, Ruby, and others. Given-When-Then steps are used to write BDD tests in a human-readable fashion. Non-technical people may read and comprehend these tests as well.\nThe scope is the key distinction between TDD and BDD. TDD is a development methodology. BDD, on the other hand, is a collaborative methodology.\nWhen a test fails because the specified function does not exist, TDD recommends writing the simplest code possible to pass the test, then reworking to remove duplication, and so on. Creating an executable specification that fails because the feature isn't available, then writing the simplest code possible to make the spec pass in BDD. This process is repeated until a release candidate is ready to be delivered.\nThe test cases are written by the developers in TDD. Users or testers write automated specifications in BDD, which are then wired to the code under test by developers.\nBecause TDD tests are written in specific programming languages, they are difficult to interpret by non-programmers. Non-programmers can read BDD tests since they are written in a human-readable format. TDD BDD\nTest-Driven Development (TDD) is a method of developing software that is driven by tests. This means that the developers must first write the test cases before writing the code. BDD is an acronym for behavior-driven development. It's a behavior-based development approach.\nTDD tests are developed in a variety of programming languages, including Java,.NET, Python, Ruby, and others. Given-When-Then steps are used to write BDD tests in a human-readable fashion. Non-technical people may read and comprehend these tests as well.\nThe scope is the key distinction between TDD and BDD. TDD is a development methodology. BDD, on the other hand, is a collaborative methodology.\nWhen a test fails because the specified function does not exist, TDD recommends writing the simplest code possible to pass the test, then reworking to remove duplication, and so on. Creating an executable specification that fails because the feature isn't available, then writing the simplest code possible to make the spec pass in BDD. This process is repeated until a release candidate is ready to be delivered.\nThe test cases are written by the developers in TDD. Users or testers write automated specifications in BDD, which are then wired to the code under test by developers.\nBecause TDD tests are written in specific programming languages, they are difficult to interpret by non-programmers. Non-programmers can read BDD tests since they are written in a human-readable format. TDD BDD TDD BDD TDD BDD Test-Driven Development (TDD) is a method of developing software that is driven by tests. This means that the developers must first write the test cases before writing the code. BDD is an acronym for behavior-driven development. It's a behavior-based development approach.\nTDD tests are developed in a variety of programming languages, including Java,.NET, Python, Ruby, and others. Given-When-Then steps are used to write BDD tests in a human-readable fashion. Non-technical people may read and comprehend these tests as well.\nThe scope is the key distinction between TDD and BDD. TDD is a development methodology. BDD, on the other hand, is a collaborative methodology.\nWhen a test fails because the specified function does not exist, TDD recommends writing the simplest code possible to pass the test, then reworking to remove duplication, and so on. Creating an executable specification that fails because the feature isn't available, then writing the simplest code possible to make the spec pass in BDD. This process is repeated until a release candidate is ready to be delivered.\nThe test cases are written by the developers in TDD. Users or testers write automated specifications in BDD, which are then wired to the code under test by developers.\nBecause TDD tests are written in specific programming languages, they are difficult to interpret by non-programmers. Non-programmers can read BDD tests since they are written in a human-readable format. Test-Driven Development (TDD) is a method of developing software that is driven by tests. This means that the developers must first write the test cases before writing the code. BDD is an acronym for behavior-driven development. It's a behavior-based development approach. Test-Driven Development (TDD) is a method of developing software that is driven by tests. This means that the developers must first write the test cases before writing the code. BDD is an acronym for behavior-driven development. It's a behavior-based development approach. TDD tests are developed in a variety of programming languages, including Java,.NET, Python, Ruby, and others. Given-When-Then steps are used to write BDD tests in a human-readable fashion. Non-technical people may read and comprehend these tests as well. TDD tests are developed in a variety of programming languages, including Java,.NET, Python, Ruby, and others. Given-When-Then steps are used to write BDD tests in a human-readable fashion. Non-technical people may read and comprehend these tests as well. The scope is the key distinction between TDD and BDD. TDD is a development methodology. BDD, on the other hand, is a collaborative methodology. The scope is the key distinction between TDD and BDD. TDD is a development methodology. BDD, on the other hand, is a collaborative methodology. When a test fails because the specified function does not exist, TDD recommends writing the simplest code possible to pass the test, then reworking to remove duplication, and so on. Creating an executable specification that fails because the feature isn't available, then writing the simplest code possible to make the spec pass in BDD. This process is repeated until a release candidate is ready to be delivered. When a test fails because the specified function does not exist, TDD recommends writing the simplest code possible to pass the test, then reworking to remove duplication, and so on. Creating an executable specification that fails because the feature isn't available, then writing the simplest code possible to make the spec pass in BDD. This process is repeated until a release candidate is ready to be delivered. The test cases are written by the developers in TDD. Users or testers write automated specifications in BDD, which are then wired to the code under test by developers. The test cases are written by the developers in TDD. Users or testers write automated specifications in BDD, which are then wired to the code under test by developers. Because TDD tests are written in specific programming languages, they are difficult to interpret by non-programmers. Non-programmers can read BDD tests since they are written in a human-readable format. Because TDD tests are written in specific programming languages, they are difficult to interpret by non-programmers. Non-programmers can read BDD tests since they are written in a human-readable format.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "9. What is the use of the Options tag in the Cucumber Framework?",
        "answer": "The Options tag is a part of the TestRunner file in the Cucumber framework, and it takes the form of an annotation named @CucumberOptions. It has two parameters: glue and feature: Feature: The path to the feature file is specified by the feature option.\nGlue: The glue argument is used to provide the step definition file's location. Feature: The path to the feature file is specified by the feature option. Feature: Glue: The glue argument is used to provide the step definition file's location. Glue: Example: Example: import org.junit.runner.RunWith;  \nimport cucumber.api.CucumberOptions;  \nimport cucumber.api.junit.Cucumber;   \n@RunWith (Cucumber.class)  \n@CucumberOptions (  \nfeatures = \"src/test/Sample/features \",  \nglue = {\"StepDefinitionFile\"}  \n)   \npublic class SampleTestRunner {  \n} import org.junit.runner.RunWith;  \nimport cucumber.api.CucumberOptions;  \nimport cucumber.api.junit.Cucumber;   \n@RunWith (Cucumber.class)  \n@CucumberOptions (  \nfeatures = \"src/test/Sample/features \",  \nglue = {\"StepDefinitionFile\"}  \n)   \npublic class SampleTestRunner {  \n}",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "10. How does the execution start in Cucumber?",
        "answer": "Cucumber execution will begin at the support level. In support, it will first load the env.rb file, then hooks.rb, and last start executing feature file scenario steps.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "11. What is grouping in the context of Cucumber?",
        "answer": "Cucumber is unconcerned about the names of your step definition files or the order in which you place them. Instead of maintaining all steps in a single file, we can create steps.rb file for each major action/feature. This is referred to as grouping.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "12. How can you run Cucumber tests parallelly?",
        "answer": "The Cucumber JVM Parallel Plugin, which may be used with Serenity BDD, can be used to conduct parallel tests in Cucumber. The plugin will look in the src/test/resources directory for feature files. After that, it will create runners for each file.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "13. What are some of the prerequisites that you should consider while building a Selenium Cucumber automation application?",
        "answer": "We consider the following before building a Selenium Cucumber automation application:- Determine the type of application you'll be testing. Is it a Web app, a mobile app, or a desktop application?\nIs there a need for backend testing? Databases or SDKs, for example.\nIs it necessary to run the app through an internationalization test?\nIt must include a report that allows you to track down a problem with minimal effort.\nIt must be able to generate parametrization tests automatically.\nAny setup-related settings or global attributes should be defined in a config file.\nTo segregate the functionality, use abstraction at every level. Determine the type of application you'll be testing. Is it a Web app, a mobile app, or a desktop application? Is there a need for backend testing? Databases or SDKs, for example. Is it necessary to run the app through an internationalization test? It must include a report that allows you to track down a problem with minimal effort. It must be able to generate parametrization tests automatically. Any setup-related settings or global attributes should be defined in a config file. To segregate the functionality, use abstraction at every level.",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "14. Difference between JBehave and Cucumber.",
        "answer": "Despite the fact that Cucumber and JBehave have the same goal in mind, acceptance tests are two quite distinct frameworks: Cucumber is built on Ruby, while JBehave is a pure Java Framework.\nCucumber is built on features, whereas JBehave is based on stories. Cucumber is built on Ruby, while JBehave is a pure Java Framework. Cucumber is built on features, whereas JBehave is based on stories.  ",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "15. How can you run a selected test from a group of tests in Cucumber?",
        "answer": "We may execute a single test from a set of tests in the Cucumber framework using the tags idea. This is found in the TestRunner file's @CucumberOptions section. With the use of the @t<agname> keyword, we may tag a scenario in the feature file. A scenario can have one or more tags within the feature file. We can separate test scenarios with the assistance of tagging. We must pass the <tagname> value within the tags argument to execute a selected test in Cucumber, and we must pass the <~tagname> value within the tags parameter to exclude a test from running. Conclusion: Conclusion: Cucumber is frequently used in BDD because it is an open-source technology. It's also quite simple to grasp, has a lot of room for additional features, and it's rather easy to connect Cucumber with Selenium or other third-party tools/jars, etc.\nIt is quite easy for anyone who has just started learning Cucumber or for those who have intermediate experience in Cucumber/BDD because it has active help groups/members.\nCucumber also allows for connectivity with an excel sheet and Jenkins.   Recommended Resources and References: Recommended Resources and References: Cucumber Documentation\nAutomation Testing\nSelenium WebDriver\nRobot Framework Cucumber Documentation Cucumber Documentation Automation Testing Automation Testing Selenium WebDriver Selenium WebDriver Robot Framework Robot Framework",
        "reference": "interviewbit.com",
        "role": "cucumber"
    },
    {
        "question": "1) What is Cucumber? Why is it used?",
        "answer": "Cucumber is a testing tool based on Behavior Driven Development (BDD) framework. It is used to run functional tests written in plain text and develop test cases for software functionality. It plays a supporting role in automated testing.\nIn other words, we can say that \"Cucumber is a software tool used by the testers to develop test cases for the testing of behavior of the software.\"",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "2) In which language is Cucumber software written?",
        "answer": "Cucumber software is written in a Ruby programming language.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "3) What is the main aim of the Behavior Driven Development (BDD) framework?",
        "answer": "The main aim of the Behavior Driven Development framework is to make various project roles such as Business Analysts, Quality Assurance, Developers, etc., understand the application without diving deep into the technical aspects.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "4) What language is used by the Cucumber tool?",
        "answer": "The Cucumber tool uses the Gherkin language, a simple English representation of the application behavior. The Gherkin language uses several keywords to describe the behavior of applications such as Feature, Scenario, Scenario Outline, Given, When, Then, etc.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "5) What are the two files required to execute a Cucumber test scenario?",
        "answer": "Following are the two files required to execute a Cucumber test scenario:\nADVERTISEMENT\nFeatures\nStep Definition",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "6) What do you understand by a feature file?",
        "answer": "A feature file is used to provide a high-level description of an Application Under Test (AUT). The first line of the feature file must start with the keyword 'Feature' followed by the description of the application under test. A feature file may include multiple scenarios within the same file, and the extension of the feature file must be \".feature.\"",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "7) What are the various keywords used in the Cucumber tool for writing a scenario?",
        "answer": "Following are the keywords that are used for writing a scenario in the Cucumber tool:\nGiven\nWhen\nThen\nAnd",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "8) What is the use of the Background keyword in Cucumber?",
        "answer": "In the Cucumber tool, the Background keyword is used to group multiple given statements into a single group. The keyword is mostly used when the same set of given statements are repeated in each scenario of the feature file.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "9) What is the usage of a Scenario Outline in the Cucumber tool?",
        "answer": "In Cucumber, a Scenario outline is used as a parameter of scenarios. This is used when the same scenario needs to be executed for multiple sets of data; however, the test steps remain the same. Scenario Outline must be followed by the keyword 'Examples', which specify the set of values for each parameter.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "10) What do you understand by the term step definition in Cucumber?",
        "answer": "In Cucumber, a step definition is the actual code implementation of the feature mentioned in the feature file.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "11) Which programming languages are supported by Cucumber?",
        "answer": "The Cucumber tool supports multiple programming languages such as Java, .Net, Ruby, etc. You can also integrate this tool easily with multiple tools such as Selenium, Capybara, etc.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "12) What are the differences between Jbehave and Cucumber?",
        "answer": "Although Cucumber and Jbehave are designed for the same purpose, the most distinctive difference between them is that Jbehave is based on stories while Cucumber is based on features.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "13) What do you understand by regular expressions?",
        "answer": "A regular expression is a pattern used to describe a certain amount of text. The most basic regular expression consists of a single literal character.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "14) What software is used to run a Cucumber Web Test case?",
        "answer": "Following software is used to run a Cucumber Web Test case:\nCucumber\nRuby and its Development Kit\nIDE like ActiveState\nWatir ( To simulate browser)\nAnsicon and RSpec (if required)",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "15) What are the most significant advantages of the Cucumber framework?",
        "answer": "Following is the list of advantages of the Cucumber framework that makes Cucumber an ideal choice for rapidly evolving agile methodology in today's corporate world:\nCucumber is an open-source and free-to-use tool.\nIt is easy to use. Even non-technical users can also understand the scenarios because of its plain text representation.\nIt bridges the communication gap between various project stakeholders such as Business Analysts, Developers, and Quality Assurance personnel.\nWith the Cucumber tool, we can develop automation test cases that are easier to maintain and understand.\nIt is easy to integrate with other tools such as Selenium and Capybara.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "16) What do you understand by test harness in Cucumber?",
        "answer": "In Cucumber, the test harness allows for separating responsibility between setting up the context and interacting with the browser, and cleaning up the step definition files. It collects stubs, drivers, and other supporting tools required to automate test execution in testing.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "17) What is the difference between RSpec and Cucumber? When should we use RSpec and when to use Cucumber?",
        "answer": "RSpec and Cucumber both are the example of testing frameworks. RSpec uses traditional Unit Testing. It means it uses testing a class or part of the application in isolation from the rest of the application. So your model does what your model is supposed to do, the controller does what it is supposed to do, etc. RSpec and Cucumber both are used for Acceptance Testing, also called ATDD, BDD, etc.\nDifference between RSpec and Cucumber\nThe main difference between RSpec and Cucumber is the business readability factor.\nRSpec is mainly used for Unit Testing. On the other hand, Cucumber is mainly used for Behavior-driven development. We can also use it for System and Integration Testing.\nIn Cucumber, the specifications or features are separate from the test code, so the product owners can provide or review the specification without going through the code. These are the .feature files that you make in Cucumber.\nRSpec also has a similar mechanism, but instead of describing a step with a Describe or Context, it uses the business specification to execute that statement. This approach is a little easier for developers to work with but a bit harder for non-technical guys.\nWhich should we use?\nFor a core developer, it is the best choice to use RSpec. It is easier to understand for a technical person and offers a few advantages in keeping things scoped and under control because you don't have to mess up with RegExs for test steps.\nIf you are building this for a client, you should choose Cucumber for Acceptance Testing and use RSpec for Unit Testing.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "18) What is Selenium?",
        "answer": "Selenium is a web browser automation tool widely used for Functional Testing of web-based applications. Selenium supports different programming languages such as Java, Python, Ruby, C#, etc.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "19) What is the difference between Selenium and Cucumber?",
        "answer": "Selenium and Cucumber are both open-source testing tools, and both are used for functional testing. But there are some differences between them.\nFollowing are some critical differences between Selenium and Cucumber:\nSelenium is a web browser automation tool for web apps, while Cucumber is an automation tool for behavior-driven development that can be used with Selenium (or Appium).\nSelenium is used for automated UI testing, while Cucumber is used for acceptance testing.\nSelenium is preferred by technical teams (SDETs/programmers), while Cucumber is typically preferred by non-technical teams (business stakeholders and testers).\nSelenium can work independently of Cucumber. Cucumber depends on Selenium or Appium for step-definition implementation.\nIn Selenium, the script creation is complex, while Cucumber is simpler than Selenium.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "20) Why we have to use Cucumber with Selenium?",
        "answer": "Cucumber and Selenium are both testing frameworks and prevalent technologies. Many organizations use Selenium for functional testing. Along with Selenium, these organizations integrate Cucumber with Selenium as Cucumber makes it easy to read and understand the application flow. The most significant benefit of using Cucumber with Selenium is that it facilitates developers to write test cases in simple feature files easily understood by managers, non-technical stakeholders, and business analysts. It provides the facility to write tests in a human-readable language called Gherkin. The Selenium-Cucumber framework supports programming languages such as Java, .NET, PHP, Python, Perl, etc.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "21) What do you understand by the Step Definition?",
        "answer": "Step definition is used to map the Test Case Steps in the feature files to code. It executes the steps on Application under Test and checks the results. To execute step definition, it must match the given component in a feature.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "22) What are the maximum numbers of scenarios that we can includ in the feature file?",
        "answer": "In Cucumber, a feature file can contain a maximum of 10 scenarios. This number can vary from project to project and from one organization to another organization. It is the best practice to limit the number of scenarios included in the feature file.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "23) What is the purpose of the behavior-driven development (BDD) methodology in the real world?",
        "answer": "Behavior Driven Development or BDD is a methodology used to understand the functionality of an application in the simple plain text representation. The primary purpose of the Behavior Driven Development framework is to make various project roles such as Business Analysts, Quality Assurance, Developers, Support Teams understand the application without diving deep into the technical aspects.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "24) What do you understand by TDD, and what are the different processes used in TDD?",
        "answer": "TDD is an acronym that stands for Test-Driven Development. This is a software development technique used to create the test cases first and then write the code underlying those test cases. Although TDD is a development technique, it can also be used for automation testing development. TDD takes more time for development because it tends to find very few defects. The result provided by the TDD development technique has improved the quality of code, and that can be more reusable and flexible. TDD also helps developers to achieve high test coverage of about 90-100%. The only disadvantage for developers following TDD is to write their test cases before writing the code.\nFollowing is the list of simple 6 step process used by TDD methodology:\nFirst, write the test case: You have to write an automated test case according to your requirements.\nRun all the test cases: Now, run these automated test cases on the currently developed code.\nDevelop the code for that test case: In this process, you must write the code to make that test case work as expected if the test case fails.\nRun test cases again: Now, you have to rerun the test cases and check if all the test cases developed so far are implemented.\nRefactor your code: This is an optional step. But, it is advised to refactor your code to make it more readable and reusable. That's why it is essential.\nRepeat steps 1- 5 for new test cases: This is the last step. Here, you have to repeat the cycle for the other test cases until all the test cases are implemented.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "25) What are the similarities between BDD and TDD?",
        "answer": "TDD stands for Test-Driven Development, and BDD stands for Behavior Driven Development. Both are two software development techniques.\nBDD and TDD are both very similar as they are both testing strategies for a software application. In both cases, the developers have to write the test before writing the code to pass the test. The second main similarity between them is in both cases; the tests can be used as part of an automated testing framework to prevent bugs.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "26) What are the main differences between TDD and BDD?",
        "answer": "Following is the list of main differences between TDD and BDD:\nTDD BDD\nTDD stands for Test-Driven Development. It is a test-centered development process. This means the developers have first to write the test cases then code. BDD stands for Behavior Driven Development. It is a Behavior centered development process.\nIn TDD, writing a test fails because the specified functionality doesn't exist, then writing the most straightforward code that can make the test pass, then refactoring to remove duplication, etc. In BDD, creating an executable specification that fails because the feature doesn't exist, then writing the most straightforward code that can make the spec pass. You repeat this until a release candidate is ready to ship.\nTDD tests are written using programming languages such as Java, .Net, Python, Ruby, etc. BDD tests are written in a human-readable format using Given-When-Then steps. These tests are readable and understandable by non-technical persons also.\nTDD tests are difficult to read by non-programmers as they are written in specific programming languages. BDD tests are readable by non-programmers also as they are written in a human-readable format.\nThe critical difference between TDD and BDD is the scope. TDD is a development practice. On the other hand, BDD is a team methodology.\nIn TDD, the developers write the test cases. In BDD, the automated specifications are created by users or testers then the developers wiring them to the code under test.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "27) What do you understand by cucumber dry run?",
        "answer": "Cucumber dry run is used to compile cucumber features files and step definitions. It is run to find any compilation errors. If it finds anyone, it will show when we use dry run.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "",
        "answer": "In the Cucumber testing approach, the TestRunner class provides the link between the feature file and the step definition file. The TestRunner class is generally an empty class with no class definition.\nExample of a TestRunner class in Cucumber:\nPackage com.sample.TestRunner  \nimportorg.junit.runner.RunWith;   \nimportcucumber.api.CucumberOptions;   \nimportcucumber.api.junit.Cucumber;  \n@RunWith(Cucumber.class)   \n@CucumberOptions(features=\"Features\",glue={\"StepDefinition\"})   \npublic class Runner   \n{  \n}",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "29) Should we write code within the TestRunner class?",
        "answer": "It is advised not to write code under the TestRunner class. It should include the tags @RunWith and @CucumberOptions.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "30) What is the starting point of execution for feature files?",
        "answer": "When Cucumber is integrated with Selenium, the starting point of execution must be from the TestRunner class.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "31) How can you use the Options tag in the Cucumber framework?",
        "answer": "In the Cucumber framework, the Options tag is a part of the TestRunner file and comes in the form of an annotation called @CucumberOptions. It contains two parameters feature and glue.\nFeature parameter: The feature parameter is used to specify the path of the feature file.\nGlue parameter: The glue parameter is used to specify the path of the step definition file.\nSee the code implementation of TestRunner file with Option tag:\nimport org.junit.runner.RunWith;  \nimport cucumber.api.CucumberOptions;  \nimport cucumber.api.junit.Cucumber;   \n@RunWith (Cucumber.class)  \n@CucumberOptions (  \nfeatures = \"src/test/java/features \",  \nglue = {\"stepDefinitions\"}  \n)   \npublic class TestRunner {  \n}  \nWe have to import org.junit.runner.RunWith for the @RunWith annotation and cucumber.api.CucumberOptions for the @CucumberOptions annotation.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "32) What is the use of features property under the Cucumber Options tag?",
        "answer": "In the Cucumber framework, the features property is used to identify the location of the feature files.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "33) What is the use of glue property under the Cucumber Options tag?",
        "answer": "The Glue property is used to facilitate the Cucumber framework to identify the location of step definition files.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "34) What are the two build management tools that can be integrated with Cucumber?",
        "answer": "Following are the two build management tools that can be integrated with Cucumber:\nGradle\nMaven",
        "reference": "javatpoint.com",
        "role": "cucumber"
    },
    {
        "question": "35) What is the use of hooks in the Cucumber framework?",
        "answer": "In the Cucumber framework, the hooks are used to control the flow of the program and optimize lines of code. A block of code tagged with hooks in Cucumber can run before or post a scenario with the help of @Before and @After annotations.\nSome scenarios may require certain preconditions for execution, such as launching the application, establishing a database connection, configuring the test data, and so on. Also, certain postconditions should be executed, such as terminating database connection, closing the browser, refreshing test data, application log out, and so on. All these conditions are handled in Cucumber with the help of the hooks. The @Before hook executes before the actual scenario, and the @After hook executes after the actual scenario even if the test corresponding to the actual scenario fails.\nFor the @Before annotation, we have to import cucumber.api.java.en.Before and for the @After annotation, we have to import cucumber.api.java.en.After.\nSee the code implementation with hooks:\nThe feature file: In this feature file, we have included two scenarios:\nFeature: Invoice Generation.\nScenario 1: Verify the invoice generates in pdf format.\nGiven User navigates to Invoice Page.\nThen User should be able to open the invoice in pdf format.\nScenario2: Verify the invoice fields.\nGiven User opens the invoice.\nThen User should be able to see the payment amount in invoice.\nSee the step definition file:\nimport cucumber.api.java.en.Given;  \nimport cucumber.api.java.en.Then;  \nimport cucumber.api.java.en.Before;  \nimport cucumber.api.java.en.After;  \npublic class InvoiceValidation {  \n@Given (\"^User navigates to Invoice Page$\")  \npublic void navigate_to_invoice () {  \n      System.out.println (\"Navigation to Invoice Page\");  \n    }  \n@Then (\"^User should be able to open the invoice in pdf format$\")  \npublic void open_invoice_pdf () {  \n      System.out.println (\"Invoice opened in pdf format \");  \n      }  \n@Given (\"^User opens the invoice$\")  \npublic void open_invoice () {  \n      System.out.println (\"Invoice is opened\");  \n    }  \n@Then (\"^User should be able to see the payment amount in invoice$\")  \npublic void verify_payment_invoice () {  \n      System.out.println (\"Invoice contains payment amount\");  \n}  \n@Before  \n    public void precondition () {  \n        System.out.println (\"The method runs before all scenarios\");  \n    }   \n@After  \n    public void postcondition () {  \n        System.out.println (\"The method runs after all scenarios \");  \n    }  \n}  \nIn the above example, you can see that we have used two scenarios, the test method precondition with @Before annotation and the test method postcondition with @After annotation.",
        "reference": "javatpoint.com",
        "role": "cucumber"
    }
]