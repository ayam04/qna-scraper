[
    {
        "question": "1. Explain file handling in Perl.",
        "answer": "File handles are internal Perl structures associated with file names. It is similar to a connection that can be used to change the contents of a file, and the connection is named (the FileHandle) for speedy access. A Perl File Handler provides access to files such as texts, logs, or configuration files. It is possible to create, read, write, open, copy, and close files using Perl file handles. In Perl, there are three basic FileHandles as follows: STDIN  (Standard Input)\nSTDOUT (Standard Output)\nSTDERR Standard Error) STDIN  (Standard Input) STDOUT (Standard Output) STDERR Standard Error) Usually, FileHandling occurs via the open method. Syntax:  open(FileHandle, Mode, FileName); Syntax: open(FileHandle, Mode, FileName); Here, FileHandle: Refers to the file that can be used until its closure.\nMode: The mode of opening a file.\nFile Name: The file name to be opened. FileHandle: Refers to the file that can be used until its closure. FileHandle: Mode: The mode of opening a file. Mode: File Name: The file name to be opened. File Name: The close function is used to close the FileHandle. Syntax: close(FileHandle); Syntax: close(FileHandle); Here, FileHandle: The file handle to close. FileHandle: The file handle to close. FileHandle:",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "2. What is Perl used for?",
        "answer": "Programmers with a background in computer programming can easily write, learn, and understand Perl. Several features of Perl come from C and Shell scripts, and the language is used in systems administration, networking, and other applications in which user interfaces are involved. Since it has good text manipulation capabilities and can deal with binary files, it is used to develop CGI (Common Gateway Interface) programs. Application of Perl Application of Perl  ",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "3. What are the characteristics of Perl?",
        "answer": "Here are some characteristics of Perl: Most of the language's features, such as variables, statements, control structures, expressions, and subroutines, derive from C.\nFurthermore, it borrows shell scripting features for identifying data types such as scalars, arrays, and hashes.\nFurthermore, Perl includes inbuilt functions that are often used in shell programs, such as sorting and utilizing system facilities.\nIts Perl5 version supports complex data structures and has an object-oriented programming model that includes references, packages, and compiler directives.\nAuto-data typing and memory management are included in all versions of Perl. The interpreter determines the storage and memory requirements of each data type and allocates and deallocates memory accordingly.\nAdditionally, it performs typecasting during the run time such as converting an integer to a string, and other conversions that are not legitimate.\nIt comes with a number of powerful utilities (APIs) that enable you for text manipulation. These utilities are useful when working with markup languages such as HTML, XML, and others.\nThe Perl language is also extendable, with libraries supporting XML and integrating with databases like MySQL and MySQL.\nWith low defect density and fewer security flaws, Perl is one of the most secure programming languages, even being certified by Coverity, a third-party security organization. Most of the language's features, such as variables, statements, control structures, expressions, and subroutines, derive from C. Furthermore, it borrows shell scripting features for identifying data types such as scalars, arrays, and hashes. Furthermore, Perl includes inbuilt functions that are often used in shell programs, such as sorting and utilizing system facilities. Its Perl5 version supports complex data structures and has an object-oriented programming model that includes references, packages, and compiler directives. Auto-data typing and memory management are included in all versions of Perl. The interpreter determines the storage and memory requirements of each data type and allocates and deallocates memory accordingly. Additionally, it performs typecasting during the run time such as converting an integer to a string, and other conversions that are not legitimate. It comes with a number of powerful utilities (APIs) that enable you for text manipulation. These utilities are useful when working with markup languages such as HTML, XML, and others. The Perl language is also extendable, with libraries supporting XML and integrating with databases like MySQL and MySQL. With low defect density and fewer security flaws, Perl is one of the most secure programming languages, even being certified by Coverity, a third-party security organization.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "4. Describe some of the advantages and disadvantages of Perl.",
        "answer": "The Perl programming language has several advantages and disadvantages. Here's a list of a few:   Advantages of Perl Advantages of Perl The text handling and parsing capabilities of Perl are among the best compared to those of other programming languages.\nUnlike C, Perl scripts do not need to be compiled, so they execute very quickly.\nIt is open-source, cross-platform, and compatible with markup languages such as HTML and XML.\nIn addition to being simple to program and understand, this language is also easy to learn.\nIt is very efficient in text manipulation i.e., Regular Expression. It also provides socket capability.\nMost commonly used for Payment Gateways in Web development, for Automated Testing, and for most of the Storage-related stuff. Due to its embeddable nature, it can be embedded in database servers or Network web servers.\nA vast collection of open-source modules is available on the CPAN (Comprehensive Perl Archive Network) which provides many powerful extensions to Perl's standard library.\nThe CPAN library makes Perl development easier. The text handling and parsing capabilities of Perl are among the best compared to those of other programming languages. Unlike C, Perl scripts do not need to be compiled, so they execute very quickly. It is open-source, cross-platform, and compatible with markup languages such as HTML and XML. In addition to being simple to program and understand, this language is also easy to learn. It is very efficient in text manipulation i.e., Regular Expression. It also provides socket capability. Most commonly used for Payment Gateways in Web development, for Automated Testing, and for most of the Storage-related stuff. Due to its embeddable nature, it can be embedded in database servers or Network web servers. A vast collection of open-source modules is available on the CPAN (Comprehensive Perl Archive Network) which provides many powerful extensions to Perl's standard library. The CPAN library makes Perl development easier. Disadvantages of Perl Disadvantages of Perl Due to CPAN modules, Perl does not support portability.\nIt has minimal GUI support compared to other programming languages.\nIn this case, you will have to refer to complex library modules that are not easy to comprehend.\nExperience is required to understand complex patterns.\nEvery time a program is modified, it must be interpreted again.\nPerl allows you to achieve the same result in several ways, which makes it untidy and difficult to read.\nCompared to other languages, usability is lower. Due to CPAN modules, Perl does not support portability. It has minimal GUI support compared to other programming languages. In this case, you will have to refer to complex library modules that are not easy to comprehend. Experience is required to understand complex patterns. Every time a program is modified, it must be interpreted again. Perl allows you to achieve the same result in several ways, which makes it untidy and difficult to read. Compared to other languages, usability is lower.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "5. What does a Perl identifier mean?",
        "answer": "Perl programs typically consist of a series of statements and declarations running from top to bottom. Control structures such as loops and subroutines allow you to bounce around within the code. There must be a semicolon (;) at the end of every simple statement. Perl identifiers are essentially the names that are used to identify classes, variables, modules, functions, and other objects. Variable names in Perl begin with either $, @, or % followed by letters, zero, underscores, or digits (0-9). A Perl identifier cannot contain punctuation characters such as @, $, or %. The Perl programming language is case-sensitive, for example, $Manpower and $manpower have different meanings.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "6. How are variables declared in Perl?",
        "answer": "It is not required to explicitly declare variables in Perl in order to reserve memory space. A variable is automatically declared when a value is assigned to it. In Perl, the = sign is used when assigning data to variables.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "7. Do you know how to comment in Perl?",
        "answer": "Perl's code also provides comment facilities, like those in other languages. A single-line comment is available as well as a multi-line comment. Single line comment: Precede the comment with #. Single line comment: Precede the comment with #. Single line comment: Example: $a = 5;  \nprint\"$a\\n\";   #a is a variable $a = 5;  \nprint\"$a\\n\";   #a is a variable Output: 5 5 Multi-line comment: Add =begin and =cut statement before and after the comment. Multi-line comment: Add =begin and =cut statement before and after the comment. Multi-line comment: Example: $a = 3;  \nprint\"$a\\n\";   \n=begin  \nPerl program to   \ndemonstrate multiple line comments. \n=cut $a = 3;  \nprint\"$a\\n\";   \n=begin  \nPerl program to   \ndemonstrate multiple line comments. \n=cut Output: 3 3",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "8. What data types does Perl support?",
        "answer": "Perl is extremely flexible when it comes to handling data. Perl variables can hold different types of data depending on their data types. When using Perl, you do not need to specify the data type since the language is loosely typed. Perl interpreters choose types according to the data context. There are no Boolean data types in Perl. The comment begins with a # sign. The following are the three basic data types supported by Perl:   1. Scalars: In this case, we are referring to a single unit of data that may be a floating-point number, integer number, a character, a string, or a reference. A $ sign precedes a scalar data type. 1. Scalars: Example: # Perl program  that illustrates the Scalars data type \n$empno = 3036;                  # An integer assignment\n$name = \"Scaler\";               # A string assignment\n$salary = 12.5;                 # A floating point  \n\n# displaying result\nprint \"Empno = $empno\\n\";\nprint \"Name = $name\\n\";\nprint \"Salary = $salary\\n\"; # Perl program  that illustrates the Scalars data type \n$empno = 3036;                  # An integer assignment\n$name = \"Scaler\";               # A string assignment\n$salary = 12.5;                 # A floating point  \n\n# displaying result\nprint \"Empno = $empno\\n\";\nprint \"Name = $name\\n\";\nprint \"Salary = $salary\\n\"; # Perl program  that illustrates the Scalars data type 3036 # An integer assignment \"Scaler\" # A string assignment 12.5 # A floating point # displaying result print \"Empno = $empno\\n\" print \"Name = $name\\n\" print \"Salary = $salary\\n\" Output: Empno = 3036\nName = Scaler\nSalary = 12.5 Empno = 3036\nName = Scaler\nSalary = 12.5 3036 12.5 Scalar data types can be operated on in a variety of ways, including multiplication, subtraction, addition, etc. Example: # Perl Program  that illustrates the Scalars operations\n$str = \"Scaler\" . \" by InterviewBit\";   # Concatenates strings\n$sum = 10 + 20;                         # adds two numbers  \n$mul = 5 * 10;                          # multiplies two numbers   \n$concat = $str . $sum;               # concatenates string and number    \n# displaying result\nprint \"str = $str\\n\";\nprint \"sum = $sum\\n\";\nprint \"mul = $mul\\n\";\nprint \"concat = $concat\\n\"; # Perl Program  that illustrates the Scalars operations\n$str = \"Scaler\" . \" by InterviewBit\";   # Concatenates strings\n$sum = 10 + 20;                         # adds two numbers  \n$mul = 5 * 10;                          # multiplies two numbers   \n$concat = $str . $sum;               # concatenates string and number    \n# displaying result\nprint \"str = $str\\n\";\nprint \"sum = $sum\\n\";\nprint \"mul = $mul\\n\";\nprint \"concat = $concat\\n\"; # Perl Program  that illustrates the Scalars operations \"Scaler\" \" by InterviewBit\" # Concatenates strings 10 20 # adds two numbers 5 10 # multiplies two numbers # concatenates string and number # displaying result print \"str = $str\\n\" print \"sum = $sum\\n\" print \"mul = $mul\\n\" print \"concat = $concat\\n\" Output: str = Scaler by InterviewBit\nsum = 30\nmul = 50\nconcat = Scaler by InterviewBit30 str = Scaler by InterviewBit\nsum = 30\nmul = 50\nconcat = Scaler by InterviewBit30 30 50 0 2. Arrays of scalars: An array is an ordered list of scalar values that can be accessed through a numeric index that starts at 0. It stores the value of the same data type in the form of an ordered list. The '@' sign precedes the array name in Perl when declaring an array. 2. Arrays of scalars: @empno= (23, 28, 30, 32) @empno= (23, 28, 30, 32) It will create an array of integers that contains the values 23, 28, and 32. To access a single element of an array, we use the ‘$’ sign. $empno[1]; $empno[1]; It will produce an output of 28. Example: # Perl program that illustrates the array data type \n#!/usr/bin/perl\n@empno = (23, 24, 26, 28);                         # creation of arrays\n@name = (\"Scaler\", \"by\", \"InterviewBit\");\n\n# displaying result\nprint \"\\$empno[0] = $empno[0]\\n\";\nprint \"\\$empno[1] = $empno[1]\\n\";\nprint \"\\$empno[2] = $empno[2]\\n\";\nprint \"\\$empno[3] = $empno[3]\\n\";\nprint \"\\$name[0] = $name[0]\\n\";\nprint \"\\$name[1] = $name[1]\\n\";\nprint \"\\$name[2] = $name[2]\\n\"; # Perl program that illustrates the array data type \n#!/usr/bin/perl\n@empno = (23, 24, 26, 28);                         # creation of arrays\n@name = (\"Scaler\", \"by\", \"InterviewBit\");\n\n# displaying result\nprint \"\\$empno[0] = $empno[0]\\n\";\nprint \"\\$empno[1] = $empno[1]\\n\";\nprint \"\\$empno[2] = $empno[2]\\n\";\nprint \"\\$empno[3] = $empno[3]\\n\";\nprint \"\\$name[0] = $name[0]\\n\";\nprint \"\\$name[1] = $name[1]\\n\";\nprint \"\\$name[2] = $name[2]\\n\"; # Perl program that illustrates the array data type #!/usr/bin/perl 23 24 26 28 # creation of arrays \"Scaler\" \"by\" \"InterviewBit\" # displaying result print \"\\$empno[0] = $empno[0]\\n\" print \"\\$empno[1] = $empno[1]\\n\" print \"\\$empno[2] = $empno[2]\\n\" print \"\\$empno[3] = $empno[3]\\n\" print \"\\$name[0] = $name[0]\\n\" print \"\\$name[1] = $name[1]\\n\" print \"\\$name[2] = $name[2]\\n\" Output: $empno[0] = 23\n$empno[1] = 24\n$empno[2] = 26\n$empno[3] = 28\n$name[0] = Scaler\n$name[1] = by\n$name[2] = InterviewBit $empno[0] = 23\n$empno[1] = 24\n$empno[2] = 26\n$empno[3] = 28\n$name[0] = Scaler\n$name[1] = by\n$name[2] = InterviewBit 0 23 1 24 2 26 3 28 0 1 2 3. Hashes of scalars: It is also known as an associative array. Hashes are lists of unordered key/value pairs that can be accessed by using their keys as subscripts. The symbol '%' is used in Perl to declare hash. In order to access a value, follow the '$' symbol by the key enclosed in braces. 3. Hashes of scalars: Example # Perl program that illustrates the Hashes data type \n%data = ('Scaler', 3, 'by', 5, 'InterviewBit', 9);\n#displaying result\nprint \"\\$data{'Scaler'} = $data{'Scaler'}\\n\";\nprint \"\\$data{'by'} = $data{'by'}\\n\";\nprint \"\\$data{'InterviewBit'} = $data{'InterviewBit'}\\n\"; # Perl program that illustrates the Hashes data type \n%data = ('Scaler', 3, 'by', 5, 'InterviewBit', 9);\n#displaying result\nprint \"\\$data{'Scaler'} = $data{'Scaler'}\\n\";\nprint \"\\$data{'by'} = $data{'by'}\\n\";\nprint \"\\$data{'InterviewBit'} = $data{'InterviewBit'}\\n\"; # Perl program that illustrates the Hashes data type 'Scaler' 3 'by' 5 'InterviewBit' 9 #displaying result print \"\\$data{'Scaler'} = $data{'Scaler'}\\n\" print \"\\$data{'by'} = $data{'by'}\\n\" print \"\\$data{'InterviewBit'} = $data{'InterviewBit'}\\n\" Output: $data{'scaler'} = 3\n$data{'by'} = 5\n$data{'InterviewBit'} = 9 $data{'scaler'} = 3\n$data{'by'} = 5\n$data{'InterviewBit'} = 9 'scaler' 3 'by' 5 'InterviewBit' 9",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "9. What is the default scope of the Perl variables?",
        "answer": "The scope of a variable refers to the part/area of the program in which it can be accessed. The scope of variables can also be referred to as their visibility in a program. A variable can be declared as either a global variable or a private variable in Perl. The term \"lexical variable\" also refers to private variables. Variables in Perl have a global scope by default. 1. Global Variable: Almost every function or block in a program can access and use global variables. A global variable is visible throughout the entire program. Each part of the program has access to global variables. 1. Global Variable: Example: The variable $employer declared at the beginning of the code will be visible till the end of the program, even inside blocks and even if those are in the function declarations. If we change the variable inside the block, that will change the value for the rest of the code, even outside of the block. # Perl program to demonstrate the scope of Global variables\n$employer = \"Scaler Academy\";      # Global variable declaration\nprint \"$employer\\n\";               # Printing the global variable\n# block starting\n{\n  # Printing $name's value inside a block \n  # since global variables can be used within blocks. \n   print \"$employer\\n\";\n   $employer = \"InterviewBit\";    # changing the value of $name\n   print \"$employer\\n\"; \n}\nprint \"$employer\\n\"; # Perl program to demonstrate the scope of Global variables\n$employer = \"Scaler Academy\";      # Global variable declaration\nprint \"$employer\\n\";               # Printing the global variable\n# block starting\n{\n  # Printing $name's value inside a block \n  # since global variables can be used within blocks. \n   print \"$employer\\n\";\n   $employer = \"InterviewBit\";    # changing the value of $name\n   print \"$employer\\n\"; \n}\nprint \"$employer\\n\"; # Perl program to demonstrate the scope of Global variables \"Scaler Academy\" # Global variable declaration print \"$employer\\n\" # Printing the global variable # block starting # Printing $name's value inside a block # since global variables can be used within blocks. print \"$employer\\n\" \"InterviewBit\" # changing the value of $name print \"$employer\\n\" print \"$employer\\n\" Output: Scaler Academy\nScaler Academy\nInterviewBit\nInterviewBit Scaler Academy\nScaler Academy\nInterviewBit\nInterviewBit 2. Private variables: Private variables in Perl are defined using my keyword before a variable. my keyword confines variables in a function or block in which it is declared. A block can either be a for loop, a while loop, or a block of code with curly braces around it. The local variable scope is local, its existence lies between those two curly braces(block of code), outside of that block this variable doesn’t exist. These variables are also known as lexical variables. 2. Private variables: Example: # Perl program to demonstrate the scope of Private variables  \n$empname = \"Sakshi\";             # global variable \n$empid = 36;\nprint $empid.\" \".$empname.\"\\n\";  \n$empid++;                        # value of empid is incremented to 2\n# block starting\n{      \n   # my keyword to declare a private variable within block\n   my $new_empname = \"Swati\";       \n   \n   # accessing global variable empid inside the block\n   print $empid.\" \".$new_empname.\"\\n\";\n   $empid++;                   # value of empid is incremented to 3\n}\n \n# $new_empname cannot be used outside block,\n# so nothing will be printed \nprint \"Private variable in above block: \".$new_empname.\"\\n\"; \n \n# declaring function\nsub scaler \n{\n \n   #private variable declaration changes/hides \n   #the global variable $empname \n   my $empname = \"Hide\"; \n   print $empid.\" \".$empname.\"\\n\";\n}\n \n# calling the function\nscaler(); # Perl program to demonstrate the scope of Private variables  \n$empname = \"Sakshi\";             # global variable \n$empid = 36;\nprint $empid.\" \".$empname.\"\\n\";  \n$empid++;                        # value of empid is incremented to 2\n# block starting\n{      \n   # my keyword to declare a private variable within block\n   my $new_empname = \"Swati\";       \n   \n   # accessing global variable empid inside the block\n   print $empid.\" \".$new_empname.\"\\n\";\n   $empid++;                   # value of empid is incremented to 3\n}\n \n# $new_empname cannot be used outside block,\n# so nothing will be printed \nprint \"Private variable in above block: \".$new_empname.\"\\n\"; \n \n# declaring function\nsub scaler \n{\n \n   #private variable declaration changes/hides \n   #the global variable $empname \n   my $empname = \"Hide\"; \n   print $empid.\" \".$empname.\"\\n\";\n}\n \n# calling the function\nscaler(); # Perl program to demonstrate the scope of Private variables \"Sakshi\" # global variable 36 print \" \" \"\\n\" # value of empid is incremented to 2 # block starting # my keyword to declare a private variable within block my \"Swati\" # accessing global variable empid inside the block print \" \" \"\\n\" # value of empid is incremented to 3 # $new_empname cannot be used outside block, # so nothing will be printed print \"Private variable in above block: \" \"\\n\" # declaring function sub scaler sub scaler #private variable declaration changes/hides #the global variable $empname my \"Hide\" print \" \" \"\\n\" # calling the function Output: 36 Sakshi\n37 Swati\nPrivate variable in the above block: \n38 Hide 36 Sakshi\n37 Swati\nPrivate variable in the above block: \n38 Hide 36 37 38",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "10. What is Perl?",
        "answer": "Perl is a high-level, general-purpose, dynamic, scripting (interpreted), feature-rich, and stable programming language that was originally designed for text manipulation and now comes in handy for a wide variety of tasks including web development, system administration, network programming, GUI (Graphical User Interface) development, and many more. Perl is a case-sensitive programming language and supports both Object-Oriented and Procedural Programming. Perl is similar in syntax to many widely used languages, so it is easier to learn and code. Notepad++, gedit, and other common text editors are good tools for writing Perl programs. Perl Program Example: A program to add two numbers. Perl Program Example: #!/usr/bin/perl\n$x = 10;    # Assigning value to $b\n$y = 20;    # Assigning value to $c\n \n$z = $x + $y;   # Performing an addition\nprint \"$z\";     # Printing the result #!/usr/bin/perl\n$x = 10;    # Assigning value to $b\n$y = 20;    # Assigning value to $c\n \n$z = $x + $y;   # Performing an addition\nprint \"$z\";     # Printing the result #!/usr/bin/perl 10 # Assigning value to $b 20 # Assigning value to $c # Performing an addition print \"$z\" # Printing the result Output: Output: 30 30 30 On the Internet, there is a wide selection of programs designed for programmers. If you want your Perl script to be recognized as a functioning Perl script, you must save it with either the '.PL' or '.Pl' file extension.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "11. List different modes of File handling.",
        "answer": "File handling modes include: Mode Explanation\n<\nA read-only mode for reading a file's contents line by line.\n>\nIt is a write-only mode. As soon as the file is opened in this mode, its original contents are cleared. If a file with the same name is not found, it creates a new one and writes to it.\n>>\nThis is the Append Mode, which appends the file content. When the file is opened in this mode, its original content is not cleared. Overwriting is not possible in this mode since the String always attaches at the end. If there is no file with the same name, it creates one.\n+<\nIt is a Read-Write mode that is used to overwrite existing strings in files. No new files can be created by it.\n+>\nIt is a Read-Write mode that is used to overwrite existing strings in files.  If there is no file with the same name, it creates one.\n+>>\nThis is a Read-Append Mode that allows you to read from and append to a file. If there is no file with the same name, it creates one. Mode Explanation\n<\nA read-only mode for reading a file's contents line by line.\n>\nIt is a write-only mode. As soon as the file is opened in this mode, its original contents are cleared. If a file with the same name is not found, it creates a new one and writes to it.\n>>\nThis is the Append Mode, which appends the file content. When the file is opened in this mode, its original content is not cleared. Overwriting is not possible in this mode since the String always attaches at the end. If there is no file with the same name, it creates one.\n+<\nIt is a Read-Write mode that is used to overwrite existing strings in files. No new files can be created by it.\n+>\nIt is a Read-Write mode that is used to overwrite existing strings in files.  If there is no file with the same name, it creates one.\n+>>\nThis is a Read-Append Mode that allows you to read from and append to a file. If there is no file with the same name, it creates one. Mode Explanation Mode Explanation Mode Explanation <\nA read-only mode for reading a file's contents line by line.\n>\nIt is a write-only mode. As soon as the file is opened in this mode, its original contents are cleared. If a file with the same name is not found, it creates a new one and writes to it.\n>>\nThis is the Append Mode, which appends the file content. When the file is opened in this mode, its original content is not cleared. Overwriting is not possible in this mode since the String always attaches at the end. If there is no file with the same name, it creates one.\n+<\nIt is a Read-Write mode that is used to overwrite existing strings in files. No new files can be created by it.\n+>\nIt is a Read-Write mode that is used to overwrite existing strings in files.  If there is no file with the same name, it creates one.\n+>>\nThis is a Read-Append Mode that allows you to read from and append to a file. If there is no file with the same name, it creates one. <\nA read-only mode for reading a file's contents line by line. < < < A read-only mode for reading a file's contents line by line. >\nIt is a write-only mode. As soon as the file is opened in this mode, its original contents are cleared. If a file with the same name is not found, it creates a new one and writes to it. > > > It is a write-only mode. As soon as the file is opened in this mode, its original contents are cleared. If a file with the same name is not found, it creates a new one and writes to it. >>\nThis is the Append Mode, which appends the file content. When the file is opened in this mode, its original content is not cleared. Overwriting is not possible in this mode since the String always attaches at the end. If there is no file with the same name, it creates one. >> >> >> This is the Append Mode, which appends the file content. When the file is opened in this mode, its original content is not cleared. Overwriting is not possible in this mode since the String always attaches at the end. If there is no file with the same name, it creates one. +<\nIt is a Read-Write mode that is used to overwrite existing strings in files. No new files can be created by it. +< +< +< It is a Read-Write mode that is used to overwrite existing strings in files. No new files can be created by it. +>\nIt is a Read-Write mode that is used to overwrite existing strings in files.  If there is no file with the same name, it creates one. +> +> +> It is a Read-Write mode that is used to overwrite existing strings in files.  If there is no file with the same name, it creates one. +>>\nThis is a Read-Append Mode that allows you to read from and append to a file. If there is no file with the same name, it creates one. +>> +>> +>> This is a Read-Append Mode that allows you to read from and append to a file. If there is no file with the same name, it creates one.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "12. What is the use of the grep function in Perl?",
        "answer": "The grep() function is used by Perl to retrieve any element from an array. This function extracts any element from the array whose value evaluates the true value for the regular expression given. Syntax: grep(Expression, @Array) Syntax: grep(Expression, @Array) grep(Expression, @Array) Here, Expression: A regular expression runs on each element in an array.\n@Array: An array on which the grep() function is called. Expression: A regular expression runs on each element in an array. Expression: @Array: An array on which the grep() function is called. @Array: If the expression matches an array of elements, this function returns a list of elements that match the expression in the scalar context. Example1: Example1: #!/usr/bin/perl\n@list = (2,\"Scaler\", 0, \"by\", \"InterviewBit\", 26 );\n@hasdigit = grep ( /\\d/, @list );\nprint \"@hasdigit\\n\"; #!/usr/bin/perl\n@list = (2,\"Scaler\", 0, \"by\", \"InterviewBit\", 26 );\n@hasdigit = grep ( /\\d/, @list );\nprint \"@hasdigit\\n\"; Output: Output: 2 0 26 2 0 26 This example extracts and returns all digits (digit elements) from the array by using a regular expression '//d/', and the remaining elements are discarded. Example2: Example2: #!/usr/bin/perl\n@list = (2,\"ScalerEdge\", 0, \"by\", \"Scaler\", 26 );\n@haschar = grep ( /^S/, @list );\nprint \"@haschar\\n\"; #!/usr/bin/perl\n@list = (2,\"ScalerEdge\", 0, \"by\", \"Scaler\", 26 );\n@haschar = grep ( /^S/, @list );\nprint \"@haschar\\n\"; Output: Output: ScalerEdge Scaler ScalerEdge Scaler As shown here, the regular expression /^S/ is used to retrieve the elements beginning with the letter 'S' from the array and discard the rest.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "13. In Perl, what types of operators are available?",
        "answer": "The Perl programming language supports many types of operators, but the following are some of the most important and frequently used operators: Arithmetic Operators (+ , - , / , * , % , **).\nQuote-like Operators (q{ } , qq{ } , qx{ }).\nLogical Operators (and , or , && , || , not).\nAssignment Operators (= , += , -= , *= , /= , %= , **=).\nBitwise Operators (&, | , ^ , ~ , << , >>).\nEquality Operators (==, != , <=> , > , < , >= , <=).\nMiscellaneous Operators (. , x , .. , ++ , – , ->). Arithmetic Operators (+ , - , / , * , % , **). Quote-like Operators (q{ } , qq{ } , qx{ }). Logical Operators (and , or , && , || , not). Assignment Operators (= , += , -= , *= , /= , %= , **=). Bitwise Operators (&, | , ^ , ~ , << , >>). Equality Operators (==, != , <=> , > , < , >= , <=). Miscellaneous Operators (. , x , .. , ++ , – , ->).",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "14. What is the meaning of CPAN?",
        "answer": "With over 250,000 software modules available in 40,000+ distributions, including documentation, CPAN is the world's largest repository of Perl software modules. In short, it is an international mirrored collection of reusable Perl packages. CPAN contains mostly free and open-source software. For CPAN packages that are not available, you may build a native package from the equivalent CPAN package.  ",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "15. How is the interpreter used in Perl?",
        "answer": "When running a Perl program, it must go through the Perl interpreter. The opening line of many Perl applications is as follows: #!/usr/bin/perl #!/usr/bin/perl On the internal level, the interpreter compiles the program into a parse tree. If there is a space or mark after a pound symbol, the program interpreter ignores it. Upon transforming it into a parse tree, the interpreter immediately executes it.  Although Perl is frequently referred to as an interpreted language, this is not strictly true. Because interpreters convert programs into byte code before executing them, they are sometimes called interpreters/compilers. Although the compiled form isn't stored in a file.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "16. Is it possible to use a dynamic approach when loading binary extensions in Perl?",
        "answer": "Yes, it is possible for Perl programmers to load binary extensions dynamically. Programmers only need to make sure their system supports this. If the system doesn't allow the same, you can do this task statically. A dynamic load is essentially when your program determines, at runtime, that it requires more functionality than what is currently available, so it loads it and continues to run. Perl code can always be dynamically loaded, but dynamically loading binary extensions is even more interesting. A dynamic approach can assist users in saving time by allowing them to perform some basic tasks according to their preferences.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "17. Can you tell me about the different command-line options available in Perl?",
        "answer": "A number of command-line options or switches are available in Perl. Due to their ability to turn on or off different behaviours, they are also called switches. The following are some of the command-line options: -a option: You must use this option in conjunction with either -n or -p. Input lines are automatically fed into the split function when using the -a option. At the end of the split, the results are placed in the @F variable.\n-c option: You can use this option to check your script's syntax without executing it. Due to the necessity of the compilation process, the BEGIN blocks and use statements are still executed.\n-d option: You can start the Perl debugger with this option.\n-n option: This option wraps your script in a loop. When it reads a line from the diamond operator, it will execute the script automatically. There is no limit on how many times users can use this option. The loops and scripts are not limited in size.\n-p option: This is a similar option to the -n option. When it reads a line from the diamond operator, it will execute the script automatically, and then print $_. There is no limit on how many times users can use this option. The loops and scripts are not limited in size.\n–i option: Files are moved to the right place using this option. You can edit files in place with this option. Use it with the -n or -p options. Any file is not backed up when you use this option.\n-s option: This option allows you to define a custom switch for your script.\n-e option: A single line of code can be specified on the command line with this option. It is possible to create a multiple-line program by using multiple -e options. -a option: You must use this option in conjunction with either -n or -p. Input lines are automatically fed into the split function when using the -a option. At the end of the split, the results are placed in the @F variable. -a option: -c option: You can use this option to check your script's syntax without executing it. Due to the necessity of the compilation process, the BEGIN blocks and use statements are still executed. -c option: -d option: You can start the Perl debugger with this option. -d option: -n option: This option wraps your script in a loop. When it reads a line from the diamond operator, it will execute the script automatically. There is no limit on how many times users can use this option. The loops and scripts are not limited in size. -n option: -p option: This is a similar option to the -n option. When it reads a line from the diamond operator, it will execute the script automatically, and then print $_. There is no limit on how many times users can use this option. The loops and scripts are not limited in size. -p option: –i option: Files are moved to the right place using this option. You can edit files in place with this option. Use it with the -n or -p options. Any file is not backed up when you use this option. –i option: -s option: This option allows you to define a custom switch for your script. -s option: -e option: A single line of code can be specified on the command line with this option. It is possible to create a multiple-line program by using multiple -e options. -e option:",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "1. What are the directories to import or include modules in Perl?",
        "answer": "Modules or packages can be included in Perl using two directives. “use”: Using the Use directive, modules with .pm extensions can be included and the objects they include can then be verified during compilation. When \"Use\" is specified, the module included is compiled at compile time. The file extension does not need to be specified.\n“require”: The \"require\" directive can be used to include modules and libraries, and the included objects are verified at runtime. The file extension must be specified. “use”: Using the Use directive, modules with .pm extensions can be included and the objects they include can then be verified during compilation. When \"Use\" is specified, the module included is compiled at compile time. The file extension does not need to be specified. “use”: “require”: The \"require\" directive can be used to include modules and libraries, and the included objects are verified at runtime. The file extension must be specified. “require”:",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "2. Is Perl an interpreter or a compiler?",
        "answer": "The Perl programming language is described as both a compiler and an interpreter. Perl first reads or takes in the source code, converts it into bytecode before executing the program, and then executes it. It is therefore possible to think of the Perl programming language as both a compiler and an interpreter.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "3. In Perl, what are strict and warning pragmas?",
        "answer": "Pragmas are specific modules in Perl packages that control some aspects or functions of Perl's run-time or compile-time behaviour. With Perl 5.10 and later versions, you can now create user pragmata for modifying how user functions behave within lexical scopes as opposed to using built-in pragmata. Two of the most commonly used built-in pragmas in Perl are:   1. use strict: This pragma forces the developer to code in a way that allows the program to run correctly and minimizes the likelihood of errors. When using the use strict pragma, for example, developers are required to declare variables first before utilizing them. The 'my' keyword in Perl can be used to declare variables, which changes the scope of the variables from global to local. With the Perl 5.12 version, this pragma is enabled implicitly. In other words, we do not have to use the use strict statement if we are using Perl 5.12 or later versions, since the pragma is enabled by default. This pragma should be placed at the beginning of the script as follows: use strict; 1. use strict: use strict; Example: Example: Using the use strict pragma and not declaring variables will result. Below is an example: #!/usr/local/bin/perl \nuse strict;\n$s = \"Scaler Academy!\\n\";\nprint $s; #!/usr/local/bin/perl \nuse strict;\n$s = \"Scaler Academy!\\n\";\nprint $s; Output: Output: Global symbol \"$z\" requires explicit package name (did you forget to declare \"my $z\"?) at main.pl line 3.\nGlobal symbol \"$z\" requires explicit package name (did you forget to declare \"my $z\"?) at main.pl line 4.\nExecution of main.pl aborted due to compilation errors. Global symbol \"$z\" requires explicit package name (did you forget to declare \"my $z\"?) at main.pl line 3.\nGlobal symbol \"$z\" requires explicit package name (did you forget to declare \"my $z\"?) at main.pl line 4.\nExecution of main.pl aborted due to compilation errors. The variable must be declared with my keyword so that we can avoid this error. The following program prints the string without any problems when executed. #!/usr/local/bin/perl \nuse strict;\nmy $s = \"Scaler Academy!\\n\";\nprint $s; #!/usr/local/bin/perl \nuse strict;\nmy $s = \"Scaler Academy!\\n\";\nprint $s; Output: Output: Scaler Academy! Scaler Academy! Note: The $a and $b variables are special Perl variables that have global access, so using them makes the program work perfectly. Note: The $a and $b variables are special Perl variables that have global access, so using them makes the program work perfectly. Below is an example: #!/usr/local/bin/perl \nuse strict;\n$a = \"Scaler Academy!\\n\";\nprint $a; #!/usr/local/bin/perl \nuse strict;\n$a = \"Scaler Academy!\\n\";\nprint $a; Output: Scaler Academy! Scaler Academy! 2. use warning: Often, this pragma is used in conjunction with the use of strict pragmas. The use warning pragma alerts us when something went wrong and assists us in identifying any errors in the code. It can also be seen as a debugging tool since it aids in finding bugs in programs. Use strict and use warning have one primary difference. The use strict pragma will abort the program if it encounters an error, while the use warning pragma will just report the error and not abort it. Since the Perl 5.6 version, the use warning pragma has been available. 2. use warning: use strict;\nuse warnings; use strict;\nuse warnings; Note: Perl 5.6 and later versions introduced the use of warning pragma. If you are using an older version, you can enable warnings by adding '-w' to your shebang/hashbang line:\n#!/usr/local/bin/perl -w Note: Perl 5.6 and later versions introduced the use of warning pragma. If you are using an older version, you can enable warnings by adding '-w' to your shebang/hashbang line: #!/usr/local/bin/perl -w #!/usr/local/bin/perl -w",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "4. Can you explain Chop() and Chomp() functions?",
        "answer": "Chop() and Chomp() are quite similar functions. Each of them removes one character at the end of the input string. 1. Chop(): The chop() function in Perl is used to remove the last character from the input string completely. This function returns the last character that was removed. 1. Chop() Syntax: chop(String) Syntax: chop(String) Syntax: chop(String) Here, String: A string whose last character must be removed. String: Example: Example: #!/usr/bin/perl\n$str = \"Scaler by InterviewBit\";     # String initialization\n$a  = chop($str);                    # Invoking chop()\nprint \"Chopped String: $str\\n\";\nprint \"Character removed: $a\\n\"; #!/usr/bin/perl\n$str = \"Scaler by InterviewBit\";     # String initialization\n$a  = chop($str);                    # Invoking chop()\nprint \"Chopped String: $str\\n\";\nprint \"Character removed: $a\\n\"; Output: Output: Chopped String: Scaler by InterviewBi\nCharacter removed: t Chopped String: Scaler by InterviewBi\nCharacter removed: t 2. Chomp(): It removes any new line characters from the string's end. It removes the trailing newline from the specified input string. This function returns the total number of characters that have been removed from the string.  2. Chomp(): Syntax: chomp(String) Syntax: chomp(String) Syntax: chomp(String) Here, String: A String whose trailing newline must be removed. String: Example: Example: #!/usr/bin/perl\n$str = \"Scaler by InterviewBit\";\n$a  = chomp( $str );               # Invoking chomp()\nprint \"Chopped String: $str\\n\";\nprint \"Number of characters removed: $a\\n\";\n$str = \"Scaler by InterviewBit\\n\";\n$a  = chomp( $str );\nprint \"Chopped String: $str\\n\";\nprint \"Number of characters removed: $a\\n\"; #!/usr/bin/perl\n$str = \"Scaler by InterviewBit\";\n$a  = chomp( $str );               # Invoking chomp()\nprint \"Chopped String: $str\\n\";\nprint \"Number of characters removed: $a\\n\";\n$str = \"Scaler by InterviewBit\\n\";\n$a  = chomp( $str );\nprint \"Chopped String: $str\\n\";\nprint \"Number of characters removed: $a\\n\"; Output: Output: Chopped String: Scaler by InterviewBit\nNumber of characters removed: 0\nChopped String: Scaler by InterviewBit\nNumber of characters removed: 1 Chopped String: Scaler by InterviewBit\nNumber of characters removed: 0\nChopped String: Scaler by InterviewBit\nNumber of characters removed: 1",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "5. In Perl, how do you add or remove elements from an array?",
        "answer": "In Perl, there are several built-in functions to remove or add elements to an array. These include push(), pop(), unshift(), and shift() functions. 1. Adding an element to the end of an array 1. Adding an element to the end of an array An array is extended by adding a new element with the push() function. The function inserts a new element at the end of the array. With this function, you can insert multiple values separated by commas at the end of an array. The size of an array is increased by this function. Syntax: push(Array, list) push(Array, list) Example: #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');\n# Printing the initial array\nprint \"Initial array: @arr \\n\";                                         \n\n# Invoking push()\npush(@arr, 'ScalerPlus', 'ScalerVerse');  \n# Printing the updated array                      \nprint \"Updated array: @arr\"; #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');\n# Printing the initial array\nprint \"Initial array: @arr \\n\";                                         \n\n# Invoking push()\npush(@arr, 'ScalerPlus', 'ScalerVerse');  \n# Printing the updated array                      \nprint \"Updated array: @arr\"; Output: Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: Scaler ScalerAcademy ScalerEdge ScalerPlus ScalerVerse Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: Scaler ScalerAcademy ScalerEdge ScalerPlus ScalerVerse 2. Adding an element at the start of an array 2. Adding an element at the start of an array Array elements are added at the beginning of the array using the unshift() function. Thus shifting all array values to the right by one. Adding multiple values is possible. Syntax: unshift(Array, List) unshift(Array, List) Example: #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');\n       \n# Printing the initial array\nprint \"Initial array: @arr \\n\";                                         \n\n# Invoking unshift()\nunshift(@arr, 'ScalerPlus', 'ScalerVerse');                    \n# Printing the updated array\nprint \"Updated array: @arr\"; #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');\n       \n# Printing the initial array\nprint \"Initial array: @arr \\n\";                                         \n\n# Invoking unshift()\nunshift(@arr, 'ScalerPlus', 'ScalerVerse');                    \n# Printing the updated array\nprint \"Updated array: @arr\"; Output: Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: ScalerPlus ScalerVerse Scaler ScalerAcademy ScalerEdge Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: ScalerPlus ScalerVerse Scaler ScalerAcademy ScalerEdge 3. Removing an element from the end of an Array 3. Removing an element from the end of an Array The pop() function removes the last element from an array. When the pop function is executed, the array's size is decremented by one element. Syntax: pop(Array) pop(Array) Example: #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');  \n# Printing the initial array     \nprint \"Initial array: @arr \\n\";                                          \n\n# Invoking pop()\npop(@arr);\n# Printing the updated array                                                                   \nprint \"Updated array: @arr\"; #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');  \n# Printing the initial array     \nprint \"Initial array: @arr \\n\";                                          \n\n# Invoking pop()\npop(@arr);\n# Printing the updated array                                                                   \nprint \"Updated array: @arr\"; Output: Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: Scaler ScalerAcademy Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: Scaler ScalerAcademy 4. Removing elements from the beginning of an Array 4. Removing elements from the beginning of an Array With shift(), the element is removed from the beginning of the array rather than from the end. Thus shifting all array values to the left by one. Syntax: shift(Array) shift(Array) Example: #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');      \n# Printing the initial array\nprint \"Initial array: @arr \\n\";                                         \n                                                                 \n# Invoking shift()\nshift(@arr);  \n# Printing the updated array\nprint \"Updated array: @arr\"; #!/usr/bin/perl\n# Initializing array\n@arr = ('Scaler' , 'ScalerAcademy', 'ScalerEdge');      \n# Printing the initial array\nprint \"Initial array: @arr \\n\";                                         \n                                                                 \n# Invoking shift()\nshift(@arr);  \n# Printing the updated array\nprint \"Updated array: @arr\"; Output: Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: ScalerAcademy ScalerEdge Initial array: Scaler ScalerAcademy ScalerEdge \nUpdated array: ScalerAcademy ScalerEdge",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "6. Explain Array Slicing and Range Operator.",
        "answer": "Multiple methods are available for accessing data stored in Perl arrays. Array elements are obtained by placing a $ sign before the array name and storing the index value of the element within square brackets. The downside of this method is that you can only extract only one element at a time, which might be confusing if there is a long list of elements to access. The array slicing method in Perl is designed to avoid such situations. In order to simplify the process of accessing multiple elements from an array, array slicing is implemented to access a range of elements in the array. There are two ways to do this: 1. Passing multiple Index values: 1. Passing multiple Index values: Array slicing can be achieved by passing several index values from an array whose elements you wish to access. In this case, the index values are passed as arguments to the array name. Based on the specified indices, Perl accesses these elements and performs the necessary action. Example: #!/usr/bin/perl\n@arr = ('Scaler' , 'by' , 'InterviewBit');\nprint \"Array= @arr\\n\";\n@a = @arr[0, 2];                    # slicing method\nprint \"Extracted elements: \".\"@a\";  # Printing the extracted elements #!/usr/bin/perl\n@arr = ('Scaler' , 'by' , 'InterviewBit');\nprint \"Array= @arr\\n\";\n@a = @arr[0, 2];                    # slicing method\nprint \"Extracted elements: \".\"@a\";  # Printing the extracted elements Output: Array= Scaler by InterviewBit\nExtracted elements: Scaler InterviewBit Array= Scaler by InterviewBit\nExtracted elements: Scaler InterviewBit When accessing a large number of values, this method of passing indexes becomes somewhat complicated. 2. Using range operator 2. Using range operator Slicing methods can also be performed in arrays using the range operator[..]. By specifying the starting and ending indexes in square brackets separated by the range operator(..), we are able to access a range of array elements. Example: #!/usr/bin/perl\n@arr = ('Scaler' , 'ScalerAcademy' , 'ScalerEdge' , 'ScalerPlus' , 'ScalerVerse');\nprint \"Array= @arr\\n\";\n\n@a = @arr[1..3];                    # slicing method\nprint \"Extracted elements: \".\"@a\";  # Printing the extracted elements #!/usr/bin/perl\n@arr = ('Scaler' , 'ScalerAcademy' , 'ScalerEdge' , 'ScalerPlus' , 'ScalerVerse');\nprint \"Array= @arr\\n\";\n\n@a = @arr[1..3];                    # slicing method\nprint \"Extracted elements: \".\"@a\";  # Printing the extracted elements Output: Array= Scaler ScalerAcademy ScalerEdge ScalerPlus ScalerVerse\nExtracted elements: ScalerAcademy ScalerEdge ScalerPlus Array= Scaler ScalerAcademy ScalerEdge ScalerPlus ScalerVerse\nExtracted elements: ScalerAcademy ScalerEdge ScalerPlus",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "7. Explain the splice function in Perl.",
        "answer": "An array can be spliced to remove and return a specific number of elements using the splice() function. The removed elements can be replaced with a list of new ones. Syntax: splice(@arr, offset, length, replacelist) splice(@arr, offset, length, replacelist) Here, @ar: Array name.\noffset: The index or offset at which an element is to be removed.\nlength: Total number of elements to remove starting at offset (including offset).\nreplacelist: Element list to replace removed elements. @ar: Array name. @ar: offset: The index or offset at which an element is to be removed. offset: length: Total number of elements to remove starting at offset (including offset). length: replacelist: Element list to replace removed elements. replacelist: Example: #!/usr/bin/perl\n# Initializing array with char elements from a to h\n@arr = (a..h);                 \nprint \"Initial Array: @arr\\n\";        # Printing initial array\n# splice() replaces elements from b to f elements with 4 to 8\n@arr2 = splice(@arr, 1, 5, (4..8)); \n \nprint(\"Updated array: @arr\\n\");        # Printing updated array\nprint(\"Removed elements: @arr2\");      # Printing removed elements #!/usr/bin/perl\n# Initializing array with char elements from a to h\n@arr = (a..h);                 \nprint \"Initial Array: @arr\\n\";        # Printing initial array\n# splice() replaces elements from b to f elements with 4 to 8\n@arr2 = splice(@arr, 1, 5, (4..8)); \n \nprint(\"Updated array: @arr\\n\");        # Printing updated array\nprint(\"Removed elements: @arr2\");      # Printing removed elements Output: Initial Array: a b c d e f g h\nUpdated array: a 4 5 6 7 8 g h\nRemoved elements: b c d e f Initial Array: a b c d e f g h\nUpdated array: a 4 5 6 7 8 g h\nRemoved elements: b c d e f",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "8. How to convert a string to an array and vice versa in Perl?",
        "answer": "Perl arrays can easily be converted into strings, and vice versa. 1. String to Array Conversion 1. String to Array Conversion The split() function can be used to convert strings into arrays. Syntax: @arr = split (/REGEX/, $str); @arr = split (/REGEX/, $str); Here, @arr: An array variable to which the resulting array will be assigned.\n$str: String to split.\nRegex: The string (pattern) to match, and the $str will be split accordingly. @arr: An array variable to which the resulting array will be assigned. @arr: $str: String to split. $str: Regex: The string (pattern) to match, and the $str will be split accordingly. Regex: Example: #!/usr/bin/perl\nprint (\"Enter a line of text: \");\n$str = <stdin>;\n# Removes trailing newlines from string str\nchomp $str; \n             \n# Split() function matches whitespaces here\n@arr = split (/ /, $str);\nforeach (@arr)\n{\n       print (\"$_\\n\");\n} #!/usr/bin/perl\nprint (\"Enter a line of text: \");\n$str = <stdin>;\n# Removes trailing newlines from string str\nchomp $str; \n             \n# Split() function matches whitespaces here\n@arr = split (/ /, $str);\nforeach (@arr)\n{\n       print (\"$_\\n\");\n} Output: Enter a line of text: Scaler by InterviewBit\nScaler\nby\nInterviewBit Enter a line of text: Scaler by InterviewBit\nScaler\nby\nInterviewBit 2. Array to String Conversion 2. Array to String Conversion The join() function can be used to convert arrays into strings. Syntax: $str = join ($connectingstr ,@arr); $str = join ($connectingstr ,@arr); Here, @arr: Input array.\n$connectingstr: A string that connects the individual array elements.\n$str: Resulting string. @arr: Input array. @arr: $connectingstr: A string that connects the individual array elements. $connectingstr: $str: Resulting string. $str: Example: #!/usr/bin/perl\n@arr = (\"Scaler\", \"by\", \"InterviewBit!\");\n$str = join(\" \", @arr);\nprint (\"$str\\n\"); #!/usr/bin/perl\n@arr = (\"Scaler\", \"by\", \"InterviewBit!\");\n$str = join(\" \", @arr);\nprint (\"$str\\n\"); Output: Scaler by InterviewBit! Scaler by InterviewBit!",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "9. What are the possible ways to sort an array?",
        "answer": "There is a built-in function in Perl called sort() that allows you to sort an array of numbers and alphabets. The sort() function returns a sorted array once an array is passed to it. Syntax: sort @array_name sort @array_name There are multiple ways to sort arrays in Perl: Sorting an array using ASCII values.\nUsing the comparison function (cmp).\nSorting an array of Numbers.\nSorting in alphabetical order (case-insensitive). Sorting an array using ASCII values. Using the comparison function (cmp). Sorting an array of Numbers. Sorting in alphabetical order (case-insensitive).",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "10. Can you tell me how many loop control keys are in Perl and what they mean?",
        "answer": "The loop control statement alters the sequence in which the loop executes. As soon as execution leaves a scope, any automatic objects created within that scope will be destroyed. Perl supports the following types of loop control statements: Next statement: This is equivalent to the continue statement in C language. There are times when you aren't ready for the loop to end but are done with the current iteration. You can do that with the next operator. The next statement stops the current interaction of the loop, and control is passed on to the next iteration.\nRedo statement: By using the redo statement, you will be able to restart the loop block without having to evaluate the conditional again. This causes the loop block to return to the top, without testing any conditional expressions or advancing to the next loop. If a continue block exists, it is not executed.\nLast statement: Basically, it functions like the break statement in C. Like an \"emergency exit\" for a loop block, it allows you to exit the loop safely. With this, the loop statement is terminated and execution is transferred to the statement following the loop statement.\nGoto statement: Goto is a jump statement in Perl, and is also referred to as an unconditional jump statement. You can use the goto statement to jump from one place to another within a program. Perl offers three forms of goto command:  goto expr, goto label, and goto &name.\ngoto LABEL: It causes the execution to jump to the statement marked with a LABEL, and then the execution will proceed from that point.\ngoto EXPR: It is similar to goto LABEL but more generalized. There will be an expression that, after evaluation, returns a label name, and execution will jump to that particular LABEL statement.\ngoto &NAME: This substitutes a call to the named subroutine for the current one. Next statement: This is equivalent to the continue statement in C language. There are times when you aren't ready for the loop to end but are done with the current iteration. You can do that with the next operator. The next statement stops the current interaction of the loop, and control is passed on to the next iteration. Next statement: Redo statement: By using the redo statement, you will be able to restart the loop block without having to evaluate the conditional again. This causes the loop block to return to the top, without testing any conditional expressions or advancing to the next loop. If a continue block exists, it is not executed. Redo statement: Last statement: Basically, it functions like the break statement in C. Like an \"emergency exit\" for a loop block, it allows you to exit the loop safely. With this, the loop statement is terminated and execution is transferred to the statement following the loop statement. Last statement: Goto statement: Goto is a jump statement in Perl, and is also referred to as an unconditional jump statement. You can use the goto statement to jump from one place to another within a program. Perl offers three forms of goto command:  goto expr, goto label, and goto &name.\ngoto LABEL: It causes the execution to jump to the statement marked with a LABEL, and then the execution will proceed from that point.\ngoto EXPR: It is similar to goto LABEL but more generalized. There will be an expression that, after evaluation, returns a label name, and execution will jump to that particular LABEL statement.\ngoto &NAME: This substitutes a call to the named subroutine for the current one. Goto statement: goto LABEL: It causes the execution to jump to the statement marked with a LABEL, and then the execution will proceed from that point.\ngoto EXPR: It is similar to goto LABEL but more generalized. There will be an expression that, after evaluation, returns a label name, and execution will jump to that particular LABEL statement.\ngoto &NAME: This substitutes a call to the named subroutine for the current one. goto LABEL: It causes the execution to jump to the statement marked with a LABEL, and then the execution will proceed from that point. goto LABEL: goto EXPR: It is similar to goto LABEL but more generalized. There will be an expression that, after evaluation, returns a label name, and execution will jump to that particular LABEL statement. goto EXPR: goto &NAME: This substitutes a call to the named subroutine for the current one. goto &NAME:",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "11. Explain die() and exit() function in Perl.",
        "answer": "exit() function: In Perl, Exit() evaluates the expression passed to it and exits the interpreter, returning the value as an exit value. Usually, the exit() function calls the end routines before terminating the program, rather than exiting immediately. The exit function returns 0 as a default value if no expression is passed to it. It is not recommended to use exit() to exit subroutines. A subroutine can be exited by using either die or return.\nSyntax: exit(value)\nHere, valuer/parameter: The value to be returned on exit function call.\nExample: exit() function: In Perl, Exit() evaluates the expression passed to it and exits the interpreter, returning the value as an exit value. Usually, the exit() function calls the end routines before terminating the program, rather than exiting immediately. The exit function returns 0 as a default value if no expression is passed to it. It is not recommended to use exit() to exit subroutines. A subroutine can be exited by using either die or return.\nSyntax: exit(value)\nHere, valuer/parameter: The value to be returned on exit function call.\nExample: exit() function: Syntax: exit(value)\nHere, valuer/parameter: The value to be returned on exit function call.\nExample: Syntax: exit(value) Syntax: exit(value) Here, valuer/parameter: The value to be returned on exit function call. valuer/parameter: Example: Example: # Obtaining the user's bid in an online auction.\nprint \"Input your bid amount: \";\n$bid = <STDIN>;\n \n# If a bid is less than 5000, exit returns $bid\nif ($bid < 5000)\n{\n   exit $bid;\n}\n \nelse\n{\n   # This message is printed if the bid exceeds 5000\n   print \"\\nThank you for taking part!\";\n} # Obtaining the user's bid in an online auction.\nprint \"Input your bid amount: \";\n$bid = <STDIN>;\n \n# If a bid is less than 5000, exit returns $bid\nif ($bid < 5000)\n{\n   exit $bid;\n}\n \nelse\n{\n   # This message is printed if the bid exceeds 5000\n   print \"\\nThank you for taking part!\";\n} Sample Output1: Sample Output1: Input your bid amount: 4000 Input your bid amount: 4000 Sample Output2: Sample Output2: Input your bid amount: 6000\nThank you for taking part! Input your bid amount: 6000\nThank you for taking part! die() function: When a program is executed, errors also occur and if they are not handled properly, the program may crash. In order to run your program smoothly, you must catch and fix the error. Upon encountering an error, die() terminates the script immediately. It returns an appropriate error message. Without the die() function, your script will continue to run. die() function: When a program is executed, errors also occur and if they are not handled properly, the program may crash. In order to run your program smoothly, you must catch and fix the error. Upon encountering an error, die() terminates the script immediately. It returns an appropriate error message. Without the die() function, your script will continue to run. die() function: Example1: Without using die() Example1: Without using die() Here, we have provided the wrong file path, resulting in an error. But the script keeps running when it encounters an error and prints 'Still Printing, No Die Used'. Here, we have provided the wrong file path, resulting in an error. But the script keeps running when it encounters an error and prints 'Still Printing, No Die Used'. use strict;  \nuse warnings;  \nopen(my $fh, '>', 'sssit/javatpoint/file1.txt');  \nprint $fh \"An example to demonstrate Error Handling!!!\\n\";  \nclose $fh;  \nprint \"Still Printing, No die used.\\n\"; use strict;  \nuse warnings;  \nopen(my $fh, '>', 'sssit/javatpoint/file1.txt');  \nprint $fh \"An example to demonstrate Error Handling!!!\\n\";  \nclose $fh;  \nprint \"Still Printing, No die used.\\n\"; Output: Output: print() on closed filehandle $fh at main.pl line 4.\nStill Printing, No die used. print() on closed filehandle $fh at main.pl line 4.\nStill Printing, No die used. Example2: With using die() Example2: With using die() In this example, since the file path is incorrect, the die() function will execute and exit the script. use strict;  \nuse warnings;  \nopen(my $fh, '>', 'sssit/javatpoint/file1.txt') or die;   \nprint $fh \"An example to demonstrate Error Handling!!!\\n\";  \nclose $fh;  \nprint \"Still Printing, No die used.\\n\"; use strict;  \nuse warnings;  \nopen(my $fh, '>', 'sssit/javatpoint/file1.txt') or die;   \nprint $fh \"An example to demonstrate Error Handling!!!\\n\";  \nclose $fh;  \nprint \"Still Printing, No die used.\\n\"; Output: Output: Died at main.pl line 3. Died at main.pl line 3.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "12. What is a subroutine in Perl? Give an example.",
        "answer": "Subroutines are groups of statements that perform a specific task together. Your code can be broken up into separate subroutines. You can divide your code however you like, but logically, you should make each subroutine perform a specific task. In Perl, a subroutine is defined in the following manner: sub subroutine_name\n{\n  body of the subroutine\n} sub subroutine_name\n{\n  body of the subroutine\n} Having defined the subroutine, we can call it with the following statement: &subroutine_name; &subroutine_name; It is not necessary to use the ampersand(&), except when using references to subroutine names. You can also call Perl subroutines as follows: subroutine_name(); subroutine_name(); Example: Example: sub scaler{\nprint \"Welcome to Scaler Family!\";\n}\nscaler(); sub scaler{\nprint \"Welcome to Scaler Family!\";\n}\nscaler(); Output: Welcome to Scaler Family! Welcome to Scaler Family!",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "13. How does Perl provide code reusability?",
        "answer": "Reusability of code is possible in Perl. There is, however, a limit to how many times the same code can be used in the same program. As Perl has an inbuilt code trimming feature, users will not need to worry about complexity since it automatically suggests how to keep the code as short as possible. A prime example of this is code reusability. With \"Inheritance\", users can simply stay on track towards this goal. This feature allows child classes to use parent class methods.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "14. Write a program to process a list of numbers in Perl.",
        "answer": "A user is asked to enter numbers when the following program is executed, and the average of those numbers is shown as an output. $sum = 0;\n$count = 0;\nprint \"Enter number: \";\n$n = <>;\nchomp($n);\nwhile ($n >= 0)\n{\n$count++;\n$sum += $n;\nprint \"Enter another number: \";\n$n = <>;\nchomp($n);\n}\nprint \"$count numbers were entered\\n\";\nif ($count > 0)\n{\nprint \"The average is: \",$sum/$count,\"\\n\";\n}\nexit(0); $sum = 0;\n$count = 0;\nprint \"Enter number: \";\n$n = <>;\nchomp($n);\nwhile ($n >= 0)\n{\n$count++;\n$sum += $n;\nprint \"Enter another number: \";\n$n = <>;\nchomp($n);\n}\nprint \"$count numbers were entered\\n\";\nif ($count > 0)\n{\nprint \"The average is: \",$sum/$count,\"\\n\";\n}\nexit(0); Output: Enter number: 5\nEnter another number: 10\nEnter another number: 4\nEnter another number: -1\n3 numbers were entered\nThe average is 6.33333333333333 Enter number: 5\nEnter another number: 10\nEnter another number: 4\nEnter another number: -1\n3 numbers were entered\nThe average is 6.33333333333333",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "15. Can you explain the advantages of using C over Perl?",
        "answer": "Using C over Perl has the following advantages: There are more development tools available in C, as well as faster execution speed than in Perl. Due to Perl's interpretative nature, it is comparatively slower than other compiled languages like C.\nC doesn't require you to hide your code if you don't want others to use it. Perl, on the other hand, requires you to hide your code so that others cannot use it.\nWithout the use of additional tools, creating an executable Perl program is difficult. There are more development tools available in C, as well as faster execution speed than in Perl. Due to Perl's interpretative nature, it is comparatively slower than other compiled languages like C. C doesn't require you to hide your code if you don't want others to use it. Perl, on the other hand, requires you to hide your code so that others cannot use it. Without the use of additional tools, creating an executable Perl program is difficult.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "16. Does Perl have Objects? What is the best thing about them you have come across?",
        "answer": "It is true that Perl is equipped with a number of very useful objects. The best thing about them is that programmers are not required to make use of them. During the code writing process, the developers can easily skip them if they do not feel the need for them. In Perl, there are some Object-Oriented modules available for developers to utilize without even understanding them. However, if the program is too complex, it is recommended that programmers use Objects.",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "17. How does Perl connect to a database?",
        "answer": "Database Independent Interface (DBI) is a module used in Perl for connecting to databases. DBI provides an abstraction layer between Perl code and database tables. DBI uses Structured Query Language, commonly called SQL, to communicate or interact with the database. Example: The following is an example of connecting to the MySQL database \"ScalerDB\". Example #!/usr/bin/perl\nuse DBI\nuse strict;\nmy $driver = \"mysql\"; \nmy $database = \"ScalerDB\";\nmy $dsn = \"DBI:$driver:database=$database\";\nmy $userid = \"vishalraj\";\nmy $password = \"scaler123\";\nmy $dbh = DBI->connect($dsn, $userid, $password ) or die $DBI::errstr;\n$dbh->disconnect; #!/usr/bin/perl\nuse DBI\nuse strict;\nmy $driver = \"mysql\"; \nmy $database = \"ScalerDB\";\nmy $dsn = \"DBI:$driver:database=$database\";\nmy $userid = \"vishalraj\";\nmy $password = \"scaler123\";\nmy $dbh = DBI->connect($dsn, $userid, $password ) or die $DBI::errstr;\n$dbh->disconnect; Conclusion An interview for a technical position requires you to demonstrate both your technical and communication skills. Job interviews vary depending on the position and the company, so you can expect to be asked behavioural, technical, and personal questions. Perl interviews are nothing to be anxious about, especially if you prepare for them beforehand. There will be knowledge-based questions that test your proficiency with programming tools, standards, and best practices. The more prepared you are, the more likely you are to impress the hiring manager and move on to the next stage of the hiring process. In this article, you will find a comprehensive list of 30+ questions frequently asked about Perl programming during interviews to help job seekers begin or advance their careers. These interview questions cover several topics like Perl scripting interview questions, Perl OOPs interview questions, Perl coding interview questions, and so on. If you are starting to learn Perl, this list is a great way to measure your abilities. A candidate should possess a deep conceptual understanding as well as be able to articulate ideas clearly. With a little study and practice, a good candidate should be able to answer all of these questions confidently. Useful Resources https://www.interviewbit.com/shell-scripting-interview-questions/\nhttps://www.interviewbit.com/blog/scripting-language-vs-programming-language/\nhttps://www.interviewbit.com/technical-interview-questions/\nhttps://www.interviewbit.com/coding-interview-questions/ https://www.interviewbit.com/shell-scripting-interview-questions/ https://www.interviewbit.com/shell-scripting-interview-questions/ https://www.interviewbit.com/blog/scripting-language-vs-programming-language/ https://www.interviewbit.com/blog/scripting-language-vs-programming-language/ https://www.interviewbit.com/technical-interview-questions/ https://www.interviewbit.com/technical-interview-questions/ https://www.interviewbit.com/coding-interview-questions/ https://www.interviewbit.com/coding-interview-questions/",
        "reference": "interviewbit.com",
        "role": "perl"
    },
    {
        "question": "1) What is Perl?",
        "answer": "Perl stands for Practical Extraction and Reporting Language. It is a high-level programming language written by Larry Wall, specially designed for processing text. It supports object-oriented programming, and its syntax is quite similar to C language. It is much more flexible to use. Due to its strong text processing abilities, it has become one of the most popular languages for writing CGI scripts.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "2) Is Perl Compiler or Interpreter?",
        "answer": "Perl is said to be both compiler and interpreter. It reads the source code, converts the program into bytecode before execution and then runs it. Hence, Perl is sometimes called an interpreter/compiler.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "3) Which operator in Perl is used for the concatenation of two strings?",
        "answer": "The operator used for the concatenation of strings is (.) operator.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "4) What is CPAN in Perl?",
        "answer": "CPAN stands for Comprehensive Perl Archive Network. It is a repository which contains thousands of Perl modules.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "5) What are the features of Perl language?",
        "answer": "The feature of Perl:\nADVERTISEMENT\nIt has a very simple Object-oriented programming syntax.\nIt is easily extendible as it supports 25,000 open source modules.\nIt supports Unicode.\nIncludes powerful tools to process text to make it compatible with markup languages like HTML, XML.\nIt supports third-party database including Oracle, MySQL, and many others.\nIt is embeddable in other systems such as web servers and database servers.\nIt is open source software licensed under GNU.\nMany frameworks are written in Perl.\nIt can handle encrypted web data including e-commerce transactions.\nIt is a cross-platform language.\nIt offers a regular expression engine which can transform any text.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "6) What are the advantages and disadvantages of Perl language?",
        "answer": "Perl advantages:\nIts syntax is simple, which makes it easy to understand.\nIt supports OOP concepts.\nPerl programs run easily on the system.\nIt is more flexible to use.\nIt supports all platforms and is much more portable.\nIt has a rich set of Perl modules and free software.\nIt is much more efficient to work on text and string manipulation as it is a scripting language.\nPerl combines features of many other languages which make it easy to understand.\nPerl disadvantages\nA Perl program containing CPAN modules will not run on another system which doesn't have CPAN modules installed.\nIt is an interpretative language, so it is slower in comparison with other languages.\nIt has untidy and unreadable codes.\nIt starts creating problems when the code is larger than 200 lines.\nIt is not portable.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "7) Define print() function in Perl?",
        "answer": "The Perl print() function prints anything it gets as its argument.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "8) Define say() function in Perl?",
        "answer": "The Perl say() function is not supported by older Perl versions. It is like Perl print() function with only one difference that it automatically adds a new line at the end.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "",
        "answer": "The assignment of temporary values to the global variables is called as dynamic scoping.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "",
        "answer": "The variables which are created by the use of 'my' operator and private in nature are called as lexical variables.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "11) When does circular reference occur?",
        "answer": "When the two references also contain references to each other, then the case of circular reference occurs.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "12) What happens in dereferencing?",
        "answer": "Value to the location from the reference point is returned.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "13) What does read () command do?",
        "answer": "The read() command is used to read the block of information from the buffered file handle.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "14) What is the use of 'ne' operator?",
        "answer": "The operator compares the value of the left string to the right one and returns true if they are not equal.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "15) What does the q{ } operator do?",
        "answer": "The operator encloses a string in the single quotes.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "16) What does the qq{ } operator do?",
        "answer": "The operator encloses a string in the double quotes.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "17) What does the qx{ } operator do?",
        "answer": "The operator encloses a string in the inverted quotes.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "18) How many data types are there in Perl?",
        "answer": "Perl has three data types:\nScalars\nArrays\nHashes\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "19) What are Perl variables?",
        "answer": "A variable is a place to store values reserving some memory space. Perl treats the same variables differently based on context.\nThere are three types of Perl variables:\nScalars\nArrays\nHashes\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "20) What are scalars?",
        "answer": "A scalar contains a single unit of data. They are preceded with a ($) sign. A scalar contains a number, character, reference or a string. A reference is the address of the variable.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "21) What are arrays in Perl?",
        "answer": "An array contains an ordered list of scalar values. It is preceded with (@) sign. To access a single element in a Perl array ($) sign is used.\n\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "22) How to find the length of an array in Perl?",
        "answer": "Size of an array is determined with scalar context on the array. Array length will always be one greater than its largest index.\nPerl size = $#arrayName +\nWhere $#arrayName is the maximum index of the array.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "23) What are Perl array functions?",
        "answer": "Perl array functions are used to add or remove some elements in an array.\nThere are four types Perl array functions:\nPush\nPop\nShift\nUnshift\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "24) What is Perl push array function?",
        "answer": "The Perl push array function appends a new element at the end of an array.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "25) What is Perl pop array function?",
        "answer": "The Perl pop array function removes the last element of an array.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "26) What is Perl shift array function?",
        "answer": "The Perl shift array function removes the leftmost element from the array shortening array by 1.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "27) What is Perl unshift array function?",
        "answer": "The Perl shift array function adds a new element at the start of an array.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "28) How to replace Perl array elements?",
        "answer": "The Perl splice array function removes elements and replaces them with the specified list of elements.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "29) How to convert strings into an array in Perl?",
        "answer": "The Perl split array function splits a string into an array of strings. Thus converting strings into an array.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "30) How to convert arrays into a string in Perl?",
        "answer": "The Perl join array function combines more than one array into a single string. Thus converting arrays into a string.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "31) How to merge two arrays in Perl?",
        "answer": "The Perl merged array function merges two arrays into a single array by removing all the commas in between them.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "32) How to sort arrays in Perl?",
        "answer": "The Perl sort array function sorts all the elements of an array according to the ASCII standard.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "33) What are the hashes?",
        "answer": "A Perl hash is a group of unordered key-value pairs. The keys are unique strings and values are scalar values. It is preceded with (%) sign. They can be accessed using their key values.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "34) How to know whether a key exists or not in Perl?",
        "answer": "Using Perl exists function, you can check whether a key exists or not in a hash. It returns true if the key exists.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "35) How to add elements in a hash in Perl?",
        "answer": "To add a new key-value pair in the hash, declare them as a single variable in the hash variable.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "36) What does delete function do in Perl?",
        "answer": "To remove a hash element, use delete function. It removes both key and value element from the hash.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "37) What does undef function in Perl?",
        "answer": "The undef function removes the value from the hash, but its key remains there.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "38) What is the difference between Perl array and Perl hash?",
        "answer": "Perl array: They are an ordered list of elements, positioned by index number. It is denoted with @ sign.\nPerl hash: They are an unordered list of elements, positioned by their key values. It is denoted with a % sign.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "39) What is the difference between Perl list and Perl array?",
        "answer": "Perl list is a method to organize data in the Perl source code. It is a fixed collection of scalars. They are always one dimensional.\nPerl array is a method to store data in the form of variables. They are multi-dimensional.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "40) What is the difference between use and require in Perl?",
        "answer": "Use: It is used only for the Perl modules. The included modules are verified at the time of compilation. It does not need the file extension.\nRequire: It is used for both Perl modules and libraries. The included objects are verified at runtime. It does need the file extension.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "41) How many loop control keywords are there in Perl?",
        "answer": "There are three types of loop control statement:\nNext\nLast\nRedo",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "42) What does next statement do in Perl?",
        "answer": "Perl next statement is like continue statement in C. It lets you move on to the next element of your array or hash skipping all elements in between.\n\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "43) What does last statement do in Perl?",
        "answer": "Perl next statement is like break statement in C. It exists the loop immediately skipping remaining codes.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "44) What does redo statement do in Perl?",
        "answer": "Perl redo statement restarts the current loop without evaluation of the control statement.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "45) Define operators used in Perl?",
        "answer": "A Perl operator is a series of symbols like +, -, =, <, >, etc. It uses its operands as arguments.\nPattern matching operator : (=~, !~)\nShifting operator : (>>, <<)\nComparison operator : (==, !=, <=, >=, <=>)\nLogical operator : &&, ||\nFor more information: click here",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "46) What is the importance of Perl warnings?",
        "answer": "Perl warnings help us to check errors in our code by giving warnings.\nTo enable them use -w :\nperl -w scriptName.pl  \nAlternatively, you can also supply it within the \"shebang\" line:\n#/usr/local/bin/perl -w",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "47) Why do we use \"use strict\" in Perl?",
        "answer": "The \"use strict\" command in Perl calls strict pragma. This pragma helps to catch some bugs or errors in our script and stops the program execution.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "48) What are Perl strings?",
        "answer": "Strings are an essential part of Perl. They are scalars, so they start with $ sign. Strings can be placed inside single or double quote.\nTwo types of string operators are there:\nConcatenation (.)\nRepetition (x)\nFor more information: click here",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "49) What is an interpolation in Perl?",
        "answer": "Interpolation means inserting something with different nature. It can be defined as replacing a variable with its value.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "50) What is the difference between single (') and double (\") quote in a string in Perl?",
        "answer": "In the single quote, the value is printed as it is given inside the string without interpolation.\nIn the double quote, the value is printed with interpolation given inside the string.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "51) Explain substr function in Perl?",
        "answer": "The substr function is used to truncate the string. The string will be truncated to offset value we provide.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "52) How to compare two strings in Perl?",
        "answer": "To compare two strings in Perl eq is used instead of (==). It checks whether two strings are equal or not.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "53) How to determine strings length in Perl?",
        "answer": "String length can be determined with length() function.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "54) How to print escaping characters inside a string in Perl?",
        "answer": "Escaping characters are the special characters like @, \\, /, &, $, \", etc. To print escaping characters put a backslash (\\) before escaping characters.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "55) What is qq (double q)operator in Perl?",
        "answer": "The qq operator replaces double quote surrounding a string by its parentheses. You can use qq instead of (\"\").\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "56) What is q (single q) operator in Perl?",
        "answer": "The q operator replaces single quote surrounding a string by its parentheses. You can use q instead of (').\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "57) What is STDIN in Perl?",
        "answer": "The STDIN stands for standard input. Using this input, we can get input from the standard console. It can be abbreviated as <>.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "58) What is goto statement in Perl?",
        "answer": "The Perl goto statement is the jump statement. It transfers control by jumping to another label inside a loop.\nThere are three goto forms:\ngoto LABEL\ngoto EXPR\ngoto &NAME\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "59) How to do comment in Perl?",
        "answer": "Like other languages, Perl also provides comment facility in its code. There are a single line and multi-line comment.\nFor single line comment: use # before the line you want to comment.\nFor multi-line comment: use =begin and =cut statement before and after the lines respectively you want to comment.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "60) Explain regular expression in Perl?",
        "answer": "A regular expression is a string of characters that defines a specific pattern.\nThere are three regular expression operators inside Perl:\nMatching regular expression operator, m//\nSubstitute regular expression operator, s///\nTransliterate regular expression operator, tr///\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "61) Explain split function in Perl?",
        "answer": "Perl split function splits a string at specified delimiter pattern like -, /,:, etc. By default, whitespace is assumed as delimiter pattern if nothing is specified.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "62) Explain join function in Perl?",
        "answer": "Perl joins function joins symbol or character in between or afterward each element of an array.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "63) Explain subroutine in Perl?",
        "answer": "Perl subroutine lets you reuse code in your program. They accept arguments, perform their operation and return the values. A subroutine is declared with 'sub' keyword before its name. In Perl, function and subroutine are used interchangeably.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "64) How to access parameters passed to a subroutine in Perl?",
        "answer": "Parameters are accessed inside a subroutine using special array @_. Hence, the arguments will start with $_[0], $_[1], $_[2], $_[3] and so on.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "65) Explain the use of 'my' keyword in Perl?",
        "answer": "The 'my' keyword restricts a variable to a particular region in which it can be used and accessed. Outside this region, this variable can't be used.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "66) Explain the difference between declarations of 'my' and 'local' variable scope in Perl?",
        "answer": "Variables declared with 'my' keyword live within a code block and can't get its visibility inherited in the functions called within that block.\nVariables declared with 'local' keyword live within a code block and got its visibility in the functions called within that block.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "67) Explain the default scope of variables in Perl?",
        "answer": "By default, all variables in Perl are global variables unless they are locally defined. They can be accessed from anywhere in a program.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "68) What is lexical variable in Perl?",
        "answer": "Lexical variables are created using 'my' keyword in Perl. They are private variables.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "69) How will you create a file in Perl?",
        "answer": "To create a file in Perl, '>' sign is used before the file name. It will create a new file.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "70) How will you open a file in read-only mode in Perl?",
        "answer": "To open a file in read-only mode, '<' sign is used. You can only read this file and can't write anything.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "71) How will you open a file in a write-only mode in Perl?",
        "answer": "To open a file in write-only mode, '>' sign is used. The file you open will be emptied or truncated if it already exists if not, a new file will be created.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "72) How to prevent file truncation in Perl?",
        "answer": "Opening a file in write-only mode truncates data of the file. To prevent it, use sign '+>'. It will prevent your data, and you can append new data in the last of the file.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "73) What is the use of '>>' in Perl?",
        "answer": "The '>>' sign opens a file with appending purpose. It places the pointer at the end of the file where you can add new data.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "74) How to read a single line from a file in Perl?",
        "answer": "Taking $row = <$fh> as a variable will print a single line from the file.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "75) How to read multi lines from a file in Perl?",
        "answer": "Taking $row = <$fh> as a variable in a while loop will print all lines from the file.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "76) How to close a file in Perl?",
        "answer": "Closing a file in Perl is not mandatory. However, using close() function will disassociate the file handle from the corresponding file.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "77) How to copy a file in Perl?",
        "answer": "To copy the content of one file into another file, read all lines of the first file in a while loop and copy it in another file.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "78) Explain '->' in Perl?",
        "answer": "It is a symbolic link which links one file name to a new file name.\nFor example, in file1 -> file2, if we read file1, we will end up reading file2.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "79) Explain a tell function in Perl?",
        "answer": "The tell function finds your position within a file. It is the first thing you need to do during file handling.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "80) What does file test operators do in Perl?",
        "answer": "File test operators check miscellaneous information about a file, for example, the type of file, file byte size, its UID or GID, etc.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "81) How to open a directory in Perl?",
        "answer": "The opendir function is used to open a directory in Perl. It returns true on success or false on failure.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "82) How to create a directory in Perl?",
        "answer": "The mkdir function is used to create a directory in Perl. You need a require permission to create a directory.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "83) How to read a directory in Perl?",
        "answer": "The readdir function is used to read a directory in Perl. In scalar context, it will return each item one by one. In list context, it will return all the content of the directory in one statement. So list context uses more memory than scalar context.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "84) How to remove a directory in Perl?",
        "answer": "The rmdir function is used to remove a directory in Perl. The directory which you want to remove should be empty before removing it.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "85) How to change a directory in Perl?",
        "answer": "The chdir function is used to change a directory in Perl. To change a directory and go inside a new directory you need required permission.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "86) How to close a directory in Perl?",
        "answer": "The closedir function is used to close a directory in Perl. This function officially shut down the connection between directory handle and directory.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "87) What is a chop() function in Perl?",
        "answer": "Perl chop() function removes the last character from a string regardless of what that character is. It returns the chopped character.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "88) What is a chomp() function in Perl?",
        "answer": "Perl chomp() function removes any newline character from the end of the string. It returns the number of characters removed from the string.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "89) What does a die() function do in Perl?",
        "answer": "Perl die() function gives us a proper error message. It immediately terminates the script on encountering an error.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "90) Explain the difference between die and exit in Perl?",
        "answer": "The die function prints the standard error message then exits the program. Whereas, the exit function terminates the program without giving any error message.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "91) What $! in Perl?",
        "answer": "The $! is a built-in error reporting variable in Perl. It tells us the reason for the error and prints it. It prints what the operating system tells it.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "92) What is warn function in Perl?",
        "answer": "The warn function gives the warning on encountering an error but does not exit the script. The Script keeps on running.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "93) What is confess function in Perl?",
        "answer": "The confess function is used within the Carp standard library for error handling.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "94) What is eval function in Perl?",
        "answer": "The eval function is a built-in function in Perl which is used to detect the normal fatal error. It is supplied with a code block instead of passing into a string.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "95) What is Perl DBI?",
        "answer": "DBI stands for Database Independent Interface. In Perl, the database is accessed using DBI module. It is a third party module provided by CPAN. It supports all the major database systems. It provides an abstraction layer between Perl code and database.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "96) What does 'do' statement do in Perl?",
        "answer": "The \"do statement\" is used in Perl database. It is a shortcut to perform all the CRUD operation. If it is succeeded, it returns true, otherwise false.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "97) What is 'commit' command in Perl?",
        "answer": "Once you have given Perl commit command, you can't retrieve back the changes you made.\nSyntax:\n$dbh->commit or die $dbh->errstr;   \nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "98) What is 'rollback' command in Perl?",
        "answer": "If you want to revert the changes made during the operation, call rollback command.\nSyntax:\n$dbh->rollback or die $dbh->errstr;     \nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "99) What is automatic error handling in Perl?",
        "answer": "By specifying RaiseError option, your errors will be handled automatically by Perl. Your program will be aborted on encountering an error rather than running a failure code. Its value can be either 1 or 0.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "100) What are some common methods to all handles in Perl?",
        "answer": "err\nerrstr\ntrace\nrows\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "101) What does localtime() do in Perl?",
        "answer": "The localtime() function is used without any argument, returns the current date and time according to the system.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "102) What is the use of now constructor in Perl?",
        "answer": "The now constructor creates DateTime object displaying the current date and time using DateTime module.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "103) Explain gmtime() function in Perl?",
        "answer": "This function works similar to localtime() with only one difference that returned value is localized for the standard Greenwich time zone.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "104) What is epoch time in Perl?",
        "answer": "The epoch time refers to the number of seconds after a specific date and time. This specific date and time vary for different operating systems. For example, for Unix, it is January 1, 1970.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "105) What is POSIX in Perl?",
        "answer": "POSIX - Perl interface to IEEE Std 1003.1\nThe POSIX module allows you to access all the standard POSIX identifiers. This module provides much more functions than any other module.",
        "reference": "javatpoint.com",
        "role": "perl"
    },
    {
        "question": "106) Explain strftime() function in Perl?",
        "answer": "The Perl POSIX strftime() function is used to format date and time with the specifiers preceded with (%) sign.\nFor more information: click here.",
        "reference": "javatpoint.com",
        "role": "perl"
    }
]