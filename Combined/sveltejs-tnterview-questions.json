[
    {
        "question": "js? / What do you understand by Svelte?",
        "answer": "Svelte.js or Svelte is a UI framework or tool used for building fast web applications. It is very similar to JavaScript frameworks such as React and Vue, which make it easy to build slick interactive user interfaces. It is also used to solve the same problems for which React or Vue are used, but Svelte.js facilitates users to build applications in a declarative, component-driven way rather than to create an imperative DOM manipulation.\nThe most crucial difference between Svelte and other JavaScript frameworks such as React and Vue is that it converts our app into ideal JavaScript at build time, rather than interpreting our application code at run time. This provides a great advantage: we don't have to pay the performance cost of the framework's abstractions, and it doesn't cost a penalty when our app first loads. That's why it provides faster loading and faster running apps.",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "js?",
        "answer": "Although Svelte is quite similar to other traditional front-end frameworks such as React.js and Vue.js, but there is a big difference between them according to their functionality. The traditional frameworks like React.js and Vue.js do most of their tasks in the browser, i.e. on the run time, while Svelte.js complete that task into the build step, i.e. during compile time. S\nSo, Svelte does not require updating the DOM using any DOM updating tool like React. Instead of updating the DOM using Virtual DOM diffing, Svelte.js writes code that updates the DOM when the state of your app changes.",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "js work?",
        "answer": "Svelte is a front-end UI framework so, we write components in HTML files. The HTML files can optionally include <style> and <script> elements to encapsulate CSS and other behaviors. You can easily learn Svelte.js template syntax.\nThe Svelte.js compiler converts the HTML component files into modules using the command line interface or various build tool integrations. These modules contain low-level DOM manipulation, according to our app. It means Svelte doesn't follow any data-binding technique or DOM diffing, or any of the other tricks the other frameworks have to use to render our UI.\nExample:\nHelloWorld.html file:\n<h1>Hello {{name}}!</h1>  \napp.js file:\nimport HelloWorld from './HelloWorld.html';  \nvar app = new HelloWorld({  \n  target: document.querySelector('main'),  \n  data: {  \n    name: 'world'  \n  }  \n});  \napp.set({ name: 'JavaTpoint' });  \nOutput:\nHello JavaTpoint",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "4) What is Svelte used for?",
        "answer": "Svelte is a new front-end UI framework used to create user interfaces just like other frameworks such as React and Vue.js. The major difference between Svelte and other frameworks is that Svelte does most of the code conversion to a lower level at compile time.\nSo, because the work is done majorly during compile Time, the Svelte applications would run and bootstrap faster. Svelte is mainly focused on the following things:\nADVERTISEMENT\nADVERTISEMENT\nLight-weighted Library\nFaster Application Performance\nReactivity to Changes\nEasy to Code and Use",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "js?",
        "answer": "Reactivity is a concept used in the development of modern interactive web applications. It shows that when you make changes in value, it is automatically reflected in the DOM. For example, when an app is reactive, it means that any change of values (the result of user input) will be automatically reflected in the Document Object Model (DOM). DOM is a logical tree structure representing the HTML page a user can see in the browser or any other place where values are changed depending on the user input.",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "js compared to other front-end UI frameworks?",
        "answer": "Following is the list of main advantages of Svelte.js compared to other front-end UI frameworks:\njs facilitates developers to write less code. It mainly aims to build boilerplate-free components using the already known languages such as HTML, CSS, and JavaScript.\njs is truly reactive and brings reactivity to JavaScript itself. It does not require more complex state management libraries.\njs does not require virtual DOM. It compiles the code to tiny, framework-less vanilla JS. That's why the Svelte.js app starts fast, loads fast, and stays fast.\njs is comparatively better than its competitors because it provides less code, less boilerplate, smaller bundles, more speed, and better performance.",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "js?",
        "answer": "When we first install Svelte.js on our system, the starter template comes with the following structure by default:\n\nLet's see them in detail:\npackage.json and package-lock.json: The package.json and package-lock.json contain the information about the project that Node.js/npm uses to keep it organized.\nnode_modules: The node_modules file specifies where the node saves the project dependencies. These dependencies are used for development purposes only and won't be sent to production.\n.gitignore: This is used to tell git which files or folders to ignore from the project. It is required if you decide to include your app in a git repo.\nrollup.config.js: In Svelte, the rollup.config.js is used as a module bundler. This configuration is used to tell rollup how to compile and build your app. It would be skipped if you use webpack to create your starter project with npx degit sveltejs/template-webpack svelte-app.\nscripts: It contains the required setup scripts. Currently, it holds only contain setupTypeScript.js.\n\nsrc: This directory is used to specify where the source code for your application lives and where you have to create the code for your app. It contains two components: App.svelte and main.js\nThe svelte is the app's top-level component, which renders the 'Hello World!' message.\nThe js is the entry point to the application, which is used to instantiate the App component and binds it to the body of your html page.\npublic: The public is a directory containing all the files required to be published in production. This directory consists of the following files:\npng: This is the by default favicon for the app. Currently, it shows the Svelte logo.\nhtml: This is the main page of the app. Initially, it's just an empty HTML5 page that loads the CSS files and js bundles generated by Svelte.\ncss: The global.css file contains the unscoped styles. It is a regular CSS file that is applied to the whole application.\nbuild: The build folder is used to contain the generated CSS and JavaScript source code.\ncss: The bundle.css file is generated from the styles defined for each component of Svelte.\njs: The bundle.js is a JavaScript file that is compiled from all the JavaScript source code.",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "js application?",
        "answer": "In Svelte.js, an application is made of one or more components. A component is a reusable, self-contained block of code that encapsulates HTML, CSS and JavaScript that belong together. The components are the building blocks of Svelte applications and are written into .svelte files using a superset of HTML. The 'Hello World' example in the code editor is a simple component.\nThe <script> section\nThe <script> section contains the JavaScript that runs when a component instance is created. The variables declared at the top level are 'visible' from the component's markup. Svelte handles the component state by top-level variables, and they are reactive by default.\n<script>  \n  export let name;  \n</script>  \nThe markup section\nIn this section you can insert any HTML. You can also insert here valid JavaScript expression inside single curly brackets ({}).\n<main>  \n  <h1>Hello {name}!</h1>  \n  <p>Visit the <a href=\"https://abc.com\">Svelte tutorial</a> Here you can learn Svelte.</p>  \n</main>  \nThe <style> section\nThis is used to add CSS in the application.\n\nFor example:\n<style>  \n  main {  \n    text-align: center;  \n    padding: 1em;  \n    max-width: 240px;  \n    margin: 0 auto;  \n  }  \n  h1 {  \n    color: #ff3e00;  \n    text-transform: uppercase;  \n    font-size: 4em;  \n    font-weight: 100;  \n  }  \n  @media (min-width: 640px) {  \n    main {  \n      max-width: none;  \n    }  \n  }  \n</style>",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "The <script> section",
        "answer": "The <script> section contains the JavaScript that runs when a component instance is created. The variables declared at the top level are 'visible' from the component's markup. Svelte handles the component state by top-level variables, and they are reactive by default.\n<script>  \n  export let name;  \n</script>  \nThe markup section\nIn this section you can insert any HTML. You can also insert here valid JavaScript expression inside single curly brackets ({}).\n<main>  \n  <h1>Hello {name}!</h1>  \n  <p>Visit the <a href=\"https://abc.com\">Svelte tutorial</a> Here you can learn Svelte.</p>  \n</main>  \nThe <style> section\nThis is used to add CSS in the application.\n\nFor example:\n<style>  \n  main {  \n    text-align: center;  \n    padding: 1em;  \n    max-width: 240px;  \n    margin: 0 auto;  \n  }  \n  h1 {  \n    color: #ff3e00;  \n    text-transform: uppercase;  \n    font-size: 4em;  \n    font-weight: 100;  \n  }  \n  @media (min-width: 640px) {  \n    main {  \n      max-width: none;  \n    }  \n  }  \n</style>",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "The markup section",
        "answer": "In this section you can insert any HTML. You can also insert here valid JavaScript expression inside single curly brackets ({}).\n<main>  \n  <h1>Hello {name}!</h1>  \n  <p>Visit the <a href=\"https://abc.com\">Svelte tutorial</a> Here you can learn Svelte.</p>  \n</main>  \nThe <style> section\nThis is used to add CSS in the application.\n\nFor example:\n<style>  \n  main {  \n    text-align: center;  \n    padding: 1em;  \n    max-width: 240px;  \n    margin: 0 auto;  \n  }  \n  h1 {  \n    color: #ff3e00;  \n    text-transform: uppercase;  \n    font-size: 4em;  \n    font-weight: 100;  \n  }  \n  @media (min-width: 640px) {  \n    main {  \n      max-width: none;  \n    }  \n  }  \n</style>",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    },
    {
        "question": "The <style> section",
        "answer": "This is used to add CSS in the application.\n\nFor example:\n<style>  \n  main {  \n    text-align: center;  \n    padding: 1em;  \n    max-width: 240px;  \n    margin: 0 auto;  \n  }  \n  h1 {  \n    color: #ff3e00;  \n    text-transform: uppercase;  \n    font-size: 4em;  \n    font-weight: 100;  \n  }  \n  @media (min-width: 640px) {  \n    main {  \n      max-width: none;  \n    }  \n  }  \n</style>",
        "reference": "javatpoint.com",
        "role": "sveltejs-tnterview-questions"
    }
]