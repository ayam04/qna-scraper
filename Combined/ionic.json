[
    {
        "question": "1. How can you test your Ionic applications?",
        "answer": "AngularJS is used to create Ionic v1 applications. Jasmine and the Karma test runner are two of the many test libraries and frameworks available with Angular. Unit tests for Ionic applications may be written using these frameworks. Ionic applications can be tested in four different ways: on a desktop WebKit browser, in an iOS or Android emulator, in a mobile browser on your phone, or as a native application on your phone. Ionic-CLI also has a live reload capability that allows you to test your application in the browser. The ionic serve command, for example, can be used to load the application in any browser. To debug and investigate Ionic applications, we can utilise Chrome Developer Tools or Mozilla Firefox with Firebug.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "2. List the features of the Ionic Framework.",
        "answer": "The following are the features of the Ionic framework: Cross-platform: The Ionic framework allows the application to be deployed across many platforms, including Android, native iOS, desktop, and the web as a dynamic web app, all from a single codebase. As a result, Ionic applications can be written once and run anywhere.\nBased on Web Standards: The ionic framework is designed utilising contemporary web APIs and is based on trustworthy, standard web technologies such as HTML, CSS, and JavaScript (like Custom Elements and Shadow DOM). As a result, Ionic components have a consistent API, allowing Ionic applications to function on different platforms.\nHelps in Creating Beautiful Design: We can create a clean, straightforward, and useful application using the Ionic framework. Pre-designed components, typography, engaging paradigms, and a beautiful basic theme are all included in the Ionic application.\nCordova Plugin: It provides the API for calling native device functions from JavaScript code.\nLicense: Ionic Framework is a free and open-source project published under the MIT licence. It means we can use it for free in both personal and business endeavours.\nIonic CLI: The Ionic CLI, or Command Line Interface, is a resource that enables Ionic developers with a number of useful commands. It's a command that allows you to start, develop, execute, and emulate Ionic applications.\nFramework Compatibility: Ionic's previous editions were intimately linked to Angular. However, the most recent version of Ionic, v4, has been re-engineered to serve as a standalone web component library with support for the most recent JavaScript frameworks. It's also compatible with most front-end frameworks.\nJavaScript Components: It adds JavaScript functionality to CSS components to cover all mobile aspects that can't be done with HTML and CSS alone.\nAngular: Angular is responsible for the greatness of the Ionic framework. While the main components can be used independently, the angular package simplifies integration with the Angular ecosystem. The angular package includes all of the features that Angular developers would anticipate, as well as integration with the core libraries of Angular. Cross-platform: The Ionic framework allows the application to be deployed across many platforms, including Android, native iOS, desktop, and the web as a dynamic web app, all from a single codebase. As a result, Ionic applications can be written once and run anywhere. Cross-platform: Based on Web Standards: The ionic framework is designed utilising contemporary web APIs and is based on trustworthy, standard web technologies such as HTML, CSS, and JavaScript (like Custom Elements and Shadow DOM). As a result, Ionic components have a consistent API, allowing Ionic applications to function on different platforms. Based on Web Standards: Helps in Creating Beautiful Design: We can create a clean, straightforward, and useful application using the Ionic framework. Pre-designed components, typography, engaging paradigms, and a beautiful basic theme are all included in the Ionic application. Helps in Creating Beautiful Design: Cordova Plugin: It provides the API for calling native device functions from JavaScript code. Cordova Plugin: License: Ionic Framework is a free and open-source project published under the MIT licence. It means we can use it for free in both personal and business endeavours. License: Ionic CLI: The Ionic CLI, or Command Line Interface, is a resource that enables Ionic developers with a number of useful commands. It's a command that allows you to start, develop, execute, and emulate Ionic applications. Ionic CLI: Framework Compatibility: Ionic's previous editions were intimately linked to Angular. However, the most recent version of Ionic, v4, has been re-engineered to serve as a standalone web component library with support for the most recent JavaScript frameworks. It's also compatible with most front-end frameworks. Framework Compatibility: JavaScript Components: It adds JavaScript functionality to CSS components to cover all mobile aspects that can't be done with HTML and CSS alone. JavaScript Components: Angular: Angular is responsible for the greatness of the Ionic framework. While the main components can be used independently, the angular package simplifies integration with the Angular ecosystem. The angular package includes all of the features that Angular developers would anticipate, as well as integration with the core libraries of Angular. Angular:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "3. What are the new features included in Ionic 4?",
        "answer": "Ionic Framework V4 focuses heavily on speed, compatibility, and general extensibility. The following are the new features in Ionic 4. Web Components: One of the most significant changes in Ionic V4 is that each component is now a web component. A group of web platform APIs is known as web components. It enables developers to construct customised and reusable HTML tags for usage in web pages and web applications. Custom elements, HTML imports, HTML Templates, and Shadow DOM are the four key requirements.\nCapacitor: It's a cross-platform API with a code execution layer that makes calling Native SDKs from web applications simple. It also creates any custom Native plugins your application may require. It also allows the developer to create a single application and distribute it across application marketplaces and mobile websites.\nStencil: The ionic team has produced a new web component compiler to create standards that are compatible with web servers. It also makes use of extra APIs that are best suited for PWAs, such as TypeScript, Virtual DOM, JSX, and async.\nIon-Backdrop: They're full-screen components that overlay other components. They are used to dismiss the other component and are placed on top of the other component.\nIon-Picker: On the top of the application content and at the bottom of the viewport, it shows a row of buttons and columns.\nIon-Ripple Effect: The ripple effect is a component that adds the ink ripple interaction effect from Material Design. It's designed to be fast, non-intrusive, and easy to use without adding any more DOM to the elements. For CSS-Only implementation, it works without degrading JavaScript.\nIon-Searchbar: This component consists of a text field that is used to search a collection. In version 4, the Ionic team has implemented nine alternative search bar designs.\nColor changes: The Ionic framework's default colour has been modified, and several new default colours have been introduced.\nCSS Variables: These are the Ionic framework's highlighting features. Without utilising the build tools, it will change the entire appearance and feel of the programme by making minor changes to a few variables.\nLazy Loading: It is a design approach used in the Ionic framework to delay component initialization until it is required. By breaking the application into numerous bundles and loading it on demand, it improves performance and reduces application load time. Web Components: One of the most significant changes in Ionic V4 is that each component is now a web component. A group of web platform APIs is known as web components. It enables developers to construct customised and reusable HTML tags for usage in web pages and web applications. Custom elements, HTML imports, HTML Templates, and Shadow DOM are the four key requirements. Web Components: Capacitor: It's a cross-platform API with a code execution layer that makes calling Native SDKs from web applications simple. It also creates any custom Native plugins your application may require. It also allows the developer to create a single application and distribute it across application marketplaces and mobile websites. Capacitor: Stencil: The ionic team has produced a new web component compiler to create standards that are compatible with web servers. It also makes use of extra APIs that are best suited for PWAs, such as TypeScript, Virtual DOM, JSX, and async. Stencil: Ion-Backdrop: They're full-screen components that overlay other components. They are used to dismiss the other component and are placed on top of the other component. Ion-Backdrop: Ion-Picker: On the top of the application content and at the bottom of the viewport, it shows a row of buttons and columns. Ion-Picker: Ion-Ripple Effect: The ripple effect is a component that adds the ink ripple interaction effect from Material Design. It's designed to be fast, non-intrusive, and easy to use without adding any more DOM to the elements. For CSS-Only implementation, it works without degrading JavaScript. Ion-Ripple Effect: Ion-Searchbar: This component consists of a text field that is used to search a collection. In version 4, the Ionic team has implemented nine alternative search bar designs. Ion-Searchbar: Color changes: The Ionic framework's default colour has been modified, and several new default colours have been introduced. Color changes: CSS Variables: These are the Ionic framework's highlighting features. Without utilising the build tools, it will change the entire appearance and feel of the programme by making minor changes to a few variables. CSS Variables: Lazy Loading: It is a design approach used in the Ionic framework to delay component initialization until it is required. By breaking the application into numerous bundles and loading it on demand, it improves performance and reduces application load time. Lazy Loading:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "4. What are the advantages and the disadvantages of Ionic Framework?",
        "answer": "The Advantages of using an Ionic framework are: Advantages Simple to learn: Learning and producing applications utilising the Ionic framework is simple if the developer has a basic understanding of CSS, HTML, or JavaScript frameworks. It also permits development firms to convert to Ionic if their demands and requirements necessitate hybrid application development.\nDocumentation is simple: Ionic has excellent and well-organized documentation. The official documentation included the majority of what developers needed to know.\nCross-platform: The ionic application may run on a variety of platforms, including native iOS, Android, desktop, and the web, all from a single codebase. These applications are written once and run anywhere.\nIonic's user interface: It includes themes and components, and is highly customisable. The ionic platform enables its components to adjust to the platform on which they are running.\nBuilt using AngularJS: The Ionic framework makes use of AngularJS, which gives developers a lot of options. AngularJS is the most popular framework among designers worldwide. Ionic can give a solid structure using AngularJS, making the code more comprehensible. Simple to learn: Learning and producing applications utilising the Ionic framework is simple if the developer has a basic understanding of CSS, HTML, or JavaScript frameworks. It also permits development firms to convert to Ionic if their demands and requirements necessitate hybrid application development. Simple to learn: Documentation is simple: Ionic has excellent and well-organized documentation. The official documentation included the majority of what developers needed to know. Documentation is simple: Cross-platform: The ionic application may run on a variety of platforms, including native iOS, Android, desktop, and the web, all from a single codebase. These applications are written once and run anywhere. Cross-platform Ionic's user interface: It includes themes and components, and is highly customisable. The ionic platform enables its components to adjust to the platform on which they are running. Ionic's user interface: Built using AngularJS: The Ionic framework makes use of AngularJS, which gives developers a lot of options. AngularJS is the most popular framework among designers worldwide. Ionic can give a solid structure using AngularJS, making the code more comprehensible. Built using AngularJS: The Disadvantages of using an Ionic framework are: Disadvantages Performance: When compared to native mobile applications, the Ionic application performs poorly. However, most average users will not notice the performance difference.\nSecurity: An application built using the Ionic framework may not offer the same level of security as a native app. The Ionic framework, for example, is not suggested for designing a financial app, such as a bank app.\nLimited native functionality: The Ionic framework may or may not support some native functionalities. In this scenario, you'll have to create your own plugin to perform that function. However, there are numerous plugins that cover the majority of the native features.\nNot suitable for graphic-intensive applications: The Ionic framework is not suitable for applications or games that involve complex graphics.\nExpertise is required: JavaScript can be difficult to learn. As a result, someone who will not only \"handle\" JS but also has a thorough understanding of advanced libraries and technologies such as Angular, Cordova, Ionic, and others is required.\nThe risk of being an early adopter: Ionic technology is still in evolution. Its support and standards are constantly changing, and its libraries can be fully redesigned at any point. Performance: When compared to native mobile applications, the Ionic application performs poorly. However, most average users will not notice the performance difference. Performance: Security: An application built using the Ionic framework may not offer the same level of security as a native app. The Ionic framework, for example, is not suggested for designing a financial app, such as a bank app. Security: Limited native functionality: The Ionic framework may or may not support some native functionalities. In this scenario, you'll have to create your own plugin to perform that function. However, there are numerous plugins that cover the majority of the native features. Limited native functionality: Not suitable for graphic-intensive applications: The Ionic framework is not suitable for applications or games that involve complex graphics. Not suitable for graphic-intensive applications: Expertise is required: JavaScript can be difficult to learn. As a result, someone who will not only \"handle\" JS but also has a thorough understanding of advanced libraries and technologies such as Angular, Cordova, Ionic, and others is required. Expertise is required: The risk of being an early adopter: Ionic technology is still in evolution. Its support and standards are constantly changing, and its libraries can be fully redesigned at any point. The risk of being an early adopter:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "5. What are native, hybrid and mobile web applications?",
        "answer": "Native applications: Applications for specific devices, such as smartphones and tablets, are known as native applications. It can be downloaded via an application store (such as Google Play or Apple's application Store) and installed straight on the device. They are available at all times on the smartphone and can be accessed via icons on the home screen. These applications can work offline and utilise the device's notification system. Camera, Collage-Maker, Google Maps, Facebook, and other well-known native applications are just a few examples.\nMobile web applications: These are internet-enabled applications with features tailored to mobile devices. Web browsers on mobile devices are used to access mobile web applications. They do not require downloading or installation on the device.\nHybrid applications: These are the ones that incorporate features from both native and online applications. It can be installed on a device in the same way that any other application can. They are written with web technologies such as HTML, CSS, and JavaScript, and are similar to native applications. They're popular because they enable developers to write only one piece of code for a mobile application and publish it across various platforms. Native applications: Applications for specific devices, such as smartphones and tablets, are known as native applications. It can be downloaded via an application store (such as Google Play or Apple's application Store) and installed straight on the device. They are available at all times on the smartphone and can be accessed via icons on the home screen. These applications can work offline and utilise the device's notification system. Camera, Collage-Maker, Google Maps, Facebook, and other well-known native applications are just a few examples. Native applications: Mobile web applications: These are internet-enabled applications with features tailored to mobile devices. Web browsers on mobile devices are used to access mobile web applications. They do not require downloading or installation on the device. Mobile web applications: Hybrid applications: These are the ones that incorporate features from both native and online applications. It can be installed on a device in the same way that any other application can. They are written with web technologies such as HTML, CSS, and JavaScript, and are similar to native applications. They're popular because they enable developers to write only one piece of code for a mobile application and publish it across various platforms. Hybrid applications:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "6. What are the differences between Phonegap and Ionic?",
        "answer": "The following points illustrate the differences between Ionic and PhoneGap: Ionic is an open-source front-end framework for creating AngularJS-based cross-platform mobile apps. It enables the developer to create a hybrid application using HTML, CSS, JavaScript, and SaaS. On the other hand, Adobe Systems created the PhoneGap framework. Anyone with a basic understanding of CSS, HTML, and JScript can use it to create mobile applications. PhoneGap is a fork of Apache Cordova that adds new functionalities to the existing Cordova framework.\nPhoneGap does not have a lot of community support. To use all functions, you'll need to purchase a licence. Ionic has received a lot of positive feedback from the community. All of the apps are completely free to use.\nIonic improves the look and feel of mobile applications. Phonegap is a web-based user interface that does not provide a better look and feel for mobile apps. Ionic is an open-source front-end framework for creating AngularJS-based cross-platform mobile apps. It enables the developer to create a hybrid application using HTML, CSS, JavaScript, and SaaS. On the other hand, Adobe Systems created the PhoneGap framework. Anyone with a basic understanding of CSS, HTML, and JScript can use it to create mobile applications. PhoneGap is a fork of Apache Cordova that adds new functionalities to the existing Cordova framework. PhoneGap does not have a lot of community support. To use all functions, you'll need to purchase a licence. Ionic has received a lot of positive feedback from the community. All of the apps are completely free to use. Ionic improves the look and feel of mobile applications. Phonegap is a web-based user interface that does not provide a better look and feel for mobile apps.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "7. What is the Ionic CLI? How would you create a new project using CLI?",
        "answer": "The official Ionic CLI, or Command-Line-Interface, is a vital instrument for Ionic application development. It combines a variety of tools into a single user interface.\nStart, build, serve, and run are just a few of the essential commands for Ionic development. It also has commands such as emulate and info, that can be useful under certain circumstances.\nIt's also in charge of cloud builds and deployment, as well as managing your Ionic Pro account. It combines a variety of tools into a single user interface. Start, build, serve, and run are just a few of the essential commands for Ionic development. It also has commands such as emulate and info, that can be useful under certain circumstances. It's also in charge of cloud builds and deployment, as well as managing your Ionic Pro account.   To use Ionic CLI to create a new ionic project, type: create a new ionic project ionic start <project name> <template>, for example, new task blank. This will start a new project with a blank canvas. Instead of using blank as a beginning template, you can use tabs, side menus, and other options.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "8. How do you use services/providers in Ionic?",
        "answer": "Services are vital in the Ionic framework since they offer information to our application and help us with various tasks. Some of the services implemented in the ionic framework include ConnectivityMonitor, SimpleAlert, data, GoogleMaps, and others. When building service, there are a few ideas to keep in mind. The most crucial thing is to import a service, add a provider to it, and inject it. The services must be imported into the classes that will utilise them. When injected into a constructor, it creates a new member variable that can be accessed from anywhere in the class. There are two ways to add a provider to a service; It can either be introduced to a single component or added to the entire application when bootstrapping the root component.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "9. How can one use observables in Ionic?",
        "answer": "The RxJS library exports a class called Observable. The RxJS library provides observables, which aren't specific to Ionic or Angular and are given by the RxJS library. Promises are comparable to observables, but observables can do a lot more. Rather than resolving a single value, it can deal with several values at once. You may even subscribe to an observable in order to change the data it contains. Observables are \"lazy\" in the sense that they will not be executed unless and until they are subscribed to. Observables can be modified and a new one returned using a variety of procedures. Even better, you can make your own observable. With the help of a subject, the observable patterns are integrated into one, which is preferable for straightforward implementation.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "10. Describe the project structure of an Ionic 4 application.",
        "answer": "The structure of an Ionic 4 application is identical to that of an Angular application. The root directory will contain the e2e, node modules, and src folders, as well as individual files such as angular.json, ionic.config.json, package-lock.json, package.json, tsconfig.json, and tslint.json. The e2e/ folder contains files for running end to end integration tests, while node modules contain all dependencies. The majority of the application code you'll be building is in the src/app/ subdirectory. App.module.ts, app.component.ts, app.component.html, app.component.spec.ts, and app-routing.module.ts are the main files in the application folder. Any developed services, components, or pages can be saved in their own directories. Images and other static content can be stored in the assets/ subdirectory. Angular.json contains all of the angular settings, such as the project name, application folder root path, source root, paths for index file, main.ts, polyfills, assets folder path, css stylesheet paths, script paths, build settings, and so on. During development, ionic.config.json can be used to set proxy settings for APIs to avoid CORS problems. package.json provides a list of dependencies as well as the commands serve, build, test, and e2e.  ",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "11. Discuss Lazy Loading in detail.",
        "answer": "The concept underlying lazy loading is that we only load the HTML, CSS, and JavaScript that our application requires to render its first route, and then load other components as needed. The good news is that a new Ionic Angular 4.0 app comes pre-configured with lazy loading. Lazy loading is a method in which we load things only when we need them. The fundamental idea behind such a notion is that when the application is opened, we don't need to load every page in it. The @IonicPage decorator was advised in previous versions of the Ionic framework to sleepy load your pages, but in the latest version of Ionic (Ionic 4), we lazy load our Angular components using Angular routing. Each Ionic component is a web component, and these components will only be loaded lazily when they are used in the Ionic application. // Javascript\nconst routes_: Routes = [\n {\n   path: '',\n   loadChildren: './tabs/tabs.module#tabs_page_module'\n }\n]; // Javascript\nconst routes_: Routes = [\n {\n   path: '',\n   loadChildren: './tabs/tabs.module#tabs_page_module'\n }\n]; // Javascript const path '' loadChildren './tabs/tabs.module#tabs_page_module' When you use the tabs starter template to create a new Ionic app, this is the first route that is created for you. The Angular router will dynamically load this file when the user navigates to the route if you specify a loadChildren string instead of passing a page class to component. This JavaScript is also separated from the rest of the app and placed in its own bundle. The routes in the tabs routing module are set up as follows: // Javascript\nconst routes_: Routes = [\n {\n   path: 'tabs',\n   component: TabsPage,\n   children: [\n     {\n       path: 'tab1',\n       children: [\n         {\n           path: '',\n           loadChildren: '../tab1/tab1.module#tab1_page_module'\n         }\n       ]\n     },\n     // tab2, tab3, tab4...\n }\n] // Javascript\nconst routes_: Routes = [\n {\n   path: 'tabs',\n   component: TabsPage,\n   children: [\n     {\n       path: 'tab1',\n       children: [\n         {\n           path: '',\n           loadChildren: '../tab1/tab1.module#tab1_page_module'\n         }\n       ]\n     },\n     // tab2, tab3, tab4...\n }\n] // Javascript const path 'tabs' component children path 'tab1' children path '' loadChildren '../tab1/tab1.module#tab1_page_module' // tab2, tab3, tab4... Each tab in this configuration loads its children slowly, thus all of tab2's files aren't loaded until the user clicks on the tab2 page. We can avoid the browser having to download, process, and compile our entire programme before the user interacts with the first page by dividing it up into smaller lazily loaded pieces. If our app was large, this would significantly increase the program's first load time. Optimizing Lazy Loading: Optimizing Lazy Loading: You can provide a pre-loading strategy when importing the Router module into the main app module. There are two that come with Angular out of the box: NoPreloading: No preloading of lazily loaded modules is done. If no strategy is specified, this is the default behaviour.\nPreloadAllModules: When the network becomes idle, this technique will preload all of the remaining modules once your app loads the initial module. This option is automatically established for you in the Ionic beginning templates. NoPreloading: No preloading of lazily loaded modules is done. If no strategy is specified, this is the default behaviour. NoPreloading: PreloadAllModules: When the network becomes idle, this technique will preload all of the remaining modules once your app loads the initial module. This option is automatically established for you in the Ionic beginning templates. PreloadAllModules:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "12. How will you add a custom color to the existing list of colors in Ionic?",
        "answer": "Every Ionic project comes with a set of pre-installed colours. This is how those colours are programmed: Navigate to the project/src/theme/variables.scss folder in your Ionic project.\nThere will be a variable named $colours here that will hold the names of the various colours as well as their hexadecimal colour codes.\nColor codes for default colours can be changed, and new colour names and hexadecimal codes can be added. Navigate to the project/src/theme/variables.scss folder in your Ionic project. There will be a variable named $colours here that will hold the names of the various colours as well as their hexadecimal colour codes. Color codes for default colours can be changed, and new colour names and hexadecimal codes can be added.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "13. What is the best approach to incorporate navigation into an Ionic 4 app?",
        "answer": "Ionic 4 is based on Angular and leverages RouterModule, an Angular router module, for navigation. It gives the entire application a more consistent routing experience. The NavController service was used for navigation in prior versions of Ionic, and it is still available, although it will be deprecated shortly. As a result, in new Ionic applications built with Ionic 4, it will not be encouraged. The ion-router-outlet component is used in the current version of Ionic to control the animations that appear as the user moves to or from a component inside the app. The ion-router-outlet is similar to the Angular router-outlet, but with the addition of an animation effect.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "14. What exactly is WebView?",
        "answer": "We already know that Ionic applications use web technologies like HTML, CSS, and JavaScript. Web Views, which are full-screen and high-powered web browsers, are used to render these web technologies. Numerous built-in HTML5 APIs for hardware capabilities are available in the current web view, including a camera, Bluetooth, GPS, sensors, and speakers. It may also require access to platform-specific APIs on occasion. The hardware APIs can be accessed through a bridge layer in the Ionic framework, which is commonly done by employing native plugins that expose JavaScript APIs. A full explanation of webview architecture may be seen in the graphic below.   In the above image, we can see how ionic applications differ from native applications. There are two additional layers of Bridge and a Web-View in the case of ionic applications.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "15. What is an <ion-app> ?",
        "answer": "The <ion-app> element serves as a container for the whole Ionic app. The Ionic project should only contain one <ion-app> element and several Ionic components like headers, footers, menus, content, and so on. When shown, all of these components are wrapped inside the <ion-app> component. For example: <ion-app>\n<ion-header>\n//code\n</ion-header>\n<ion-content>\n//code\n</ion-content>\n</ion-app> <ion-app>\n<ion-header>\n//code\n</ion-header>\n<ion-content>\n//code\n</ion-content>\n</ion-app>",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "16. Explain an ion-grid component.",
        "answer": "The Ionic grid system is indeed a mobile-based flexbox system that can be used to create a custom layout. The Ionic grid is made up of three primary components: a grid, rows, and columns. The Ionic grid consists of a 12-column layout with several breakpoints depending on screen size. The following key points are to be remembered while dealing with an Ionic Grid: Grids are used to hold rows and columns together. It occupies the entire width of its container, however, the fixed attribute specifies the width per screen size.\nOnly columns should be immediate children of rows, as rows are horizontal groups of columns. Columns are where we put our contents, and only columns should be immediate children of rows.\nOut of the default 12 columns per row, the size attributes specify the number of columns to use. As a result, size=\"4\" can be appended to a column to fill up 1/3 of the grid.\nIf no size value is specified for a column, it will be automatically divided into equal widths.\nIndividual columns have padding properties, although the padding can be eliminated from the grid and columns by setting no-padding on the grid. Grids are used to hold rows and columns together. It occupies the entire width of its container, however, the fixed attribute specifies the width per screen size. Only columns should be immediate children of rows, as rows are horizontal groups of columns. Columns are where we put our contents, and only columns should be immediate children of rows. Out of the default 12 columns per row, the size attributes specify the number of columns to use. As a result, size=\"4\" can be appended to a column to fill up 1/3 of the grid. If no size value is specified for a column, it will be automatically divided into equal widths. Individual columns have padding properties, although the padding can be eliminated from the grid and columns by setting no-padding on the grid.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "17. Give some examples of ionic components and a short description of each.",
        "answer": "The following are some of the most essential ionic components: Ion-Alert: An alert is a dialogue that provides the user with vital information to help them make a decision or allows them to select a specific action or set of actions. It is shown over the app's content. Before resuming contact with the app, the user can remove it explicitly.\nIon-Buttons: Using buttons to interact with and navigate around an application is vital. Its purpose is to make it apparent what will happen when the user clicks on them. Text, icons, or a combination of the two can be found on the buttons. To make it look a certain way, it can be upgraded with a range of features such as colour, form, and size.\nIon-Content: The Ionic content element acts as a container for all of the additional elements we wish to add to the app. The content component provides a simple content area with a few handy methods for controlling the scrollable area. A single view in an Ionic application should only have one content component. Individual styling with CSS and the appropriate CSS custom properties can also be used to alter it.\nIon-List: Lists consist of numerous rows of objects such as text, buttons, toggles, icons, thumbnails, and more. The list element is used to display data such as menus and tabs, as well as to break up the monotony of plain text files. Swiping things, dragging to reorder items inside the list, and removing items are all supported interactions.\nIon-Input: This component is used to collect and securely handle user input. It functions similarly to an HTML input element. It only supports text inputs like text, passwords, numbers, emails, and URLs. It should be enclosed in the ion-item element at all times. Ion-Alert: An alert is a dialogue that provides the user with vital information to help them make a decision or allows them to select a specific action or set of actions. It is shown over the app's content. Before resuming contact with the app, the user can remove it explicitly. Ion-Alert: Ion-Buttons: Using buttons to interact with and navigate around an application is vital. Its purpose is to make it apparent what will happen when the user clicks on them. Text, icons, or a combination of the two can be found on the buttons. To make it look a certain way, it can be upgraded with a range of features such as colour, form, and size. Ion-Buttons: Ion-Content: The Ionic content element acts as a container for all of the additional elements we wish to add to the app. The content component provides a simple content area with a few handy methods for controlling the scrollable area. A single view in an Ionic application should only have one content component. Individual styling with CSS and the appropriate CSS custom properties can also be used to alter it. Ion-Content: Ion-List: Lists consist of numerous rows of objects such as text, buttons, toggles, icons, thumbnails, and more. The list element is used to display data such as menus and tabs, as well as to break up the monotony of plain text files. Swiping things, dragging to reorder items inside the list, and removing items are all supported interactions. Ion-List: Ion-Input: This component is used to collect and securely handle user input. It functions similarly to an HTML input element. It only supports text inputs like text, passwords, numbers, emails, and URLs. It should be enclosed in the ion-item element at all times. Ion-Input:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "18. Differentiate between ‘ionic build’ and ‘ionic prepare’.",
        "answer": "ionic prepare <platform> moves all files from the www folder to the www folder on the target platform. This is likewise done by ionic build <platform>, but it also produces the app's source code so that it can be executed on a simulator/emulator or a device. ionic prepare <platform> ionic build <platform>",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "19. Explain what the config.xml file in an Ionic project is for.",
        "answer": "Config.xml is a global configuration file for Ionic applications that control the build settings. Many parts of a Cordova application's behaviors are controlled by it. A basic config.xml file is created for you in the top-level directory when you build the Ionic application. The W3C Package Web applications (widget) specification is followed in this file. It enables developers to quickly set metadata for their applications. It includes details about the project, like the package name, version, author information, plugins, platform, and so on. A Sample Config.xml file: <?xml version='1.0' encoding='utf-8'?>\n<widget id=\"io.cordova.hellocordova\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\">\n <name>HelloCordova</name>\n <description>\n     A sample Apache Cordova application that responds to the deviceready event.\n </description>\n <author email=\"dev@cordova.apache.org\" href=\"http://cordova.io\">\n     Apache Cordova Team\n </author>\n <content src=\"index.html\" />\n <plugin name=\"cordova-plugin-whitelist\" spec=\"1\" />\n <access origin=\"*\" />\n <allow-intent href=\"http://*/*\" />\n <allow-intent href=\"https://*/*\" />\n <allow-intent href=\"tel:*\" />\n <allow-intent href=\"sms:*\" />\n <allow-intent href=\"mailto:*\" />\n <allow-intent href=\"geo:*\" />\n <platform name=\"android\">\n     <allow-intent href=\"market:*\" />\n </platform>\n <platform name=\"ios\">\n     <allow-intent href=\"itms:*\" />\n     <allow-intent href=\"itms-apps:*\" />\n </platform>\n</widget> <?xml version='1.0' encoding='utf-8'?>\n<widget id=\"io.cordova.hellocordova\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\">\n <name>HelloCordova</name>\n <description>\n     A sample Apache Cordova application that responds to the deviceready event.\n </description>\n <author email=\"dev@cordova.apache.org\" href=\"http://cordova.io\">\n     Apache Cordova Team\n </author>\n <content src=\"index.html\" />\n <plugin name=\"cordova-plugin-whitelist\" spec=\"1\" />\n <access origin=\"*\" />\n <allow-intent href=\"http://*/*\" />\n <allow-intent href=\"https://*/*\" />\n <allow-intent href=\"tel:*\" />\n <allow-intent href=\"sms:*\" />\n <allow-intent href=\"mailto:*\" />\n <allow-intent href=\"geo:*\" />\n <platform name=\"android\">\n     <allow-intent href=\"market:*\" />\n </platform>\n <platform name=\"ios\">\n     <allow-intent href=\"itms:*\" />\n     <allow-intent href=\"itms-apps:*\" />\n </platform>\n</widget> <?xml version='1.0' encoding='utf-8'?> <widget id=\"io.cordova.hellocordova\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\"> widget id \"io.cordova.hellocordova\" version \"0.0.1\" xmlns \"http://www.w3.org/ns/widgets\" xmlns:cdv \"http://cordova.apache.org/ns/1.0\" <name> name </name> name <description> description </description> description <author email=\"dev@cordova.apache.org\" href=\"http://cordova.io\"> author email \"dev@cordova.apache.org\" href \"http://cordova.io\" </author> author <content src=\"index.html\" /> content src \"index.html\" <plugin name=\"cordova-plugin-whitelist\" spec=\"1\" /> plugin name \"cordova-plugin-whitelist\" spec \"1\" <access origin=\"*\" /> access origin \"*\" <allow-intent href=\"http://*/*\" /> allow-intent href \"http://*/*\" <allow-intent href=\"https://*/*\" /> allow-intent href \"https://*/*\" <allow-intent href=\"tel:*\" /> allow-intent href \"tel:*\" <allow-intent href=\"sms:*\" /> allow-intent href \"sms:*\" <allow-intent href=\"mailto:*\" /> allow-intent href \"mailto:*\" <allow-intent href=\"geo:*\" /> allow-intent href \"geo:*\" <platform name=\"android\"> platform name \"android\" <allow-intent href=\"market:*\" /> allow-intent href \"market:*\" </platform> platform <platform name=\"ios\"> platform name \"ios\" <allow-intent href=\"itms:*\" /> allow-intent href \"itms:*\" <allow-intent href=\"itms-apps:*\" /> allow-intent href \"itms-apps:*\" </platform> platform </widget> widget",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "20. Is it possible to use Firebase with Ionic?",
        "answer": "Yes, Firebase is compatible with Ionic. It is one of the most powerful and widely used database-as-a-service solutions on the market today. The Firebase SDK can also be used as a node module. It can be installed, imported, and used within your project.  ",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "21. How would you acquire a list of all the available Ionic application start-up templates?",
        "answer": "Using the following command, we can see a list of all available templates that can be used when creating a new Ionic application: ionic start --list. ionic start --list",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "22. In the Ionic framework, how many different types of storage are there?",
        "answer": "Ionic supports both internal and external storage of data: Internal Storage (SQLite) - If your app requires a strong database or you already have data to inject into your Ionic app, there's a wonderful underlying SQLite database within that you can utilise to store your data just like any other storage engine.\nExternal Storage (MySql, IndexedDB, WebSql, PouchDB, MongoDB) - You can even use different storage systems like MySql, MongoDB and so on. They have remote databases and you connect to them and retrieve and write data to their databases.\nSession, Cookie - Cookies help in ensuring that the site works properly and efficiently when you visit it. Session cookies are temporary cookies that expire once you close the website and are not saved after your visit; they are generally not regarded to be intrusive of your privacy. Internal Storage (SQLite) - If your app requires a strong database or you already have data to inject into your Ionic app, there's a wonderful underlying SQLite database within that you can utilise to store your data just like any other storage engine. Internal Storage (SQLite) External Storage (MySql, IndexedDB, WebSql, PouchDB, MongoDB) - You can even use different storage systems like MySql, MongoDB and so on. They have remote databases and you connect to them and retrieve and write data to their databases. External Storage (MySql, IndexedDB, WebSql, PouchDB, MongoDB) Session, Cookie - Cookies help in ensuring that the site works properly and efficiently when you visit it. Session cookies are temporary cookies that expire once you close the website and are not saved after your visit; they are generally not regarded to be intrusive of your privacy. Session, Cookie",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "1. In an Ionic application, how do you identify a platform (iOS or Android) at runtime?",
        "answer": "Ionic offers a platform service for obtaining information regarding the current device. All of the platforms linked with the device are returned by the platform method.\nIt also indicates if the application is being seen on a tablet, mobile device, or browser, as well as the platform used, such as Android or iOS.\nIonic applies CSS classes to the <body> tag when the application is loaded on the device. Ionic, for example, adds the platform-ios class to the <body> tag on iOS devices. All of the platforms linked with the device are returned by the platform method. It also indicates if the application is being seen on a tablet, mobile device, or browser, as well as the platform used, such as Android or iOS. Ionic applies CSS classes to the <body> tag when the application is loaded on the device. Ionic, for example, adds the platform-ios class to the <body> tag on iOS devices.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "2. How can you persist data between application launches while using Ionic?",
        "answer": "You can utilise the localStorage and sessionStorage APIs to persist data on the mobile phone because Ionic is an HTML5 framework. Because localStorage can only save strings, objects must first be stringified before they can be saved. It's also worth noting that the maximum capacity for localStorage is 5MB.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "3. What is the function of the Ionic component ion-infinite-scroll?",
        "answer": "When we need to display a big amount of data in an Ionic application, the ion-infinite-scroll component comes in handy. Whenever the user scrolls a certain distance from the top or bottom of the page, this component allows information to be loaded into the app. Every mobile application requires a technique to display a large amount of data with fewer clicks. In that instance, the infinite scroll is critical to their success. The infinite scroll component serves the same purpose that we would if we were loading ten items on a page. Whenever the user scrolls down to the bottom of those items, it triggers a new data request. This request retrieves the next set of record entries to be integrated with existing ones. This procedure continues until the new data is no longer visible in chunks as the user scrolls. The news feed region of Facebook, Instagram, or Twitter is the finest example of an ion-infinite-scroll. When you reach the desired distance, the page automatically loads fresh posts, and a loading spinner appears at the bottom of the screen.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "4. In an Ionic application, how will you save data so that it could be retrieved subsequently on the next release?",
        "answer": "The @ionic/storage package in the ionic framework has a storage module. We may use the storage module to hold key-value pairs and JSON objects in a safe and reliable manner. It has its own set of constraints. @ionic/storage Storage engines come in a variety of flavours, and which one is ideal for you depends on the platform you're using. When executing in a native application context, SQLite is used for storage. Storage will use IndexedDB, WebSQL, and localstorage while operating on the web or as a Progressive Web App. The SQLite file-based database is the most stable and widely used, avoiding the drawbacks of alternative storage engines such as IndexedDB, WebSQL, and localstorage.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "5. The size of the generated APK (Android Package) for your Ionic application is quite large. What can you do to make it smaller?",
        "answer": "The following methods can be used to minimise the size of an Ionic app: First, compress all of the relevant icons and images, then eliminate any that you don't want.\nSecond, minify all JS and CSS files and make the necessary changes to the index.html page.\nThird, get rid of any unnecessary external modules or Cordova plugins that aren't in use. You can also eliminate unneeded code from the programme, which will save you a lot of space.\nFinally, you can use the following command to shrink the app's size: ionic build android -prod. First, compress all of the relevant icons and images, then eliminate any that you don't want. Second, minify all JS and CSS files and make the necessary changes to the index.html page. Third, get rid of any unnecessary external modules or Cordova plugins that aren't in use. You can also eliminate unneeded code from the programme, which will save you a lot of space. Finally, you can use the following command to shrink the app's size: ionic build android -prod.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "6. What is the ion-refresher component's purpose in Ionic?",
        "answer": "The term \"refreshing\" refers to the process of updating the currently displayed page so that the user may see the most recent content. To provide pull-to-refresh capabilities to a content component, Ionic provides the ion-refresher component. Ionic allows users to utilise touch to pull the page down from the top of a list of data to access more information. During the refresher's output events, the updated data should be adjusted. When the page has finished refreshing, execute the refresher's complete() function.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "7. Which IDE is best for developing Ionic mobile applications?",
        "answer": "Because Ionic is built on ES6 and TypeScript, your editors or IDE must be capable of supporting these new languages. The most common editors and integrated development environments (IDEs) for Ionic application development are: Visual Studio\nWebStorm\nAtom\nALM (Application Lifecycle Management)\nAngular IDE by Webclipse. Visual Studio WebStorm Atom ALM (Application Lifecycle Management) Angular IDE by Webclipse.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "8. How can native phone functionality, such as the camera, be accessed in Ionic applications?",
        "answer": "Ionic doesn't have a camera API by default. We may utilise Cordova plugins in our application because Ionic has a plugins architecture that is based on Cordova. The Ionic team has created a collection of Cordova extensions that include Angular wrappers, which can be obtained at ngCordova. To use Cordova plugins, we must use the Ionic command install <plugin name> to install the plugin. In some circumstances, the plugin's Angular module will also need to be added to your Angular application. We can use cordova-plugin-camera, which is accessible on GitHub, to contact the camera API to use a mobile phone's camera in an Ionic application. This plugin creates a global navigator.camera object with an API for taking photos and selecting images from the system's image library.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "9. On a real device, how will you debug an Ionic application (Both Android and iOS)?",
        "answer": "Debugging is an important element of any development process. When it comes to Ionic, We can use Chrome or Safari to debug Android and iOS applications. Android: Follow the steps below to debug an Android application in real-time. Android: On Android Mobile, enable developer mode.\nionic Cordova can be used to execute the application on a real device. Run Android or ionic Cordova build Android to build the apk and transfer it to the phone.\nConnect your device to your computer using a USB cable, then open Google Chrome and go to chrome:/inspect/#devices to see your phone and application name. There's an inspect button there.\nYou'll be able to inspect the application and look at the logs now. On Android Mobile, enable developer mode. ionic Cordova can be used to execute the application on a real device. Run Android or ionic Cordova build Android to build the apk and transfer it to the phone. Connect your device to your computer using a USB cable, then open Google Chrome and go to chrome:/inspect/#devices to see your phone and application name. There's an inspect button there. You'll be able to inspect the application and look at the logs now. iOS: To debug an iOS application in real-time, follow the steps below. iOS: Execute the command ionic Cordova to run the application on the device. Build the application with ionic Cordova or run-ios To get the application on the phone, you'll need to build it on iOS and use Xcode.\nNow go to Safari -> Windows -> Developer Options to enable developer options.\nYou may now debug the application in real-time by going to developer -> Your phone -> localhost. Execute the command ionic Cordova to run the application on the device. Build the application with ionic Cordova or run-ios To get the application on the phone, you'll need to build it on iOS and use Xcode. Now go to Safari -> Windows -> Developer Options to enable developer options. You may now debug the application in real-time by going to developer -> Your phone -> localhost.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "10. What is Ionic Market, and how does it work?",
        "answer": "Ionic Market is a marketplace for Ionic developers who want to use pre-built starters, themes, plugins, and other resources. Starters, Plugins, and Themes are the three sorts of items available on the Ionic Market. The Ionic marketplace makes it simple to submit, buy, and download starters, plugins, and themes for your projects. It's a good site to sell and buy ionic items. The Ionic Market is completely free to use, and there are no additional fees for these bespoke services. If you placed your add-on for sales in the Ionic Market, anyone may sell it directly via the market or refer to another marketplace.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "11. In Ionic, what are the various page life-cycle events?",
        "answer": "Ionic makes advantage of the Angular life-cycle events. These are the life-cycle events: ngOnInit: It is a one-time event that occurs during component initialization. It can be used to set up local members and make one-time calls to services.\nngOnDestroy: This event is triggered shortly before the view is destroyed by Angular. It's useful for things like unsubscribing from observables and cleaning up.\nionViewWillEnter: When the component routing-to is going to animate into view, ionViewWillEnter is invoked.\nionViewDidEnter: When the component routing-to has done animating, ionViewDidEnter is fired.\nionViewWillLeave: When the component routing-from is about to animate, it fires the ionViewWillLeave event.\nionViewDidLeave: When the component routing-to has done animating, it fires the ionViewDidLeave event. ngOnInit: It is a one-time event that occurs during component initialization. It can be used to set up local members and make one-time calls to services. ngOnInit: ngOnDestroy: This event is triggered shortly before the view is destroyed by Angular. It's useful for things like unsubscribing from observables and cleaning up. ngOnDestroy: ionViewWillEnter: When the component routing-to is going to animate into view, ionViewWillEnter is invoked. ionViewWillEnter: ionViewDidEnter: When the component routing-to has done animating, ionViewDidEnter is fired. ionViewDidEnter: ionViewWillLeave: When the component routing-from is about to animate, it fires the ionViewWillLeave event. ionViewWillLeave: ionViewDidLeave: When the component routing-to has done animating, it fires the ionViewDidLeave event. ionViewDidLeave:   There are a few more lifecycle events that would prohibit users from gaining unwanted access. ionViewCanEnter: It is called before entering a view, lets you control whether or not the view can be managed by the user.\nionViewCanLeave: This feature is activated before the user can leave a view and allows you to control whether the view can be left or not. ionViewCanEnter: It is called before entering a view, lets you control whether or not the view can be managed by the user. ionViewCanEnter: ionViewCanLeave: This feature is activated before the user can leave a view and allows you to control whether the view can be left or not. ionViewCanLeave: Routing Guards can be used to replace the above two events in Ionic 4.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "12. In Ionic 4, name all of the page life-cycle hooks.",
        "answer": "Ionic hooks have three distinct life cycles, as listed below: ionNavDidChange: This event is triggered when the nav's components have changed.\nionNavWillChange: When the navigation components change, this event is triggered.\nionNavWillLoad: This event is triggered when the navigation system is about to load a component. ionNavDidChange: This event is triggered when the nav's components have changed. ionNavDidChange: ionNavWillChange: When the navigation components change, this event is triggered. ionNavWillChange: ionNavWillLoad: This event is triggered when the navigation system is about to load a component. ionNavWillLoad:",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "13. How would you go about customising an Ionic app's splash screen?",
        "answer": "A splash screen looks like a start screen or a start-up screen. It's a graphical control element that includes an image, a logo, and the software's current version. The splash screen is simply a display screen that allows people to look at something while the hardware is loading so that software may be presented to them. It commonly displays as a game or software begins to load.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "14. How do you explain events in Ionic?",
        "answer": "Ionic Events is a publish-subscribe event system that may be used to send messages across multiple components and pages. To put it another way, it's a framework for transmitting and responding to app-level events across your entire app. Interactivity with users can be added via a variety of Ionic events. All of the Ionic events are explained in the table below. Event Name Event Detail\non-hold It is called whenever the duration of the touch is greater than 500ms.\non-tap It is called whenever the duration of the touch is less than 250ms.\non-double-tap It is called whenever there is double-tap touch.\non-touch It is called instantly when the touch begins.\non-release It is called when the touch ends.\non-drag It is called when touch is moved without releasing around the page in any direction.\non-drag-up It is called when an element is dragged up.\non-drag-right It is called when an element is dragged to the right.\non-drag-left It is called when an element is dragged to the left.\non-drag-down It is called when an element is dragged down.\non-swipe It is called when there is any dragging that has a high velocity moving in any direction.\non-swipe-up It is called when there is any dragging that has a high velocity moving up.\non-swipe-right It is called when there is any dragging that has a high velocity moving to the right.\non-swipe-left It is called when there is any dragging that has a high velocity moving to the left.\non-swipe-down It is called when there is any dragging that has a high velocity moving down. Event Name Event Detail\non-hold It is called whenever the duration of the touch is greater than 500ms.\non-tap It is called whenever the duration of the touch is less than 250ms.\non-double-tap It is called whenever there is double-tap touch.\non-touch It is called instantly when the touch begins.\non-release It is called when the touch ends.\non-drag It is called when touch is moved without releasing around the page in any direction.\non-drag-up It is called when an element is dragged up.\non-drag-right It is called when an element is dragged to the right.\non-drag-left It is called when an element is dragged to the left.\non-drag-down It is called when an element is dragged down.\non-swipe It is called when there is any dragging that has a high velocity moving in any direction.\non-swipe-up It is called when there is any dragging that has a high velocity moving up.\non-swipe-right It is called when there is any dragging that has a high velocity moving to the right.\non-swipe-left It is called when there is any dragging that has a high velocity moving to the left.\non-swipe-down It is called when there is any dragging that has a high velocity moving down. Event Name Event Detail Event Name Event Detail Event Name Event Detail on-hold It is called whenever the duration of the touch is greater than 500ms.\non-tap It is called whenever the duration of the touch is less than 250ms.\non-double-tap It is called whenever there is double-tap touch.\non-touch It is called instantly when the touch begins.\non-release It is called when the touch ends.\non-drag It is called when touch is moved without releasing around the page in any direction.\non-drag-up It is called when an element is dragged up.\non-drag-right It is called when an element is dragged to the right.\non-drag-left It is called when an element is dragged to the left.\non-drag-down It is called when an element is dragged down.\non-swipe It is called when there is any dragging that has a high velocity moving in any direction.\non-swipe-up It is called when there is any dragging that has a high velocity moving up.\non-swipe-right It is called when there is any dragging that has a high velocity moving to the right.\non-swipe-left It is called when there is any dragging that has a high velocity moving to the left.\non-swipe-down It is called when there is any dragging that has a high velocity moving down. on-hold It is called whenever the duration of the touch is greater than 500ms. on-hold It is called whenever the duration of the touch is greater than 500ms. on-tap It is called whenever the duration of the touch is less than 250ms. on-tap It is called whenever the duration of the touch is less than 250ms. on-double-tap It is called whenever there is double-tap touch. on-double-tap It is called whenever there is double-tap touch. on-touch It is called instantly when the touch begins. on-touch It is called instantly when the touch begins. on-release It is called when the touch ends. on-release It is called when the touch ends. on-drag It is called when touch is moved without releasing around the page in any direction. on-drag It is called when touch is moved without releasing around the page in any direction. on-drag-up It is called when an element is dragged up. on-drag-up It is called when an element is dragged up. on-drag-right It is called when an element is dragged to the right. on-drag-right It is called when an element is dragged to the right. on-drag-left It is called when an element is dragged to the left. on-drag-left It is called when an element is dragged to the left. on-drag-down It is called when an element is dragged down. on-drag-down It is called when an element is dragged down. on-swipe It is called when there is any dragging that has a high velocity moving in any direction. on-swipe It is called when there is any dragging that has a high velocity moving in any direction. on-swipe-up It is called when there is any dragging that has a high velocity moving up. on-swipe-up It is called when there is any dragging that has a high velocity moving up. on-swipe-right It is called when there is any dragging that has a high velocity moving to the right. on-swipe-right It is called when there is any dragging that has a high velocity moving to the right. on-swipe-left It is called when there is any dragging that has a high velocity moving to the left. on-swipe-left It is called when there is any dragging that has a high velocity moving to the left. on-swipe-down It is called when there is any dragging that has a high velocity moving down. on-swipe-down It is called when there is any dragging that has a high velocity moving down.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "15. In Ionic, when will you use an AlertController?",
        "answer": "An alert is a dialog that provides crucial information to the user in order for them to make a decision or allows them to select a specific action or a set of actions. Before resuming contact with the application, the user can dismiss it manually. It's a floating modal that should be used for short responses like password verification and minor application notifications, among other things. In an Ionic application, the alert controller is in charge of creating an alert. It creates an alert using the create() method, which can be customised by giving the alert option to the create() method.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "16. In Ionic, what is the capacitor?",
        "answer": "A capacitor is a cross-platform software that allows you to create web applications that work natively on iOS, Android, Electron, and the Web using a single code base. These applications are known as Native Progressive Web applications, and they are the next development after Hybrid applications.\nIt is intended to be a successor for Apache Cordova and Adobe Phonegap, drawing influence from other successful cross-platform technologies such as React native, but it is only focused on allowing modern web applications to operate on all major web platforms. Many existing Cordova plugins are supported by the capacitor in a backwards-compatible manner.\nCapacitor converts your web application into a platform-specific native binary. As a result, you'll spend a lot of time establishing and then building a mobile-friendly web app. Using Capacitor's plugins (such as Camera) or existing Cordova plugins with Capacitor's Cordova Compatibility, you'll communicate with the native platform underneath. Capacitor or Cordova plugins are used to interact between the Web View and the native app. Plugins provide your web application access to native APIs like the camera, geolocation, and filesystem. The capacitor includes a number of JavaScript utilities that can help you make sure your apps operate on many platforms with the same codebase. To utilise them, first import Capacitor, then call the utility function you want. A capacitor is a cross-platform software that allows you to create web applications that work natively on iOS, Android, Electron, and the Web using a single code base. These applications are known as Native Progressive Web applications, and they are the next development after Hybrid applications. It is intended to be a successor for Apache Cordova and Adobe Phonegap, drawing influence from other successful cross-platform technologies such as React native, but it is only focused on allowing modern web applications to operate on all major web platforms. Many existing Cordova plugins are supported by the capacitor in a backwards-compatible manner. Capacitor converts your web application into a platform-specific native binary. As a result, you'll spend a lot of time establishing and then building a mobile-friendly web app. Using Capacitor's plugins (such as Camera) or existing Cordova plugins with Capacitor's Cordova Compatibility, you'll communicate with the native platform underneath. Capacitor or Cordova plugins are used to interact between the Web View and the native app. Plugins provide your web application access to native APIs like the camera, geolocation, and filesystem. The capacitor includes a number of JavaScript utilities that can help you make sure your apps operate on many platforms with the same codebase. To utilise them, first import Capacitor, then call the utility function you want.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "17. How is the performance of an Ionic application on older Android devices?",
        "answer": "Ionic Applications give iOS and Android devices incredible stability. It has excellent performance, little maintenance, and requires less storage space to run new Ionic applications, among other benefits. However, it has been noted that the Ionic Application does not run smoothly on older Android smartphones. In older Android devices, any application built using the Ionic framework has been reported as non-working. Any Ionic application running on Android devices prior to version 5 has a number of difficulties, including low performance/non-performance, heavy maintenance, interfering with other applications, and so on. A crosswalk plugin must be created externally to run applications on older Android devices, which will help Ionic applications perform better on older Android smartphones.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "18. What is the benefit of caching views in Ionic applications?",
        "answer": "Views are cached by default to increase efficiency. The element of a view is left in the DOM when it is navigated away from it, and its scope is separated from the $watch cycle. When you navigate to a previously cached view, its scope is reconnected, and the existing element in the DOM becomes the current view. This also allows prior views' scroll positions to be preserved.\nCaching can be turned on and off in a variety of ways. Ionic caches a maximum of 10 views by default, and not only can this be changed, but applications can also specify which views should and should not be cached explicitly. Caching can be turned off per view by setting cache: false in the state settings of the UI router. The$ionicConfigProvider may be used to specify the maximum number of cached views, but it can also be used to turn off all caching by setting it to 0. Views are cached by default to increase efficiency. The element of a view is left in the DOM when it is navigated away from it, and its scope is separated from the $watch cycle. When you navigate to a previously cached view, its scope is reconnected, and the existing element in the DOM becomes the current view. This also allows prior views' scroll positions to be preserved. Caching can be turned on and off in a variety of ways. Ionic caches a maximum of 10 views by default, and not only can this be changed, but applications can also specify which views should and should not be cached explicitly. Caching can be turned off per view by setting cache: false in the state settings of the UI router. The$ionicConfigProvider may be used to specify the maximum number of cached views, but it can also be used to turn off all caching by setting it to 0.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "19. What is Ionic Native?",
        "answer": "Ionic Native is a TypeScript wrapper for Cordova or PhoneGap plugins that allows you to integrate any native feature into your Ionic project. With the help of Ionic Native, we can quickly integrate any of the Cordova plugin communities into an Ionic application. One of the benefits of being an Ionic native is that you can create better code. We can also utilise Cordova plugins without Ionic Native, but Ionic Native adds types to these Cordova plugins via wrapper classes, allowing us to employ IntelliSense and code suggestions. This keeps you from making mistakes and allows you to develop codes faster and more effectively. The Ionic Native directory is regularly updated with new plugins.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "20. What are the security risks associated with Ionic applications?",
        "answer": "Security is a typical concern while developing hybrid applications, as long as your application can be reverse-engineered. Ionic CLI has had built-in code uglification since version 4, which is a typical approach for making code difficult to read by hackers. However, you should be aware that there is no code uglification when using Angular CLI or previous versions of Ionic. Your programmers will have to uglify the code themselves.\nA man-in-the-middle attack is one of several ways to compromise what's going on with your mobile application or PWA. What difference does it make? Because, in essence, your Ionic application is a web page that runs on the device. The crucial point to remember is that Ionic connects with the backend via standard HTTP calls. As a result, you'll want to apply the same security protections to your Ionic application that you do to your website, such as using HTTPS instead of HTTP.\nDevelopers can include custom or user-provided content in components like ion-alert. This content, which can be plain text or HTML, should be regarded as untrustworthy. Before doing anything else with any untrusted information, it's critical to sanitise it. Using innerHTML without sanitization, for instance, presents an attack vector for bad actors to insert malicious material and potentially conduct a Cross-Site Scripting attack (XSS).  Ionic includes basic sanitization methods for the components it offers, but it is up to the developer to ensure that all data is sanitised for user-created components.\nIf an attacker finds a flaw in an application's code (for instance, a third-party API call or a JavaScript package), they may find a way to exploit it such that malicious code is executed instead. The Content Security Policy (CSP) meta tag was created to aid in the prevention of such attacks by specifying which network requests are permitted and where assets are loaded from. You'll observe that Ionic apps for iOS and Android often use Cordova's Network Whitelist Plugin to protect webviews that don't support CSP from cross-site scripting. Ionic CLI has had built-in code uglification since version 4, which is a typical approach for making code difficult to read by hackers. However, you should be aware that there is no code uglification when using Angular CLI or previous versions of Ionic. Your programmers will have to uglify the code themselves. A man-in-the-middle attack is one of several ways to compromise what's going on with your mobile application or PWA. What difference does it make? Because, in essence, your Ionic application is a web page that runs on the device. The crucial point to remember is that Ionic connects with the backend via standard HTTP calls. As a result, you'll want to apply the same security protections to your Ionic application that you do to your website, such as using HTTPS instead of HTTP. Developers can include custom or user-provided content in components like ion-alert. This content, which can be plain text or HTML, should be regarded as untrustworthy. Before doing anything else with any untrusted information, it's critical to sanitise it. Using innerHTML without sanitization, for instance, presents an attack vector for bad actors to insert malicious material and potentially conduct a Cross-Site Scripting attack (XSS).  Ionic includes basic sanitization methods for the components it offers, but it is up to the developer to ensure that all data is sanitised for user-created components. If an attacker finds a flaw in an application's code (for instance, a third-party API call or a JavaScript package), they may find a way to exploit it such that malicious code is executed instead. The Content Security Policy (CSP) meta tag was created to aid in the prevention of such attacks by specifying which network requests are permitted and where assets are loaded from. You'll observe that Ionic apps for iOS and Android often use Cordova's Network Whitelist Plugin to protect webviews that don't support CSP from cross-site scripting.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "21. What does it imply that Ionic has become framework-agnostic?",
        "answer": "Ionic has been reliant on Angular framework components since its inception as a utility for Angular users. Ionic became framework-agnostic in version 4, which means it is no longer dependent on Angular. The move was made possible through the use of web components and the promotion of Ionic's command-line interface.\nWeb components are a collection of features that make use of common APIs that are natively supported by practically all mobile browsers today. As a result, they may be deployed on any mobile device or utilised to develop desktop applications using the Electron framework, such as Progressive Web applications (PWAs). The use of web components with Ionic also allows for the use of any framework. Ionic has been reliant on Angular framework components since its inception as a utility for Angular users. Ionic became framework-agnostic in version 4, which means it is no longer dependent on Angular. The move was made possible through the use of web components and the promotion of Ionic's command-line interface. Web components are a collection of features that make use of common APIs that are natively supported by practically all mobile browsers today. As a result, they may be deployed on any mobile device or utilised to develop desktop applications using the Electron framework, such as Progressive Web applications (PWAs). The use of web components with Ionic also allows for the use of any framework.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "22. How do you prevent two network calls if multiple components are attempting to make an HTTP call to the same URL?",
        "answer": "Network calls are one of the key areas that will have a significant impact on the app's performance. To improve the app's performance, it should be fine-tuned to the highest level of accuracy. If two different components are attempting to make HTTP calls to the same URL, it is preferable to make a single call and transmit data to both components than to make two separate HTTP calls. The requested action is completed in a matter of seconds.\nThe best method to do this is to use a root component. A shared root component should be used by all components making HTTP calls. This keeps note of URLs that were requested a few seconds ago, and if they are requested again, it can add a small delay before sending the result to both components. If two different components are attempting to make HTTP calls to the same URL, it is preferable to make a single call and transmit data to both components than to make two separate HTTP calls. The requested action is completed in a matter of seconds. The best method to do this is to use a root component. A shared root component should be used by all components making HTTP calls. This keeps note of URLs that were requested a few seconds ago, and if they are requested again, it can add a small delay before sending the result to both components.",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "23. What is the difference between AOT (Ahead of Time Compiler) and JIT (Just In Time Compiler), and which one is employed by Ionic?",
        "answer": "Because Ionic 1-3 is heavily reliant on Angular. The same compiling options that were available for Angular were also accessible for Ionic. JIT is an abbreviation for \"just in time compiler\". It is a sort of compilation in which the application is compiled in the browser at runtime.\nAOT is an abbreviation for \"ahead of time compiler”. It is a sort of compilation in which the application is compiled in the build time.\nIt will be JIT if we only use the ionic Cordova build platform (android or iOS). It will use AOT if we use the prod flag, Ionic Cordova builds platform --prod. JIT is an abbreviation for \"just in time compiler\". It is a sort of compilation in which the application is compiled in the browser at runtime. AOT is an abbreviation for \"ahead of time compiler”. It is a sort of compilation in which the application is compiled in the build time. It will be JIT if we only use the ionic Cordova build platform (android or iOS). It will use AOT if we use the prod flag, Ionic Cordova builds platform --prod. When compared to AOT, software designed with JIT is slower. However, AOT requires greater compilation time than JIT. So utilise JIT for quick checks and AOT for final deployment. Conclusion: In the mobile development market, Ionic developers are in high demand. Prepare with these Ionic framework interview questions to ace your next Ionic interview and pursue a career as a Mobile Application Developer, Frontend Developer, and, of course, an Ionic developer. We are certain that this article on Ionic interview questions has significantly increased your understanding of Ionic concepts. You will be able to confidently crack any relevant interview if you have a firm grasp of all of the questions presented here. Answering questions about Ionic CLI, distinct components in Ionic, and how to establish a new project using Ionic CLI will be easier if you study these Ionic framework interview questions and answers well. Recommended Interview Resources: Recommended Interview Resources: Android\niOS\nReact Native\nFlutter\nAppium\nMobile Testing\nAngular Android Android iOS iOS React Native React Native Flutter Flutter Appium Appium Mobile Testing Mobile Testing Angular Angular",
        "reference": "interviewbit.com",
        "role": "ionic"
    },
    {
        "question": "1) What is the Ionic Framework?",
        "answer": "Ionic framework is an open-source UI toolkit for building performant, high-quality mobile apps, desktop apps, and progressive web apps using web technologies such as HTML, CSS, and JavaScript. It allows developers to build once and run everywhere.\nThe Ionic framework mainly focuses on front-end user experience or UI interaction, which handles all the look and feel of your app. It is easy to learn and can integrate with other libraries or frameworks such as Angular, Cordova, etc. It can also be used as a standalone without a front-end framework using a simple script include.\nOfficially, the Ionic framework has integration with Angular, but it also provides support for Vue.js and React.js, which are in development.\nADVERTISEMENT\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "2) Who created the Ionic Framework?",
        "answer": "It was created by Max Lynch, Ben Sperry, and Adam Bradley of Drifty Co. in 2013. The first beta version of the Ionic framework was released in March 2014.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "3) How do you install an Ionic Framework?",
        "answer": "Pre-requisite for Ionic\nThe following things are required to install Ionic.\nADVERTISEMENT\nNode.js and NPM\nCode Editor\nIonic CLI\nTo learn step by step how you can install Ionic Framework, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "4) What is the Ionic CLI?",
        "answer": "The official Ionic CLI or Command-Line-Interface is a primary tool used for developing the Ionic application. It gives a bunch of miscellaneous tools under a single interface. It provides you many crucial commands for Ionic development, such as start, build, serve, and run. It also contains commands like emulate and info, which can be helpful in certain situations. It is also responsible for cloud builds and deployment, and administer your account on Ionic pro.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "5) What are the advantages of an Ionic Framework?",
        "answer": "The advantages of Ionic application development framework are as following:\n\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "6) What are the disadvantages of an Ionic Framework?",
        "answer": "The disadvantages of Ionic application development framework are as following:\n\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "7) What are the features of an Ionic framework?",
        "answer": "The most important features of the Ionic framework are as follows:\n\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "8) How is Ionic Framework version 4 different from the previous versions of the Ionic Framework?",
        "answer": "Ionic framework team has released the Ionic 4 version after the release of Ionic 3. The new version of Ionic brings significant changes in the project structure, performance, and compatibility with multiple frameworks (Such as Angular, React.js, and Vue.js), new documentation, and many other improvements. If you want to know these changes in detail, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "9) What is Lazy Loading?",
        "answer": "Lazy loading is a general process where we load that thing whenever we need them. The main idea behind this concept is that we do not need to load every page in the application when the application is launched. In the previous versions of Ionic framework, it is recommended to use @IonicPage decorator to lazy load your pages, but now in the latest version of Ionic (Ionic 4), we lazy load our Angular components with Angular routing.\nWe know that every Ionic component is a web component, and these components will be lazily loaded only when they are accesses in the Ionic application. It means that the code for <ion-button> and <ion-tab> will only be loaded when they are accessed in the application.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "10) Name some popular apps built with the Ionic Framework?",
        "answer": "Some of the popular apps built with the Ionic Framework are listed below.\nSworkit: This app is built for workout and fitness plans.\nCryptochange: It is an app, which is built for cryptocurrency tracker.\njustWatch: It is an app for streaming Search Engine Portfolio.\nMarketWatch: It is an app for the stock market and business news.\nPacifica: It is an app for Cognitive Behavioural Therapy.\nUntappd: This is an app for Social Discovery and check-in Network National Museum of African American History and Culture.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "11) What is the recommended way of implementing navigation within an Ionic 4 app?",
        "answer": "Ionic 4 depends on Angular that uses Angular's router module called RouterModule for navigation. It provides more consistent routing experience into the whole app. The previous versions of Ionic use NavController service for navigation, which is still there, but it will be deprecated soon. Thus, it will not be recommended in the new Ionic apps built with Ionic 4.\n\nIn the latest version of Ionic, the ion-router-outlet component is used to manage the animations that show up as the user navigates to or from a component within the app. The ion-router-outlet works the same as the Angular router-outlet with some animation effect.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "12) What is Web View?",
        "answer": "We know that Ionic apps are built using web technologies such as HTML, CSS, and JavaScript. These web technologies are rendered using Web Views, which are full screen and full-powered web browser.\nThe latest web view provides many built-in HTML5 APIs for hardware functionality, which are a camera, Bluetooth, GPS, sensors, and speakers. Sometimes it also needs to access platform-specific APIs. In the Ionic framework, the hardware APIs can be accessed through a bridge layer, typically by using native plugins that expose JavaScript APIs.\nThe following image provides you a detailed explanation of web view architecture.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "13) What is CORS? How would you deal with it?",
        "answer": "CORS stands for cross-origin resource sharing. It is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, have permission to access selected resources from a different origin.\nA web application makes a cross-origin request for a resource like an image or a font outside of the origin, and CORS manages these cross-origin requests. The CORS standard is necessary because it allows servers to specify who can access its assets and how the assets can be accessed.\n\nFor security reasons, the browser restricts cross-origin requests initiated within scripts. The CORS needs to be handled on the server. When responding to HTTP requests in your server app, you can add the CORS response headers to specify that the client app can access a resource or not. If the CORS is not implemented on the server, then there is a native plugin available that performs HTTP requests in the native layer, which bypasses CORS. Thus, external services can properly handle cross-origin requests.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "14) How would you save data in an Ionic app so that it can be accessed later or on the next launch?",
        "answer": "The ionic framework provides a storage module that resides in @ionic/storage package. The storage module allows us to store key-value pairs and JSON objects in secure, reliable storage. It also has its own set of limits.\nStorage has a variety of storage engines, which one is best depends on the platform you are using. When running in a native app context, the storage uses SQLite. When running on the Web or as a Progressive Web App, Storage will use IndexedDB, WebSQL, and localstorage.\nThe SQLite is the most stable and used a file-based database, which avoids the pitfalls of the other storage engines like IndexedDB, WebSQL, and localstorage.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "What can you do to reduce the size?",
        "answer": "The size of the Ionic app can be reduced in the following ways:\nFirst, compress all the screenshots and icons and deletes all unwanted icons. If you use portrait mode, keep only portrait screenshots, and if you are using landscape mode, keep all the screenshots landscape.\nSecond, minify all JS and CSS files and update the index.html file accordingly.\nThird, remove unwanted external modules and Cordova plugins that are not being used. You can also remove unnecessary code from the app, which adds a lot of extra bytes to the app's size.\nLast, you can also run the following command to reduce the app size: ionic build android -prod.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "16) How would you compare Ionic and Apache Cordova?",
        "answer": "Ionic and Apache Cordova are built on top of Cordova, so they are not considered competitors. They are two popular technologies widely adopted in the market for mobile app development. The combination of these technologies forms a development platform which is known as hybrid app development. Both frameworks have a large community of passionate developers and are used in large enterprises. You can learn how Ionic is different from Apache Cordova, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "17) How many types of storage available in the Ionic framework?",
        "answer": "There are many types of storage available in the Ionic Framework; some of them are given below.\nLocal storage\nSQLite\nCookie and session storage\nindexedDB\nWebSQL\nPouchDB\nWebservice/api storage\nCordova storage.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "18) What is the current stable version of the Ionic Framework?",
        "answer": "The current version of the Ionic framework is 5.4.6. It was released on 12 November 2019. It uses Angular 6 or above for development. It mainly focusses on the user interface of your application.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "19) How to rename an Ionic app?",
        "answer": "To rename the Ionic app, open the config.xml file from your project's root directory and update the value inside the name tag.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "20) How to update Cordova plugins?",
        "answer": "We can update the Cordova plugins by using the following command.\nnpm install -g cordova-check-plugins  \ncordova-check-plugins --update=auto",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "21) What is ion-app?",
        "answer": "The <ion-app> is a container element for the whole Ionic app. The Ionic project should have only one <ion-app> element and can have many Ionic components such as header, footers, menus, content, etc. All these components wrapped into the <ion-app> component when they are presented.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "22) What are the color names that are bundled in when we created a new Ionic 4 project?",
        "answer": "The Ionic framework has a set of nine pre-defined colors, which is used to change the color of many components. Each color is a collection of multiple properties, including shade and a tint. We can apply color to an Ionic component by using the color attribute. If you have not set any color to the required element, it sets the primary color by default. The default set of colors provided by the Ionic framework are primary, secondary, tertiary, danger, warning, success, dark, medium, and light.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "23) What are Native Apps?",
        "answer": "Native apps are apps for certain devices like smartphones, tablets, etc. It can be installed directly on to the device through an application store (Such as Google Play or Apple's App Store). They are always live on the device and can be accessed through icons on the device home screen. These apps can use the device notification system and can also work offline. Some of the famous native apps are Camera, Collage-Maker, Google Maps, Facebook, etc.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "24) What is Mobile Web Apps?",
        "answer": "Mobile web apps are internet-enabled apps, which have specific functionality for mobile devices. The mobile web apps accessed through the mobile device's web browsers. They do not need to be downloaded and installed on the device.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "25) What are Hybrid Apps?",
        "answer": "A hybrid app is an app, which combines the elements of both native apps and web apps. It can be installed on a device, just like any other apps. They are similar to native apps and are written with web technologies, such as HTML, CSS, and JavaScript. They are popular because they allow developers to write code for the mobile app once and can deploy on multiple platforms.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "26) How can you identify a platform (iOS or Android) at runtime in the Ionic application?",
        "answer": "Ionic provides a platform service that can be used to get information about the current device. The platform method provides all of the platforms associated with the device. It also tells whether the app is being viewed from a tablet, mobile device, or a browser and about the exact platform like Android, iOS, etc. When the application is loaded on the device, then the Ionic adds CSS classes to the <body> tag. For example, on iOS devices, Ionic add platform-ios class to <body> tag.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "27) What is the difference between \"ionic build\" and \"ionic prepare\"?",
        "answer": "Ionic Prepare Ionic Build\nThe ionic prepare <platform> copies all files from the www folder into the target platform's www folder. The ionic build<platform> performs the task of ionic prepare as well as it builds the app's source code, which facilitates to run over the Simulator of an emulator or a device.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "",
        "answer": "The Ionic grid system is a powerful mobile-based flexbox system for building a custom layout. The Ionic grid is mainly composed of three units, which are a grid, rows, and columns. The Ionic grid is made up of 12 column layout with different breakpoints based on the screen size.\nSome of the important points that we need to know while working with the Ionic grid are:\nGrids act as a container for rows and columns. It takes the full width of their container, but adding the fixed attribute will specify the width per screen size.\nRows are horizontal groups of columns, and columns are a place where we put our contents, and only columns should be immediate children of rows.\nThe size attributes indicate the number of columns to use out of the default 12 per row. So, size=\"4\" can be added to a column in order to take up 1/3 of the grid.\nIf columns are without size value, it will automatically take equal widths.\nColumns have padding attributes between individual columns; however, the padding can be removed from the grid and columns by using no-padding on the grid.\nThe grid contains five grid tiers, one for each responsive breakpoint. All breakpoints are extra-small, small, medium, large, and extra-large.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "",
        "answer": "Some of the important Ionic components are:\nIon-Alert\nAn alert is a dialog that notifies the user with important information to make a decision or provide the ability to choose a specific action or list of actions. It appears on top of the app content. It can be dismissed manually by the user before resuming interaction with the app.\nIon-Buttons\nButtons are an essential way to interact with and navigate through an app. It is used to clearly communicate what action will occur when the user clicks on them. The buttons can contain two things, which are text, icons, or both. It can also be enhanced with a variety of attributes such as color, shape, size to look a specific way.\nIon-Content\nThe Ionic content element serves as a container, which wraps all other elements that we want to create in the app. The content component allows an easy to use content area that contains some useful methods to control the scrollable area. In the Ionic app, there should be only one content component in a single view. We can also customize it by individual styling using CSS and the available CSS custom properties.\nIon-List\nLists are made up of multiple rows of items, which include text, buttons, toggles, icons, thumbnails, and many more. The list element is used to display various information such as menus, tabs, or to break the monotony of pure text files. It supports several interactions, including swiping items, dragging to reorder items within the list, and deleting items.\nIon-Input\nThis component is used for collecting and handling user input securely. It works the same as an HTML input element. It accepts only text type inputs such as text, password, number, email, and URL. It should always be wrapped with the ion-item element.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "",
        "answer": "Config.xml is a global configuration file that controls the build settings of the Ionic apps. It controls many aspects of a Cordova application behavior. When you scaffold the Ionic application, a basic config.xml file is generated for you in the top-level directory. This file follows the W3C Package Web Apps (widget) specification. It allows developers to specify metadata about their applications easily. It contains various information about the project, such as package name, version, author's information, plugins, platform, etc.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "31) What is the purpose of the ion-infinite-scroll component in Ionic?",
        "answer": "The ion-infinite-scroll is a very useful component when we have to show a large set of data at once in the Ionic application. This component allows to load data into the app when the user scrolls a specified distance from the top or bottom of the page.\nEvery mobile application needs a way to show the huge set of data in a lesser number of clicks. In that case, the infinite scroll plays an essential role for them. The infinite scroll component works like we load ten items on a page. Now, when the user scrolls those items and reaches close to the bottom, it makes a new data request. This request gets the next set of records items that will be added to the existing items. This process is repeating until the new data is not found in chunks as user scrolls.\nThe best example of an ion-infinite-scroll is the Facebook, Instagram, or Twitter news feed area. The page always loads new posts when you reached the specified distance, and you will see a loading spinner on the bottom of the screen.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "32) What is the purpose of the ion-refresher component in Ionic?",
        "answer": "Refreshing means updating of the currently displayed page so that the user can see the latest content. Ionic provides the <ion-refresher> component to add pull-to-refresh functionality on a content component. An Ionic allows the users to pull the page down from the top on a list of data using touch to retrieve more data. The updated data should be modified during the refresher's output events. Once, the refreshing of page ends, call the complete() function on the refresher.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "33) What is a Progressive Web App?",
        "answer": "A progressive web app is a normal web app, which looks and feels like native mobile apps. It uses modern web capabilities to deliver an app-like experience to the user. These apps can easily deploy to servers, accessible through URLs, and indexed by search engines. The PWA app optimizes to be:\nReliable: Load fast and provide offline functionality.\nFast: It should be fast and respond quickly to user actions.\nRe-engageable: It makes re-engagement with the user through push notification, which feels like a native app on the mobile device.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "34) Which IDE is good for Ionic mobile application development?",
        "answer": "We know that Ionic built on ES6 and TypeScript, so your editors or IDE must support these new languages. The most popular editors and IDEs, which give you the most effective support for the Ionic application development are:\nVisual Studio\nWebStorm\nAtom\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "35) What is Ionic Market?",
        "answer": "Ionic team announces Ionic Market for Ionic developers who want to use pre-build starters, themes, plugins, etc. The Ionic Market categories into three types: Starters, Plugins, and Themes. The Ionic marketplace makes it easy to submit and buy starters, plugins, and themes, as well as download them for your projects. It is a good place where you can sell and purchase ionic stuff.\n\nThe Ionic Market is free to use, and do not charge any extra commission for these custom services. Anybody could sell directly through the market or link to another marketplace if you listed your add-on for sale in the Ionic Market.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "36) What are different page life-cycle events in Ionic?",
        "answer": "Ionic uses the life-cycle events provided by the Angular. These life-cycle events are:\nngOnInit: It is fired once during component initialization. It can be used to initialize local members and make calls into services, which need to be done only once.\nngOnDestroy: It is fired just before Angular destroys the view. It can be useful for clean-up like unsubscribing from observables.\nionViewWillEnter: It is fired when the component routing-to is about to animate into view.\nionViewDidEnter: It is fired when the component routing-to has finished animating.\nionViewWillLeave: It is fired when the component routing-from is about to animate.\nionViewDidLeave: It is fired when the component routing-to has finished animating.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "",
        "answer": "The Ionic hooks have three different life-cycle, which are given below:\nionNavDidChange: This event is fired when the nav has changed components\nionNavWillChange: This event is fired when the nav will components\nionNavWillLoad: This event is fired when nav will load a component",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "38) How would you debug apps when testing on real devices or emulators?",
        "answer": "To debug apps when testing on real devices or emulators, we can use Chrome Remote debugging and other developer tools provided by Google Chrome to spot the issues within the app. Remote debugging tools allow us to debug live content on the Android device from the Mac, Linux, or Windows. Safari browser also allows us similar features for debugging an iOS application running on Simulator or iPhone.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "39) Can we use Firebase with Ionic?",
        "answer": "Yes, we can use Firebase with Ionic. It is one of the most powerful and popular databases as a service solution available today. Firebase SDK is also available as a node module. It can be installed within your project, import it, and can use it.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "40) How would you get the list of all the available start-up templates for an Ionic app?",
        "answer": "We can display the list of all available templates that can be used while creating a new Ionic application by using the following command:\nionic start --list",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "41) How would you add a custom splash screen to an Ionic app?",
        "answer": "A splash screen is similar to a start screen or start-up screen. It is a graphical control element, which contains the image, logo, and current version of the software. The splash screen is just a display screen that allows users to look something while the hardware is loading to present software to the user. It usually appears when a game or program is launching. To know how to add a splash screen to the Ionic app, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "",
        "answer": "The async and await both are new keyword introduced in the ES2017 to write async functions. They are used to execute asynchronous code blocks. Basically, it allows you to write promises in a more readable way. Let us understand it with the following example.\npromiseFunction(){  \n    return new Promise((resolve,reject)=>{  \n      setTimeout(()=>{  \n        resolve(\"Promises Resolved\");  \n      },3000);  \n    })  \n  }  \nThe above function will return a promise, which will be resolved in 3000 milliseconds. We can call the above promise function as below.\npromiseFunCall() {  \n    this.promiseFunction().then(  \n      successData => {  \n        console.log(output: successData);  \n      },  \n      rejectData => {  \n        console.log(output: rejectData);  \n      }  \n    );  \n  }  \nNow, we are going to see how promises will be converted into the async-await function. The promiseFunction() will remain the same, and the async-await function handled how the promises will be called. So, the above function promiseFunCall() can be re-written as:\nasync promiseFunCall() {  \n    try {  \n      let successData= await this.promiseFun();  \n      console.log(output: successData);  \n    } catch (error) {  \n      console.log(error);  \n    }  \n  }",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "43) Explain Events in Ionic?",
        "answer": "Events in Ionic is a publish-subscribe style event system, which can be used to pass messages across different components and pages. In other words, it is a system for sending and responding to application-level events across your app. We can understand it with the following example where one page publishes an event, and the second page subscribes to that event.\nHome.page.ts\nimport { Component, Events } from '@ionic/angular';  \n  @Component({    \n  selector: 'app-home',    \n  templateUrl: 'home.page.html',    \n  styleUrls: ['home.page.scss'],    \n})    \nexport class HomePage {  \n  constructor(public events1: Events) {}  \n  createUser(user) {  \n   console.log('User created!')  \n   this.events.publish('user:created', user, Date.now());  \n  }  \n}  \nPage2.ts\nimport { Component, Events } from @'ionic/angular';  \n  @Component({  \n  selector: 'page-page2',  \n  templateUrl: 'page2.html'  \n  styleUrls: ['page2.scss'],    \n})  \nexport class Page2Page {  \n  constructor(public events2: Events) {}  \n   events.subscribe('user:created', (user, time) => {  \n     console.log('Welcome', user, 'at', time);  \n  });  \n}",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "44) When would you use an AlertController in Ionic?",
        "answer": "An alert is a dialog that notifies the user with important information to make a decision or provide the ability to choose a specific action or list of actions. It can be dismissed manually by the user before resuming interaction with the app. It can be thought of as a floating modal which should be used for a quick response such as password verification, small app notifications, and many more.\nThe alert controller is responsible for creating an alert in the Ionic application. It uses create() method to create an alert and can be customized by passing alert option in the create() method.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "ionic"
    },
    {
        "question": "45) What is the capacitor in Ionic?",
        "answer": "The capacitor is a cross-platform app, which makes it easy to build web apps that run natively on iOS, Android, Electron, and the Web with one single code base. These apps can be called Native Progressive Web Apps and represent the next evolution beyond Hybrid apps.\nIt sees as a replacement of Apache Cordova and Adobe Phonegap, with inspiration from other popular cross-platform tools like React native, but focuses entirely on enabling modern web apps to run on all major web platforms. The capacitor has a number of backward-compatible support for many existing Cordova plugins.",
        "reference": "javatpoint.com",
        "role": "ionic"
    }
]