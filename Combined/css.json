[
    {
        "question": "1. What is CSS?",
        "answer": "Cascading Style Sheet (CSS) is a style sheet language that is used to determine how the elements or content in a page will look or be displayed. It helps build a consistent look and feel for all web pages.\nCSS allows the separation of the content from the presentation, thus providing more flexibility and control over the look of the website.\nCSS3, the third version of the CSS standard, incorporates CSS2 standard with some improvements such as the inclusion of divisions of standards into different modules. It makes CSS3 easier to learn and understand.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "2. What is an external style sheet? How would you link to it?",
        "answer": "The external style sheet is the sheet that comprises style information and can be connected with one or more HTML documents. With the help of an external style sheet, the entire website can be formatted and styled just by editing one single file. The file is connected with HTML documents with the help of the LINK element, which resides inside the HEAD element.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "3. What are the advantages and disadvantages of using external style sheets?",
        "answer": "The advantages of using external style sheets are as follows:\nStyles of numerous documents can be organized from one single file.\nClasses can be made for use on numerous HTML element types in many forms of the site.\nIn complex contexts, methods such as selector and grouping can be implemented to apply styles.\nThe disadvantages of using external style sheets are as follows:\nAn extra download is necessary to import style information for each file.\nThe execution of the file may be deferred till the external style sheet is loaded.\nWhile implementing style sheets, we need to test web pages with multiple browsers in order to check compatibility issues.\nClick here to learn more about CSS, in this Web development master’s program.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "4. What are the advantages and disadvantages of embedded style sheets?",
        "answer": "The advantages of embedded style sheets are as follows:\nIn embedded style sheets, it is possible to generate classes for use on multiple tag types in a document.\nIn embedded style sheets, in comparison to external style sheets, no extra download is compulsory to import the information.\nThe disadvantage of embedded style sheets are as follows:\nIn embedded style sheets, controlling the styles for multiple files from one file is not possible.\nAlso, check out our blog on Webkit in CSS",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "5. What is a CSS selector?",
        "answer": "A CSS selector is the portion of a CSS set that chooses the content that requires a specific style. A CSS selector is also referred to as a connection between the stylesheet and HTML files. A CSS selector permits you to choose and operate HTML elements. CSS selectors are used to selecting or find HTML elements created on their id, class, type, etc.\nAlso, check out the blog on CSS selector in Selenium.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "6. What is tweening?",
        "answer": "Also known as in-betweening, tweening is the process of creating intermediary frames between two images to provide the appearance that the first image develops efficiently into the second image. It is a key process that is used in all types of animations. Refined animation software permits you to find particular objects in an image and describe how they will be able to move and change throughout the tweening process.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "7. What is the box model in CSS? Which CSS properties are a part of it?",
        "answer": "A rectangle box is wrapped around every HTML element. The CSS box model is used to determine the height and width of the rectangular box. If it is not mentioned, then default values and content are added inside. The CSS box also includes borders, margins, and padding.\n\nContent: It refers to the actual content of the box where the text or image is placed.\nPadding: It is the area surrounding the content, and it is the space between the border and the content.\nBorder: It is the area that surrounds the padding.\nMargin: It refers to the area that surrounds the border.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "8. How can you include CSS in a web page?",
        "answer": "There are different ways by which you can include a CSS in a web page:\nExternal Style Sheet: An external file is linked to the HTML document using the link tag.\n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\" />\nEmbed CSS with a Style Tag: Another way to include CSS in a web page is by having a set of CSS styles included within the HTML page.\n<style type=\"text/css\">\n/*Add style rules here*/\n</style>\nThe CSS rules have to be added between the opening and closing style tags. The CSS is written exactly like the standalone style-sheet files.\nInline Styles to HTML Elements: Style can be added directly to the HTML element with the help of a style tag.\n<h2 style=\"color:red;background:black\">Inline Style</h2>\nImport a Style-sheet File: Another way to add CSS is by using the @import rule. Here, an external file is imported to another CSS file. This is for adding a new CSS file within the CSS itself.\nimport \"path/to/style.css\";\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "9. What are the different types of selectors in CSS?",
        "answer": "A CSS selector in a CSS rule set helps select the content that needs to be styled. The different types of selectors are listed below:\nUniversal Selector: The universal selector selects all elements on a page. The provided styles will get applied to all the elements on the page.\n* {\n  color: \"green\";\n  font-size: 20px;\n  line-height: 25px;\n}\nElement Type Selector: The element type selector selects one or more HTML elements of the same name. In the example below, the provided styles will be applied to all the ul elements on the page.\nul {\n  line-style: none;\n  border: solid 1px #ccc;\n}\nID Selector: The ID selector is used for selecting any HTML element that has an ID attribute same as the selector. In the below example, the assigned styles will get applied to all the elements having the ID container.\n#container {\n  width: 960px;\n  margin: 0 auto;\n}\n<div id=\"container\"></div>\nClass Selector: The class selector choses all the page elements with class attributes that are set to the same value as the class. The styles get applied to all the elements having the same ID on the page.\n.box {\n  padding: 10px;\n  margin: 10px;\n  width: 240px;\n}\n<div class=\"box\"></div>\nDescendant Combinator: The descendant selector or, more accurately, the descendant combinator lets you combine two or more selectors and be more specific in the selection method.\n#container .box {\nfloat: left;\npadding-bottom: 15px;\n} \n<div id=\"container\">\n<div class=\"box\"></div>\n<div class=\"box-2\"></div>\n</div>\n<div class=”box”></div>\nIn the above example, the declaration block applies to all elements having a class, “box”, that is inside an element with the ID, “container”.  It is worth noting that the .box element does not have to be an immediate child; there can be another element wrapping the .box, and the styles will still apply.\nChild Combinator: The child combinator is similar to the descendant combinator, except it only targets immediate child elements.\n#container> .box {\nfloat: left;\npadding-bottom: 15px;\n}\n<div id=\"container\">\n<div class=\"box\"></div>\n<div>\n<div class=\"box\"></div>\n</div>\n</div>\nThe selector will match all elements that have a class, “box”, and are immediate children of the element, “container”.\nGeneral Sibling Combinator: The general sibling combinator matches elements based on sibling relationships. The selected elements are adjacent to each other in HTML.\nh2 ~ p {\nmargin-bottom: 20px;\n}\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<div class=”box”>\n<p>Paragraph example.</p>\n</div>\nIn the above example, all paragraph elements, (<p>), will be styled with the specified rules, but only if they are siblings of <h2> elements. Even if there are other elements in between <h2> and <p>, the styles will still apply.\nAdjacent Sibling Combinator: The adjacent sibling combinator is almost the same as the general sibling selector but the targeted element must be an immediate sibling, not just a general sibling. The adjacent sibling combinator uses the plus symbol, (+).\np + p {\ntext-indent: 1.Sem;\nmargin-bottom: 0;\n}\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<div class=”box”>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n</div>\nIn the above example, the specified styles will apply only to those paragraph elements that immediately follow other paragraph elements. This means that the first paragraph element on a page will not receive these styles.If there are other elements appearing between two paragraphs, the styles will not apply to the second paragraph.\nAttribute Selector: The attribute selector targets elements based on the presence and/or value of HTML attributes. It is declared using square brackets.\ninput [type=”text”] {\nbackground-color: #444;\nwidth: 200px;\n}\n<input type=\"text\">",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "10. What is a CSS preprocessor? What are SASS, LESS, and Stylus? Why do people use them?",
        "answer": "A CSS preprocessor allows us to generate CSS from the preprocessor’s own unique syntax. It extends the basic functionality of default vanilla CSS through its own scripting language. With a CSS preprocessor, it is possible to use complex logical syntax such as variables, mixins, functions, code nesting, inheritance, etc.\nSASS: Syntactically awesome style sheets (SASS) is a CSS preprocessor. It reduces the repetition of CSS, thus saving time. SASS can be written in two different syntaxes. The original syntax, called the indented syntax, uses indentation to separate code blocks and newline characters to separate rules.\nThe newer syntax, Sassy CSS (SCSS), uses block formatting, like CSS, and braces to denote code blocks and semicolons to separate rules within a block. The indented syntax and SCSS files have the extensions .sass and .scss respectively.\nLESS: Learner style sheets, or LESS, are easy to add to any JavaScript project with the help of npm or less.js file. It uses the extension .less. LESS syntax is similar to SCSS with some exceptions. It uses @ to define the variables.\nStylus: Stylus is quite flexible when it comes to writing syntax. It supports native CSS and allows omission of colons, semicolons, and brackets. @ or $ does not need to be used for defining variables.\nThese CSS processors are used because they help build inventive features to CSS by using variables, mixins, nesting, and extending.\nWatch this Video on Web Developer Interview Questions and Answers:",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "11. What is the difference between reset CSS and normalize CSS?",
        "answer": "Reset CSS attempts to remove all built-in browser styling, while normalize CSS aims for consistency in built-in browser styling across browsers. Normalize CSS also fixes bugs for common browser dependencies.\nCheck out our PHP Interview Questions to ace your next interview!",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "12. What is the difference among inline, inline-block, and block elements?",
        "answer": "Block Element: Block elements always start on a new line and occupy an entire row or width. Examples of block elements are <div> and <p>.\nInline Elements: Inline elements do not start on a new line; they appear on the same line as the content and tags beside them. Some examples of inline elements are <a>, <strong>, <span>, and <img>.\nInline-block Elements: Inline-block elements are similar to inline elements, but they can have padding, margins, and set height and width values.\nCheck out the Web Development Interview Questions for Freshers.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "13. What are pseudo elements and pseudo classes?",
        "answer": "Pseudo elements help to create items that do not normally exist in the document tree. The examples of pseudo elements are:\n::before\n::after\n::selection\n::first-letter\n::first-line\nPseudo classes select regular elements under specific conditions such as when a user is hovering over a link. The examples of pseudo classes are:\n:hover\n:active\n:link\n:visited\n:focus",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "14. What is a responsive web design?",
        "answer": "A responsive web design is about design and development that responds to the user activities and the components involved such as screen size, platform, and orientation. It comprises a mix of flexible grids, layouts, images, and intellectual use of CSS media queries.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "15. What are the differences between adaptive design and responsive design?",
        "answer": "Adaptive Design Responsive Design\nIt focuses on multiple fixed layout sizes in website development. It focuses on showing content based on available browser space.\nIn this kind of website design, first the available space is detected and then the layout, with most appropriate size, is picked and used to display the content. Resized browser window has no effect on the design. In this kind of website design, when the browser window is resized, the content of the website is dynamically and optimally rearranged to accommodate the window.\nIt uses six standard screen widths, 320 px, 480 px, 760 px, 960 px, 1200 px, and 1600 px. Depending on the target device’s properties, it uses CSS media queries to change styles for adapting to different screens.\nIt takes a lot of time and effort because  the options and realities of the end users  need to be examined first and then the best possible adaptive solutions are designed. Building and designing fluid websites that can accommodate content depending on the screen size does not take much work.\nIt gives a lot of control over the design for specific screens. It does not allow much control over the design.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "16. What are the properties of Flexbox?",
        "answer": "The numerous characteristics of CSS Flexbox can be used to create intricate and powerful compositions.\ndisplay is used to describe a flex container. The flex value is utilized to establish a flex container.\nflex-direction is employed to determine the direction of the primary axis, which is the axis that flex items are arranged along. This property can have the values row, row-reverse, column, and column-reverse.\njustify-content aligns flex items parallel to the primary axis. This property can take many different values, including flex-start, flex-end, center, space-between, space-around, and space-evenly.\nalign-items align flex items perpendicular to the primary axis. Flex-start, flex-end, center, baseline, and stretch are all possible values for this attribute.\nflex wrap determines whether or not flex items should wrap when their width exceeds the width of the flex container. This property’s possible values are nowrap, wrap, and wrap-reverse.\nalign-content, When there is extra space in the flex container, use align-content to align flex lines perpendicular to the major axis. This property’s likely values are flex-start, flex-end, center, space-between, space-around, and stretch.\nflex is employed to establish the flex grow, flex shrink, and flex basis of a flex item. The shorthand property flex creates all three values at the same time. The individual properties are flex-grow, flex-shrink, and flex-basis.\n\nCSS Interview Questions for Experienced (2 to 5 Years)",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "17. What is the difference between physical and logical tags?",
        "answer": "Logical tags mainly focus on the content and are older as compared to the physical tags. Logical tags are hardly used in terms of presentation. In terms of aesthetics, logical tags do not serve any purpose. However, physical tags find their application in presentation.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "18. What is the use of CSS image sprites?",
        "answer": "It is a group of images placed into one image. A web page with multiple images can take a lot of time to load and uses multiple server requests to project the same. With the help of image sprites, we can decrease the number of requests to the server and save time and bandwidth as well.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "19. What is the syntax to link an external style sheet?",
        "answer": "An external style sheet comprises style description that can be linked with the HTML document externally. An external style sheet is one of the best and most organized ways to keep the style separate from the structure.\nThe syntax for linking an external style sheet is as follows:\n<HTML>\n<HEAD>\n<LINK REL=STYLESHEET HREF=\"Test.css\" TYPE=\"text/css\">\n</HEAD>\n</HTML>\nIf you wish to learn more about HTML, then you can take up this HTML and jQuery Course.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "20. How can embedded style be linked with HTML documents?",
        "answer": "Embedded style can be implemented within HTML code. It is written using the <Style> tag and used under the <Head> structure.\nIts syntax is as follows:\n<HEAD>\n<STYLE TYPE=”text/css”>\nstyle {text-indent: 15pt;}\nstyle1{text-color: #060000;}\n</STYLE>\n</HEAD>",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "21. Why is the imported function an easy way to insert a file?",
        "answer": "An imported style sheet permits us to import external files or combine one style sheet with another. Many files can be created, and different style sheets have different functions. The import function gives the provision to combine many elements or functionalities into one. The syntax to import any file is @import notation, which is used inside the <Style> tag. There is a one rule that implies that the last imported sheet will override the previous ones.\nThe syntax is shown by coding as:\n<Link Rel=Stylesheet Href=”Main.Css” Type=”Text/Css”>\n<STYLETYPE=”text=css”>\n<!–\n@import url(http://www.xyz.css);\n…. your code\n–>\n</STYLE>\nThe <!– –> tag is used as a comment for browsers that do not support CSS.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "22. What are the advantages of using CSS?",
        "answer": "The main advantages of using CSS are:\nSeparation of Content from Presentation: CSS enables presentation of the same content in multiple formats for mobile, desktop, or laptop.\nBandwidth: When CSS is used effectively, the browser cache can store the style sheets and these can be used on multiple pages without the need to redownload.\nEasy to Maintain: By making small changes, CSS can be used to completely change the look and feel of a web page. For a global change, we simply have to change the style, and all elements in all web pages will be automatically updated.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "23. How are the CSS selectors matched against the elements by the browser?",
        "answer": "The order of matching selectors is from right to left of the selector expression. Based on the key selectors, DOM elements are filtered by browsers and are then traversed up to the parent elements to determine the matches. The speed of deciding the elements is based on the length of the chain of selectors.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "24. How is border-box different from content-box?",
        "answer": "The border-box property contains the content, border, and padding in height and width properties. If you look at the example below, the box-sizing for the div element is set as border-box. The height and width considered for the div content will also include the padding and border:\ndiv{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:border-box;\n    -webkit-box-sizing:border-box;\n    box-sizing:border-box;\n}\nThe actual height of the div content in this case is:\nactual height = height - \n                padding on top and bottom - \n                border on top and bottom\n              = 200 - (15*2) - (5*2) \n              = 160 px\nThe actual width of the div content in this case is:\nactual width  = width - \n                padding on right and left - \n                border on right and left\n              = 300 - (15*2) - (5*2) \n              = 260 px\nLet us take a look at the border-box model for the above example:\n\nContent-box, on the other hand, is the default value box-sizing property. Height and the width properties do not include border and padding and only have content. For example:\ndiv{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:content-box;\n    -webkit-box-sizing:content-box;\n    box-sizing:content-box;\n}\nHere, content-box is the box-sizing for the div element. The height and width for the div content do not include padding and border. The full height and width parameters are specified for the content as shown below:",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "25. Explain RGB stream",
        "answer": "RGB represents the colors in CSS. The RGB streams are namely red, green, and blue. The intensity of the colors can be set from 0 to 255. It enables CSS to have a spectrum of visible colors.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "26. Define z-index",
        "answer": "Z-index helps specify the stack order of elements that overlap each other. While the default value of z-index is zero, it can take both positive and negative values. An element with a greater stack order is always above the element with a lower stack order.\nZ-index can assume the following values:\nauto: It sets the stack order equal to its parents.\nnumber: It sets the stack order of the element. Negative values are allowed.\ninitial: It sets this property to its default value.\ninherit: It inherits this property from its parent element.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "27. When should translate () be used instead of absolute positioning?",
        "answer": "Translate is a CSS transform value. Changing the opacity or transform does not trigger the browser reflow or repaint. Transform requires the browser to create a GPU layer for elements. However, CPU usage changes absolute positioning properties.\ntranslate() involves reduced paint times and is more efficient. Unlike when changing absolute positioning, the element occupies original space when translate () is used.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "28. Name the different ways to position some aspects in CSS",
        "answer": "The positioning method type is determined by the positioning property. The five different position values are:\nfixed\nstatic\nabsolute\nsticky\nrelative\nThe elements are positioned with the help of top, left, right, and bottom properties. These properties need to be set first, and they work depending on position value.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "29. What are mixins?",
        "answer": "A mixin returns a single value and is somewhat similar to a function block of code. It allows us to make groups of CSS declarations that may be reused throughout the site. It helps keep the SASS very DRY. The values can be passed on to make the mixins more flexible. To create a mixin, the @mixin directive is used and given a name.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "30. How can a web page be optimized for prints?",
        "answer": "A website typically contains a header, footer, sidebar, navbar, and main content area. The content sections of the website need to be identified and controlled. By doing so, most of the work is done.\nThe integrity of the website should not be changed. It is recommended to use page breaks, create a style sheet for print, size the page for print, and avoid unnecessary HTML tables.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "31. What is the property that is used to control image scroll?",
        "answer": "The background-attachment property is used to set whether the background image remains fixed or is scrollable with the rest of the page. Here is an example for a fixed background-image:\nbody {\n  background-image: url(‘url_of_image’);\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n}\nTo acquire the skills necessary to become a Web Developer, you must enroll in one of the best Web Development Courses Online!",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "32. What are the Differences between CSS flexbox and CSS grid?",
        "answer": "CSS Flexbox and Gridare are CSS layout systems, although they have different purposes and qualities. Flexbox is useful for simpler, one-dimensional layouts for regulating item alignment within a container, whereas CSS Grid is great for more complicated, multi-dimensional layouts with a lot of item placement options.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "33. In CSS, what are pseudo-classes? Give an illustration.",
        "answer": "Pseudo-classes are keywords that specify a special state of an element. An example is the :hover pseudo-class, which applies styles when the mouse is over an element. \nFor instance,\n \na:hover {\n    color: red;\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "34. What distinguishes visibility: hidden from display: none?",
        "answer": "Display: none eliminates an element from the layout, preventing it from showing up on the page or occupying any space. \nVisibility: hidden makes the element invisible, although it still takes up room in the arrangement.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "35. In CSS, how can an element be centered vertically?",
        "answer": ".container {\n    display: flex;\n    justify-content: center; /* horizontally center */\n    align-items: center; /* vertically center */\n    height: 100vh; /* adjust as needed */\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "36. Why would you use a CSS preprocessor such as Sass or Less?",
        "answer": "Preprocessors for CSS add features like variables, nesting, mixins, and functions to extend the possibilities of CSS. They make stylesheets more scalable and maintainable.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "37. How may CSS be used to create a responsive design?",
        "answer": "Responsive design can be achieved using CSS media queries to apply different styles based on the device’s screen size or orientation.\n \n@media screen and (max-width: 600px) {\n    /* Styles for small screens */\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "38. What distinguishes inline display attributes from inline-block display properties?",
        "answer": "Inline elements don’t begin on a new line; instead, they flow with the surrounding content. Two instances are <span> and <a>.\nSimilar to inline elements, inline-block elements can also have height/width, padding, and margin values. They can be positioned using the top, bottom, left, and right attributes and do not begin on a new line.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "39. Why is the CSS z-index attribute used?",
        "answer": "The stacked order of positioned items is managed by the z-index attribute. It describes an element’s stack order in relation to other elements on the page. Elements with lower z-index values are stacked underneath those with higher z-index values.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "40. How do you create a CSS animation?",
        "answer": "@keyframes slidein {\n    from {\n        transform: translateX(-100%);\n    }\n    to {\n        transform: translateX(0);\n    }\n}\n\n.element {\n    animation: slidein 1s ease-in-out;\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "41. What are sprites in CSS? How can website performance be enhanced?",
        "answer": "CSS sprites use CSS to display particular portions of a picture by combining many images into a single image. By lowering the quantity of HTTP requests needed to load many images, they enhance website performance by speeding up page loads.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "42. What is the overflow attribute in CSS used for?",
        "answer": "The handling of material that extends beyond the boundaries of its contained element is determined by the overflow attribute. It has four settings: scroll, auto, hidden, and visible.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "43. Describe the advantages of the CSS grid layout paradigm.",
        "answer": "A two-dimensional layout method for grouping elements in rows and columns is the CSS grid layout. When compared to more conventional techniques like flexbox or floats, it offers a more potent and adaptable way to design grid-based layouts. The precise arrangement and alignment of items within a grid are made possible by grid layout.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "44. How can a responsive navigation menu be made with CSS?",
        "answer": "One method for making the navigation menu’s layout flexible is to utilize CSS flexbox or CSS grid. The menu’s style and layout can then be modified using media queries in accordance with the screen size. For improved usability, other methods, such as employing the checkbox hack to hide the menu behind a toggle button on smaller screens, might be utilized.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "45. How do you create a sticky header using CSS?",
        "answer": "@keyframes slidein {\n    from {\n        transform: translateX(-100%);\n    }\n    to {\n        transform: translateX(0);\n    }\n}\n\n.element {\n    animation: slidein 1s ease-in-out;\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "46. Describe the effects of the CSS box model on layout.",
        "answer": "The organization of the items on a web page is described by the CSS box model. Content, padding, border, and margin make up its components. Text and images are displayed in the content area, which is surrounded by a border; the space outside the border is known as the margin. Padding is the area that appears between the content and the border. It determines how an element fits into the layout and how it works with other elements.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "47. Describe the advantages of the CSS flexbox layout approach over conventional layout techniques.",
        "answer": "A style concept known as CSS Flexible Box style, or flexbox, enables the development of responsive and adaptable layouts with a single-dimensional axis (horizontal or vertical).\nCompared to more conventional layout techniques like floats or positioning, it offers a more effective and natural approach to dividing up space and orienting objects inside a container.\nPowerful capabilities offered by Flexbox include the ability to quickly rearrange objects, manage space alignment and distribution, and automatically modify the layout according to the amount of available space and the size of the content.\nIts benefits include better responsiveness, simpler and cleaner markup, and enhanced support for intricate layouts without the need for workarounds or hacks.\n\nAdvanced CSS Interview Questions (6 to 12 Years)",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "48. How may a responsive design be created without the use of media queries?",
        "answer": "Applying relative measurements for widths, heights, and margins, such as percentages and viewport units (vw, vh)\nUsing CSS grids and flexboxs for flexible layouts\nUsing proportionate, em, or rem-based font sizes with flowing typography.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "49. How can CSS performance be optimized for faster page loading?",
        "answer": "CSS files can be made smaller by minifying them.\nReducing the number of HTTP requests by combining several CSS files into one file\nAvoiding picks with excessive precision and nesting\nMinimizing the usage of pricey CSS attributes like border-radius and box-shadow\nReducing the number of server requests by integrating smaller images into a single image using CSS sprites",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "50. Describe the differences between the CSS selectors :nth-child() and :nth-of-type().",
        "answer": ":nth-child(): Regardless of type, this function chooses elements based on where they are in a group of siblings.\n:nth-of-type(): Chooses components of a particular type according to where they fall in a sibling group.",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "51. How can a modal dialogue that uses only CSS be implemented?",
        "answer": "To build a modal dialogue without JavaScript, use a combination of CSS sibling selectors and HTML input elements, such as a checkbox. Make use of CSS to display the modal once the input element is checked.\nAlso, check out our blog on React Js",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "52. Provide examples of when and how to utilize CSS vendor prefixes, along with an explanation of their function.",
        "answer": "CSS vendor prefixes are used to add experimental or browser-specific CSS features that may not be fully supported across all browsers.\n.box {\n  -webkit-border-radius: 10px; /* Safari, Chrome */\n  -moz-border-radius: 10px; /* Firefox */\n  border-radius: 10px; /* Standard */\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "53. Describe the function of CSS custom properties, often known as variables, and give instances of how to use them.",
        "answer": "CSS custom properties, or variables, allow for the definition of reusable values in CSS.\n:root {\n  --primary-color: #3498db;\n}\n.button {\n  background-color: var(--primary-color);\n}",
        "reference": "intellipaat.com",
        "role": "css"
    },
    {
        "question": "1. What are the advantages of using CSS?",
        "answer": "The main advantages of CSS are given below: Separation of content from presentation - CSS provides a way to present the same content in multiple presentation formats in mobile or desktop or laptop.\nEasy to maintain - CSS, built effectively can be used to change the look and feel complete by making small changes. To make a global change, simply change the style, and all elements in all the web pages will be updated automatically.\nBandwidth - Used effectively, the style sheets will be stored in the browser cache and they can be used on multiple pages, without having to download again. Separation of content from presentation - CSS provides a way to present the same content in multiple presentation formats in mobile or desktop or laptop. Separation of content from presentation - Easy to maintain - CSS, built effectively can be used to change the look and feel complete by making small changes. To make a global change, simply change the style, and all elements in all the web pages will be updated automatically. Easy to maintain - Bandwidth - Used effectively, the style sheets will be stored in the browser cache and they can be used on multiple pages, without having to download again. Bandwidth -",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "2. How do you specify units in the CSS?. What are the different ways to do it?",
        "answer": "There are different ways to specify units in CSS like px, em, pt, percentage (%). px(Pixel) gives fine-grained control and maintains alignment because 1 px or multiple of 1 px is guaranteed to look sharp. px is not cascade. em maintains relative size. you can have responsive fonts. Em, will cascade 1em is equal to the current font-size of the element or the browser default. If u sent font-size to 16px then 1em = 16px. The common practice is to set default body font-size to 62.5% (equal to 10px). pt(point) are traditionally used in print. 1pt = 1/72 inch and it is a fixed-size unit. %(percentage) sets font-size relative to the font size of the body. Hence, you have to set the font-size of the body to a reasonable size.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "3. What is the Box model in CSS? Which CSS properties are a part of it?",
        "answer": "A rectangle box is wrapped around every HTML element. The box model is used to determine the height and width of the rectangular box. The CSS Box consists of Width and height (or in the absence of that, default values and the content inside), padding, borders, margin.    Content:  Actual Content of the box where the text or image is placed.\nPadding: Area surrounding the content (Space between the border and content).\nBorder: Area surrounding the padding.\nMargin: Area surrounding the border. Content:  Actual Content of the box where the text or image is placed. Content: Padding: Area surrounding the content (Space between the border and content). Padding: Border: Area surrounding the padding. Border: Margin: Area surrounding the border. Margin:",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "4. What are the limitations of CSS?",
        "answer": "Disadvantages of CSS are given below: Browser Compatibility: Some style selectors are supported and some are not. We have to determine which style is supported or not using the @support selector).\nCross Browser issue: Some selectors behave differently in a different browser).\nThere is no parent selector: Currently, Using CSS, you can’t select a parent tag. Browser Compatibility: Some style selectors are supported and some are not. We have to determine which style is supported or not using the @support selector). Browser Compatibility: Cross Browser issue: Some selectors behave differently in a different browser). Cross Browser issue: There is no parent selector: Currently, Using CSS, you can’t select a parent tag. There is no parent selector:",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "5. How to include CSS in the webpage?",
        "answer": "There are different ways to include a CSS in a webpage, 1 - External Style Sheet: An external file linked to your HTML document: Using link tag, we can link the style sheet to the HTML page. <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\" /> <link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\" /> .css 2 - Embed CSS with a style tag: A set of CSS styles included within your HTML page. <style type=\"text/css\">\n\n/*Add style rules here*/\n\n</style> <style type=\"text/css\">\n\n/*Add style rules here*/\n\n</style> /*Add style rules here*/ Add your CSS rules between the opening and closing style tags and write your CSS exactly the same way as you do in stand-alone stylesheet files. 3 - Add inline styles to HTML elements(CSS rules applied directly within an HTML tag.): Style can be added directly to the HTML element using a style tag. <h2 style=\"color:red;background:black\">Inline Style</h2> <h2 style=\"color:red;background:black\">Inline Style</h2> <h2 style=\"color:red;background:black\"> h2 style \"color:red;background:black\" </h2> h2 4 - Import a stylesheet file (An external file imported into another CSS file): Another way to add CSS is by using the @import rule. This is to add a new CSS file within CSS itself. @import \"path/to/style.css\"; @import \"path/to/style.css\"; @import \"path/to/style.css\"",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "6. What are the different types of Selectors in CSS?",
        "answer": "A CSS selector is the part of a CSS ruleset that actually selects the content you want to style. Different types of selectors are listed below. Universal Selector: The universal selector works like a wildcard character, selecting all elements on a page. In the given example, the provided styles will get applied to all the elements on the page. Universal Selector: * {\n  color: \"green\";\n  font-size: 20px;\n  line-height: 25px;\n} * {\n  color: \"green\";\n  font-size: 20px;\n  line-height: 25px;\n} color \"green\" font-size 20px line-height 25px Element Type Selector: This selector matches one or more HTML elements of the same name. In the given example, the provided styles will get applied to all the ul elements on the page. Element Type Selector: ul {\n  line-style: none;\n  border: solid 1px #ccc;\n} ul {\n  line-style: none;\n  border: solid 1px #ccc;\n} ul border 1px #ccc ID Selector: This selector matches any HTML element that has an ID attribute with the same value as that of the selector. In the given example, the provided styles will get applied to all the elements having ID as a container on the page. ID Selector: #container {\n  width: 960px;\n  margin: 0 auto;\n}\n\n<div id=\"container\"></div> #container {\n  width: 960px;\n  margin: 0 auto;\n}\n\n<div id=\"container\"></div> #container width 960px margin 0 div div Class Selector: The class selector also matches all elements on the page that have their class attribute set to the same value as the class.  In the given example, the provided styles will get applied to all the elements having ID as the box on the page. Class Selector: .box {\n  padding: 10px;\n  margin: 10px;\n  width: 240px;\n}\n\n<div class=\"box\"></div> .box {\n  padding: 10px;\n  margin: 10px;\n  width: 240px;\n}\n\n<div class=\"box\"></div> .box padding 10px margin 10px width 240px div div Descendant Combinator: The descendant selector or, more accurately, the descendant combinator lets you combine two or more selectors so you can be more specific in your selection method. Descendant Combinator: #container .box {\n float: left;\n padding-bottom: 15px;\n} \n\n<div id=\"container\">\n <div class=\"box\"></div>\n \n <div class=\"box-2\"></div>\n</div>\n\n<div class=”box”></div> #container .box {\n float: left;\n padding-bottom: 15px;\n} \n\n<div id=\"container\">\n <div class=\"box\"></div>\n \n <div class=\"box-2\"></div>\n</div>\n\n<div class=”box”></div> #container .box float padding-bottom 15px div div div div 2 div div div div This declaration block will apply to all elements that have a class of box that is inside an element with an ID of the container. It’s worth noting that the .box element doesn’t have to be an immediate child: there could be another element wrapping .box, and the styles would still apply. .box .box Child Combinator: A selector that uses the child combinator is similar to a selector that uses a descendant combinator, except it only targets immediate child elements. Child Combinator: #container> .box {\n float: left;\n padding-bottom: 15px;\n}\n\n<div id=\"container\">\n <div class=\"box\"></div>\n \n <div>\n  <div class=\"box\"></div>\n </div>\n</div> #container> .box {\n float: left;\n padding-bottom: 15px;\n}\n\n<div id=\"container\">\n <div class=\"box\"></div>\n \n <div>\n  <div class=\"box\"></div>\n </div>\n</div> #container .box float padding-bottom 15px div div div div div div div div The selector will match all elements that have a class of box and that are immediate children of the #container element. That means, unlike the descendant combinator, there can’t be another element wrapping .box it has to be a direct child element. box #container .box General Sibling Combinator: A selector that uses a general sibling combinator to match elements based on sibling relationships. The selected elements are beside each other in the HTML. General Sibling Combinator: h2 ~ p {\n margin-bottom: 20px;\n}\n\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<div class=”box”>\n <p>Paragraph example.</p>\n</div> h2 ~ p {\n margin-bottom: 20px;\n}\n\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<div class=”box”>\n <p>Paragraph example.</p>\n</div> h2 p margin-bottom 20px h2 h2 p p p p p p div p p div In this example, all paragraph elements (<p>) will be styled with the specified rules, but only if they are siblings of <h2> elements. There could be other elements in between the <h2> and <p>, and the styles would still apply. <h2> <h2> <p> Adjacent Sibling Combinator: A selector that uses the adjacent sibling combinator uses the plus symbol (+), and is almost the same as the general sibling selector. The difference is that the targeted element must be an immediate sibling, not just a general sibling. Adjacent Sibling Combinator: p + p {\n text-indent: 1.Sem;\n margin-bottom: 0;\n}\n\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n\n<div class=”box”>\n <p>Paragraph example.</p>\n <p>Paragraph example.</p>\n</div> p + p {\n text-indent: 1.Sem;\n margin-bottom: 0;\n}\n\n<h2>Title</h2>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n<p>Paragraph example.</p>\n\n<div class=”box”>\n <p>Paragraph example.</p>\n <p>Paragraph example.</p>\n</div> p p text-indent 1 margin-bottom 0 h2 h2 p p p p p p div p p p p div The above example will apply the specified styles only to paragraph elements that immediately follow other paragraph elements. This means the first paragraph element on a page would not receive these styles. Also, if another element appeared between two paragraphs, the second paragraph of the two wouldn’t have the styles applied. Attribute Selector: The attribute selector targets elements based on the presence and/or value of HTML attributes, and is declared using square brackets. Attribute Selector: input [type=”text”] {\n background-color: #444;\n width: 200px;\n}\n\n<input type=\"text\"> input [type=”text”] {\n background-color: #444;\n width: 200px;\n}\n\n<input type=\"text\"> input [type=”text”] background-color #444 width 200px input",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "7. What is a CSS Preprocessor? What are Sass, Less, and Stylus? Why do people use them?",
        "answer": "A CSS Preprocessor is a tool used to extend the basic functionality of default vanilla CSS through its own scripting language. It helps us to use complex logical syntax like – variables, functions, mixins, code nesting, and inheritance to name a few, supercharging your vanilla CSS. SASS: Sass is the acronym for “Syntactically Awesome Style Sheets”. SASS can be written in two different syntaxes using SASS or SCSS SASS vs SCSS SASS vs SCSS SASS is based on indentation and SCSS(Sassy CSS) is not.\nSASS uses .sass extension while SCSS uses .scss extension.\nSASS doesn’t use curly brackets or semicolons. SCSS uses it, just like the CSS. SASS is based on indentation and SCSS(Sassy CSS) is not. SASS uses .sass extension while SCSS uses .scss extension. SASS doesn’t use curly brackets or semicolons. SCSS uses it, just like the CSS. SASS Syntax SASS Syntax $font-color: #fff \n$bg-color: #00f\n\n#box\n color: $font-color\n background: $bg-color $font-color: #fff \n$bg-color: #00f\n\n#box\n color: $font-color\n background: $bg-color font color #fff #00f SCSS Syntax SCSS Syntax $font-color: #fff;\n$bg-color: #00f;\n\n#box{\n color: $font-color;\n background: $bg-color;\n} $font-color: #fff;\n$bg-color: #00f;\n\n#box{\n color: $font-color;\n background: $bg-color;\n} font color #fff color #00f #box color background LESS: LESS is an acronym for “Leaner Stylesheets”. LESS is easy to add to any javascript projects by using NPM or less.js file. It uses the extension .less. LESS: LESS syntax is the same as the SCSS with some exceptions. LESS uses @ to define the variables. @font-color: #fff;\n@bg-color: #00f\n\n#box{\n color: @font-color;\n background: @bg-color;\n} @font-color: #fff;\n@bg-color: #00f\n\n#box{\n color: @font-color;\n background: @bg-color;\n} @font-color @bg-color 00 color background Stylus: Stylus offers a great deal of flexibility in writing syntax, supports native CSS as well as allows omission of brackets, colons, and semicolons. It doesn’t use @ or $ for defining variables. Stylus: /* STYLUS SYNTAX WRITTEN LIKE NATIVE CSS */\nfont-color= #fff;\nbg-color = #00f;\n\n#box {\n color: font-color;\n background: bg-color;\n}\n\n/* OR */\n\n/* STYLUS SYNTAX WITHOUT CURLY BRACES */\nfont-color= #fff;\nbg-color = #00f;\n\n#box\n color: font-color;\n background: bg-color; /* STYLUS SYNTAX WRITTEN LIKE NATIVE CSS */\nfont-color= #fff;\nbg-color = #00f;\n\n#box {\n color: font-color;\n background: bg-color;\n}\n\n/* OR */\n\n/* STYLUS SYNTAX WITHOUT CURLY BRACES */\nfont-color= #fff;\nbg-color = #00f;\n\n#box\n color: font-color;\n background: bg-color; /* STYLUS SYNTAX WRITTEN LIKE NATIVE CSS */ font color #fff color #00f #box color background /* OR */ /* STYLUS SYNTAX WITHOUT CURLY BRACES */ font color #fff color #00f #box color background",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "8. What is VH/VW (viewport height/ viewport width) in CSS?",
        "answer": "It’s a CSS unit used to measure the height and width in percentage with respect to the viewport. It is used mainly in responsive design techniques. The measure VH is equal to 1/100 of the height of the viewport. If the height of the browser is 1000px, 1vh is equal to 10px. Similarly, if the width is 1000px, then 1 vw is equal to 10px.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "9. Difference between reset vs normalize CSS?. How do they differ?",
        "answer": "Reset CSS: CSS resets aim to remove all built-in browser styling. For example margins, paddings, font-sizes of all elements are reset to be the same. Normalize CSS: Normalize CSS aims to make built-in browser styling consistent across browsers. It also corrects bugs for common browser dependencies.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "10. What is the difference between inline, inline-block, and block?",
        "answer": "Block Element: The block elements always start on a new line. They will also take space for an entire row or width. List of block elements are <div>, <p>. Block Element: Inline Elements: Inline elements don't start on a new line, they appear on the same line as the content and tags beside them. Some examples of inline elements are <a>, <span> , <strong>, and <img> tags. Inline Elements: Inline Block Elements: Inline-block elements are similar to inline elements, except they can have padding and margins and set height and width values. Inline Block Elements:",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "11. Is it important to test the webpage in different browsers?",
        "answer": "It’s most important to test a website in different browsers when you’re first designing it, or when making major changes. However, it’s also important to repeat these tests periodically, since browsers go through a lot of updates and changes.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "12. What are Pseudo elements and Pseudo classes?",
        "answer": "Pseudo-elements allows us to create items that do not normally exist in the document tree, for example ::after. Pseudo-elements ::before\n::after\n::first-letter\n::first-line\n::selection ::before ::after ::first-letter ::first-line ::selection In the below example, the color will appear only on the first line of the paragraph. p: :first-line {\n color: #ffOOOO;\n font-variant: small-caps;\n} p: :first-line {\n color: #ffOOOO;\n font-variant: small-caps;\n} p font-variant Pseudo-classes select regular elements but under certain conditions like when the user is hovering over the link. Pseudo-classes :link\n:visited\n:hover\n:active\n:focus :link :visited :hover :active :focus Example of the pseudo-class, In the below example, the color applies to the anchor tag when it’s hovered. /* mouse over link */\na:hover {\n color: #FFOOFF;\n} /* mouse over link */\na:hover {\n color: #FFOOFF;\n} /* mouse over link */ a :hover color",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "13. Does margin-top or margin-bottom have an effect on inline elements?",
        "answer": "No, it doesn’t affect the inline elements. Inline elements flow with the contents of the page.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "14. What is cascading in CSS?",
        "answer": "“Cascading” refers to the process of going through the style declarations and defining weight or importance to the styling rules that help the browser to select what rules have to be applied in times of conflict. The conflict here refers to multiple rules that are applicable to a particular HTML element. In such cases, we need to let the browser know what style needs to be applied to the element. This is done by cascading down the list of style declarations elements. For example, if we have the below style: p{\n    color:white;\n} p{\n    color:white;\n} and we also have the following declaration below it or in another stylesheet that has been linked to the page: p{\n    color: black;\n} p{\n    color: black;\n} We have a conflict in color property here for the paragraph elements. Here, the browser just cascades down to identify what is the most recent and most specific style and applies that. Since we have the color:black; as the most specific declaration, the color black is applied to the paragraph elements. Now if you want to ensure color white is applied to the paragraph, we can define weight to that style by adding !important as shown below: color:black; !important p{\n    color:white !important;\n} p{\n    color:white !important;\n} !important ensures that the property has the maximum weight in presence of other conflicting properties. !important",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "15. What property is used for changing the font face?",
        "answer": "We can use the font-family property for achieving this. The font-family property is used for specifying what font needs to be applied on the targetted DOM element. It can hold several font names as part of “fallback” mechanism in case the browser does not support the fonts. For example, we can use: font-family p {\n  font-family: \"Times New Roman\", Times, serif;\n} p {\n  font-family: \"Times New Roman\", Times, serif;\n} \"Times New Roman\" In the above piece of code, we are applying font-family property to the paragraph element. It tells the browser to look for “Times New Roman” font and apply it.\nIf the “Times New Roman” font is not installed or supported, then it asks the browser to use Times font.\nIf both “Times New Roman” and Times are not supported, then it asks the browser to use any supported generic font belonging to serif. It tells the browser to look for “Times New Roman” font and apply it. If the “Times New Roman” font is not installed or supported, then it asks the browser to use Times font. If both “Times New Roman” and Times are not supported, then it asks the browser to use any supported generic font belonging to serif. If you do not want the font-face of the paragraph element to be Times New Roman/Times/serif font, and you want to use the Arial/Helvetica/sans-serif font, then we can just update the CSS property of paragraph element as: p {\n  font-family: Arial, Helvetica, sans-serif;\n} p {\n  font-family: Arial, Helvetica, sans-serif;\n}",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "16. What are the differences between adaptive design and responsive design?",
        "answer": "Adaptive Design Responsive Design\nAdaptive design focuses on developing websites based on multiple fixed layout sizes. Responsive design focuses on showing content on the basis of available browser space.\nWhen a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design. When a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of the website is dynamically and optimally rearranged to accomodate the window.\nUsually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. These sizes are detected and appropriate layouts are loaded. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens.\nIt takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them. Generally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size.\nGives a lot of control over the design to develop sites for specific screens. No much control over the design is offered here. Adaptive Design Responsive Design\nAdaptive design focuses on developing websites based on multiple fixed layout sizes. Responsive design focuses on showing content on the basis of available browser space.\nWhen a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design. When a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of the website is dynamically and optimally rearranged to accomodate the window.\nUsually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. These sizes are detected and appropriate layouts are loaded. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens.\nIt takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them. Generally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size.\nGives a lot of control over the design to develop sites for specific screens. No much control over the design is offered here. Adaptive Design Responsive Design Adaptive Design Responsive Design Adaptive Design Responsive Design Adaptive design focuses on developing websites based on multiple fixed layout sizes. Responsive design focuses on showing content on the basis of available browser space.\nWhen a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design. When a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of the website is dynamically and optimally rearranged to accomodate the window.\nUsually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. These sizes are detected and appropriate layouts are loaded. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens.\nIt takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them. Generally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size.\nGives a lot of control over the design to develop sites for specific screens. No much control over the design is offered here. Adaptive design focuses on developing websites based on multiple fixed layout sizes. Responsive design focuses on showing content on the basis of available browser space. Adaptive design focuses on developing websites based on multiple fixed layout sizes. Responsive design focuses on showing content on the basis of available browser space. When a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design. When a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of the website is dynamically and optimally rearranged to accomodate the window. When a website developed using adaptive design is opened on the desktop browser, first the available space is detected and then the layout with most appropriate sizes are picked and used for the display of contents. Resizing of browser window has no affect on the design. When a website developed using responsive design is opened on a desktop browser and when we try to resize the browser window, the content of the website is dynamically and optimally rearranged to accomodate the window. Usually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. These sizes are detected and appropriate layouts are loaded. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens. Usually, adaptive designs use six standard screen widths - 320 px, 480 px, 760 px, 960 px, 1200 px, 1600 px. These sizes are detected and appropriate layouts are loaded. This design makes use of CSS media queries for changing styles depending on the target devices properties for adapting to different screens. It takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them. Generally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size. It takes a lot of time and effort to first examine the options and realities of the end users and then design best possible adaptive solutions them. Generally, Responsive design takes much less work to build and design fluid websites that can accomodate content from screen depending on the screen size. Gives a lot of control over the design to develop sites for specific screens. No much control over the design is offered here. Gives a lot of control over the design to develop sites for specific screens. No much control over the design is offered here.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "17. How are the CSS selectors matched against the elements by the browser?",
        "answer": "The order of matching selectors goes from right to left of the selector expression. The elements in the DOM are filtered by browsers based on the key selectors and are then traversed up to the parent elements for determining the matches. The speed of determining the elements depends on the length of the chain of selectors. Consider an example: right to left p span{ \n    color: black;\n} p span{ \n    color: black;\n}   Here, the browser first finds all span elements in the DOM and then it traverses to each of its parent elements to check if they are the paragraph p elements. span p Once the browser finds all matching span tags having paragraph elements as parent and applies the color of black to the content, the matching process is stopped. all",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "18. How is border-box different from content-box?",
        "answer": "content-box is the default value box-sizing property. The height and the width properties consist only of the content by excluding the border and padding. Consider an example as shown: content-box div{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:content-box;\n    -webkit-box-sizing:content-box;\n    box-sizing:content-box;\n} div{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:content-box;\n    -webkit-box-sizing:content-box;\n    box-sizing:content-box;\n} div width 300px height 200px padding 15px border 5px margin 30px box-sizing box-sizing box-sizing Here, the box-sizing for the div element is given as content-box. That means, the height and width considered for the div content exclude the padding and border. We will get full height and width parameters specified for the content as shown in the below image.   The border-box property includes the content, padding and border in the height and width properties. Consider an example as shown: border-box div{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:border-box;\n    -webkit-box-sizing:border-box;\n    box-sizing:border-box;\n} div{\n    width:300px;\n    height:200px;\n    padding:15px;\n    border: 5px solid grey;\n    margin:30px;\n    -moz-box-sizing:border-box;\n    -webkit-box-sizing:border-box;\n    box-sizing:border-box;\n} 300 200 15 5 30 Here, the box-sizing for the div element is given as border-box. That means the height and width considered for the div content will also include the padding and border. This means that the actual height of the div content will be: actual height = height - \n                padding on top and bottom - \n                border on top and bottom\n              = 200 - (15*2) - (5*2) \n              = 160 px actual height = height - \n                padding on top and bottom - \n                border on top and bottom\n              = 200 - (15*2) - (5*2) \n              = 160 px and the actual width of the div content would be: actual width  = width - \n                padding on right and left - \n                border on right and left\n              = 300 - (15*2) - (5*2) \n              = 260 px actual width  = width - \n                padding on right and left - \n                border on right and left\n              = 300 - (15*2) - (5*2) \n              = 260 px and and 300 15 2 5 2 260 This is represented in the image below:  ",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "19. How is opacity specified in CSS3?",
        "answer": "Opacity refers to the degree to which the content is transparent or opaque. We can use the property named opacity which takes the values ranging from 0 to 1. 0 specifies that the element is completely transparent where 1 means that the element is completely opaque. We can use the opacity property as follows: opacity div { \n    opacity: 0.6;\n} div { \n    opacity: 0.6;\n} 0.6 In the above example, an opacity of 60% is applied to the div section. The opacity property is not supported by the internet explorer browser. To make it work there, we need to use filter property as polyfill as shown in the example below. div { \n    opacity: 0.6;\n    filter: alpha(opacity=60);\n} div { \n    opacity: 0.6;\n    filter: alpha(opacity=60);\n} 0.6 60  ",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "20. Why should we use float property in CSS?",
        "answer": "The float property is used for positioning the HTML elements horizontally either towards the left or right of the container. For instance, float-demo {\n     float: right; \n} float-demo {\n     float: right; \n} float float Here, the element to which the class is applied ensures that the element is positioned on the right of the container. If you specify the value of float as left, then the element will be placed on the left side of the container.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "21. What is a z-index, how does it function?",
        "answer": "z-index is used for specifying the vertical stacking of the overlapping elements that occur at the time of its positioning. It specifies the vertical stack order of the elements positioned that helps to define how the display of elements should happen in cases of overlapping. The default value of this property is 0 and can be either positive or negative. Apart from 0, the values of the z-index can be: Auto: The stack order will be set equal to the parent.\nNumber: The number can be positive or negative. It defines the stack order.\nInitial: The default value of 0 is set to the property.\nInherit: The properties are inherited from the parent. Auto: The stack order will be set equal to the parent. Number: The number can be positive or negative. It defines the stack order. Initial: The default value of 0 is set to the property. Inherit: The properties are inherited from the parent. The elements having a lesser value of z-index is stacked lower than the ones with a higher z-index.   From the above figure, we can see that as the value of the z-index increases along the z-axis, the order of stacking would be towards the top of other elements along the vertical axis.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "22. What do the following CSS selectors mean?",
        "answer": "div, p\ndiv p\ndiv ~ p\ndiv + p\ndiv > p div, p div, p div p div p div ~ p div ~ p div + p div + p div > p div > p The meaning of the given list of selectors goes as follows: div, p: This selector implies selecting all div elements and all p elements. div, p: This selector implies selecting all div elements and all p elements. div, p Consider an example below: <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p> <!-- Will be selected -->\n   </div>\n   <p> paragraph 2</p> \n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span> <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p> <!-- Will be selected -->\n   </div>\n   <p> paragraph 2</p> \n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span> 1 1 1 2 3 2 1 Here, all the div elements and the p elements would be selected by the browser irrespective of their parents or where they are placed. The remaining tags like h1 and span are ignored. all div p : This selector tells to select all p elements that are inside div elements. Consider an example below: div p : This selector tells to select all p elements that are inside div elements. Consider an example below: div p <h1>Heading 1</h1>\n<div>\n    Division 1\n    <p> paragraph 1</p> <!-- Will be selected -->\n    <div>\n        <p> Inner Div Paragraph </p> <!-- Will be selected -->\n    </div>\n</div>\n<p> paragraph 2</p>\n<p> paragraph 3</p>\n<div>\n    Division 2\n</div>\n<span> Span 1 </span> <h1>Heading 1</h1>\n<div>\n    Division 1\n    <p> paragraph 1</p> <!-- Will be selected -->\n    <div>\n        <p> Inner Div Paragraph </p> <!-- Will be selected -->\n    </div>\n</div>\n<p> paragraph 2</p>\n<p> paragraph 3</p>\n<div>\n    Division 2\n</div>\n<span> Span 1 </span> 1 1 1 2 3 2 1 Here, <p> paragraph 1</p> and <p> Inner Div Paragraph </p> would be selected by the browser and the properties are applied. The rest of the paragraph tags are not selected. <p> paragraph 1</p> <p> Inner Div Paragraph </p> div ~ p : This selector tells to select all p elements that have div elements preceeded anywhere. Consider an example, div ~ p : This selector tells to select all p elements that have div elements preceeded anywhere. Consider an example, div ~ p <h1>Heading 1</h1>\n<div>\n   Division 1\n   <p> paragraph 1</p>\n</div>\n<p> paragraph 2</p> <!-- Will be selected -->\n<p> paragraph 3</p> <!-- Will be selected -->\n<div>\n   Division 2\n</div>\n<span> Span 1 </span> <h1>Heading 1</h1>\n<div>\n   Division 1\n   <p> paragraph 1</p>\n</div>\n<p> paragraph 2</p> <!-- Will be selected -->\n<p> paragraph 3</p> <!-- Will be selected -->\n<div>\n   Division 2\n</div>\n<span> Span 1 </span> 1 1 1 2 3 2 1 Here, paragraph 2 and paragraph 3 elements would be selected as marked in the code above. div + p : This selector says to select all p elements placed immediately after the div element. Consider an example in this case: div + p : This selector says to select all p elements placed immediately after the div element. Consider an example in this case: div + p <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p>\n   </div>\n   <p> paragraph 2</p> <!-- Will be selected -->\n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span> <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p>\n   </div>\n   <p> paragraph 2</p> <!-- Will be selected -->\n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span> 1 1 1 2 3 2 1 In this case, we have paragraph 2 element immediately after the div tag. Hence, only that element will be selected. div > p : This selector says to select all p elements which has div as an immediate parent. In the same example below: div > p : This selector says to select all p elements which has div as an immediate parent. In the same example below: div > p <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p> <!-- Will be selected -->\n   </div>\n   <p> paragraph 2</p> \n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span> <h1>Heading 1</h1>\n   <div>\n       Division 1\n       <p> paragraph 1</p> <!-- Will be selected -->\n   </div>\n   <p> paragraph 2</p> \n   <p> paragraph 3</p> \n   <div>\n       Division 2\n   </div>\n   <span> Span 1 </span> 1 1 1 2 3 2 1 Only <p> paragraph 1</p> will be selected in this case because it has immediate div as the parent. <p> paragraph 1</p>",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "23. What are the properties of flexbox?",
        "answer": "Flexbox stands for flexible box and it was introduced around 2017 in CSS with the purpose of providing an efficient way to handle layouts, align elements within them and distribute spaces amongst the items in dynamic/responsive conditions. It provides an enhanced ability to alter the dimensions of the items and make use of the available space in the container efficiently. In order to achieve this, CSS3 provides some properties. The properties of flexbox are as follows: flex-direction: This property helps in defining the direction the container should stack the items targetted for flex. The values of this property can be\nrow: Stacks items horizontally from left to right in the flex container.\ncolumn: Stacks items vertically from top to bottom in the flex container.\nrow-reverse: Stacks items horizontally from right to left in the flex container.\ncolumn-reverse: Stacks items vertically from bottom to top in the flex container.\nflex-wrap: This property specifies of the flex items should be wrapped or not. Possible values are:\nwrap: The flex items would be wrapped if needed.\nnowrap: This is the default value that says the items won’t be wrapped.\nwrap-reverse: This specifies that the items will be wrapped if needed but in reverse order.\nflex-flow: This property is used for setting both flex-direction and flex-wrap properties in one statement.\njustify-content: Used for aligning the flex items. Possible values are:\ncenter: It means that all the flex items are present at the center of the container.\nflex-start: This value states that the items are aligned at the start of the container. This is the default value.\nflex-end: This value ensures the items are aligned at the end of the container.\nspace-around: This value displays the items having space between, before, around the items.\nspace-between: This value displays items with spaces between the lines.\nalign-items: This is used for aligning flex items.\nalign-content: This is used for aligning the flex lines. flex-direction: This property helps in defining the direction the container should stack the items targetted for flex. The values of this property can be\nrow: Stacks items horizontally from left to right in the flex container.\ncolumn: Stacks items vertically from top to bottom in the flex container.\nrow-reverse: Stacks items horizontally from right to left in the flex container.\ncolumn-reverse: Stacks items vertically from bottom to top in the flex container. flex-direction row: Stacks items horizontally from left to right in the flex container.\ncolumn: Stacks items vertically from top to bottom in the flex container.\nrow-reverse: Stacks items horizontally from right to left in the flex container.\ncolumn-reverse: Stacks items vertically from bottom to top in the flex container. row: Stacks items horizontally from left to right in the flex container. column: Stacks items vertically from top to bottom in the flex container. row-reverse: Stacks items horizontally from right to left in the flex container. column-reverse: Stacks items vertically from bottom to top in the flex container. flex-wrap: This property specifies of the flex items should be wrapped or not. Possible values are:\nwrap: The flex items would be wrapped if needed.\nnowrap: This is the default value that says the items won’t be wrapped.\nwrap-reverse: This specifies that the items will be wrapped if needed but in reverse order. flex-wrap wrap: The flex items would be wrapped if needed.\nnowrap: This is the default value that says the items won’t be wrapped.\nwrap-reverse: This specifies that the items will be wrapped if needed but in reverse order. wrap: The flex items would be wrapped if needed. nowrap: This is the default value that says the items won’t be wrapped. wrap-reverse: This specifies that the items will be wrapped if needed but in reverse order. flex-flow: This property is used for setting both flex-direction and flex-wrap properties in one statement. flex-flow justify-content: Used for aligning the flex items. Possible values are:\ncenter: It means that all the flex items are present at the center of the container.\nflex-start: This value states that the items are aligned at the start of the container. This is the default value.\nflex-end: This value ensures the items are aligned at the end of the container.\nspace-around: This value displays the items having space between, before, around the items.\nspace-between: This value displays items with spaces between the lines. justify-content center: It means that all the flex items are present at the center of the container.\nflex-start: This value states that the items are aligned at the start of the container. This is the default value.\nflex-end: This value ensures the items are aligned at the end of the container.\nspace-around: This value displays the items having space between, before, around the items.\nspace-between: This value displays items with spaces between the lines. center: It means that all the flex items are present at the center of the container. flex-start: This value states that the items are aligned at the start of the container. This is the default value. flex-end: This value ensures the items are aligned at the end of the container. space-around: This value displays the items having space between, before, around the items. space-between: This value displays items with spaces between the lines. align-items: This is used for aligning flex items. align-items align-content: This is used for aligning the flex lines. align-content",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "1. Difference between CSS grid vs flexbox?",
        "answer": "CSS Grid Layout is a two-dimensional system, meaning it can handle both columns and rows. Grid layout is intended for larger-scale layouts which aren’t linear in design.\nFlexbox is largely a one-dimensional system (either in a column or a row). Flexbox layout is most appropriate to the components of an application. CSS Grid Layout is a two-dimensional system, meaning it can handle both columns and rows. Grid layout is intended for larger-scale layouts which aren’t linear in design. Flexbox is largely a one-dimensional system (either in a column or a row). Flexbox layout is most appropriate to the components of an application.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "2. Explain CSS position property?",
        "answer": "Absolute: To place an element exactly where you want to place it. absolute position is actually set relative to the element's parent. if no parent is available then the relative place to the page itself (it will default all the way back up to the element).\nRelative: \"Relative to itself\". Setting position: relative; on an element and no other positioning attributes, it will no effect on its positioning. It allows the use of z-index on the element and it limits the scope of absolutely positioned child elements. Any child element will be absolutely positioned within that block. \nFixed: The element is positioned relative to the viewport or the browser window itself. viewport doesn't change if you scroll and hence the fixed element will stay right in the same position. \nStatic: Static default for every single page element. The only reason you would ever set an element to position: static is to forcefully remove some positioning that got applied to an element outside of your control.\nSticky: Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned. Absolute: To place an element exactly where you want to place it. absolute position is actually set relative to the element's parent. if no parent is available then the relative place to the page itself (it will default all the way back up to the element). Absolute: Relative: \"Relative to itself\". Setting position: relative; on an element and no other positioning attributes, it will no effect on its positioning. It allows the use of z-index on the element and it limits the scope of absolutely positioned child elements. Any child element will be absolutely positioned within that block. Relative: Fixed: The element is positioned relative to the viewport or the browser window itself. viewport doesn't change if you scroll and hence the fixed element will stay right in the same position. Fixed: Static: Static default for every single page element. The only reason you would ever set an element to position: static is to forcefully remove some positioning that got applied to an element outside of your control. Static: Sticky: Sticky positioning is a hybrid of relative and fixed positioning. The element is treated as relative positioned until it crosses a specified threshold, at which point it is treated as fixed positioned. Sticky:   ",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "3. When does DOM reflow occur?",
        "answer": "Reflow is the name of the web browser process for re-calculating the positions and geometries of elements in the document, for the purpose of re-rendering part or all of the document. Reflow occurs when: Insert, remove or update an element in the DOM.\nModify content on the page, e.g. the text in an input box.\nMove a DOM element.\nAnimate a DOM element.\nTake measurements of an element such as offsetHeight or getComputedStyle.\nChange a CSS style. Insert, remove or update an element in the DOM. Modify content on the page, e.g. the text in an input box. Move a DOM element. Animate a DOM element. Take measurements of an element such as offsetHeight or getComputedStyle. Change a CSS style.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "4. Different Box Sizing Property?",
        "answer": "The box-sizing CSS property sets how the total width and height of an element are calculated. Content-box: The default width and height values apply to the element's content only. The padding and border are added to the outside of the box.\nPadding-box: Width and height values apply to the element's content and its padding. The border is added to the outside of the box. Currently, only Firefox supports the padding-box value.\nBorder-box: Width and height values apply to the content, padding, and border. Content-box: The default width and height values apply to the element's content only. The padding and border are added to the outside of the box. Content-box: Padding-box: Width and height values apply to the element's content and its padding. The border is added to the outside of the box. Currently, only Firefox supports the padding-box value. Padding-box: Border-box: Width and height values apply to the content, padding, and border. Border-box:",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "5. How to center align a div inside another div?",
        "answer": "Centering with Table: Centering with Table: Centering with Table: HTML: HTML: <div class=”cn”><div class=”inner”>your content</div></div> <div class=”cn”><div class=”inner”>your content</div></div> <div class=”cn”> div class ”cn” <div class=”inner”> div class ”inner” </div> div </div> div CSS: CSS: .cn {\n display: table-cell;\n width: 500px;\n height: 500px;\n vertical-align: middle;\n text-align: center;\n}\n\n.inner {\n display: inline-block;\n width: 200px; height: 200px;\n} .cn {\n display: table-cell;\n width: 500px;\n height: 500px;\n vertical-align: middle;\n text-align: center;\n}\n\n.inner {\n display: inline-block;\n width: 200px; height: 200px;\n} .cn display width 500px height 500px vertical-align text-align .inner display width 200px height 200px Centering with Transform Centering with Transform Centering with Transform HTML: HTML: <div class=\"cn\"><div class=\"inner\">your content</div></div> <div class=\"cn\"><div class=\"inner\">your content</div></div> <div class=\"cn\"> div class \"cn\" <div class=\"inner\"> div class \"inner\" </div> div </div> div CSS: CSS: .cn {\n position: relative;\n width: 500px;\n height: 500px;\n}\n\n.inner {\n position: absolute;\n top: 50%; left: 50%;\n transform: translate(-50%,-50%);\n width: 200px;\n height: 200px;\n} .cn {\n position: relative;\n width: 500px;\n height: 500px;\n}\n\n.inner {\n position: absolute;\n top: 50%; left: 50%;\n transform: translate(-50%,-50%);\n width: 200px;\n height: 200px;\n} .cn position width 500px height 500px .inner position top 50% left 50% transform translate 50% 50% width 200px height 200px Centering with Flexbox Centering with Flexbox Centering with Flexbox HTML: HTML: <div class=\"cn\"><div class=\"inner\">your content</div></div> <div class=\"cn\"><div class=\"inner\">your content</div></div> <div class=\"cn\"> div class \"cn\" <div class=\"inner\"> div class \"inner\" </div> div </div> div CSS: CSS: .cn {\n display: flex;\n justify-content: center;\n align-items: center;\n} .cn {\n display: flex;\n justify-content: center;\n align-items: center;\n} .cn display justify-content align-items Centering with Grid Centering with Grid Centering with Grid HTML: HTML: <div class=”wrap_grid”>\n <div id=”container”>vertical aligned text<br />some more text here\n </div>\n</div> <div class=”wrap_grid”>\n <div id=”container”>vertical aligned text<br />some more text here\n </div>\n</div> <div class=”wrap_grid”> div class ”wrap_grid” <div id=”container”> div id ”container” <br /> br </div> div </div> div CSS: CSS: .wrap-grid {\n display: grid;\n place-content: center;\n} .wrap-grid {\n display: grid;\n place-content: center;\n} .wrap-grid display content",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "6. Can you name the four types of @media properties?",
        "answer": "The four types of @media properties are: All → It’s the default property. Used for all media-type devices.\nScreen → Used for computer screen, mobile screen.\nPrint → Used for printers.\nSpeech → Used for screen readers. All → It’s the default property. Used for all media-type devices. Screen → Used for computer screen, mobile screen. Print → Used for printers. Speech → Used for screen readers.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "7. What is the grid system?",
        "answer": "CSS Grid Layout is the most powerful layout system available in CSS. It is said to be a 2-dimensional system, meaning it can handle both columns and rows, unlike flexbox which is largely a 1-dimensional system.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "8. What are the different ways to hide the element using CSS?",
        "answer": "Using display property(display: none). It’s not available for screen readers. The element will not exist in the DOM if display: none is used.\nUsing visibility property(visibility: hidden), will take up the space of the element. It will be available to screen reader users. The element will actually be present in the DOM, but not shown on the screen.\nUsing position property (position: absolute). Make it available outside the screen. Using display property(display: none). It’s not available for screen readers. The element will not exist in the DOM if display: none is used. display: none Using visibility property(visibility: hidden), will take up the space of the element. It will be available to screen reader users. The element will actually be present in the DOM, but not shown on the screen. visibility: hidden Using position property (position: absolute). Make it available outside the screen. position: absolute",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "9. What does the :root pseudo-class refer to?",
        "answer": "The :root selector allows you to target the highest-level “parent” element in the DOM, or document tree. It is defined in the CSS Selectors Level 3 specification.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "10. What does Accessibility (a11y) mean?",
        "answer": "Accessibility refers to how software or hardware combinations are designed to make a system accessible to persons with disabilities, such as visual impairment, hearing loss, or limited dexterity. For example, a website developed with accessibility in mind might have text-to-speech capabilities. In the USA public websites have to have accessible compliance. It’s defined in 508 compliance. It gives the guidelines and best practices for all website users that should be met with key areas of accessibility.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "11. How do I restore the default value of a property?",
        "answer": "The keyword initial can be used to reset it to its default value.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "12. How does Calc work?",
        "answer": "The CSS3 calc() function allows us to perform mathematical operations on property values. Instead of declaring, for example, static pixel values for an element's width, we can use calc() to specify that the width is the result of the addition of two or more numeric values. .foo {\n Width: calc(100px + 50px)\n} .foo {\n Width: calc(100px + 50px)\n} .foo Width calc 100px 50px",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "13. What do CSS Custom properties variables mean?",
        "answer": "Custom properties (sometimes referred to as CSS variables or cascading variables) are defined by users that contain specific values to be reused throughout a document. The value is set using -- notion. And the values are accessed using the var() function. :root {\n --main-bg-color: brown\n}\n\n.one {\n color: white;\n background-color· var (--main-bg-color);\n margin: l0px,\n width: 50px,\n height: 5Opx;\n display: inline-block;\n} :root {\n --main-bg-color: brown\n}\n\n.one {\n color: white;\n background-color· var (--main-bg-color);\n margin: l0px,\n width: 50px,\n height: 5Opx;\n display: inline-block;\n} :root main color .one color background-color var main color margin 50px 5 display",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "14. What is the difference between CSS variables and preprocessor(SASS, LESS, Stylus) variables?",
        "answer": "CSS variables can be used without the need for a preprocessor. Currently, all the major browsers support the CSS variables. \nCSS variable cascade. But the preprocessor variables don’t cascade. \nCSS variable can be accessed and manipulated in javascript. CSS variables can be used without the need for a preprocessor. Currently, all the major browsers support the CSS variables. CSS variable cascade. But the preprocessor variables don’t cascade. CSS variable can be accessed and manipulated in javascript.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "15. What does * { box-sizing: border-box; } do? What are its advantages?",
        "answer": "It makes every element in the document include the padding and border in the element’s inner dimension for the height and width computation.  \nIn box-sizing: border-box, The height of an element is now calculated by the content's height + vertical padding + vertical border width.\nThe width of an element is now calculated by the content's width + horizontal padding + horizontal border width. It makes every element in the document include the padding and border in the element’s inner dimension for the height and width computation. In box-sizing: border-box, The height of an element is now calculated by the content's height + vertical padding + vertical border width. The width of an element is now calculated by the content's width + horizontal padding + horizontal border width.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "16. What does !important mean in CSS?",
        "answer": "The style is having the important will have the highest precedence and it overrides the cascaded property. p {\n  color: red !important;\n }\n #thing {\n  color: green;\n } \n <p id=\"thing\">Will be RED.</p> p {\n  color: red !important;\n }\n #thing {\n  color: green;\n } \n <p id=\"thing\">Will be RED.</p> #thing { \"thing\"",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "17. What is specificity? How to calculate specificity?",
        "answer": "A process of determining which CSS rule will be applied to an element. It actually determines which rules will take precedence. Inline style usually wins then ID then the class value (or pseudo-class or attribute selector), the universal selector (*) has no specificity. ID selectors have a higher specificity than attribute selectors.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "18. What is progressive rendering? How do you implement progressive rendering in the website?. What are the advantages of it?",
        "answer": "Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible. We can implement the progressive rendering of the page by loading the lazy loading of the images.  We can use Intersection Observer API to lazy load the image. The API makes it simple to detect when an element enters the viewport and take an action when it does. Once the image enters the viewport, we will start loading the images. A sample snippet is given below. <img class=\"lazy\"\nsrc=\"placeholder-image.jpg\"\ndata-src=\"image-to-lazy-load-1x.jpg\"\ndata-srcset=\"image-to-lazy-load-2x.jpg 2x, image-to-lazy-load-1x.jpg 1x\"\nalt=\"I'm an image!\">\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n\n  if (\"IntersectionObserver\" in window) {\n    let lazyImageObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          let lazyImage = entry.target;\n          lazyImage.src = lazyImage.dataset.src;\n          lazyImage.srcset = lazyImage.dataset.srcset;\n          lazyImage.classList.remove(\"lazy\");\n          lazyImageObserver.unobserve(lazyImage);\n        }\n      });\n    });\n\n    lazyImages.forEach(function(lazyImage) {\n      lazyImageObserver.observe(lazyImage);\n    });\n  } else {\n    // Possibly fall back to event handlers here\n  }\n}); <img class=\"lazy\"\nsrc=\"placeholder-image.jpg\"\ndata-src=\"image-to-lazy-load-1x.jpg\"\ndata-srcset=\"image-to-lazy-load-2x.jpg 2x, image-to-lazy-load-1x.jpg 1x\"\nalt=\"I'm an image!\">\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n\n  if (\"IntersectionObserver\" in window) {\n    let lazyImageObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          let lazyImage = entry.target;\n          lazyImage.src = lazyImage.dataset.src;\n          lazyImage.srcset = lazyImage.dataset.srcset;\n          lazyImage.classList.remove(\"lazy\");\n          lazyImageObserver.unobserve(lazyImage);\n        }\n      });\n    });\n\n    lazyImages.forEach(function(lazyImage) {\n      lazyImageObserver.observe(lazyImage);\n    });\n  } else {\n    // Possibly fall back to event handlers here\n  }\n}); img src .jpg src to 1 .jpg to 2 .jpg 2 to 1 .jpg 1 I .addEventListener var [] .slice .call .querySelectorAll img .lazy .forEach .isIntersecting .target .src .dataset .src .srcset .dataset .srcset .classList .remove .unobserve .forEach .observe to",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "19. What are the advantages of using translate() instead of absolute position?",
        "answer": "Translate() does not cause the browser to trigger repaint and layout and instead only acts on the compositor. The absolute position triggers the repaint or DOM reflow. So, translate() gives better performance.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "20. Does style1.css have to be downloaded and parsed before style2.css can be fetched?",
        "answer": "<head>\n <link h ref=\" stylel. css\" rel=\" stylesheet\">\n <link href=\"style2.css\" rel=\"stylesheet\">\n</head> <head>\n <link h ref=\" stylel. css\" rel=\" stylesheet\">\n <link href=\"style2.css\" rel=\"stylesheet\">\n</head> .css No, the browsers will download the CSS in the order of its appearance on the HTML page.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "21. How to determine if the browser supports a certain feature?",
        "answer": "The @support in CSS can be very useful to scan if the current browser has support for a certain feature. @supports (display: grid) {\n div {\n  display: grid;\n }\n} @supports (display: grid) {\n div {\n  display: grid;\n }\n}",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "22. How will you fix browser-specific styling issues?",
        "answer": "Different ways to fix browser-specific issues. We can write browser-specific styles separately in different sheets and load that only when the specific browser is used. This makes use of the server-side rendering technique.\nWe can use auto-prefix for automatically adding vendor prefixes in the code.\nWe can also use normalize.css or reset CSS techniques. We can write browser-specific styles separately in different sheets and load that only when the specific browser is used. This makes use of the server-side rendering technique. We can use auto-prefix for automatically adding vendor prefixes in the code. We can also use normalize.css or reset CSS techniques. There are some ways for avoiding browser compatibility issues too. They are as follows: Validate HTML and CSS: We know that the code will be read, interpreted and handled differently by different browsers. We need to validate our HTML and CSS files for the missing closing tags, or missing semicolons in the syntaxes because there are chances that the old browsers will throw errors while rendering the code. We can avoid those errors by:\nMaintaining well-aligned code that helps in easy readability.\nInserting comments at necessary places.\nMake use of validation tools like Jigsaw CSS validator, W3C HTML Validators to identify syntax issues in the code.\nMaintain Cross-Browser Compatibility in the Layouts: Cross-Browser compatibility is a must while developing web applications. We expect our application to be responsive across all devices, browsers and platforms. Some of the effects of layout incompatibilities are unresponsiveness of the layouts in mobile devices, the difference in layout rendering between modern and old browsers, etc. These incompatibilities can be avoided by using:\nCSS Multi-Column layouts - For maintaining proper layouts w.r.t columns and containers.\nHTML viewport metatag – For ensuring content is properly spanned across mobile devices.\nCSS Flexbox and Grids - To layout child elements depending on the content and available space.\nCSS resets stylesheets - For reducing browser inconsistencies in default line heights, font sizes, margins etc.\nCheck JavaScript Library issues: Ensure the libraries are used judiciously and the ones used are supported by the browsers.\nCheck DOCTYPE tag keyword: The DOCTYPE keyword is meant for defining rules of what needs to be used in the code. Older browser versions check for DOCTYPE tag at the beginning and if not found, the application rendering won't be proper.\nTest on real devices: Although applications can be tested on virtual environments, it would be more beneficial if the testing is carried out on real devices and platforms. We can use tools like Testsigma for this purpose that enables us to test in real devices parallelly. Validate HTML and CSS: We know that the code will be read, interpreted and handled differently by different browsers. We need to validate our HTML and CSS files for the missing closing tags, or missing semicolons in the syntaxes because there are chances that the old browsers will throw errors while rendering the code. We can avoid those errors by:\nMaintaining well-aligned code that helps in easy readability.\nInserting comments at necessary places.\nMake use of validation tools like Jigsaw CSS validator, W3C HTML Validators to identify syntax issues in the code. Validate HTML and CSS: Maintaining well-aligned code that helps in easy readability.\nInserting comments at necessary places.\nMake use of validation tools like Jigsaw CSS validator, W3C HTML Validators to identify syntax issues in the code. Maintaining well-aligned code that helps in easy readability. Inserting comments at necessary places. Make use of validation tools like Jigsaw CSS validator, W3C HTML Validators to identify syntax issues in the code. Maintain Cross-Browser Compatibility in the Layouts: Cross-Browser compatibility is a must while developing web applications. We expect our application to be responsive across all devices, browsers and platforms. Some of the effects of layout incompatibilities are unresponsiveness of the layouts in mobile devices, the difference in layout rendering between modern and old browsers, etc. These incompatibilities can be avoided by using:\nCSS Multi-Column layouts - For maintaining proper layouts w.r.t columns and containers.\nHTML viewport metatag – For ensuring content is properly spanned across mobile devices.\nCSS Flexbox and Grids - To layout child elements depending on the content and available space.\nCSS resets stylesheets - For reducing browser inconsistencies in default line heights, font sizes, margins etc. Maintain Cross-Browser Compatibility in the Layouts: CSS Multi-Column layouts - For maintaining proper layouts w.r.t columns and containers.\nHTML viewport metatag – For ensuring content is properly spanned across mobile devices.\nCSS Flexbox and Grids - To layout child elements depending on the content and available space.\nCSS resets stylesheets - For reducing browser inconsistencies in default line heights, font sizes, margins etc. CSS Multi-Column layouts - For maintaining proper layouts w.r.t columns and containers. HTML viewport metatag – For ensuring content is properly spanned across mobile devices. CSS Flexbox and Grids - To layout child elements depending on the content and available space. CSS resets stylesheets - For reducing browser inconsistencies in default line heights, font sizes, margins etc. Check JavaScript Library issues: Ensure the libraries are used judiciously and the ones used are supported by the browsers. Check JavaScript Library issues: Check DOCTYPE tag keyword: The DOCTYPE keyword is meant for defining rules of what needs to be used in the code. Older browser versions check for DOCTYPE tag at the beginning and if not found, the application rendering won't be proper. Check DOCTYPE tag keyword: Test on real devices: Although applications can be tested on virtual environments, it would be more beneficial if the testing is carried out on real devices and platforms. We can use tools like Testsigma for this purpose that enables us to test in real devices parallelly. Test on real devices: Conclusion CSS plays the most important role in the field of web development. This is because CSS helps in achieving beautiful, responsive or adaptive websites depending on the business requirements. CSS helps in building lighter and flexible layouts that help in loading pages faster and making the content visually appealing. CSS is continuously evolving and is becoming more powerful thereby making it the most sought-after technology by various companies to develop websites. In this article, we have seen the most commonly asked interview questions in CSS, more particularly CSS3. Useful Resources Useful Resources CSS Guides\nHTML\nCoding Practice\nJavaScript\nSASS Vs SCSS\nHTML/CSS Books\nCSS Vs HTML CSS Guides CSS Guides HTML HTML Coding Practice Coding Practice JavaScript JavaScript SASS Vs SCSS SASS Vs SCSS HTML/CSS Books HTML/CSS Books CSS Vs HTML CSS Vs HTML",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "23. How does this property work overflow: hidden?",
        "answer": "The overflow property in CSS is used for specifying whether the content has to be clipped or the scrollbars have to be added to the content area when the content size exceeds the specified container size where the content is enclosed. If the value of overflow is hidden, the content gets clipped post the size of the container thereby making the content invisible. For example, div {\n    width: 150px;\n    height: 50px;\n    overflow: hidden;\n} div {\n    width: 150px;\n    height: 50px;\n    overflow: hidden;\n} 150 50 If the content of the div is very large and exceeds the height of 50px, the content gets clipped post 50px and the rest of the content is not made visible.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "24. How will you align content inside the p tag at the exact center inside the div?",
        "answer": "We can add the text-align: center property inside the parent div for aligning the contents horizontally. But it will not align the contents vertically. We can align the content vertically by making the parent element have relative positioning and the child element have absolute positioning. The child element should have the values of top, bottom, right, left as 0 to center it in the middle vertically. Then we need to set the margin as auto. It is assumed that both the child and mother elements will have height and width values. text-align: center Consider we have a div element of height and width taking 20% of the screen size, and we have a paragraph element taking the height of 1.2em and width of 20%. If we want to align the paragraph element at the center (vertically and horizontally), we write the following styles: div {\n    position : relative;  // Make position relative\n    height : 20%;\n    width : 20%;\n    text-align : center; //Align to center horizontally\n}\np {\n    position : absolute; // Make position absolute\n    top:0;                // Give values of top, bottom,left, right to 0\n    bottom:0;\n    left:0;\n    right:0;\n    margin : auto;        // Set margin as auto\n    height : 1.2 em;\n    width : 20%;\n} div {\n    position : relative;  // Make position relative\n    height : 20%;\n    width : 20%;\n    text-align : center; //Align to center horizontally\n}\np {\n    position : absolute; // Make position absolute\n    top:0;                // Give values of top, bottom,left, right to 0\n    bottom:0;\n    left:0;\n    right:0;\n    margin : auto;        // Set margin as auto\n    height : 1.2 em;\n    width : 20%;\n} // Make position relative 20 20 //Align to center horizontally // Make position absolute 0 // Give values of top, bottom,left, right to 0 0 0 0 auto // Set margin as auto 1.2 20",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "25. How is margin different from padding in CSS?",
        "answer": "Margin property using which we can create space around the elements. We can also create space for borders defined at the exteriors. We have the following properties for defining the margin: margin-top\nmargin-right\nmargin-bottom\nmargin-left\nmargin property by itself has the values as:\nauto – The browser auto-calculates the margin while we use this.\nlength – The value of this property can be in px, pt, cm, em etc. The values can be positive or negative.\n% – We can also give percentage value as margin to the element.\ninherit – Using this property, the margin properties can be inherited from the parent elements. margin-top margin-right margin-bottom margin-left\nmargin property by itself has the values as:  auto – The browser auto-calculates the margin while we use this. length – The value of this property can be in px, pt, cm, em etc. The values can be positive or negative. % – We can also give percentage value as margin to the element. inherit – Using this property, the margin properties can be inherited from the parent elements. The padding property is used for generating the space around the element’s content and inside any known border. The padding also has sub-properties like: padding-top\npadding-right\npadding-bottom\npadding-left padding-top padding-right padding-bottom padding-left It is to be noted that the padding does not allow negative values. From the below image, we can see that the Margin is the outermost entity of the CSS Box Model that lies outside of the borders whereas the padding lies within the borders.  ",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "26. What do you have to do to automatically number the heading values of sections and categories?",
        "answer": "We can use the concept of CSS counters. This lets us adjust the appearance of the content based on the location in a document. While using this, we need to first initialize the value of the counter-reset property which is 0 by default. The same property is also used for changing the value to any number that we need. Post initialization, the counter’s value can be incremented or decremented by using the counter-increment property. The name of the counter cannot be CSS keywords like “none”, “initial”, “inherit” etc. If the CSS keywords are used, then the declaration would be ignored. Consider an example as shown below: body {\n  counter-reset: header;   /* define counter named 'header' whose initial value is 0 by default */\n}\n\nh2::before {\n  counter-increment: header;   /* The value of header counter by 1.*/\n  content: \"Header \" counter(header) \": \";  /* To display word Header and the value of the counter with colon before it.*/\n} body {\n  counter-reset: header;   /* define counter named 'header' whose initial value is 0 by default */\n}\n\nh2::before {\n  counter-increment: header;   /* The value of header counter by 1.*/\n  content: \"Header \" counter(header) \": \";  /* To display word Header and the value of the counter with colon before it.*/\n} /* define counter named 'header' whose initial value is 0 by default */ /* The value of header counter by 1.*/ \"Header \" \": \" /* To display word Header and the value of the counter with colon before it.*/ Here, we are trying to achieve auto count increment and display feature for the h2 tag. Wherever we use h2 tag, the content will be prefixed by \"Header 1 : \" , \"Header 2 : \", \"Header 3 : \" etc.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "27. How is the nth-child() different from nth of type selectors?",
        "answer": "Both are pseudo-classes (Pseudo-classes are those keywords that specifies the special state of the selected element). The nth-child() pseudo-class is used for matching elements based on the number that represents the position of an element based on the siblings. The number is used to match an element on the basis of the element’s position amongst its siblings. nth-child() For example, in the below piece of code, if we give nth-child(4) for the example class, then the 4th child of the example class is selected irrespective of the element type. Here, the fourth child of the example class is the div element. The element is selected and a background of black is added to it. .example:nth-child(4) {   \n    background: black; \n}\n<div class=\"example\">\n <p>This is a paragraph.</p>\n <p>This is a paragraph.</p>\n <p>This is a paragraph.</p>\n <div>This is a div.</div> <!-- 4th Element to select and apply style-->\n <div>This is a div.</div> \n <p>This is a paragraph.</p>\n <p>This is a paragraph.</p>\n <div>This is a div.</div>\n</div> .example:nth-child(4) {   \n    background: black; \n}\n<div class=\"example\">\n <p>This is a paragraph.</p>\n <p>This is a paragraph.</p>\n <p>This is a paragraph.</p>\n <div>This is a div.</div> <!-- 4th Element to select and apply style-->\n <div>This is a div.</div> \n <p>This is a paragraph.</p>\n <p>This is a paragraph.</p>\n <div>This is a div.</div>\n</div> 4 class= class \"example\" 4 and The nth-of-type() pseudo-class is similar to the nth-child but it helps in matching the selector based on a number that represents the position of the element within the elements that are the siblings of its same type. The number can also be given as a function or give keywords like odd or even. nth-of-type() For example, in the below piece of code, if we give p:nth-of-type(even) for the example class, then all the even paragraph tags are selected within the example class and the style of background black is applied to them. The selected elements are marked in comments in the below code: p:nth-of-type(even) .example p:nth-of-type(even) { \n    background: black; \n}\n<div class=\"example\">\n <p>This is a paragraph.</p> \n <p>This is a paragraph.</p> <!-- Select this and apply style-->\n <p>This is a paragraph.</p> \n <div>This is a div.</div>\n <div>This is a div.</div> \n <p>This is a paragraph.</p> <!-- Select this and apply style-->\n <p>This is a paragraph.</p> \n <div>This is a div.</div>\n <p>This is a paragraph.</p> <!-- Select this and apply style-->\n <div>This is a div.</div>\n</div> .example p:nth-of-type(even) { \n    background: black; \n}\n<div class=\"example\">\n <p>This is a paragraph.</p> \n <p>This is a paragraph.</p> <!-- Select this and apply style-->\n <p>This is a paragraph.</p> \n <div>This is a div.</div>\n <div>This is a div.</div> \n <p>This is a paragraph.</p> <!-- Select this and apply style-->\n <p>This is a paragraph.</p> \n <div>This is a div.</div>\n <p>This is a paragraph.</p> <!-- Select this and apply style-->\n <div>This is a div.</div>\n</div> class= class \"example\" this and this and this and",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "28. What is the importance of CSS Sprites?",
        "answer": "CSS sprites are used for combining multiple images in a single larger image. They are commonly used for representing icons that are used in the user interfaces. The main advantages of using sprites are: It reduces the number of HTTP requests to get data of multiple images as they are acquired only by sending a single request.\nIt helps in downloading assets in advance that help display icons or images upon hover or other pseudo-states.\nWhen there are multiple images, the browser makes separate calls to get the image for each of them. Using sprites, the images are combined in one and we can just call for that image using one call. It reduces the number of HTTP requests to get data of multiple images as they are acquired only by sending a single request. It helps in downloading assets in advance that help display icons or images upon hover or other pseudo-states. When there are multiple images, the browser makes separate calls to get the image for each of them. Using sprites, the images are combined in one and we can just call for that image using one call. Consider an example where our application requires 3 images as shown below (Without Sprites Section). If we are trying to load the images independently, we require 3 different HTTP Requests to get the data. But if we have CSS Sprites where all 3 images are combines into 1 separated by some spaces, then we require only 1 HTTP Request.   We can access each image from the sprite by accessing the positioning properties as shown in the below code: <!DOCTYPE html>\n<html>\n<head>\n<style>\n#home-icon {\n  left: 0px;\n  width: 46px;\n  background: url('spriteFile.gif') 0 0;\n}\n\n#prev-icon {\n  left: 63px;\n  width: 43px;\n  background: url('spriteFile.gif') -47px 0;\n}\n\n#next-icon {\n  left: 129px;\n  width: 43px;\n  background: url('spriteFile.gif') -91px 0;\n}\n</style>\n</head>\n<body>\n\n<img id=\"home-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display home icon here -->\n<img id=\"next-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display next icon icon here -->\n<img id=\"prev-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display previous icon icon here -->\n\n</body>\n</html> <!DOCTYPE html>\n<html>\n<head>\n<style>\n#home-icon {\n  left: 0px;\n  width: 46px;\n  background: url('spriteFile.gif') 0 0;\n}\n\n#prev-icon {\n  left: 63px;\n  width: 43px;\n  background: url('spriteFile.gif') -47px 0;\n}\n\n#next-icon {\n  left: 129px;\n  width: 43px;\n  background: url('spriteFile.gif') -91px 0;\n}\n</style>\n</head>\n<body>\n\n<img id=\"home-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display home icon here -->\n<img id=\"next-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display next icon icon here -->\n<img id=\"prev-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\">    <!-- To display previous icon icon here -->\n\n</body>\n</html> <!DOCTYPE html> html <html> html <head> head <style> style #home-icon {\n  left: 0px;\n  width: 46px;\n  background: url('spriteFile.gif') 0 0;\n}\n\n#prev-icon {\n  left: 63px;\n  width: 43px;\n  background: url('spriteFile.gif') -47px 0;\n}\n\n#next-icon {\n  left: 129px;\n  width: 43px;\n  background: url('spriteFile.gif') -91px 0;\n} #home-icon left 0px width 46px background url 'spriteFile.gif' 0 0 #prev-icon left 63px width 43px background url 'spriteFile.gif' 47px 0 #next-icon left 129px width 43px background url 'spriteFile.gif' 91px 0 </style> style </head> head <body> body <img id=\"home-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\"> img id \"home-icon\" src \"spriteFile.gif\" width \"1\" height \"1\" <!-- To display home icon here --> <img id=\"next-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\"> img id \"next-icon\" src \"spriteFile.gif\" width \"1\" height \"1\" <!-- To display next icon icon here --> <img id=\"prev-icon\" src=\"spriteFile.gif\" width=\"1\" height=\"1\"> img id \"prev-icon\" src \"spriteFile.gif\" width \"1\" height \"1\" <!-- To display previous icon icon here --> </body> body </html> html In the above code, we are trying to access each element - house, previous and next icon - from the sprite file by using the left, width properties. The image is displayed in the img section by means of the background property. Do note that the source of the image (src attribute of the img tag) is just one file which is the spriteFile.gif and depending on the rules specified in the id selectors, the images are loaded accordingly. spriteFile.gif",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "29. What do you understand by tweening in CSS?",
        "answer": "Tweening is the process of filling the gaps between the key sequences, i.e between the keyframes that are already created. Keyframes are those frames that represent start and end point of animation action. Tweening involves generating intermediate keyframes between two images that give the impression that the first one has evolved smoothly to the second image. For this purpose, we use properties like transforms - matrix, translate, scale, rotate etc. In the below example, we are generating intermediate frames of paragraph elements to slide through from the start to the right edge of the browser. p {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n} p {\n  animation-duration: 2s;\n  animation-name: slidethrough;\n}\n\n@keyframes slidethrough {\n  from {\n    margin-left: 100%;\n    width: 300%; \n  }\n\n  to {\n    margin-left: 0%;\n    width: 100%;\n  }\n} Here, the paragraph element specifies that the animation process should take 2 seconds for execution from start to the finish. This is done by using the animation-duration property. The animation-name of the @keyframes is defined by using the property animation-name. The intermediate keyframes are defined by using @keyframes rule. In the example, we have just 2 keyframes. The first keyframe starts at 0% and runs till the left margin of 100% which is the rightmost edge of the containing element. The second keyframe starts at 100% where the left margin is set as 0% and the width to be set as 100% which results in finishing the animation flush against the left edge of the container area. animation-duration @keyframes animation-name @keyframes",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "30. Why do we need to use clear property along with floats in CSS?",
        "answer": "The clear property along with floats is used for specifying which side of floating elements is not supposed to float. An element having clear property ensures that the element does not move up adjacent to the float. But the element will be moved down past the float. Let us understand this with the help of an example. We know that the floated objects do not add to the height of the objects where they reside. Consider we have a div element with class “floated_div” within another div element with id “main_div”. <html>\n    <head>\n    <style>\n        #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        }\n    </style>\n    </head>\n    <body>\n        <div id=\"main_div\">\n             <p>Clear Float Demo</p>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n        </div>\n    </body>\n</html> <html>\n    <head>\n    <style>\n        #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        }\n    </style>\n    </head>\n    <body>\n        <div id=\"main_div\">\n             <p>Clear Float Demo</p>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n        </div>\n    </body>\n</html> <html> html <head> head <style> style #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        } #main_div width 400px margin 10px border 4px #cccccc padding 5px .floated_div float width 50px height 50px border 2px #990000 margin 10px </style> style </head> head <body> body <div id=\"main_div\"> div id \"main_div\" <p> p </p> p <div class=\"floated_div\"> div class \"floated_div\" </div> div <div class=\"floated_div\"> div class \"floated_div\" </div> div <div class=\"floated_div\"> div class \"floated_div\" </div> div <div class=\"floated_div\"> div class \"floated_div\" </div> div <div class=\"floated_div\"> div class \"floated_div\" </div> div </div> div </body> body </html> html The result of this code would be as shown below. We see that the squares that are expected to be within dev are not within the main parent div. How do we fix this?   We can do it just by adding <div style=\"clear:both\"></div> line at the end of the last floated element so that the floated elements are fit in properly within the main div container. <div style=\"clear:both\"></div> <html>\n    <head>\n    <style>\n        #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        }\n    </style>\n    </head>\n    <body>\n        <div id=\"main_div\">\n             <p>Clear Float Demo</p>\n            \n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div style=\"clear:both\"></div>    <!-- Adding this fixed the issue -->\n        </div>\n    </body>\n</html> <html>\n    <head>\n    <style>\n        #main_div {\n             width: 400px;\n             margin: 10px auto;\n             border: 4px solid #cccccc;\n             padding: 5px;\n        }\n\n        .floated_div {\n             float: left;\n             width: 50px;\n             height: 50px;\n             border: 2px solid #990000;\n             margin: 10px;\n        }\n    </style>\n    </head>\n    <body>\n        <div id=\"main_div\">\n             <p>Clear Float Demo</p>\n            \n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div class=\"floated_div\"></div>\n             <div style=\"clear:both\"></div>    <!-- Adding this fixed the issue -->\n        </div>\n    </body>\n</html> The result of this will be:  ",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "31. How does the absolute positioning work?",
        "answer": "Absolute positioning is a very powerful positioning mechanism that allows users to place any element wherever they want in an exact location. The CSS properties right, left, top, bottom and define the exact locations where you need to place the element. In absolute positioning, the following points need to be considered: The element to which the absolute positioning is applied is removed from the normal workflow of the HTML document.\nThe HTML layout does not create any space for that element in its page layout.\nThe element is positioned relative to the closest positioned ancestor. If no such ancestor is present, then the element is placed relative to the initial container block.\nThe final position of the element is determined based on values provided to the top, right, left, bottom. The element to which the absolute positioning is applied is removed from the normal workflow of the HTML document.\nThe HTML layout does not create any space for that element in its page layout. The HTML layout does not create any space for that element in its page layout. The HTML layout does not create any space for that element in its page layout. The element is positioned relative to the closest positioned ancestor. If no such ancestor is present, then the element is placed relative to the initial container block. The final position of the element is determined based on values provided to the top, right, left, bottom.",
        "reference": "interviewbit.com",
        "role": "css"
    },
    {
        "question": "1) What is CSS?",
        "answer": "CSS stands for Cascading Style Sheet. It is a popular styling language which is used with HTML to design websites. It can also be used with any XML documents including plain XML, SVG, and XUL.More details...",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "2) What is the origin of CSS?",
        "answer": "SGML (Standard Generalized Markup Language) is the origin of CSS. It is a language that defines markup languages.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "3) What are the different variations of CSS?",
        "answer": "Following are the different variations of CSS:\nADVERTISEMENT\nCSS1\nCSS2\nCSS2.1\nCSS3\nCSS4",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "4) How can you integrate CSS on a web page?",
        "answer": "There are three methods to integrate CSS on web pages.\nInline method - It is used to insert style sheets in HTML document\nEmbedded/Internal method - It is used to add a unique style to a single document\nLinked/Imported/External method - It is used when you want to make changes on multiple pages.\nMore details...",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "5) What are the advantages of CSS?",
        "answer": "Bandwidth\nSite-wide consistency\nPage reformatting\nAccessibility\nContent separated from presentation",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "6) What are the limitations of CSS?",
        "answer": "Ascending by selectors is not possible\nLimitations of vertical control\nNo expressions\nNo column declaration\nPseudo-class not controlled by dynamic behavior\nRules, styles, targeting specific text not possible",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "7) What are the CSS frameworks?",
        "answer": "CSS frameworks are the preplanned libraries which make easy and more standard compliant web page styling. The frequently used CSS frameworks are: -\nBootstrap\nFoundation\nSemantic UI\nGumby\nUlkit",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "8) Why background and color are the separate properties if they should always be set together?",
        "answer": "There are two reasons behind this:\nIt enhances the legibility of style sheets. The background property is a complex property in CSS, and if it is combined with color, the complexity will further increase.\nColor is an inherited property while the background is not. So this can make confusion further.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "9) What is Embedded Style Sheet?",
        "answer": "An Embedded style sheet is a CSS style specification method used with HTML. You can embed the entire stylesheet in an HTML document by using the STYLE element. More details...\n <style>    \nbody {    \n    background-color: linen;    \n}    \nh1 {    \n    color: red;    \n    margin-left: 80px;    \n}     \n</style>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "10) What are the advantages of Embedded Style Sheets?",
        "answer": "You can create classes for use on multiple tag types in the document.\nYou can use selector and grouping methods to apply styles in complex situations.\nNo extra download is required to import the information.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "11) What is a CSS selector?",
        "answer": "It is a string that identifies the elements to which a particular declaration apply. It is also referred as a link between the HTML document and the style sheet. It is equivalent of HTML elements. There are several different types of selectors in CSS: -\nCSS Element Selector\nCSS Id Selector\nCSS Class Selector\nCSS Universal Selector\nCSS Group Selector\nMore details...",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "",
        "answer": "Some CSS Style components are:\nSelector\nProperty\nValue",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "13) What is the use of CSS Opacity?",
        "answer": "The CSS opacity property is used to specify the transparency of an element. In simple word, you can say that it specifies the clarity of the image. In technical terms, Opacity is defined as the degree to which light is allowed to travel through an object. For example:\n<style>    \nimg.trans {    \n    opacity: 0.4;    \n    filter: alpha(opacity=40); /* For IE8 and earlier */    \n}    \n</style>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "",
        "answer": "The universal selector matches the name of any of the element type instead of selecting elements of a specific type.\n<style>    \n* {    \n   color: green;    \n   font-size: 20px;    \n}     \n</style>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "15) Which command is used for the selection of all the elements of a paragraph?",
        "answer": "The p[lang] command is used for selecting all the elements of a paragraph.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "16) What is the use of % unit?",
        "answer": "It is used for defining percentage values.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "",
        "answer": "The background-color property is used to specify the background color of the element. For example:\n\n<style>    \nh2,p{    \n    background-color: #b0d4de;    \n}    \n</style>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "",
        "answer": "The background-repeat property repeats the background image horizontally and vertically. Some images are repeated only horizontally or vertically.\n\n<style>    \nbody {    \nbackground-image: url(\"paper1.gif\");    \nmargin-left:100px;    \n}    \n</style>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "",
        "answer": "The background-position property is used to define the initial position of the background image. By default, the background image is placed on the top-left of the webpage.\nYou can set the following positions:\ncenter\ntop\nbottom\nleft\nright\nbackground: white url('good-morning.jpg');  \nbackground-repeat: no-repeat;  \nbackground-attachment: fixed;  \nbackground-position: center;",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "",
        "answer": "The background-attachment property is used to specify if the background image is fixed or scroll with the rest of the page in the browser window. If you set fixed the background image, then the image not move during scrolling in the browser. Let's take an example with the fixed background image.\n\nbackground: white url('bbb.gif');  \nbackground-repeat: no-repeat;  \nbackground-attachment: fixed;",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "21) What is the use of ruleset?",
        "answer": "The ruleset is used to identify that selectors can be attached with other selectors. It has two parts:\nSelector - Selector indicates the HTML element you want to style.\nDeclaration Block - The declaration block can contain one or more declarations separated by a semicolon.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "22) What is the difference between class selectors and id selectors?",
        "answer": "An overall block is given to class selector while id selectors take only a single element differing from other elements.\nCSS Class Selector\n<style>    \n.center {    \n    text-align: center;    \n    color: blue;    \n}    \n</style>  \n   \nCSS Id Selector\n<style>    \n#para1 {    \n    text-align: center;    \n    color: blue;    \n}    \n</style>    \n   \nMore details...",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "23) What are the advantages of External Style Sheets?",
        "answer": "You can create classes for reusing it in many documents.\nBy using it, you can control the styles of multiple documents from one file.\nIn complex situations, you can use selectors and grouping methods to apply styles.\nMore details...",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "24) What is the difference between inline, embedded and external style sheets?",
        "answer": "Inline: Inline Style Sheet is used to style only a small piece of code.\nSyntax\n<htmltag style=\"cssproperty1:value; cssproperty2:value;\"> </htmltag>     \n       \nEmbedded: Embedded style sheets are put between the <head>...</head> tags.\nSyntax\n<style>    \nbody {    \n    background-color: linen;    \n}    \nh1 {    \n    color: red;    \n    margin-left: 80px;    \n}     \n</style>    \n       \nExternal: This is used to apply the style to all the pages within your website by changing just one style sheet.\nSyntax\n<head>    \n<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">    \n</head>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "25) What is RWD?",
        "answer": "RWD stands for Responsive Web Design. This technique is used to display the designed page perfectly on every screen size and device, for example, mobile, tablet, desktop and laptop. You don't need to create a different page for each device.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "26) What are the benefits of CSS sprites?",
        "answer": "If a web page has a large number of images that take a longer time to load because each image separately sends out an HTTP request. The concept of CSS sprites is used to reduce the loading time for a web page because it combines the various small images into one image. It reduces the number of HTTP requests and hence the loading time.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "27) What is the difference between logical tags and physical tags?",
        "answer": "Physical tags are referred to as presentational markup while logical tags are useless for appearances.\nPhysical tags are newer versions, on the other hand, logical tags are old and concentrate on content.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "28) What is the CSS Box model and what are its elements?",
        "answer": "The CSS box model is used to define the design and layout of elements of CSS.\n\nThe elements are:\nMargin - It removes the area around the border. It is transparent.\nBorder - It represents the area around the padding\nPadding - It removes the area around the content. It is transparent.\nContent - It represents the content like text, images, etc.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "29) What is the float property of CSS?",
        "answer": "The CSS float property is used to move the image to the right or left along with the texts to be wrapped around it. It doesn't change the property of the elements used before it.\nTo understand its purpose and origin, let's take a look at its print display. In the print display, an image is set into the page such that text wraps around it as needed.\n\nIts web layout is also just similar to print layout.\n\n\n\nMore details...",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "30) How to restore the default property value using CSS?",
        "answer": "In short, there is no easy way to restore to default values to whatever a browser uses.\n\nThe closest option is to use the 'initial' property value, which restores the default CSS values, rather than the browser's default styles.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "31) What is the purpose of the z-index and how is it used?",
        "answer": "The z-index helps to specify the stack order of positioned elements that may overlap one another. The z-index default value is zero and can take on either a positive or negative number.\nAn element with a higher z-index is always stacked above than a lower index.\nZ-Index can take the following values:\nAuto: Sets the stack order equal to its parents.\nNumber: Orders the stack order.\nInitial: Sets this property to its default value (0).\nInherit: Inherits this property from its parent element.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "32) Explain the difference between visibility: hidden and display: none?",
        "answer": "visibility: hidden hides the element, but it occupies space and affects the layout of the document.\n <!DOCTYPE html>  \n<html>  \n<head>  \n<style>  \nh1.vis {  \n    visibility: visible;  \n}  \n  h1.hid {  \n    visibility: hidden;  \n}  \n</style>  \n</head>  \n<body>  \n<h1 class=\"vis\">It is visible</h1>  \n<h1 class=\"hid\">It is hidden</h1>  \n  <p>Note - Second heading is hidden, but it still occupy space.</p>  \n</body>  \n</html>  \n       \n\ndisplay: none also hides the element but not occupy space. It will not affect the layout of the document.\n<!DOCTYPE html>  \n<html>  \n<head>  \n<style>  \nh1.vis {  \n    display: block;  \n}  \n  h1.hid {  \n     display: none;  \n}  \n</style>  \n</head>  \n<body>  \n<h1 class=\"vis\">It is visible</h1>  \n<h1 class=\"hid\">It is hidden</h1>  \n  <p>Note - Second heading is hidden and not occupy space.</p>  \n</body>  \n</html>",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "33) What do you understand by W3C?",
        "answer": "W3C stands for World Wide Web Consortium. Its purpose is to deliver the information of the World Wide Web. It also develops rules and guidelines for the Web.",
        "reference": "javatpoint.com",
        "role": "css"
    },
    {
        "question": "34) What is tweening?",
        "answer": "It is the process of generating intermediate frames between two images.\nIt gives the impression that the first image has smoothly evolved into the second one.\n\nIt is an important method used in all types of animations.\nIn CSS3, Transforms (matrix, translate, rotate, scale) module can be used to achieve tweening.",
        "reference": "javatpoint.com",
        "role": "css"
    }
]