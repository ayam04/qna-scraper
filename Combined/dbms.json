[
    {
        "question": "1. What is DBMS and what is its utility? Explain RDBMS with examples.",
        "answer": "DBMS stands for Database Management System, is a set of applications or programs that enable users to create and maintain a database. DBMS provides a tool or an interface for performing various operations such as inserting, deleting, updating, etc. into a database. It is software that enables the storage of data more compactly and securely as compared to a file-based system. A DBMS system helps a user to overcome problems like data inconsistency, data redundancy, etc. in a database and makes it more convenient and organized to use it. Check this DBMS Tutorial by Scaler Topics. Database Management System Database Management System , DBMS Tutorial by Scaler Topics Examples of popular DBMS systems are file systems, XML, Windows Registry, etc. Examples   RDBMS stands for Relational Database Management System and was introduced in the 1970s to access and store data more efficiently than DBMS. RDBMS stores data in the form of tables as compared to DBMS which stores data as files. Storing data as rows and columns makes it easier to locate specific values in the database and makes it more efficient as compared to DBMS. Relational Database Management System Examples of popular RDBMS systems are MySQL, Oracle DB, etc. Examples Learn More Learn More Learn More",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "2. What is a Database?",
        "answer": "A Database is an organized, consistent, and logical collection of data that can easily be updated, accessed, and managed. Database mostly contains sets of tables or objects (anything created using create command is a database object) which consist of records and fields. A tuple or a row represents a single entry in a table. An attribute or a column represents the basic units of data storage, which contain information about a particular aspect of the table. DBMS extracts data from a database in the form of queries given by the user.",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "3. Mention the issues with traditional file-based systems that make DBMS a better choice?",
        "answer": "The absence of indexing in a traditional file-based system leaves us with the only option of scanning the full page and hence making the access of content tedious and super slow. The other issue is redundancy and inconsistency as files have many duplicate and redundant data and changing one of them makes all of them inconsistent. Accessing data is harder in traditional file-based systems because data is unorganized in them. Another issue is the lack of concurrency control, which leads to one operation locking the entire page, as compared to DBMS where multiple operations can work on a single file simultaneously. Integrity check, data isolation, atomicity, security, etc. are some other issues with traditional file-based systems for which DBMSs have provided some good solutions.",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "4. Explain a few advantages of a DBMS.",
        "answer": "Following are the few advantages of using a DBMS. advantages of using a DBMS advantages of using a DBMS   Data Sharing: Data from a single database can be simultaneously shared by multiple users. Such sharing also enables end-users to react to changes quickly in the database environment.\nIntegrity constraints: The existence of such constraints allows storing of data in an organized and refined manner.\nControlling redundancy in a database: Eliminates redundancy in a database by providing a mechanism that integrates all the data in a single database.\nData Independence: This allows changing the data structure without altering the composition of any of the executing application programs.\nProvides backup and recovery facility: It can be configured to automatically create the backup of the data and restore the data in the database whenever required.\nData Security: DBMS provides the necessary tools to make the storage and transfer of data more reliable and secure. Authentication (the process of giving restricted access to a user) and encryption (encrypting sensitive data such as OTP, credit card information, etc.) are some popular tools used to secure data in a DBMS. Data Sharing: Data from a single database can be simultaneously shared by multiple users. Such sharing also enables end-users to react to changes quickly in the database environment. Data Sharing: Integrity constraints: The existence of such constraints allows storing of data in an organized and refined manner. Integrity constraints: Controlling redundancy in a database: Eliminates redundancy in a database by providing a mechanism that integrates all the data in a single database. Controlling redundancy in a database: Data Independence: This allows changing the data structure without altering the composition of any of the executing application programs. Data Independence: Provides backup and recovery facility: It can be configured to automatically create the backup of the data and restore the data in the database whenever required. Provides backup and recovery facility: Data Security: DBMS provides the necessary tools to make the storage and transfer of data more reliable and secure. Authentication (the process of giving restricted access to a user) and encryption (encrypting sensitive data such as OTP, credit card information, etc.) are some popular tools used to secure data in a DBMS. Data Security:",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "5. Explain different languages present in DBMS.",
        "answer": "Following are various languages present in DBMS: DDL(Data Definition Language):  It contains commands which are required to define the database.\nE.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc.\nDML(Data Manipulation Language): It contains commands which are required to manipulate the data present in the database.\nE.g., SELECT, UPDATE, INSERT, DELETE, etc.\nDCL(Data Control Language):  It contains commands which are required to deal with the user permissions and controls of the database system.\nE.g., GRANT and REVOKE.\nTCL(Transaction Control Language):  It contains commands which are required to deal with the transaction of the database.\nE.g., COMMIT, ROLLBACK, and SAVEPOINT. DDL(Data Definition Language):  It contains commands which are required to define the database.\nE.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc. DDL(Data Definition Language):  DML(Data Manipulation Language): It contains commands which are required to manipulate the data present in the database.\nE.g., SELECT, UPDATE, INSERT, DELETE, etc. DML(Data Manipulation Language):  DCL(Data Control Language):  It contains commands which are required to deal with the user permissions and controls of the database system.\nE.g., GRANT and REVOKE. DCL(Data Control Language):  TCL(Transaction Control Language):  It contains commands which are required to deal with the transaction of the database.\nE.g., COMMIT, ROLLBACK, and SAVEPOINT. TCL(Transaction Control Language): ",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "6. What is meant by ACID properties in DBMS?",
        "answer": "ACID stands for Atomicity, Consistency, Isolation, and Durability in a DBMS these are those properties that ensure a safe and secure way of sharing data among multiple users.   Atomicity: This property reflects the concept of either executing the whole query or executing nothing at all, which implies that if an update occurs in a database then that update should either be reflected in the whole database or should not be reflected at all. Atomicity: This property reflects the concept of either executing the whole query or executing nothing at all, which implies that if an update occurs in a database then that update should either be reflected in the whole database or should not be reflected at all. Atomicity     Consistency: This property ensures that the data remains consistent before and after a transaction in a database. Consistency: This property ensures that the data remains consistent before and after a transaction in a database. Consistency:   Isolation: This property ensures that each transaction is occurring independently of the others. This implies that the state of an ongoing transaction doesn’t affect the state of another ongoing transaction. Isolation: This property ensures that each transaction is occurring independently of the others. This implies that the state of an ongoing transaction doesn’t affect the state of another ongoing transaction. Isolation:   Durability: This property ensures that the data is not lost in cases of a system failure or restart and is present in the same state as it was before the system failure or restart. Durability: This property ensures that the data is not lost in cases of a system failure or restart and is present in the same state as it was before the system failure or restart. Durability:",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "7. Are NULL values in a database the same as that of blank space or zero?",
        "answer": "No, a NULL value is very different from that of zero and blank space as it represents a value that is assigned, unknown, unavailable, or not applicable as compared to blank space which represents a character and zero represents a number. Example: NULL value in “number_of_courses” taken by a student represents that its value is unknown whereas 0 in it means that the student hasn’t taken any courses.",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "1. What is meant by an entity-relationship (E-R) model? Explain the terms Entity, Entity Type, and Entity Set in DBMS.",
        "answer": "An entity-relationship model is a diagrammatic approach to a database design where real-world objects are represented as entities and relationships between them are mentioned. entity-relationship model entity-relationship model   Entity: An entity is defined as a real-world object having attributes that represent characteristics of that particular object. For example, a student, an employee, or a teacher represents an entity.\nEntity Type: An entity type is defined as a collection of entities that have the same attributes. One or more related tables in a database represent an entity type. Entity type or attributes can be understood as a characteristic which uniquely identifies the entity.  For example, a student represents an entity that has attributes such as student_id, student_name, etc.\nEntity Set: An entity set can be defined as a set of all the entities present in a specific entity type in a database. For example, a set of all the students, employees, teachers, etc. represent an entity set. Entity: An entity is defined as a real-world object having attributes that represent characteristics of that particular object. For example, a student, an employee, or a teacher represents an entity. Entity: Entity Type: An entity type is defined as a collection of entities that have the same attributes. One or more related tables in a database represent an entity type. Entity type or attributes can be understood as a characteristic which uniquely identifies the entity.  For example, a student represents an entity that has attributes such as student_id, student_name, etc. Entity Type: Entity Set: An entity set can be defined as a set of all the entities present in a specific entity type in a database. For example, a set of all the students, employees, teachers, etc. represent an entity set. Entity Set:",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "2. What is meant by normalization and denormalization?",
        "answer": "Normalization is a process of reducing redundancy by organizing the data into multiple tables. Normalization leads to better usage of disk spaces and makes it easier to maintain the integrity of the database. Normalization Normalization Denormalization is the reverse process of normalization as it combines the tables which have been normalized into a single table so that data retrieval becomes faster. JOIN operation allows us to create a denormalized form of the data by reversing the normalization. Denormalization",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "3. What is a lock. Explain the major difference between a shared lock and an exclusive lock during a transaction in a database.",
        "answer": "A database lock is a mechanism to protect a shared piece of data from getting updated by two or more database users at the same time. When a single database user or session has acquired a lock then no other database user or session can modify that data until the lock is released. Shared Lock: A shared lock is required for reading a data item and many transactions may hold a lock on the same data item in a shared lock. Multiple transactions are allowed to read the data items in a shared lock.\nExclusive lock: An exclusive lock is a lock on any transaction that is about to perform a write operation. This type of lock doesn’t allow more than one transaction and hence prevents any inconsistency in the database. Shared Lock: A shared lock is required for reading a data item and many transactions may hold a lock on the same data item in a shared lock. Multiple transactions are allowed to read the data items in a shared lock. Shared Lock: Exclusive lock: An exclusive lock is a lock on any transaction that is about to perform a write operation. This type of lock doesn’t allow more than one transaction and hence prevents any inconsistency in the database. Exclusive lock:",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "4. Explain the difference between the DELETE and TRUNCATE command in a DBMS.",
        "answer": "DELETE command: this command is needed to delete rows from a table based on the condition provided by the WHERE clause. DELETE command: It deletes only the rows which are specified by the WHERE clause.\nIt can be rolled back if required.\nIt maintains a log to lock the row of the table before deleting it and hence it’s slow. It deletes only the rows which are specified by the WHERE clause. It can be rolled back if required. It maintains a log to lock the row of the table before deleting it and hence it’s slow. TRUNCATE command: this command is needed to remove complete data from a table in a database. It is like a DELETE command which has no WHERE clause. TRUNCATE command: It removes complete data from a table in a database.\nIt can't be rolled back even if required. ( truncate can be rolled back in some databases depending on their version but it can be tricky and can lead to data loss). Check this link for more details\nIt doesn’t maintain a log and deletes the whole table at once and hence it’s fast. It removes complete data from a table in a database. It can't be rolled back even if required. ( truncate can be rolled back in some databases depending on their version but it can be tricky and can lead to data loss). Check this link for more details link It doesn’t maintain a log and deletes the whole table at once and hence it’s fast.",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "5. Explain the difference between intension and extension in a database.",
        "answer": "Following is the major difference between intension and extension in a database: Intension: Intension or popularly known as database schema is used to define the description of the database and is specified during the design of the database and mostly remains unchanged.\nExtension: Extension on the other hand is the measure of the number of tuples present in the database at any given point in time. The extension of a database is also referred to as the snapshot of the database and its value keeps changing as and when the tuples are created, updated, or destroyed in a database. Intension: Intension or popularly known as database schema is used to define the description of the database and is specified during the design of the database and mostly remains unchanged. Intension: Extension: Extension on the other hand is the measure of the number of tuples present in the database at any given point in time. The extension of a database is also referred to as the snapshot of the database and its value keeps changing as and when the tuples are created, updated, or destroyed in a database. Extension:",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "6. Explain different types of relationships amongst tables in a DBMS.",
        "answer": "Following are different types of relationship amongst tables in a DBMS system: One to One Relationship:  This type of relationship is applied when a particular row in table X is linked to a singular row in table Y. One to One Relationship:  This type of relationship is applied when a particular row in table X is linked to a singular row in table Y. One to One Relationship:   One to Many Relationship: This type of relationship is applied when a single row in table X is related to many rows in table Y. One to Many Relationship: This type of relationship is applied when a single row in table X is related to many rows in table Y. One to Many Relationship:   Many to Many Relationship: This type of relationship is applied when multiple rows in table X can be linked to multiple rows in table Y. Many to Many Relationship: This type of relationship is applied when multiple rows in table X can be linked to multiple rows in table Y. Many to Many Relationship:   Self Referencing Relationship: This type of relationship is applied when a particular row in table X is associated with the same table. Self Referencing Relationship: This type of relationship is applied when a particular row in table X is associated with the same table. Self Referencing Relationship:  ",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "7. Explain different levels of data abstraction in a DBMS.",
        "answer": "The process of hiding irrelevant details from users is known as data abstraction. Data abstraction can be divided into 3 levels:   Physical Level:  it is the lowest level and is managed by DBMS. This level consists of data storage descriptions and the details of this level are typically hidden from system admins, developers, and users.\nConceptual or Logical level:  it is the level on which developers and system admins work and it determines what data is stored in the database and what is the relationship between the data points.\nExternal or View level: it is the level that describes only part of the database and hides the details of the table schema and its physical storage from the users. The result of a query is an example of View level data abstraction.  A view is a virtual table created by selecting fields from one or more tables present in the database. Physical Level:  it is the lowest level and is managed by DBMS. This level consists of data storage descriptions and the details of this level are typically hidden from system admins, developers, and users. Physical Level: Conceptual or Logical level:  it is the level on which developers and system admins work and it determines what data is stored in the database and what is the relationship between the data points. Conceptual or Logical level: External or View level: it is the level that describes only part of the database and hides the details of the table schema and its physical storage from the users. The result of a query is an example of View level data abstraction.  A view is a virtual table created by selecting fields from one or more tables present in the database. External or View level:",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "8. What is Data Warehousing?",
        "answer": "The process of collecting, extracting, transforming, and loading data from multiple sources and storing them in one database is known as data warehousing. A data warehouse can be considered as a central repository where data flows from transactional systems and other relational databases and is used for data analytics. A data warehouse comprises a wide variety of an organization’s historical data that supports the decision-making process in an organization. data warehousing data warehousing  ",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "1. Explain the difference between a 2-tier and 3-tier architecture in a DBMS.",
        "answer": "The 2-tier architecture refers to the client-server architecture in which applications at the client end directly communicate with the database at the server end without any middleware involved.\nExample – Contact Management System created using MS-Access or Railway Reservation System, etc. 2-tier architecture  Example   The above picture represents a 2-tier architecture in a DBMS. The above picture represents a 2-tier architecture in a DBMS. The above picture represents a 2-tier architecture in a DBMS. The above picture represents a 2-tier architecture in a DBMS. The 3-tier architecture contains another layer between the client and the server to provide GUI to the users and make the system much more secure and accessible. In this type of architecture, the application present on the client end interacts with an application on the server end which further communicates with the database system. 3-tier architecture Example – Designing registration form which contains a text box, label, button or a large website on the Internet, etc. Example   The above picture represents a 3-tier architecture in a DBMS. The above picture represents a 3-tier architecture in a DBMS. The above picture represents a 3-tier architecture in a DBMS. The above picture represents a 3-tier architecture in a DBMS. Recommended Tutorials: Recommended Tutorials: Recommended Tutorials: Recommended Tutorials: DBMS MCQ with Answers\nDBMS Architecture\nTop Applications of DBMS\nSQL Interview Questions\nSQL Server Interview Questions\nSQL Queries Interview Questions\nMySQL Interview Questions\nMongoDB Interview Questions\nPL SQL Interview Questions\nDatabase Testing Interview Questions\nFile System vs DBMS\nInterview Preparation Guide DBMS MCQ with Answers DBMS MCQ with Answers DBMS Architecture DBMS Architecture Top Applications of DBMS Top Applications of DBMS SQL Interview Questions SQL Interview Questions SQL Server Interview Questions SQL Server Interview Questions SQL Queries Interview Questions SQL Queries Interview Questions MySQL Interview Questions MySQL Interview Questions MongoDB Interview Questions MongoDB Interview Questions PL SQL Interview Questions PL SQL Interview Questions Database Testing Interview Questions Database Testing Interview Questions File System vs DBMS File System vs DBMS Interview Preparation Guide Interview Preparation Guide",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "2. Explain different types of keys in a database.",
        "answer": "There are mainly 7 types of keys in a database: Candidate Key: The candidate key represents a set of properties that can uniquely identify a table. Each table may have multiple candidate keys. One key amongst all candidate keys can be chosen as a primary key. In the below example since studentId and firstName can be considered as a Candidate Key since they can uniquely identify every tuple.\nSuper Key: The super key defines a set of attributes that can uniquely identify a tuple. Candidate key and primary key are subsets of the super key, in other words, the super key is their superset. Candidate Key: The candidate key represents a set of properties that can uniquely identify a table. Each table may have multiple candidate keys. One key amongst all candidate keys can be chosen as a primary key. In the below example since studentId and firstName can be considered as a Candidate Key since they can uniquely identify every tuple. Candidate Key: Super Key: The super key defines a set of attributes that can uniquely identify a tuple. Candidate key and primary key are subsets of the super key, in other words, the super key is their superset. Super Key:   Primary Key: The primary key defines a set of attributes that are used to uniquely identify every tuple. In the below example studentId and firstName are candidate keys and any one of them can be chosen as a Primary Key. In the given example studentId is chosen as the primary key for the student table.\nUnique Key: The unique key is very similar to the primary key except that primary keys don’t allow NULL values in the column but unique keys allow them. So essentially unique keys are primary keys with NULL values.\nAlternate Key: All the candidate keys which are not chosen as primary keys are considered as alternate Keys. In the below example, firstname and lastname are alternate keys in the database.\nForeign Key:  The foreign key defines an attribute that can only take the values present in one table common to the attribute present in another table. In the below example courseId from the Student table is a foreign key to the Course table, as both, the tables contain courseId as one of their attributes.\nComposite Key:  A composite key refers to a combination of two or more columns that can uniquely identify each tuple in a table. In the below example the studentId and firstname can be grouped to uniquely identify every tuple in the table. Primary Key: The primary key defines a set of attributes that are used to uniquely identify every tuple. In the below example studentId and firstName are candidate keys and any one of them can be chosen as a Primary Key. In the given example studentId is chosen as the primary key for the student table. Primary Key: Unique Key: The unique key is very similar to the primary key except that primary keys don’t allow NULL values in the column but unique keys allow them. So essentially unique keys are primary keys with NULL values. Unique Key: Alternate Key: All the candidate keys which are not chosen as primary keys are considered as alternate Keys. In the below example, firstname and lastname are alternate keys in the database. Alternate Key: Foreign Key:  The foreign key defines an attribute that can only take the values present in one table common to the attribute present in another table. In the below example courseId from the Student table is a foreign key to the Course table, as both, the tables contain courseId as one of their attributes. Foreign Key: Composite Key:  A composite key refers to a combination of two or more columns that can uniquely identify each tuple in a table. In the below example the studentId and firstname can be grouped to uniquely identify every tuple in the table. Composite Key:  ",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "3. Explain different types of Normalization forms in a DBMS.",
        "answer": "Following are the major normalization forms in a DBMS:     Considering the above Table-1 as the reference example for understanding different normalization forms. Considering the above Table-1 as the reference example for understanding different normalization forms. Considering the above Table-1 as the reference example for understanding different normalization forms. 1NF: It is known as the first normal form and is the simplest type of normalization that you can implement in a database. A table to be in its first normal form should satisfy the following conditions:\nEvery column must have a single value and should be atomic.\nDuplicate columns from the same table should be removed.\nSeparate tables should be created for each group of related data and each row should be identified with a unique column. 1NF: It is known as the first normal form and is the simplest type of normalization that you can implement in a database. A table to be in its first normal form should satisfy the following conditions:\nEvery column must have a single value and should be atomic.\nDuplicate columns from the same table should be removed.\nSeparate tables should be created for each group of related data and each row should be identified with a unique column. Every column must have a single value and should be atomic.\nDuplicate columns from the same table should be removed.\nSeparate tables should be created for each group of related data and each row should be identified with a unique column. Every column must have a single value and should be atomic. Duplicate columns from the same table should be removed. Separate tables should be created for each group of related data and each row should be identified with a unique column.   Table-1 converted to 1NF form Table-1 converted to 1NF form Table-1 converted to 1NF form Table-1 converted to 1NF form 2NF: It is known as the second normal form. A table to be in its second normal form should satisfy the following conditions:\nThe table should be in its 1NF i.e. satisfy all the conditions of 1NF.\nEvery non-prime attribute of the table should be fully functionally dependent on the primary key i.e. every non-key attribute should be dependent on the primary key in such a way that if any key element is deleted then even the non_key element will be saved in the database. 2NF: It is known as the second normal form. A table to be in its second normal form should satisfy the following conditions:\nThe table should be in its 1NF i.e. satisfy all the conditions of 1NF.\nEvery non-prime attribute of the table should be fully functionally dependent on the primary key i.e. every non-key attribute should be dependent on the primary key in such a way that if any key element is deleted then even the non_key element will be saved in the database. 2NF: The table should be in its 1NF i.e. satisfy all the conditions of 1NF.\nEvery non-prime attribute of the table should be fully functionally dependent on the primary key i.e. every non-key attribute should be dependent on the primary key in such a way that if any key element is deleted then even the non_key element will be saved in the database. The table should be in its 1NF i.e. satisfy all the conditions of 1NF. Every non-prime attribute of the table should be fully functionally dependent on the primary key i.e. every non-key attribute should be dependent on the primary key in such a way that if any key element is deleted then even the non_key element will be saved in the database.     Breaking Table-1 into 2 different tables to move it to 2NF. Breaking Table-1 into 2 different tables to move it to 2NF. Breaking Table-1 into 2 different tables to move it to 2NF. Breaking Table-1 into 2 different tables to move it to 2NF. 3NF: It is known as the third normal form. A table to be in its third normal form should satisfy the following conditions:\nThe table should be in its 2NF i.e. satisfy all the conditions of 2NF.\nThere is no transitive functional dependency of one attribute on any attribute in the same table. 3NF: It is known as the third normal form. A table to be in its third normal form should satisfy the following conditions:\nThe table should be in its 2NF i.e. satisfy all the conditions of 2NF.\nThere is no transitive functional dependency of one attribute on any attribute in the same table. The table should be in its 2NF i.e. satisfy all the conditions of 2NF.\nThere is no transitive functional dependency of one attribute on any attribute in the same table. The table should be in its 2NF i.e. satisfy all the conditions of 2NF. There is no transitive functional dependency of one attribute on any attribute in the same table.       Breaking Table-1 into 3 different tables to move it to 3NF. Breaking Table-1 into 3 different tables to move it to 3NF. Breaking Table-1 into 3 different tables to move it to 3NF. Breaking Table-1 into 3 different tables to move it to 3NF. BCNF: BCNF stands for Boyce-Codd Normal Form and is an advanced form of 3NF. It is also referred to as 3.5NF for the same reason. A table to be in its BCNF normal form should satisfy the following conditions:\nThe table should be in its 3NF i.e. satisfy all the conditions of 3NF.\nFor every functional dependency of any attribute A on B\n(A->B), A should be the super key of the table. It simply implies that A can’t be a non-prime attribute if B is a prime attribute. BCNF: BCNF stands for Boyce-Codd Normal Form and is an advanced form of 3NF. It is also referred to as 3.5NF for the same reason. A table to be in its BCNF normal form should satisfy the following conditions:\nThe table should be in its 3NF i.e. satisfy all the conditions of 3NF.\nFor every functional dependency of any attribute A on B\n(A->B), A should be the super key of the table. It simply implies that A can’t be a non-prime attribute if B is a prime attribute. BCNF: Boyce-Codd Normal Form The table should be in its 3NF i.e. satisfy all the conditions of 3NF.\nFor every functional dependency of any attribute A on B\n(A->B), A should be the super key of the table. It simply implies that A can’t be a non-prime attribute if B is a prime attribute. The table should be in its 3NF i.e. satisfy all the conditions of 3NF. For every functional dependency of any attribute A on B\n(A->B), A should be the super key of the table. It simply implies that A can’t be a non-prime attribute if B is a prime attribute. ",
        "reference": "interviewbit.com",
        "role": "dbms"
    },
    {
        "question": "1) What is DBMS?",
        "answer": "DBMS is a collection of programs that facilitates users to create and maintain a database. In other words, DBMS provides us an interface or tool for performing different operations such as the creation of a database, inserting data into it, deleting data from it, updating the data, etc. DBMS is a software in which data is stored in a more secure way as compared to the file-based system. Using DBMS, we can overcome many problems such as- data redundancy, data inconsistency, easy access, more organized and understandable, and so on. There is the name of some popular Database Management System- MySQL, Oracle, SQL Server, Amazon simple DB (Cloud-based), etc.\n\nWorking of DBMS is defined in the figure below.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "2) What is a database?",
        "answer": "A Database is a logical, consistent and organized collection of data that it can easily be accessed, managed and updated. Databases, also known as electronic databases are structured to provide the facility of creation, insertion, updating of the data efficiently and are stored in the form of a file or set of files, on the magnetic disk, tapes and another sort of secondary devices. Database mostly consists of the objects (tables), and tables include of the records and fields. Fields are the basic units of data storage, which contain the information about a particular aspect or attribute of the entity described by the database. DBMS is used for extraction of data from the database in the form of the queries.\nFor more information: Click here",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "3) What is a database system?",
        "answer": "The collection of database and DBMS software together is known as a database system. Through the database system, we can perform many activities such as-\nThe data can be stored in the database with ease, and there are no issues of data redundancy and data inconsistency.\nThe data will be extracted from the database using DBMS software whenever required. So, the combination of database and DBMS software enables one to store, retrieve and access data with considerate accuracy and security.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "4) What are the advantages of DBMS?",
        "answer": "ADVERTISEMENT\nADVERTISEMENT\nRedundancy control\nRestriction for unauthorized access\nProvides multiple user interfaces\nProvides backup and recovery\nEnforces integrity constraints\nEnsure data consistency\nEasy accessibility\nEasy data extraction and data processing due to the use of queries\nFor more information: Click here",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "5) What is a checkpoint in DBMS?",
        "answer": "The Checkpoint is a type of mechanism where all the previous logs are removed from the system and permanently stored in the storage disk.\nThere are two ways which can help the DBMS in recovering and maintaining the ACID properties, and they are- maintaining the log of each transaction and maintaining shadow pages. So, when it comes to log based recovery system, checkpoints come into existence. Checkpoints are those points to which the database engine can recover after a crash as a specified minimal point from where the transaction log record can be used to recover all the committed data up to the point of the crash.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "6) When does checkpoint occur in DBMS?",
        "answer": "A checkpoint is like a snapshot of the DBMS state. Using checkpoints, the DBMS can reduce the amount of work to be done during a restart in the event of subsequent crashes. Checkpoints are used for the recovery of the database after the system crash. Checkpoints are used in the log-based recovery system. When due to a system crash we need to restart the system then at that point we use checkpoints. So that, we don't have to perform the transactions from the very starting.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "7) What do you mean by transparent DBMS?",
        "answer": "The transparent DBMS is a type of DBMS which keeps its physical structure hidden from users. Physical structure or physical storage structure implies to the memory manager of the DBMS, and it describes how the data stored on disk.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "8) What are the unary operations in Relational Algebra?",
        "answer": "PROJECTION and SELECTION are the unary operations in relational algebra. Unary operations are those operations which use single operands. Unary operations are SELECTION, PROJECTION, and RENAME.\nAs in SELECTION relational operators are used for example - =,<=,>=, etc.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "9) What is RDBMS?",
        "answer": "RDBMS stands for Relational Database Management Systems. It is used to maintain the data records and indices in tables. RDBMS is the form of DBMS which uses the structure to identify and access data concerning the other piece of data in the database. RDBMS is the system that enables you to perform different operations such as- update, insert, delete, manipulate and administer a relational database with minimal difficulties. Most of the time RDBMS use SQL language because it is easily understandable and is used for often.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "10) How many types of database languages are?",
        "answer": "There are four types of database languages:\nData Definition Language (DDL) e.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc. All these commands are used for updating the data that?s why they are known as Data Definition Language.\nData Manipulation Language (DML) e.g., SELECT, UPDATE, INSERT, DELETE, etc. These commands are used for the manipulation of already updated data that's why they are the part of Data Manipulation Language.\nDATA Control Language (DCL) e.g., GRANT and REVOKE. These commands are used for giving and removing the user access on the database. So, they are the part of Data Control Language.\nTransaction Control Language (TCL) e.g., COMMIT, ROLLBACK, and SAVEPOINT. These are the commands used for managing transactions in the database. TCL is used for managing the changes made by DML.\nDatabase language implies the queries that are used for the update, modify and manipulate the data.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "11) What do you understand by Data Model?",
        "answer": "The Data model is specified as a collection of conceptual tools for describing data, data relationships, data semantics and constraints. These models are used to describe the relationship between the entities and their attributes.\nThere is the number of data models:\nHierarchical data model\nnetwork model\nrelational model\nEntity-Relationship model and so on.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "",
        "answer": "A Relation Schema is specified as a set of attributes. It is also known as table schema. It defines what the name of the table is. Relation schema is known as the blueprint with the help of which we can explain that how the data is organized into tables. This blueprint contains no data.\nA relation is specified as a set of tuples. A relation is the set of related attributes with identifying key attributes\n\n\nSee this example:\nLet r be the relation which contains set tuples (t1, t2, t3, ..., tn). Each tuple is an ordered list of n-values t=(v1,v2, ...., vn).",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "13) What is a degree of Relation?",
        "answer": "The degree of relation is a number of attribute of its relation schema. A degree of relation is also known as Cardinality it is defined as the number of occurrence of one entity which is connected to the number of occurrence of other entity. There are three degree of relation they are one-to-one(1:1), one-to-many(1:M), many-to-one(M:M).",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "14) What is the Relationship?",
        "answer": "The Relationship is defined as an association among two or more entities. There are three type of relationships in DBMS-\nOne-To-One: Here one record of any object can be related to one record of another object.\nOne-To-Many (many-to-one): Here one record of any object can be related to many records of other object and vice versa.\n\nMany-to-many: Here more than one records of an object can be related to n number of records of another object.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "15) What are the disadvantages of file processing systems?",
        "answer": "Inconsistent\nNot secure\nData redundancy\nDifficult in accessing data\nData isolation\nData integrity\nConcurrent access is not possible\nLimited data sharing\nAtomicity problem",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "16) What is data abstraction in DBMS?",
        "answer": "Data abstraction in DBMS is a process of hiding irrelevant details from users. Because database systems are made of complex data structures so, it makes accessible the user interaction with the database.\nFor example: We know that most of the users prefer those systems which have a simple GUI that means no complex processing. So, to keep the user tuned and for making the access to the data easy, it is necessary to do data abstraction. In addition to it, data abstraction divides the system in different layers to make the work specified and well defined.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "17) What are the three levels of data abstraction?",
        "answer": "Following are three levels of data abstraction:\nPhysical level: It is the lowest level of abstraction. It describes how data are stored.\nLogical level: It is the next higher level of abstraction. It describes what data are stored in the database and what the relationship among those data is.\nView level: It is the highest level of data abstraction. It describes only part of the entire database.\nFor example- User interacts with the system using the GUI and fill the required details, but the user doesn't have any idea how the data is being used. So, the abstraction level is entirely high in VIEW LEVEL.\nThen, the next level is for PROGRAMMERS as in this level the fields and records are visible and the programmers have the knowledge of this layer. So, the level of abstraction here is a little low in VIEW LEVEL.\nAnd lastly, physical level in which storage blocks are described.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "18) What is DDL (Data Definition Language)?",
        "answer": "Data Definition Language (DDL) is a standard for commands which defines the different structures in a database. Most commonly DDL statements are CREATE, ALTER, and DROP. These commands are used for updating data into the database.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "19) What is DML (Data Manipulation Language)?",
        "answer": "DData Manipulation Language (DML) is a language that enables the user to access or manipulate data as organized by the appropriate data model. For example- SELECT, UPDATE, INSERT, DELETE.\nThere is two type of DML:\nProcedural DML or Low level DML: It requires a user to specify what data are needed and how to get those data.\nNon-Procedural DML or High level DML:It requires a user to specify what data are needed without specifying how to get those data.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "",
        "answer": "The DML Compiler translates DML statements in a query language that the query evaluation engine can understand. DML Compiler is required because the DML is the family of syntax element which is very similar to the other programming language which requires compilation. So, it is essential to compile the code in the language which query evaluation engine can understand and then work on those queries with proper output.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "21) What is Relational Algebra?",
        "answer": "Relational Algebra is a Procedural Query Language which contains a set of operations that take one or two relations as input and produce a new relationship. Relational algebra is the basic set of operations for the relational model. The decisive point of relational algebra is that it is similar to the algebra which operates on the number.\nThere are few fundamental operations of relational algebra:\nselect\nproject\nset difference\nunion\nrename,etc.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "22) What is Relational Calculus?",
        "answer": "Relational Calculus is a Non-procedural Query Language which uses mathematical predicate calculus instead of algebra. Relational calculus doesn't work on mathematics fundamentals such as algebra, differential, integration, etc. That's why it is also known as predicate calculus.\nThere is two type of relational calculus:\nTuple relational calculus\nDomain relational calculus",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "23) What do you understand by query optimization?",
        "answer": "The term query optimization specifies an efficient execution plan for evaluating a query that has the least estimated cost. The concept of query optimization came into the frame when there were a number of methods, and algorithms existed for the same task then the question arose that which one is more efficient and the process of determining the efficient way is known as query optimization.\nThere are many benefits of query optimization:\nIt reduces the time and space complexity.\nMore queries can be performed as due to optimization every query comparatively takes less time.\nUser satisfaction as it will provide output fast",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "24) What do you mean by durability in DBMS?",
        "answer": "Once the DBMS informs the user that a transaction has completed successfully, its effect should persist even if the system crashes before all its changes are reflected on disk. This property is called durability. Durability ensures that once the transaction is committed into the database, it will be stored in the non-volatile memory and after that system failure cannot affect that data anymore.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "25) What is normalization?",
        "answer": "Normalization is a process of analysing the given relation schemas according to their functional dependencies. It is used to minimize redundancy and also used to minimize insertion, deletion and update distractions. Normalization is considered as an essential process as it is used to avoid data redundancy, insertion anomaly, updation anomaly, deletion anomaly.\nThere most commonly used normal forms are:\nFirst Normal Form(1NF)\nSecond Normal Form(2NF)\nThird Normal Form(3NF)\nBoyce & Codd Normal Form(BCNF)",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "26) What is Denormalization?",
        "answer": "Denormalization is the process of boosting up database performance and adding of redundant data which helps to get rid of complex data. Denormalization is a part of database optimization technique. This process is used to avoid the use of complex and costly joins. Denormalization doesn't refer to the thought of not to normalize instead of that denormalization takes place after normalization. In this process, firstly the redundancy of the data will be removed using normalization process than through denormalization process we will add redundant data as per the requirement so that we can easily avoid the costly joins.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "27) What is functional Dependency?",
        "answer": "Functional Dependency is the starting point of normalization. It exists when a relation between two attributes allow you to determine the corresponding attribute's value uniquely. The functional dependency is also known as database dependency and defines as the relationship which occurs when one attribute in a relation uniquely determines another attribute. It is written as A->B which means B is functionally dependent on A.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "28) What is the E-R model?",
        "answer": "E-R model is a short name for the Entity-Relationship model. This model is based on the real world. It contains necessary objects (known as entities) and the relationship among these objects. Here the primary objects are the entity, attribute of that entity, relationship set, an attribute of that relationship set can be mapped in the form of E-R diagram.\nIn E-R diagram, entities are represented by rectangles, relationships are represented by diamonds, attributes are the characteristics of entities and represented by ellipses, and data flow is represented through a straight line.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "29) What is an entity?",
        "answer": "The Entity is a set of attributes in a database. An entity can be a real-world object which physically exists in this world. All the entities have their attribute which in the real world considered as the characteristics of the object.\nFor example: In the employee database of a company, the employee, department, and the designation can be considered as the entities. These entities have some characteristics which will be the attributes of the corresponding entity.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "30) What is an Entity type?",
        "answer": "An entity type is specified as a collection of entities, having the same attributes. Entity type typically corresponds to one or several related tables in the database. A characteristic or trait which defines or uniquely identifies the entity is called entity type.\nFor example, a student has student_id, department, and course as its characteristics.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "31) What is an Entity set?",
        "answer": "The entity set specifies the collection of all entities of a particular entity type in the database. An entity set is known as the set of all the entities which share the same properties.\nFor example, a set of people, a set of students, a set of companies, etc.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "32) What is an Extension of entity type?",
        "answer": "An extension of an entity type is specified as a collection of entities of a particular entity type that are grouped into an entity set.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "33) What is Weak Entity set?",
        "answer": "An entity set that doesn't have sufficient attributes to form a primary key is referred to as a weak entity set. The member of a weak entity set is known as a subordinate entity. Weak entity set does not have a primary key, but we need a mean to differentiate among all those entries in the entity set that depend on one particular strong entity set.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "34) What is an attribute?",
        "answer": "An attribute refers to a database component. It is used to describe the property of an entity. An attribute can be defined as the characteristics of the entity. Entities can be uniquely identified using the attributes. Attributes represent the instances in the row of the database.\nFor example: If a student is an entity in the table then age will be the attribute of that student.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "35) What are the integrity rules in DBMS?",
        "answer": "Data integrity is one significant aspect while maintaining the database. So, data integrity is enforced in the database system by imposing a series of rules. Those set of integrity is known as the integrity rules.\nThere are two integrity rules in DBMS:\nEntity Integrity : It specifies that \"Primary key cannot have a NULL value.\"\nReferential Integrity: It specifies that \"Foreign Key can be either a NULL value or should be the Primary Key value of other relation",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "36) What do you mean by extension and intension?",
        "answer": "Extension: The Extension is the number of tuples present in a table at any instance. It changes as the tuples are created, updated and destroyed. The actual data in the database change quite frequently. So, the data in the database at a particular moment in time is known as extension or database state or snapshot. It is time dependent.\n\nIntension: Intension is also known as Data Schema and defined as the description of the database, which is specified during database design and is expected to remain unchanged. The Intension is a constant value that gives the name, structure of tables and the constraints laid on it.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "37) What is System R? How many of its two major subsystems?",
        "answer": "System R was designed and developed from 1974 to 1979 at IBM San Jose Research Centre. System R is the first implementation of SQL, which is the standard relational data query language, and it was also the first to demonstrate that RDBMS could provide better transaction processing performance. It is a prototype which is formed to show that it is possible to build a Relational System that can be used in a real-life environment to solve real-life problems.\nFollowing are two major subsystems of System R:\nResearch Storage\nSystem Relational Data System",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "38) What is Data Independence?",
        "answer": "Data independence specifies that \"the application is independent of the storage structure and access strategy of data.\" It makes you able to modify the schema definition at one level without altering the schema definition in the next higher level.\nIt makes you able to modify the schema definition in one level should not affect the schema definition in the next higher level.\nThere are two types of Data Independence:\nPhysical Data Independence: Physical data is the data stored in the database. It is in the bit-format. Modification in physical level should not affect the logical level.\nFor example: If we want to manipulate the data inside any table that should not change the format of the table.\nLogical Data Independence: Logical data in the data about the database. It basically defines the structure. Such as tables stored in the database. Modification in logical level should not affect the view level.\nFor example: If we need to modify the format of any table, that modification should not affect the data inside it.\nNOTE: Logical Data Independence is more difficult to achieve.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "39) What are the three levels of data abstraction?",
        "answer": "Following are three levels of data abstraction:\nPhysical level: It is the lowest level of abstraction. It describes how data are stored.\nLogical level: It is the next higher level of abstraction. It describes what data are stored in the database and what relationship among those data.\nView level: It is the highest level of data abstraction. It describes only part of the entire database.\nFor example- User interact with the system using the GUI and fill the required details, but the user doesn't have any idea how the data is being used. So, the abstraction level is absolutely high in VIEW LEVEL.\nThen, the next level is for PROGRAMMERS as in this level the fields and records are visible and the programmer has the knowledge of this layer. So, the level of abstraction here is a little low in VIEW LEVEL.\nAnd lastly, physical level in which storage blocks are described.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "40) What is Join?",
        "answer": "The Join operation is one of the most useful activities in relational algebra. It is most commonly used way to combine information from two or more relations. A Join is always performed on the basis of the same or related column. Most complex queries of SQL involve JOIN command.\nThere are following types of join:\nInner joins: Inner join is of 3 categories. They are:\nTheta join\nNatural join\nEqui join\nOuter joins: Outer join have three types. They are:\nLeft outer join\nRight outer join\nFull outer join",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "41) What is 1NF?",
        "answer": "1NF is the First Normal Form. It is the simplest type of normalization that you can implement in a database. The primary objectives of 1NF are to:\nEvery column must have atomic (single value)\nTo Remove duplicate columns from the same table\nCreate separate tables for each group of related data and identify each row with a unique column",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "42) What is 2NF?",
        "answer": "2NF is the Second Normal Form. A table is said to be 2NF if it follows the following conditions:\nThe table is in 1NF, i.e., firstly it is necessary that the table should follow the rules of 1NF.\nEvery non-prime attribute is fully functionally dependent on the primary key, i.e., every non-key attribute should be dependent on the primary key in such a way that if any key element is deleted, then even the non_key element will still be saved in the database.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "43) What is 3NF?",
        "answer": "3NF stands for Third Normal Form. A database is called in 3NF if it satisfies the following conditions:\nIt is in second normal form.\nThere is no transitive functional dependency.\nFor example: X->Z\nWhere:\nX->Y\nY does not -> X\nY->Z so, X->Z",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "44) What is BCNF?",
        "answer": "BCMF stands for Boyce-Codd Normal Form. It is an advanced version of 3NF, so it is also referred to as 3.5NF. BCNF is stricter than 3NF.\nA table complies with BCNF if it satisfies the following conditions:\nIt is in 3NF.\nFor every functional dependency X->Y, X should be the super key of the table. It merely means that X cannot be a non-prime attribute if Y is a prime attribute.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "45) Explain ACID properties",
        "answer": "ACID properties are some basic rules, which has to be satisfied by every transaction to preserve the integrity. These properties and rules are:\nATOMICITY: Atomicity is more generally known as ?all or nothing rule.' Which implies all are considered as one unit, and they either run to completion or not executed at all.\nCONSISTENCY: This property refers to the uniformity of the data. Consistency implies that the database is consistent before and after the transaction.\nISOLATION: This property states that the number of the transaction can be executed concurrently without leading to the inconsistency of the database state.\nDURABILITY: This property ensures that once the transaction is committed it will be stored in the non-volatile memory and system crash can also not affect it anymore.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "46) What is stored procedure?",
        "answer": "A stored procedure is a group of SQL statements that have been created and stored in the database. The stored procedure increases the reusability as here the code or the procedure is stored into the system and used again and again that makes the work easy, takes less time in processing and decreases the complexity of the system. So, if you have a code which you need to use again and again then save that code and call that code whenever it is required.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "47) What is the difference between a DELETE command and TRUNCATE command?",
        "answer": "DELETE command: DELETE command is used to delete rows from a table based on the condition that we provide in a WHERE clause.\nDELETE command delete only those rows which are specified with the WHERE clause.\nDELETE command can be rolled back.\nDELETE command maintain a log, that's why it is slow.\nDELETE use row lock while performing DELETE function.\nTRUNCATE command: TRUNCATE command is used to remove all rows (complete data) from a table. It is similar to the DELETE command with no WHERE clause.\nThe TRUNCATE command removes all the rows from the table.\nThe TRUNCATE command cannot be rolled back.\nThe TRUNCATE command doesn't maintain a log. That's why it is fast.\nTRUNCATE use table log while performing the TRUNCATE function.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "48) What is 2-Tier architecture?",
        "answer": "The 2-Tier architecture is the same as basic client-server. In the two-tier architecture, applications on the client end can directly communicate with the database at the server side.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "49) What is the 3-Tier architecture?",
        "answer": "The 3-Tier architecture contains another layer between the client and server. Introduction of 3-tier architecture is for the ease of the users as it provides the GUI, which, make the system secure and much more accessible. In this architecture, the application on the client-end interacts with an application on the server which further communicates with the database system.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "50) How do you communicate with an RDBMS?",
        "answer": "You have to use Structured Query Language (SQL) to communicate with the RDBMS. Using queries of SQL, we can give the input to the database and then after processing of the queries database will provide us the required output.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "51) What is the difference between a shared lock and exclusive lock?",
        "answer": "Shared lock: Shared lock is required for reading a data item. In the shared lock, many transactions may hold a lock on the same data item. When more than one transaction is allowed to read the data items then that is known as the shared lock.\nExclusive lock: When any transaction is about to perform the write operation, then the lock on the data item is an exclusive lock. Because, if we allow more than one transaction then that will lead to the inconsistency in the database.",
        "reference": "javatpoint.com",
        "role": "dbms"
    },
    {
        "question": "52) Describe the types of keys?",
        "answer": "There are following types of keys:\nPrimary key: The Primary key is an attribute in a table that can uniquely identify each record in a table. It is compulsory for every table.\nCandidate key: The Candidate key is an attribute or set of an attribute which can uniquely identify a tuple. The Primary key can be selected from these attributes.\nSuper key: The Super key is a set of attributes which can uniquely identify a tuple. Super key is a superset of the candidate key.\nForeign key: The Foreign key is a primary key from one table, which has a relationship with another table. It acts as a cross-reference between tables.",
        "reference": "javatpoint.com",
        "role": "dbms"
    }
]