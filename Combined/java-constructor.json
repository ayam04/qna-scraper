[
    {
        "question": "1) Define Constructor?",
        "answer": "Java constructor is a unique method that initializes the objects, which is called when an instance of the class is created. The memory for the object is allocated when we call the constructor.\nBasically, a constructor is a block of code. When we create an object of the class using the new() keyword, at least one constructor is called, and it initializes the objects and allocates memory to them.\nIf we do not specify any constructor, it will call the default constructor of the class. However, it is not necessary to specify an explicit constructor because the Java compiler provides a default constructor for every Java class.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "2) How many types of Constructors are in Java?",
        "answer": "There are two types of constructors in Java:\nDefault Constructor (Non-parameterized Constructor)\nParameterized Constructor\nThe syntax for the default constructor is as follows:\n<class name>() {}  \nExample:\nEmployee()  \n{  \n//some code  \n}  \nThe syntax for the parameterized constructor is as follows:\n<class name>(arg1, arg2) {}  \nExample:\nADVERTISEMENT\nEmployee(int i, String n)  \n{      \n    id = i;    \n    name = n;    \n}",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "3) Do we have a copy constructor in Java?",
        "answer": "Unlike C++, there is no explicit copy constructor in Java. However, we can achieve the functionality of a copy constructor in Java by copying the values from one object to another, just like the copy constructor.\nThe following are some methods to copy the values from one object to another:\nADVERTISEMENT\nBy constructor\nBy assigning the values of one object to another\nBy clone() method of Object class",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "",
        "answer": "Below Java program copies the values from one object to another object:\nConstructorDemo.java:\nclass ConstructorDemo{    \n    int id;    \n    String name;    \n    //constructor to initialize integer and string    \n    ConstructorDemo(int i,String n){    \n    id = i;    \n    name = n;    \n    }    \n    //constructor to initialize another object    \n    ConstructorDemo(ConstructorDemo c){    \n    id = c.id;    \n    name =c.name;    \n    }    \n    void display(){System.out.println(id+\" \"+name);}    \n    public static void main(String args[]){    \n        ConstructorDemo c1 = new ConstructorDemo(100,\"Joy\");    \n        ConstructorDemo c2 = new ConstructorDemo(c1);    \n    c1.display();    \n    c2.display();    \n   }    \n}    \nOutput:\n100 Joy\n100 Joy\nIn the above example, we have created two instances of the ConstructorDemo and passed the first object value into the second constructor. This way, we can use a copy constructor in Java.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "5) Is there any method to call a sub-class constructor from a superclass constructor?",
        "answer": "The subclass constructor has its own private data members, so Java does not provide any way to access the sub-class constructor from a super class constructor. However, we can call a superclass constructor from a sub-class constructor by using the super keyword.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "6) Can we have a constructor in the Interface?",
        "answer": "No, we cannot have constructors in the Java interface.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "7) Explain Constructor Chaining?",
        "answer": "Constructor Chaining is a way to call one constructor from another constructor with respect to the current object. It can be achieved in the following two ways:\nFrom base class: We can use the super keyword to call a constructor from the base class.\nWithin the same class: We can call a constructor within the same class by using this() keyword.\nBelow is an example of constructor chaining:\nclass TestSuper  \n{  \n    public TestSuper(int i)  \n    {  \n        System.out.println(\"Super Class Constructor\");  \n    }  \n}  \n   class TestSub extends TestSuper  \n{  \n    public TestSub()  \n    {  \n        this(10);      //Calling same class constructor  \n    }  \n       public TestSub(int i)  \n    {  \n        super(i);      //Calling super class constructor  \n    }  \n}",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "8) What happens if we provide a return type to a constructor?",
        "answer": "If we provide a return type to a constructor, it will function as a general method. But, the compiler will display a warning message, \"This method has a Constructor name\".\nConsider the below example:\npublic class TestConstructor {  \n    int TestConstructor()  \n    {  \n        return 0;  \n    }  \nThe above program will be compiled gracefully, but it displays below warning message:",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "9) What is a private constructor?",
        "answer": "Like methods, we can have the private constructors in Java. To make or create a constructor as private, use the private keyword while declaring it. It can only be accessed within that class.\nThe following are some usage scenarios when we need a private constructor:\nInternal Constructor chaining\nSingleton class design pattern\nBelow is an example of the private constructor:\n\nPrivateConstructor.java:\nclass SingletonDemo {  \n   private SingletonDemo() {  \n      System. out.println(\"In a private constructor\");  \n   }  \n   public static SingletonDemo getObject() {  \n      // we can call this constructor  \n      if (ref == null)  \n         ref = new SingletonDemo();  \n      return ref;  \n   }  \n   private static SingletonDemo ref;  \n}  \npublic class PrivateConstructor {  \n   public static void main(String args[]) {  \n      SingletonDemo sObj = SingletonDemo.getObject();  \n   }  \n}  \nOutput:\nIn a private constructor",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "10) Why constructors in Java cannot be static?",
        "answer": "The constructors cannot be static in Java. When we declare a method as static, it means the method belongs to the class and not to a specific object. But the constructor is always invoked to the reference of objects. So, there is no sense in making a constructor static.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "11) Can we make a constructor final?",
        "answer": "No, we cannot make a constructor final. If we made a constructor final, it would throw a compile-time error \"modifier final not allowed\".",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "12) Can we make a constructor abstract?",
        "answer": "a body, which really makes no sense. It is automatically called at the time of object creation. So, it cannot be a block without a body.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "13) what will happen when a constructor is declared as protected?",
        "answer": "Generally, when we declare a method as protected, other classes can access that method in a different package by using inheritance only. But, when we declare a constructor protected, it behaves slightly differently than a method. The protected constructor can only be accessed by using a super keyword according to Java language standards.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "14) Why constructor name is similar to the class name?",
        "answer": "When we create an object of a class using a new keyword, it should have information about that particular class. That is why the constructor's name must be similar to the class name.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    },
    {
        "question": "15) Why return type is not allowed for the constructor?",
        "answer": "The return type is not allowed in the constructor because if we provide a return type in the constructor, it will act as the normal method. So, to differentiate between constructor and method block, the return type is not allowed in constructors.",
        "reference": "javatpoint.com",
        "role": "java-constructor"
    }
]