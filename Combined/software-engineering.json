[
    {
        "question": "Q1. What do you understand by the term Software Engineering?",
        "answer": "In a nutshell, Software Engineering refers to the domain of computer science that deals with the comprehensive and systematic designing and development of software from scratch. It also deals with optimization, maintenance, operations, and implementation of the proposed software. The professionals who work in this field are called Software Engineers.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q2. What is meant by the term ‘Program’?",
        "answer": "A computer program refers to a set of written instructions for the computer to be executed to complete a task. It is a component of software written by developers or coders using programming languages like C, CPP, Java, Python, and many more. The computer program in its human-readable state is known as a source code. For example, a code is written in CPP programming language to calculate the consecutive Fibonacci number.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q3. State the differences between ‘Software’ and ‘Program’.",
        "answer": "Software Program\nSoftware is a set of different types of programs written by developers to execute a specific task. Programs are the set of instructions written by developers to execute a specific task.\nThe software can be further classified into different categories and have a Graphical User Interface (GUI). The Program cannot be further bifurcated into different categories, and GUI is absent.\nThe time and resources required to develop software are comparatively more than a program.  The time and resources required to develop a program are comparatively less than software. \nSoftware’s scope contains more functionalities and features, and at the same time, the size of the software is huge. The program’s scope contains fewer functionalities and features compared to software, and at the same time, the size of the program is very small.\nThe development process requires planning, resource allocation, and procedures. The development process of a program does not require planning, resource allocation, or procedure.\nExample – Intellipaat’s LMS application. Example – Code for login authentication in the LMS application.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q4. Expand the term “COCOMO” and give its definition.",
        "answer": "The COCOMO (Constructive Cost Model) model was first proposed by Boehm in 1981. It is most commonly used by software engineers at the time of documentation of the proposed software. A COCOMO model is used to predict the efforts required for development, cost estimation, size estimation, and quality of the to-be-delivered software.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q5. What are the different phases in SDLC?",
        "answer": "SDLC (Software Development Life Cycle) is a life cycle model that depicts every procedure needed to move a software product through each stage during its development cycle.\nThe different stages in the Software Development Life Cycle are – \nPlanning\nAnalysis\nDesign \nDevelopment\nTesting\nImplementation\nMaintenance\nEnroll in our Software Engineer course to excel in your career!",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q6. State 5 characteristics of efficient software.",
        "answer": "The top five characteristics of efficient software are: \nReliability\nIntegrity\nAdaptability\nAccuracy\nRobustness",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q7. Define Reverse Engineering.",
        "answer": "Software reverse engineering is the process of determining a product’s design, functional requirements, and configuration through an analysis of its code. It creates a program database and uses this database to produce information. Reverse engineering aims to simplify the maintenance of the software by making the system easy to understand and creating the documentation for the old system\nThe main goals of software reverse engineering are –\nMinimization of code’s complexity\nRecovering lost information\nFinding out about the procedure used for the development\nEnhance data abstraction",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q8. Define Programming Language and Framework with examples.",
        "answer": "Programming language – A programming language refers to the type of computer language that is readable and understandable by both computer systems and humans (developers). It serves as a medium of communication medium between the computer system and the humans (developer). Generally, the programming language is used to write a set of instructions to perform a specific task. \nExamples of programming language – Some of the prominent examples of programming languages are C, CPP, Java, PHP, Python, and many more.\nFramework – A framework is a structure on which you can build software/ a framework is a library of fundamental codes that can be used for various purposes. It is used to make programming in any language easier, at the same time it increases the extendibility of the programming language.  Framework platforms are highly versatile, reusable, and equipped with useful tools that make development more productive.  A variety of software frameworks are available for programmers to choose from to provide the functionality required for various projects. Frameworks are frequently created using well-known programming languages.\nExamples of Framework – React JS, Node JS, Express JS, and many more based on JavaScript.\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q9. What is meant by a feasibility study in SDLC?",
        "answer": "A feasibility study is used to evaluate and analyze how suitable projects and systems are for further development. It evaluates a software product’s potential to benefit a company from a validity analysis or practical perspective. This study is carried out for reasons, including assessing the suitability of a software product in terms of its development, portability, contribution to an organization’s projects, etc.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q10. Comment on the use of different software development models.",
        "answer": "A software project development model is a collection of procedures and methods used in the project’s development. To accomplish the project development objectives, businesses use a variety of software development life cycle models. Depending on the workflow organization strategy used – linear or iterative and the kinds of relationships established between the development team and the client, all SDLC models can be divided into several categories.\nThere are around 50 accepted different types of Software Development Life Cycle Models present in the domain of Software Engineering. But the most commonly used, accepted, and accurate models are listed below – \nAgile\nWaterfall\nIterative\nSpiral\nV-Model\nPrototyping",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q11. Expand the term DFD and explain its usage.",
        "answer": "DFD stands for Data-Flow Diagram. A Data-Flow Diagram is a visual representation of how data moves through a system or a process. It gives details about each entity’s inputs and outputs and the process itself. A Data-Flow Diagram lacks loops, decision rules, and control flow. There are four main components in DFD diagrams, they are an entity, a process, a data store, and a data flow.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q12. Describe Cohesion and Coupling, and state the relationship between them.",
        "answer": "Cohesion – The cohesion of a module serves as a sign of its internal relationships. It is an intra-module idea. There are various degrees of cohesion, but typically, software benefits from high cohesiveness.\nCoupling – Coupling also serves as a symbol for the connections between modules. It is an inter-module idea. Low coupling is preferred for optimized software.\nThe relationship between cohesion and coupling is that higher cohesion tends to lead to lower coupling, and vice versa. This is because when the elements within a module are closely related to each other(high cohesion), they are less likely to rely on elements outside of that module(low coupling).\nLikewise, when the elements within a module are loosely related to each other(low cohesion), they are more likely to depend on elements outside of that module(high coupling).",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q13. What types of maintenance does software go through?",
        "answer": "The Software Development Life Cycle includes software maintenance. Its main objective is to update and alter software applications after delivery to fix bugs and boost performance. A model of the real world exists in software. Wherever real scenarios change, the software must be altered. Software maintenance is a comprehensive operation that involves bug fixes, capability upgrades, replacements or removal of previous features, and optimization.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q14. What is the difference between Reverse Engineering and Software Re-engineering?",
        "answer": "Software Reverse Engineering Software Re-Engineering\nIt refers to the recovery of the implementation, design, and requirement specification of a product after a thorough analysis of the source code. It refers to the process of redesigning the software product or different components of the software product.\nThe main purpose is to deconstruct the application from its source code to know the whereabouts of the implementation, design, and requirement specification.  The main purpose is to optimize the software in such a way that its operational cost is reduced, and performance is enhanced. \nThe process is carried out by the competitors of the organization. The process is only carried out by the owner of the product.\nThe whole process reveals the secrets on which the application is working, the features it has, and the way it is developed. Re-development, re-designing, optimization, and upgradation are the core working principles.\nEnroll in our Software Engineering and Application Development course, and take your career to the next level.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q15. Define Mocks and Stubs.",
        "answer": "Mocks – \nThe objects that store method calls are known as mocks. They are also referred to as dynamic wrappers for dependencies utilized in the tests. \nMocks are used to document and validate how the Java classes interact with one another. \nMocks should be used when you wish to test the sequence in which functions are called.\nStubs – \n“Stub” objects are used to generate test responses by storing and retrieving specified data. \nIn other words, a stub is an object that closely resembles a real object and has the bare minimum of test cases required to pass a test.\nStubs are used when we don’t want to employ objects that would actually return data in a response. \nA stub is the test doubles variant that is the lightest and most static.\nVerification of the system’s current condition during the testing phase. When code is refactored, stubs can aid by reducing the need to write tests from scratch because they do not take order into account.\nTo know about career opportunities in Software Engineering, check out our YouTube video\n\n\nIntermediate Software Engineer Interview Questions and Answers\nLet’s begin our next section with slightly tougher questions asked by recruiters from top MNCs. These questions are frequently asked in the interviews but require more in-depth knowledge of the domain. Read the questions thoroughly to enhance your knowledge.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q16. Which SDLC model is preferred the most? And why?",
        "answer": "Every SDLC model holds its significance in the market, to consider the best multiple parameters. For example, flexibility, investment, development time, and many more. The agile model covers most of the parameters. \nThe agile model is a type of SDLC model that is used for the development of software. Here, the major components of the software are divided into multiple sub-components, and all the components are worked upon at the same time. \nAs this model combines both incremental as well as iterative models, the requirements are constantly evolving during the process of development, which makes the agile model highly flexible at the time of development. \nThe agile model offers quicker development, quality assurance, and maximum yields in minimum investments. \nIn other SDLC models, dedicated planning is required but in the Agile model, no such dedicated planning is required because the requirement specifications are constantly changing.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q17. Define Risk Management and also give some examples.",
        "answer": "At the time of development, a large number of problems, risks, faults, and errors can occur which can derail the whole project. To tackle such issues, a system was adopted by developers known as a Risk Management System. \nRisk management is a type of system that was adopted by developers to manage the issues occurring during the development process. \nThe basic working principle is to identify, address, and eliminate risk. \nBudgetary problems, timeline slippage, technical faults or errors caused by bugs or incorrect coding, and poorly developed products are some of the frequent problems that can occur during the development process and have an impact on the entire development process.\nAll the errors are reported to a product manager who finds all the solutions and delivers the error-free product to the clients/users.\nBroadly there are three types of risks – \nProject Risks\nTechnical Risks\nBusiness Risks\nSome of the common examples of errors that can occur at the time of development are insufficient resource allocation, poor management by the team, and schedule slippage.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q18. Explain Modularization and why it is required.",
        "answer": "In a nutshell, modularization refers to when a product or system is broken up into interchangeable modules. Modularization aims to reduce the number of distinct building components (module variants) required to construct a flexible system that allows the production of various requested configurations. A product’s modularity is a measurement of how changeable it is, or how many different configurations you can create using a specific set of building parts.\nBenefits of modularization\nThe development process is enhanced because when the project is broken into multiple modules, it decreases the need for re-designing.\nCustomer value can be increased if the right configurations are applied by the company at the right time.     \nModularization promotes the advantages of standardization, which lowers the cost of complexity.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q19. How will you conclude that your code is safe and highly optimized?",
        "answer": "While concluding, you need to perform testing on it, which will check that it is passing all test cases. For optimization, multiple parameters have to be checked, namely, code quality, reliability of the product, behavior in real-life scenarios, and utilization of the allocated resources.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q20. What is meant by system designing in software engineering?",
        "answer": "In software engineering, software designing is a process or methodology that is used by system designers to design the system’s architecture, modules, various interfaces, and components. Furthermore, they also deal with the data that will flow through the system. The major tasks performed by system designers are initial designing and pitching, characterization of different entities present in the system, design management, interface creation, based on feedback received making amendments in the system, and many more.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q21. State the demerits of the waterfall model in SDLC.",
        "answer": "The waterfall model is the very first SDLC model produced. It has many advantageous pointers but its replacements were sought because it lacked many parameters. The major issue with the waterfall model is that there is no feedback path, subsequently, it does not work for complex projects or on projects based on an object-oriented approach. \nProgress cannot be measured during the development phase. Once sent for testing, there is no way back if any errors are encountered. The Software Requirements specifications cannot be changed afterward once the project is started.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q22. Explain the scope of the software.",
        "answer": "The scope of the software refers to the features offered by the developed software. Based on this, we can do estimations related to the money spent on the development phase, and the total time taken for the development. The scope covers every aspect of the software to be developed.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q23. State the differences between flowcharts and algorithms, and give three examples of each.",
        "answer": "Flowchart Algorithm\nA flowchart refers to the pictorial diagrams drawn to explain the flow of control. An algorithm refers to the step-by-step approach used to solve a problem statement.\nA flowchart is a graphical representation. It is easy to understand any flowchart. An algorithm is a pseudo-code that can be hard to understand.\nFlowcharts have some norms to follow specifically in context with specified shapes. There are no norms created for algorithms.\nIt is difficult to debug a flowchart. It is easy to debug an algorithm.\nExamples of flowcharts – \n1. Flowchart for administrative services\n2. Flowchart to show the data flow through a loop\n3. Flowchart to show the manufacturing of computer systems\nExamples of algorithms – \n1. Algorithms prepared for searching techniques\n2. Algorithms prepared for sorting techniques\n3. Algorithm to calculate the shortest path between different nodes",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q24. What is OOPS in computer science, and mention all the different concepts in OOPS?",
        "answer": "OOPs (Object-Oriented Programming) is a paradigm in procedural programming that implements the concept of objects. This makes program code faster for execution and increases code reusability. \nDifferent concepts that come under OOPs are –\nPolymorphism – It is the way to process a message in more than one way.\nData Encapsulation – This wraps up the data and associated member functions to work as a single entity.\nData Abstraction – Showing up only the necessary data\nData Hiding – It refers to the hiding of data and associated components of a class.\nInheritance – One class can inherit the features of other classes.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q25. What is meant by polymorphism? State its types and write a pseudo code depicting the concept of polymorphism.",
        "answer": "Polymorphism – Polymorphism is a concept of OOPs. This concept is used to process a single message in more than one way. To understand this, let’s consider person ‘A’ with multiple personality traits. Here, person ‘A’ represents a message, and the multiple traits represent more than one way of behaving.\nThere are two types of polymorphism\nRuntime Polymorphism – Also known as Dynamic Method Dispatch, this type of polymorphism is attained by the concept of Function Overriding. It is used to resolve function calls to an overridden method during runtime.\nCompile-time Polymorphism – This type of polymorphism is achieved through method overloading. It is because of the concept of method overloading where more than one method is allowed for processing at the same time. This happens at the time of compilation which is why it is known as compile-time polymorphism.\nExample – Pseudo code to add two numbers to show the implementation of polymorphism",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q26. Differentiate between Black Box Testing and White Box Testing.",
        "answer": "Black Box Testing White Box Testing\nIn this type of testing, the internal functionality of the application is hidden. It is also known as Outer Testing or External Testing. In this type of testing, the internal functionality of the application is known. This is also known as Inner Testing or Internal Testing.\nIn black box testing, the working of code is not important, and it is usually done by software testers. The working of the code should be known by the individual carrying out the testing, this is usually done by software developers.\nThis type of testing checks the behavior of the application. This type of testing checks the logic on which the application is built. Also known as the logic test.\nBecause working is not needed for the testing purpose, thus it takes less time for completion. In this, the working of the code is required and the application’s logic is tested that’s why it requires more time to complete.\nTypes – \nFunctional Testing\nNon-Functional Testing\nRegression Testing\nTypes – \nPath Testing\nLoop Testing\nCondition Testing",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q27. What are the advantages of the Spiral Model? Why is it so popular?",
        "answer": "SDLC models are needed to make the software development journey smoother and more systematic. One of these models is the spiral model. The spiral model provides better yields compared to the other alternatives.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q28. Mention the differences between Quality Assurance and Quality Control. Why these two terms are important in software engineering?",
        "answer": "Quality Assurance (QA) Quality Control (QC)\nIt is the process to achieve the quality specified during the requirement specification. It is the process of fulfilling the quality asked in the requirement specification.\nThe process is carried out to manage the quality of the product. The process is carried out to verify the quality of the product.\nThe process is used to prevent defects, and QA is process oriented. The process is used to identify defects, and QC is product oriented.\nStatistical Process Control (SPC) is used to implement the concept of QA. Statistical Quality Control (SQC) is used to implement the concept of QC.\nIt requires less amount of time to perform the process. It requires a comparatively greater amount of time to perform the process.\nExample – Verification Example – Validation",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q29. State the different operations that you can perform in the Stack. Comment on the differences between Stack and Queue.",
        "answer": "Different operations are performed using Stack – \n\nDifference between Stack and Queue – \nStack Queue\nStack is a type of abstract data type that refers to the collection of elements in a vertical manner, in which majorly two operations are performed. The queue is a linear type of data structure that refers to the collection of elements in a horizontal manner and operations are performed either way.\nStack works on LIFO (Last in, First Out) Queue works on FIFO (First In, First Out).\nElements can be inserted or deleted from the top only. Elements can be inserted or deleted from either side.\nThe pop() removes an element from the stack. Deletion of an element is performed by dequeue.\nStack has no further types. The queue can be further divided into three major categories – \nCircular Queue\nPriority Queue\nDoubly Ended Queue",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q30. How would you design software? Mention all the steps.",
        "answer": "Steps to be followed during the software development process – \nMarket Analysis\nRequirement Gathering\nProduct Designing\nProduct Coding\nCode Testing\nDeployment of the product\nProduct Maintenance and Product Operations\n\nAdvanced Software Engineering Interview Questions for Experienced",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q31. In-depth, explain the concept of SDLC.",
        "answer": "To plan, develop, and test high-quality software, the software industry employs the Software Development Life Cycle (SDLC) method. The SDLC’s objective is to produce high-quality software that complies with client/user requirements.\nThe software development life cycle (SDLC) is a framework that specifies the actions that must be taken at each stage. The SDLC is a software project management technique used within a software company. \nIt includes a complete plan explaining how to develop, maintain, replace, and alter or enhance certain software. The life cycle describes a strategy for improving both the general software development process and the overall quality of the finished product.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q32. What is an SRS document? State its significance.",
        "answer": "Software Requirement Specification (SRS) is a type of document that is prepared prior to software development. This document consists of everything required for the development process and for the software’s intended usage. SRS document holds a very important role in the domain of software engineering. It provides critical information to the engineers associated with the project. Moreover, it forms the basic foundation of the entire software development project.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q33. Differentiate between Functional and Non-Functional Requirements.",
        "answer": "Functional Requirement Non-Functional Requirement\nFunctional requirement is used to define a system and the components associated with it. Non-functional requirements are used to define the quality attributes associated with a software system.\nThese types of requirements are specified by the users. These types of requirements are specified by the technologically skilled hands associated with the system.\nFunctional requirements are mandatory. Non-functional requirements are not mandatory to be present for the system.\nFunctional requirements are easy to define. Non-functional requirements are not easy to define.\nThis includes system testing, integration testing, end-to-end testing, and API testing. This includes performance testing, stress testing, usability testing, and security testing.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q34. What is meant by the term Software Testing? Mention the three different types of Software Testing.",
        "answer": "Software testing \nSoftware testing is a principle in the domain of software engineering that refers to the evaluation and verification of the to-be-developed software during the development as well as deployment phase. This concept of software testing was introduced in the field of software engineering to deliver a software product as specified in the SRS document.\nThe three different types of software testing are – \nBlack box testing\nWhite box testing\nGrey box testing",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q35. Explain ER diagram and state all three different components.",
        "answer": "ER Diagram, also known as Entity-Relationship Diagram or ERD is a type of diagram that is used to represent the relationship between the different types of entity sets stored in the database. ER diagrams help to show the logical structure of databases. \nDifferent components of the ER Diagram are – \nEntity represented by a rectangle\nAttribute represented by an ellipse\nRelationship represented by a diamond",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q36. Mention the different objectives that software engineering has.",
        "answer": "The basic objective of software engineering is to create a software application that increases quality, reduces cost, and time effectiveness. Software engineering makes sure that the software is consistent and accurate, in addition to being developed on time, within budget, and having the necessary specifications. \nThe four main characteristics of software engineering are as follows:\nEfficiency\nReliability\nRobustness\nMaintainability\nPortable",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q37. Define different types of SDLC models, and mention their significance.",
        "answer": "There are different types of SDLC models, each with its own unique approach and characteristics. Here are some common models:\nWaterfall Model- This is a traditional linear model where the development process progresses in a sequential manner, with each phase (such as planning, design, development, testing, and deployment) being completed before the next one begins. It is straightforward and easy to understand, with well-defined stages and documentation. However, it can be rigid and lacks flexibility for changes or iterations.\nSignificance- The Waterfall model is useful when requirements are stable and well-defined, and the project scope is clearly defined from the beginning. It is suitable for small projects with minimal changes expected during the development process.\nAgile Model- Agile is an iterative and incremental model that focuses on collaboration, flexibility, and customer satisfaction. It emphasizes adaptive planning, teamwork, and continuous improvement throughout the development process. Popular agile methodologies include Scrum, Kanban, and Lean.\nSignificance- Agile models are ideal for complex projects with changing requirements or uncertain scope. They allow for regular feedback, quick adjustments, and continuous improvement, resulting in higher customer satisfaction and better adaptability to changing business needs.\nSpiral Model- The Spiral model combines elements of both the Waterfall and Agile models. It involves iterative cycles of planning, risk analysis, development, and testing, with each cycle building upon the previous one. It emphasizes risk management and prototype development.\nSignificance- The Spiral model is beneficial for large and complex projects with high risks and uncertainties. It allows for incremental development, regular risk assessment, and flexibility in accommodating changes during the development process.\nV-Model- The V-Model is a variation of the Waterfall model that emphasizes the relationship between testing and development. It has a strong focus on verification and validation activities, with testing being done in parallel with each phase of development.\nSignificance- The V-Model ensures early and continuous testing, which results in improved software quality. It helps identify defects early in the development process, reducing the risk of finding critical issues during later stages.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q38. Differentiate between Beta Testing and Alpha Testing.",
        "answer": "Beta Testing Alpha Testing\nBeta testing is performed by the users who have volunteered for the testing. Alpha testing is performed by the testers.\nThe testing of the proposed software is carried out outside of the organization, that is on the user’s devices. The testing of the proposed software is carried out within the organization’s testing environment.\nThe testing is carried out to gather feedback related to the quality of the proposed application. The testing is carried out to find possible bugs in the application.\nBeta testing uses only black box testing. Both black box and white box testing, are performed in alpha testing.\nUsability, functionality, security, and reliability are tested. Functionality and usability are tested.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q39. How are Verification and Validation different from each other? Comment.",
        "answer": "Both terms sound ambiguous when it comes to their literal meaning. In software engineering, verification is a type of static testing that is carried out to check for the quality assurance of the software to be delivered, which means the designed software is verified as per the requirement specifications. Validation refers to a type of dynamic testing, which is a process of validating the end product as per the client’s true requirements. This is carried out to ensure quality control.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q40. What are Pointers? Explain its significance.",
        "answer": "Pointer stands for a type of variable that is used to store the address of another variable. It is used to point the values stored on another variable’s address. The main significance of the concept of the pointer is that it allows programmers to directly access the memory location of a variable. Pointers are also used for dynamic memory allocation and deallocation. The concept of pointers helps programmers to implement complex data structures, for example, stacks, linked lists, graphs, and many more.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q41. Why are learning data structure and algorithms so important for being an SDE?",
        "answer": "Someone with good Data Structures and Algorithms skills will approach a problem in a better and more efficient way than someone who is not familiar with the concepts of DSA. Data Structures and Algorithms may not be immediately applicable to your line of work in the industry, but it is the base on which computer science is built. \nData Structures and Algorithms go over detailed solutions to common problems and provide an understanding of how effective each one is to utilize. Additionally, it shows you the methodology for determining an algorithm’s effectiveness. This enables you to pick the best option out of a variety. Candidates’ analytical abilities are tested using data structures and algorithms.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q42. Why is Web 3.0 taking over Web 2.0?",
        "answer": "The third iteration of the web is known as Web 3.0. Decentralization and openness are key tenets of Web 3.0, which will benefit users more. Web 2.0, on the other hand, is the second iteration of the internet, which has been there for the past 20 years. Javascript has been used to develop Web 2.0 with related libraries. Web 2.0 encouraged more connectivity and involvement, but the proposed security mechanism is full of vulnerabilities.\nWeb 3.0 is taking over Web 2.0 because of the decentralized system, which means users can perform their general web activities but anonymously. While owning the content over the web, users will have control over their data and the flow of their data.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q43. What is meant by the Waterfall Model in SDLC?",
        "answer": "The Waterfall Model is the first SDLC model produced; it is also known as the linear sequential cycle model. In this model, each phase should be completed first before proceeding to the next phase. The feedback path is absent in the whole process. The results produced are based on multiple internal as well as external factors. The waterfall model is preferred for short projects only where there is no ambiguity in the requirement specifications.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "Q44. Explain Quality Function Deployment.",
        "answer": "Quality Function Deployment (QFD) refers to a well-structured methodology that is used to translate customers’ requirements into a well-organized and customized plan to produce the desired product.",
        "reference": "intellipaat.com",
        "role": "software-engineering"
    },
    {
        "question": "1. What is baseline in Software Development?",
        "answer": "A baseline is a software development milestone and reference point marked by the completion or delivery of one or more software deliverables. The main objective of the baseline is to decrease and regulate vulnerability, or project weaknesses that can easily damage the project and lead to uncontrollable changes.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "2. What do you mean by Software Re-engineering?",
        "answer": "The process of updating software is known as software reengineering. This procedure entails adding new features and functionalities to the software in order to make it better and more efficient.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "3. What are Verification and Validation?",
        "answer": "Verification: The process of ensuring that software accomplishes its objectives without defects is known as verification. It's the procedure for determining whether the product being developed is correct or not. It determines whether the resulting product meets our specifications. It is mainly focused on functionality.\nValidation: Validation is the process of determining whether a software product meets the required standards, or in other words, whether it meets the product's quality criteria. It is the process of verifying product validation or ensuring that the product we are building is correct. Validation focuses on the quality of the software. Verification: The process of ensuring that software accomplishes its objectives without defects is known as verification. It's the procedure for determining whether the product being developed is correct or not. It determines whether the resulting product meets our specifications. It is mainly focused on functionality. Verification: Validation: Validation is the process of determining whether a software product meets the required standards, or in other words, whether it meets the product's quality criteria. It is the process of verifying product validation or ensuring that the product we are building is correct. Validation focuses on the quality of the software. Validation:",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "4. What are CASE tools?",
        "answer": "CASE tools are a collection of software application programs that automate SDLC tasks. Analysis tools, Design tools, Project management tools, Database Management tools, and Documentation tools are a few of the CASE tools available to simplify various stages of the Software Development Life Cycle.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "5. What is SRS?",
        "answer": "SRS is a formal report that serves as a representation of software that allows customers to assess whether it meets their needs. It is a list of requirements for a certain software product, program, or set of apps that execute specific tasks in a specific environment. It also includes user needs for a system, as well as precise system requirements specifications. Depending on who is writing it, it fulfils a variety of purposes.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "6. What are the various categories of software?",
        "answer": "Software products are mainly categorized into: System software: Softwares like operating systems, compilers, drivers, etc. fall into this category.\nNetworking and web development software: Computer networking software offers the necessary functionality for computers to communicate with one another and with data storage facilities.\nEmbedded Software: Software used in instrumentation and control applications such as washing machines, satellites, microwaves, TVs, etc.\nArtificial Intelligence Software: Expert systems, decision support systems, pattern recognition software, artificial neural networks, and other types of software are included in this category.\nScientific software: These support a scientific or engineering user's requirements for performing enterprise-specific tasks. Examples include MATLAB, AUTOCAD, etc. System software: Softwares like operating systems, compilers, drivers, etc. fall into this category. System software: Networking and web development software: Computer networking software offers the necessary functionality for computers to communicate with one another and with data storage facilities. Networking and web development software: Embedded Software: Software used in instrumentation and control applications such as washing machines, satellites, microwaves, TVs, etc. Embedded Software: Artificial Intelligence Software: Expert systems, decision support systems, pattern recognition software, artificial neural networks, and other types of software are included in this category. Artificial Intelligence Software: Scientific software: These support a scientific or engineering user's requirements for performing enterprise-specific tasks. Examples include MATLAB, AUTOCAD, etc. Scientific software:",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "7. What are the drawbacks of the spiral model?",
        "answer": "The spiral model is a hybrid of the iterative development process and the waterfall model, with a focus on risk analysis. In the SDLC Spiral model, the development process begins with a limited set of requirements and progresses through each development phase.  Until the application is ready for production, the software engineering team adds functionality for the increased requirement in ever-increasing spirals. Drawbacks of the spiral model are: Drawbacks of the spiral model are It's significantly more complicated than other SDLC models. The procedure is intricate.\nDue to its high cost, it is not recommended for small projects.\nRisk Analysis is overly reliant, and it necessitates a high level of skill.\nTime estimation is challenging \nThe spiral could continue endlessly. It's significantly more complicated than other SDLC models. The procedure is intricate. Due to its high cost, it is not recommended for small projects. Risk Analysis is overly reliant, and it necessitates a high level of skill. Time estimation is challenging The spiral could continue endlessly.  ",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "8. What is Software prototyping and POC?",
        "answer": "A software prototype is a working model with limited functionality. The prototype may or may not contain the exact logic used in the final software program, and therefore is an additional work that should be considered in the calculation. Users can review developer proposals and try them out before they are implemented through prototyping. It also helps in comprehending user-specific details that may have been missed by the developer during product development. POC (Proof of Concept) is a method used by organizations to validate an idea or concept's practicality. The stage exists prior to the start of the software development process. On the basis of technical capability and business model, a mini project is built to see if a concept can be executed.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "9. What are the merits of the incremental model?",
        "answer": "It can deliver iteration faster, in the first iteration itself.\nDevelopment takes place in parallel to each other.\nWe can reduce the first delivery cost by using this method.\nThe user or client can provide feedback at each level and unexpected changes in the requirement can be avoided.\nRisks can be identified and managed on a module-by-module basis. It can deliver iteration faster, in the first iteration itself. Development takes place in parallel to each other. We can reduce the first delivery cost by using this method. The user or client can provide feedback at each level and unexpected changes in the requirement can be avoided. Risks can be identified and managed on a module-by-module basis.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "10. What is Software scope?",
        "answer": "The scope of a software project is a well-defined boundary that incorporates all the activities involved in developing and delivering a software product.  The scope defines what the product will and will not do, as well as what the final product will and will not contain. All capabilities and objects to be delivered as part of the software are explicitly defined in the software scope.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "11. What is the waterfall method and what are its use cases?",
        "answer": "The waterfall is the easiest and most straightforward SDLC approach in software development. In this approach, the development process is linear, and each step is finished one by one. As the name implies, development progresses downwards, much like a waterfall. The software has to cover the following phases in a waterfall model: Requirements\nDesign\nImplementation\nTesting and integration\nDeployment\nMaintenance Requirements Design Implementation Testing and integration Deployment Maintenance Use cases: Use cases: When requirements are well-defined and unchangeable.\nThere are no ambiguous requirements or conditions.\nWhen the technology is well understood\nThe project is brief, and the cast is small.\nThe risk is negligible. When requirements are well-defined and unchangeable. There are no ambiguous requirements or conditions. When the technology is well understood The project is brief, and the cast is small. The risk is negligible.  ",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "12. What does a software product manager do?",
        "answer": "A software product manager leads and manages the software product management department. They are in charge of the software product's specialization, goals, structure, and expectations. They also head the planning, backlog grooming, stakeholder management, and providing roadmap necessary to create the best software.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "13. What is Debugging?",
        "answer": "Debugging is the process of finding a software bug, in the context of software engineering. To put it another way, it refers to the process of finding, evaluating, and correcting problems. Debugging is essential once the software fails to run properly.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "14. Which SDLC model is the best?",
        "answer": "According to the annual State of Agile report, Agile is the best SDLC methodology and also one of the most widely used SDLC in the IT industry. The reason is that it is a hybrid of incremental and iterative approaches and works well in a flexible environment. That being said, select the model that suits your requirements.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "15. What are different SDLC models available?",
        "answer": "Waterfall model\nSpiral model\nIncremental model\nAgile Model\nBig bang model\nIterative model Waterfall model Waterfall model Waterfall model Spiral model Spiral model Spiral model Incremental model Incremental model Incremental model Agile Model Agile Model Agile Model Big bang model Big bang model Big bang model Iterative model Iterative model Iterative model",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "16. Describe the Software Development Process in Brief.",
        "answer": "The Software Development Life Cycle (SDLC) is a number of fundamental phases that teams must follow in order to produce and deliver high-quality software. Software typically goes through the following phases: Software Development Life Cycle (SDLC) Software Development Life Cycle (SDLC) Requirements Gathering: The team identifies, collects, and defines core issues, requirements, requests, and customer expectations related to the software application or service during this stage of the project. Generating software specifications, creating a thorough strategy, documentation, issue tracking, and project or product planning, including allocating the resources, are some tasks done during this phase.\nSoftware Design: The team makes software design decisions regarding the architecture and make of the software solution throughout this design phase of development.\nSoftware Development: Teams develop software solutions based on the design decisions made during earlier stages of the project\nTesting and Integration: Software is packaged and tested to ensure quality. Quality assurance, often known as testing, ensures that the solutions deployed fulfil the specified quality and performance criteria.\nDeployment: The software is installed in a production setting. The gathered, designed, built, and tested work is shared with the software service's customers and users.\nOperation and Maintenance: The software is installed in a production setting. The work is shared with the software service's customers and users. Requirements Gathering: The team identifies, collects, and defines core issues, requirements, requests, and customer expectations related to the software application or service during this stage of the project. Generating software specifications, creating a thorough strategy, documentation, issue tracking, and project or product planning, including allocating the resources, are some tasks done during this phase. Requirements Gathering: Software Design: The team makes software design decisions regarding the architecture and make of the software solution throughout this design phase of development. Software Design: Software Development: Teams develop software solutions based on the design decisions made during earlier stages of the project Software Development: Testing and Integration: Software is packaged and tested to ensure quality. Quality assurance, often known as testing, ensures that the solutions deployed fulfil the specified quality and performance criteria. Testing and Integration: Deployment: The software is installed in a production setting. The gathered, designed, built, and tested work is shared with the software service's customers and users. Deployment: Operation and Maintenance: The software is installed in a production setting. The work is shared with the software service's customers and users. Operation and Maintenance:  ",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "17. What is the main difference between a computer program and computer software?",
        "answer": "The key difference between software is a collection of several programs used to complete tasks, whereas a program is a set of instructions expressed in a programming language. A program can be software, but software the vice versa is not true.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "18. What is a framework?",
        "answer": "A framework is a well-known method of developing and deploying software. It is a set of tools that allows developing software by providing information on how to make it on an abstract level, rather than giving exact details. The Software Process Framework is the basis of the entire software development process. The umbrella activities are also included in the software process structure.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "19. What are the characteristics of software?",
        "answer": "There are six major characteristics of software: characteristics of software characteristics of software Functionality: The things that software is intended to do are called functionality. For example, a calculator's functionality is to perform mathematical operations.\nEfficiency: It is the ability of the software to use the provided resources in the best way possible. Increasing the efficiency of software increases resource utilization and reduces cost.\nReliability: Reliability is the probability of failure-free operational software in an environment. It is an important characteristic of software.\nUsability: It refers to the user’s experience while using the software. Usability determines the satisfaction of the user.\nMaintainability: The ease with which you can repair, improve, and comprehend software code is referred to as maintainability. After the customer receives the product, a phase in the software development cycle called software maintenance begins.\nPortability: It refers to the ease with which the software product can be transferred from one environment to another. Functionality: The things that software is intended to do are called functionality. For example, a calculator's functionality is to perform mathematical operations. Functionality Efficiency: It is the ability of the software to use the provided resources in the best way possible. Increasing the efficiency of software increases resource utilization and reduces cost. Efficiency: Reliability: Reliability is the probability of failure-free operational software in an environment. It is an important characteristic of software. Reliability: Usability: It refers to the user’s experience while using the software. Usability determines the satisfaction of the user. Usability: Maintainability: The ease with which you can repair, improve, and comprehend software code is referred to as maintainability. After the customer receives the product, a phase in the software development cycle called software maintenance begins. Maintainability: Portability: It refers to the ease with which the software product can be transferred from one environment to another. Portability: Apart from the above-mentioned characteristics, the software also has the following characteristics: Software is engineered, it is not developed or manufactured like hardware. Development is an aspect of the hardware manufacturing process. Manufacturing does not exist in the case of software.\nThe software doesn't wear out.\nThe software is custom-built. Software is engineered, it is not developed or manufactured like hardware. Development is an aspect of the hardware manufacturing process. Manufacturing does not exist in the case of software. The software doesn't wear out. The software is custom-built.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "1. What is the difference between Quality Assurance and Quality control?",
        "answer": "Quality Assurance Quality Control\nQuality Assurance focuses on assuring that the end product (software) will be of the requested quality. Quality control focuses on controlling the processes, methods, or techniques used in the development of software so that the quality requested is fulfilled.\nIt is a preventive measure. It is a corrective measure.\nIt applies to the full software development life cycle.  It is applied in the testing phase. Quality Assurance Quality Control\nQuality Assurance focuses on assuring that the end product (software) will be of the requested quality. Quality control focuses on controlling the processes, methods, or techniques used in the development of software so that the quality requested is fulfilled.\nIt is a preventive measure. It is a corrective measure.\nIt applies to the full software development life cycle.  It is applied in the testing phase. Quality Assurance Quality Control Quality Assurance Quality Control Quality Assurance Quality Control Quality Assurance focuses on assuring that the end product (software) will be of the requested quality. Quality control focuses on controlling the processes, methods, or techniques used in the development of software so that the quality requested is fulfilled.\nIt is a preventive measure. It is a corrective measure.\nIt applies to the full software development life cycle.  It is applied in the testing phase. Quality Assurance focuses on assuring that the end product (software) will be of the requested quality. Quality control focuses on controlling the processes, methods, or techniques used in the development of software so that the quality requested is fulfilled. Quality Assurance focuses on assuring that the end product (software) will be of the requested quality. Quality control focuses on controlling the processes, methods, or techniques used in the development of software so that the quality requested is fulfilled. It is a preventive measure. It is a corrective measure. It is a preventive measure. It is a corrective measure. It applies to the full software development life cycle.  It is applied in the testing phase. It applies to the full software development life cycle. It is applied in the testing phase. Conclusion Software engineering is a lucrative job, and it requires hard work and dedication to become one. Becoming aware of questions asked in interviews can really help a lot. We covered software engineering questions that can help you crack that interview. The above list of relevant questions can only be a guideline. We cannot predict the exact problem that may pop up during the interview, but we hope that the general architecture and design knowledge gained from them would be helpful for you. Software Engineer / Developer Salary in India\nFacebook Software Engineer Salary\nApple Software Engineer Salary\nAmazon Software Engineer Salary\nSoftware Engineer Salary in New York\nSoftware Engineer Salary in Texas\nSoftware Engineering Books\nSoftware Developer Vs Software Engineer\nSoftware Engineer MCQs\nAgile Interview Questions\nSDLC vs STLC: Full Difference\nTop Software Engineering Projects\nLatest Software Engineering Books\nSoftware Engineer Resume – Full Guide and Example Software Engineer / Developer Salary in India Software Engineer / Developer Salary in India Facebook Software Engineer Salary Facebook Software Engineer Salary Apple Software Engineer Salary Apple Software Engineer Salary Amazon Software Engineer Salary Amazon Software Engineer Salary Software Engineer Salary in New York Software Engineer Salary in New York Software Engineer Salary in Texas Software Engineer Salary in Texas Software Engineering Books Software Engineering Books Software Developer Vs Software Engineer Software Developer Vs Software Engineer Software Engineer MCQs Software Engineer MCQs Agile Interview Questions Agile Interview Questions SDLC vs STLC: Full Difference SDLC vs STLC: Full Difference Top Software Engineering Projects Top Software Engineering Projects Latest Software Engineering Books Latest Software Engineering Books Software Engineer Resume – Full Guide and Example Software Engineer Resume – Full Guide and Example Software Engineer Resume – Full Guide and Example",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "2. What are functional and non-functional requirements?",
        "answer": "Functional Requirements Non-functional Requirements\nThese are the needs that the end-user specifies as essential features that the system should provide. These are the quality requirements that the system must meet in order to fulfil the project contract.\nThe user specifies the functional requirements. Technical individuals, such as architects, technical leaders, and software engineers, specify non-functional requirements.\nFunctional Requirements are mandatory. For example, the client might want certain mandatory changes in UI, like dark mode. Non-functional requirements are not Mandatory. For example, the requirement to enhance readability is non-functional. Functional Requirements Non-functional Requirements\nThese are the needs that the end-user specifies as essential features that the system should provide. These are the quality requirements that the system must meet in order to fulfil the project contract.\nThe user specifies the functional requirements. Technical individuals, such as architects, technical leaders, and software engineers, specify non-functional requirements.\nFunctional Requirements are mandatory. For example, the client might want certain mandatory changes in UI, like dark mode. Non-functional requirements are not Mandatory. For example, the requirement to enhance readability is non-functional. Functional Requirements Non-functional Requirements Functional Requirements Non-functional Requirements Functional Requirements Non-functional Requirements These are the needs that the end-user specifies as essential features that the system should provide. These are the quality requirements that the system must meet in order to fulfil the project contract.\nThe user specifies the functional requirements. Technical individuals, such as architects, technical leaders, and software engineers, specify non-functional requirements.\nFunctional Requirements are mandatory. For example, the client might want certain mandatory changes in UI, like dark mode. Non-functional requirements are not Mandatory. For example, the requirement to enhance readability is non-functional. These are the needs that the end-user specifies as essential features that the system should provide. These are the quality requirements that the system must meet in order to fulfil the project contract. These are the needs that the end-user specifies as essential features that the system should provide. These are the quality requirements that the system must meet in order to fulfil the project contract. The user specifies the functional requirements. Technical individuals, such as architects, technical leaders, and software engineers, specify non-functional requirements. The user specifies the functional requirements. Technical individuals, such as architects, technical leaders, and software engineers, specify non-functional requirements. Functional Requirements are mandatory. For example, the client might want certain mandatory changes in UI, like dark mode. Non-functional requirements are not Mandatory. For example, the requirement to enhance readability is non-functional. Functional Requirements are mandatory. For example, the client might want certain mandatory changes in UI, like dark mode. Non-functional requirements are not Mandatory. For example, the requirement to enhance readability is non-functional.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "3. What is Software Configuration Management?",
        "answer": "When a piece of software is created, there is always room for improvement. To modify or improve an existing solution or to establish a new solution for a problem, changes may be required. Changes to the existing system should be examined before being implemented, recorded before being implemented, documented with details of before and after, and controlled in a way that improves quality and reduces error. This is where System Configuration Management is required. During the Software Development Life Cycle, Software Configuration Management (SCM) is a technique for systematically managing, organizing, and controlling changes in documents, codes, and other entities. The main goal is to enhance production while making as few mistakes as possible.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "4. Explain the concept of modularization.",
        "answer": "Modularization is ‌breaking down a program's functionality into separate, independent modules, each of which includes just the information needed to carry out one part of the intended capability. In simple terms, it is the practice of dividing the program into smaller modules so that we can deal with them separately. We can simply add independent and smaller modules to a program using modularization without being hampered by the complexity of the program's other functionalities. Modularization is based on the notion of designing applications that are easier to develop and maintain, self-contained components. In monolithic design, on the other hand, there's always the risk of a simple change knocking the entire application down. The final step would be to combine these independent modules.   In the above diagram, both the applications have been divided into smaller modules. These modules can then be dealt with separately.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "5. What is Data Flow Diagram?",
        "answer": "A Data Flow Diagram (DFD) shows the flow of information flows through a system. It shows data inputs, outputs, storage sites, and paths between each destination using symbols such as rectangles, circles, and arrows, as well as short text labels. Data flowcharts can range from simple to in-depth DFDs that go deeper into how data is processed. They can be used to evaluate a current system or to create a new system. A DFD can effortlessly express things that are difficult to describe in words, and it can be used by both technical and non-technical audiences. Data Flow Diagram  ",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "6. What is the difference between cohesion and coupling?",
        "answer": "Cohesion Coupling\nCohesion refers to the relationship within modules. Coupling refers to the relationship between modules.\nIncreasing cohesion is good for the software. Coupling should be avoided.\nModules focus on a particular thing in cohesion. Modules are coupled to one another through coupling.\nExample: A function that checks file permission and then opens it, or a function to decrypt messages. Example: Two models sharing data with each other. Cohesion Coupling\nCohesion refers to the relationship within modules. Coupling refers to the relationship between modules.\nIncreasing cohesion is good for the software. Coupling should be avoided.\nModules focus on a particular thing in cohesion. Modules are coupled to one another through coupling.\nExample: A function that checks file permission and then opens it, or a function to decrypt messages. Example: Two models sharing data with each other. Cohesion Coupling Cohesion Coupling Cohesion Coupling Cohesion refers to the relationship within modules. Coupling refers to the relationship between modules.\nIncreasing cohesion is good for the software. Coupling should be avoided.\nModules focus on a particular thing in cohesion. Modules are coupled to one another through coupling.\nExample: A function that checks file permission and then opens it, or a function to decrypt messages. Example: Two models sharing data with each other. Cohesion refers to the relationship within modules. Coupling refers to the relationship between modules. Cohesion refers to the relationship within modules. Coupling refers to the relationship between modules. Increasing cohesion is good for the software. Coupling should be avoided. Increasing cohesion is good for the software. Coupling should be avoided. Modules focus on a particular thing in cohesion. Modules are coupled to one another through coupling. Modules focus on a particular thing in cohesion. Modules are coupled to one another through coupling. Example: A function that checks file permission and then opens it, or a function to decrypt messages. Example: Two models sharing data with each other. Example: A function that checks file permission and then opens it, or a function to decrypt messages. Example: Example: Two models sharing data with each other. Example:",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "7. What are Software Metrics?",
        "answer": "A software metric is a quantitative measure of program properties. Software metrics can be used for a range of things, such as analyzing software performance, planning, estimating productivity, and so on. Load testing, stress testing, average failure rate, code complexities, lines of code, etc. are some software metrics. The benefits of software metrics are many, some of them being: It reduces cost.\nIt increases ROI (return on investment).\nReduces workload.\nHighlights areas for improvement. It reduces cost. It increases ROI (return on investment). Reduces workload. Highlights areas for improvement.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "8. What is Concurrency?",
        "answer": "In software engineering, concurrency refers to a set of techniques and mechanisms that allow the software to do many tasks at the same time. Concurrency can be achieved by using languages like C++ or Java because these languages support the concept of thread. New hardware and software features are required to achieve concurrency.",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "9. Define black box testing and white box testing?",
        "answer": "Black box testing is a type of high-level testing in which the primary goal is to evaluate functionalities from a behavioural standpoint. In black-box testing, the tester does not test the code; instead, they utilize the program to see if it works as expected.\nWhen you have insight into the code or broad information about the architecture of the software in question, you can perform white box testing, also known as clear box testing. It falls under the category of low-level testing and is mostly concerned with integration and unit testing.  White box testing requires programming expertise or at the very least a thorough grasp of the code that implements a particular functionality. Black box testing is a type of high-level testing in which the primary goal is to evaluate functionalities from a behavioural standpoint. In black-box testing, the tester does not test the code; instead, they utilize the program to see if it works as expected. Black box testing When you have insight into the code or broad information about the architecture of the software in question, you can perform white box testing, also known as clear box testing. It falls under the category of low-level testing and is mostly concerned with integration and unit testing.  White box testing requires programming expertise or at the very least a thorough grasp of the code that implements a particular functionality. white box testing clear box testing",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "10. What is the feasibility study?",
        "answer": "As the name implies, a feasibility study is a measurement of a software product in terms of how useful product development will be for the business from a practical standpoint. Feasibility studies are conducted for a variety of reasons, including determining whether a software product is appropriate in terms of development, implementation, and project value to the business. The feasibility study concentrates on the following areas: Economic feasibility\nTechnical feasibility\nOperational feasibility\nLegal feasibility\nSchedule feasibility Economic feasibility Technical feasibility Operational feasibility Legal feasibility Schedule feasibility",
        "reference": "interviewbit.com",
        "role": "software-engineering"
    },
    {
        "question": "1) What is Software Engineering?",
        "answer": "Software engineering is defined as the function of the systematic, disciplined, quantified approach to the development, operations, and maintenance of software.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "2) What are the elements to be considered in the System Model Construction?",
        "answer": "Elements to be considered in the System Model Construction are:\nADVERTISEMENT\nAssumption\nSimplification\nLimitation\nConstraints\nPreferences",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "3) What does a System Engineering Model accomplish?",
        "answer": "System Engineering Model accomplishes the following:\nDefine Processes that serve needs of view\nRepresent behavior of process and assumption\nExplicitly define Exogenous and Endogenous Input\nIt represents all Linkages that enable an engineer to understand aspect better.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "A framework is the Code Skeleton that can be fleshed out with particular classes or functionality and designed to address the specific problem at hand.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "5) What are the characteristics of the software?",
        "answer": "Characteristics of the software are:\nSoftware is engineered, not manufactured.\nSoftware does not wear out.\nMost software is custom-built rather than being assembled from components.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "6) What are the various categories of software?",
        "answer": "The various categories of software are:\nSystem software Application.\nSoftware Engineering / Scientific.\nSoftware Embedded software.\nWeb Applications.\nArtificial Intelligence software.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "7) What are the challenges in software?",
        "answer": "The challenges in the software are:\nCopying with legacy systems.\nHeterogeneity challenge.\nDelivery times challenge.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "A software process is defined as the structured set of activities that are required to develop the software system.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "9) What are the internal milestones?",
        "answer": "They are the significant and quantifiable attributes of progress. They are the standard methods in the project which provide that we are on the right track. They are under the authority of the project manager.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "10) What is the limitation of RAD Model?",
        "answer": "Limitation of RAD Model are:\nIt requires a sufficient number of Human Resources to create enough number of teams.\nDevelopers and Users are not committed,the system fails.\nIt is not Properly Modularized building component may be Problematic.\nIt is not applicable when there is more possibility for Technical Risk.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "11) What are the disadvantages of classic life cycle model?",
        "answer": "Disadvantages of the classic life cycle model are:\nReal projects rarely follow the sequential flow. Iteration always occurs and creates a problem.\nChallenging for the customer to state all requirements.\nThe working version of the program is not available. So the customer must have patience.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "12) What are the merits of the incremental model?",
        "answer": "The merits of the incremental model are:\nThe incremental model can be accepted when there is less number of people include in the project.\nTechnical risks can be handle with each increment.\nFor a minimal period, at least the core product can be delivered to the user.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "13) What is the disadvantage of the spiral model?",
        "answer": "The disadvantage of the spiral model are:\nIt is based on user communication. If the interface is not proper, then the software product which gets created will not be the up to the mark.\nIt demands a vast risk assessment. If the risk assessment is completed correctly, then only the successful product can be obtained.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "Evolutionary powers models are:\nIncremental model\nSpiral model\nWIN-WIN spiral model\nConcurrent Development",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "Software prototyping is represented as rapid software development for validating the requirements.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "16) What are the benefits of prototyping?",
        "answer": "The benefits of prototyping are:\nPrototype services as a basis for developing system specification.\nDesign quality can be revised.\nThe system can be managed easily.\nDevelopment efforts may get decreased.\nSystem usability can be upgraded.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "17) What are the prototyping methods in software process?",
        "answer": "The prototyping methods in the software process are:\nEvolutionary prototyping: In this method of system development, the initial prototype is arranged, and it is then precise through the number of phases to the final stage.\nThrow-away prototyping: Using this method, a rough practical implementation of the system is produced. The requirement issues can be identified from this implementation. It is then rejected. System is then developed using some various engineering paradigm.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "18) What are the advantages of evolutionary prototyping?",
        "answer": "The advantages of evolutionary prototyping are:\nFast delivery of the working system.\nUser is contained while developing the system.\nThe more useful system can be delivered.\nSpecification, design and implementation work in equivalent manner.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "19) What are the various Rapid prototyping techniques?",
        "answer": "The various rapid prototyping techniques are:\nDynamic high-level language development.\nDatabase programming.\nComponent and application assembly.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "20) What are the uses of User-Interface Prototyping?",
        "answer": "This prototyping is used to pre-specify the looks and effectively feel of customer interface.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "21) What is the principle of the prototype model?",
        "answer": "A prototype is built to quickly determine to the user what the product would look like. The only minimal functionality of the actual product is supported during the prototyping phase.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "22) Define System Context Diagram (SCD)?",
        "answer": "System Context Diagram (SCD):\nEstablish data boundary between System being implemented and Environment in which system operates.\nDescribes all external producers, external consumers, and entities that communicate through the customer interface.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "23) Define Quality Function Deployment (QFD)?",
        "answer": "Quality Function Deployment (QFD) is a method that translates the needs of the user into a technical requirement. It concentrates on maximizing user satisfaction from the software engineering process.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "24) What is Requirement Engineering?",
        "answer": "Requirement engineering is the process of establishing services which the user required from the system and constraint under which it operates and is developed.\n\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "25) What is ERD?",
        "answer": "Entity Relationship Diagram is the graphical description of the object relationship pair. It is primarily used in the database application.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "26) What is DFD?",
        "answer": "Data Flow Diagram depicts the data flow and the transforms which are applied to the data as it moves from input to output.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "27) What is a state transition diagram?",
        "answer": "State transition diagram is a collection of states and events. The events cause the operation to change its state. It also describes what actions are to be taken on the occurrence of particular events.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "28) What is Software Quality Assurance?",
        "answer": "Software Quality Assurance is a set of auditing and documenting functions that assess the effectiveness and completeness of quality control activities.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "29) What is the use of CMM?",
        "answer": "Software Quality means Conformance to state functional explicitly and performance requirements, explicitly documented development standards, inherent characteristics expected for professionally developed software.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "30) What is coupling?",
        "answer": "Coupling is the significant measure of the degree to which classes are linked to one another. Coupling should be kept as low as possible.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "31) What is cohesion?",
        "answer": "Cohesion is the indication of the relative functional strength of a module. It is a natural extension of Information Hiding and Performs a single task, requiring little integration with other components.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "Refactoring means changing a software system in a way that does not alter the external behavior of code.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "33) What is Software Architecture?",
        "answer": "Software Architecture means the overall structure of the software and how that software provides conceptual integrity for the system.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "When a portion of the data structure is passed via the module interface, then it is called as stamp coupling.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "When several modules reference a global data area, then the coupling is called common coupling.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "When a module contains tasks that are related by the fact that all must be executed within the same period, then it is termed as temporal cohesion.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "Metrics are defined as the degree to which a system component or process possesses a given attribute.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "38) What is COCOMO model?",
        "answer": "Constructive Cost Model is a cost model, which gives the estimate of several staff-months it will take to develop the software product.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "39) What is the purpose of the timeline chart?",
        "answer": "The objective of the timeline chart is to emphasize the scope of the individual task. Hence set of functions are given as input to the timeline chart.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "40) Define Smoke Testing?",
        "answer": "Smoke testing is Integration Testing and frequently used when software products are being developed.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "41) What are the benefits of Smoke Testing?",
        "answer": "Benefits of doing Smoke Testing are:\nIntegration Risk is minimized.\nQuality of end-product is improved.\nError diagnosis and Correction are simplified.\nProgress is easy to assess.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "42) What is Equivalence Partition?",
        "answer": "Equivalence Partitions Derives an input domain of a program into classes of data from which test cases are derived. It is a Set of Objects have linked by relationships as Symmetric, Transitive, and Reflexive an equivalence class is present.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "43) What are the steps followed in testing?",
        "answer": "The steps followed in testing are:\nUnit testing: The individual elements are tested in this type of testing.\nModule testing: Related group of independent items is tested.\nSub-system testing: This is a type of integration testing. Different modules are integrated into a sub-system, and the entire subsystem is tested.\nSystem testing: The entire system is tested in this system.\nAcceptance testing: This type of testing contains testing of the system with user data if the system behaves as per client need, then it is accepted.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "Alpha and Beta testings are the two types of acceptance testing.\nAlpha test: The alpha testing is attesting in which the customer tests the version of complete software under the supervision of the developer. This testing is implement at the developer's site.\nBeta test: The beta testing is a testing in which the customer tests the version of the software without the developer being present. This testing is performed at the customer's site.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "45) What are the types of Static Testing tools?",
        "answer": "There are the three types of static testing tools.\nCode-based testing tools: These tools take source code as input and generate test cases.\nSpecialized testing tools: Using this language, the detailed test specification can be written for each test case.\nRequirement-based testing tools: These tools help in designing as per user requirements.",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "",
        "answer": "Maintenance is described as the process in which changes are implemented by either modifying the existing system?s architecture or by adding new components to the system.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "47) What are the types of software maintenance?",
        "answer": "Types of software maintenance are:\nCorrective Maintenance: It means the maintenance for correcting the software faults.\nAdaptive maintenance: It means maintenance for adapting the change in environment.\nPerfective maintenance: It means modifying or enhancing the system to meet the new requirements.\nPreventive maintenance: It means changes made to improve future maintainability.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "48) What is CASE Tools?",
        "answer": "CASE Tools stands for Computer-Aided Software Engineering. It is system software that provides automated support for software process activities. It contains program used to support software process operations such as Requirement Analysis, System Modeling. Debugging and Testing.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    },
    {
        "question": "49) What is Risk management?",
        "answer": "Risk management is the phase of anticipating hurdles in carrying out the original plan and providing alternate methods so that the impact on the anticipated initially outcome is minimal.\nClick here for more information",
        "reference": "javatpoint.com",
        "role": "software-engineering"
    }
]