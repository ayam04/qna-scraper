[
    {
        "question": "1. Compare SAP BO with SAS BI.",
        "answer": "Criteria SAP BO SAS BI\nWhy deploy? High-level visualization, customer-friendly Quick data integration with diverse sources\nPresentation Excellent Average\nAd-hoc analysis Excellent Average\nMobile BI Good Excellent\nAnalytics Predictive analytics Easy analytics\nApplication Frontend suite to sort, view, and analyze BI data Combines BI and Analytics to deliver enterprise-grade data\nFind out more about the SAS Analytics tool in this SAS Tutorial!",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "2. Define the TRANSLATE function.",
        "answer": "TRANSLATE Function: With this function, the characters specified in a string are replaced by the characters specified by users.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "3. Explain the SUBSTR function.",
        "answer": "The SUBSTR function is used for extracting a string or replacing the contents of a character value.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "4. Explain PROC SORT.",
        "answer": "PROC SORT sorts SAS data sets by variables so that a new data set can be prepared for further use.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "5. Elucidate the APPEND procedure.",
        "answer": "The term ‘append’ means adding at the end.\nIn SAS, we can say that the APPEND procedure is a procedure adding one SAS data set to another SAS data set.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "6. Describe PROC UNIVARIATE.",
        "answer": "PROC UNIVARIATE is used for the elementary numeric analysis, and it examines how data is distributed.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "7. Explain the BMDP procedure.",
        "answer": "For analyzing data, the BMPD procedure is used.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "8. Define RUN-group Processing.",
        "answer": "RUN-group processing is used to submit a PROC step using the RUN statement without ending the procedure.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "9. Describe BY-group Processing.",
        "answer": "The BY statement is used by the BY-group processing so that it can process data that are indexed, grouped, or ordered based on variables.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "10. What do a CALENDAR procedure do?",
        "answer": "The CALENDAR procedure shows data in a monthly calendar format from a SAS data set.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "11. What are the functions used for character handling in SAS?",
        "answer": "UPCASE and LOWCASE, known as the character functions, are used for character handling in SAS.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "12. Explain the BOR function.",
        "answer": "The BOR function is a bitwise logical operation used to return bitwise logical OR between two statements.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "13. What is the use of the DIVIDE function?",
        "answer": "The DIVIDE function is used to return the division result.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "14. What do you mean by CALL PRXFREE Routine?",
        "answer": "CALL PRXFREE routine is used for character string matching and for the allocation of free memory for Perl regular expression.\nHave you got more questions on SAS? Post them on our Community and get them resolved today!",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "15. Explain CALL PRXCHANGE Routine.",
        "answer": "CALL PRXCHANGE routine is used for performing the replacement of pattern matching.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "16. Define the ANYDIGIT function.",
        "answer": "The ANYDIGIT function is used to search for the first occurrence of a digit (numeral) in a string. It returns the position of the digit. If no digit is found, it returns a ‘0’. By using an optional parameter, the ANYDIGIT function can begin the search at any given position in the string.\nSyntax:\nANYDIGIT(character-value <,start>)\nThe character-value is any SAS character expression, and the term start is an optional parameter that specifies the position within the string to begin the search.\nWatch this video on SAS Programming Training:",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "17. What do you understand by CALL MISSING Routine?",
        "answer": "The character or numeric variables that are specified can be assigned missing values through the CALL MISSING routine.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "18. Explain the COMPRESS= Data set option.",
        "answer": "It is used for compressing the data into new output.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "19. What do you mean by the ALTER= Data Set option?",
        "answer": "It is used for assigning an ALTER password, which will stop users from changing the file.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "20. Define Formats.",
        "answer": "Instructions used by SAS for writing data values are known as Formats.\n\nIntermediate SAS Interview Questions and Answers",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "21. How are Variable Formats handled by PROC COMPARE?",
        "answer": "Variable formats are handled by PROC COMPARE as it is used for comparing unformatted values.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "22. What is the use of $BASE64X?",
        "answer": "By using $BASE64X encoding, the character data is converted into ASCII text.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "23. What are the features of the SAS system?",
        "answer": "It provides IPv6 support, new TrueType fonts, extended time notations, the restart mode, universal printing, the checkpoint mode, and ISO 8601 support.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "24. Describe the VFORMATX function.",
        "answer": "The VFORMATX function is used to return the format that is assigned with the value of a given statement.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "25. Define the STD function.",
        "answer": "With the help of the STD function, the standard deviation will be returned for the nonmissing statements.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "26. How can a SAS program be validated?",
        "answer": "With the help of the STD function, the standard deviation will be returned for the nonmissing statements.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "27. Elucidate the FILECLOSE data set option.",
        "answer": "When a data set is closed, its tape positioning is defined by FILECLOSE.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "28. What is Debugging?",
        "answer": "Debugging is a technique for testing the program logic, and this can be done with the help of Debugger.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "29. What does ODS stand for?",
        "answer": "ODS stands for the Output Delivery System.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "30. What does CDISC stand for?",
        "answer": "CDISC stands for Clinical Data Interchange Standards Consortium.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "31. Which method is used to copy blocks of data?",
        "answer": "The method used for copying blocks of data is defined as the block I/O method.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "32. Define the max() function.",
        "answer": "The max() function is used to return the largest value.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "33. What is the procedure for copying an entire library?",
        "answer": "The copy statement should be followed by an input data library and an output data library.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "34. What is the use of the SYSRC function?",
        "answer": "It is a function that provides a system error number.\nThinking of Learning Power BI? Here is the Power BI Certification provided by Intellpaat.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "35. Explain SAS. What are the functions it performs?",
        "answer": "SAS, i.e., Statistical Analysis System, is a combined set of software solutions that helps users analyze data.\nIt can change, manipulate, analyze, and retrieve data.\nWith SAS, numerical analysis can be done.\nWe have several SAS tools to succeed at writing programs that analyze data and create reports.\nWe get quality data analytics with SAS.\nLearn What is SAS Analytics?",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "36. Describe the basic structure of a SAS program.",
        "answer": "A SAS program consists of:\nA DATA step, which recovers and manipulates data\nA PROC step, which interprets the data",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "37. What is DATA Step?",
        "answer": "The main function of a DATA step is to create SAS data sets by manipulating data.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "38. What is PDV?",
        "answer": "Program Data Vector (PDV) is the area of memory where data sets are created through the SAS system, one at a time. When a program is executed, an Input Buffer is created that reads data values and makes them assigned to their respective variables.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "39. In SAS, which statement does not perform automatic conversions in comparisons?",
        "answer": "With WHERE statements, automatic conversions cannot be performed because WHERE statement variables exist in the data set.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "40. What is the difference between the NODUPKEY and NODUP options?",
        "answer": "Identical observations are checked and removed through the NODUP option. On the other hand, the NODUPKEY option checks for all BY variable values and if found, it will eliminate those.\n\n\nAdvanced SAS Interview Questions and Answers For Experienced",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "41. What is the use of the function PROC SUMMARY?",
        "answer": "PROC SUMMARY is the same as PROC MEANS, i.e., it will give descriptive statistics but will not give output as default. We have to give an option ‘print’, and then it will give the output.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "42. What does PROC GLM do?",
        "answer": "The functions of PROC GLM are covariance analysis, variance analysis, multivariate, and repeated analysis of variance.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "43. What are PROC PRINT and PROC CONTENTS used for?",
        "answer": "PROC PRINT outputs a list of the values of some or all variables in a SAS data set. PROC CONTENTS tells the structure of the data set rather than the data values.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "44. What is SAS Informat?",
        "answer": "Informat is an instruction that SAS uses to read data values. It is used to read or input data from the external files.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "45. What does the function CATX syntax do?",
        "answer": "CATX syntax inserts delimiters, removes trailing and leading blanks, and returns a concatenated character string.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "46. Explain the use of PROC GPLOT.",
        "answer": "PROC GPLOT identifies the data set that contains the plot variables. It has more options and, therefore, can create more colorful and fancier graphics.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "47. What do put and the input functions do?",
        "answer": "Input function: Character values are converted into numeric values.\nPut function: Numeric values are converted into character values.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "48. How to sort in descending order?",
        "answer": "By using the DESCENDING keyword in the PROC SORT code, we can sort in descending order.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "49. What is the difference between VAR B1 – B3 and VAR B1 -- B3?",
        "answer": "A single dash specifies the consecutively numbered variables. A double dash specifies the variables available within the data set.\nExample:\nData Set: ID NAME B1 B2 C1 B3\nB1 – B3 would return B1 B2 B3\nB1– B3 would return B1 B2 C1 B3",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "50. What is the basic syntax style in SAS?",
        "answer": "Important points for running a SAS program are:\nA DATA statement, which names our data set\nNames of the variables in our data set are described by the INPUT statement\nThe statement should end with a semicolon (;)\nSpace should be given between the word and the statement",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "51. What are the special Input Delimiters?",
        "answer": "Input delimiters are DLM and DSD.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "52. What is the difference between a format and an informat?",
        "answer": "Format: A format is to write data, i.e., WORDIATE18 and WEEKDATEW\nInformat: An informat is to read data, i.e., comma, dollar, and date (MMDDYYw, DATEw, TIMEw, and PERCENTw)",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "53. Describe any one SAS function.",
        "answer": "TRIM: TRIM removes the trailing blanks from a character expression.\nExample:\nStr1 = ‘my’;\nStr2 = ‘dog’;\nResult = TRIM (Str1)(Str2);\nResult = ‘mydog’",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "54. What is PDV) and what are its functions?",
        "answer": "Program Data Vector (PDV) is a logical area in memory.\nSAS creates a data set, one observation at a time.\nAn Input Buffer is created at the time of compilation, for holding a record from external file.\nPDV is created followed by the creation of the Input Buffer.\nSAS builds the data set in the PDV area of memory",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "55. Distinguish between SAS, Stata, and SPSS.",
        "answer": "Each package offers its own unique strengths and weaknesses. As a whole, SAS, Stata, and SPSS form a set of tools that can be used for a wide variety of statistical analyses. With Stat/Transfer, it is very easy to convert data files from one package to another in just a matter of seconds or minutes.\nTherefore, there can be quite an advantage switching from one analysis package to another depending on the nature of our problem. For example, if we are performing analysis using mixed models, we might choose SAS, but if we are doing logistic regression we might choose Stata. Moreover, if we are doing an analysis of variance, then we might choose SPSS.\nIf we are frequently performing statistical analysis, it is strongly recommended to consider making each one of these packages part of our toolkit for data analysis.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "56. What are the uses of SAS?",
        "answer": "SAS/ETS software provides tools for a wide variety of applications in business, government, and academia. Major uses of SAS/ETS procedures are economic analysis, forecasting, economic and financial modeling, time series analysis, financial modelling, and manipulation of time-series data.\nThe common theme relating to many applications of the software is time-series data. SAS/ETS software is useful whenever it is necessary to analyze or predict processes that take place over time or to analyze models that involve simultaneous relationships.\nAlthough SAS/ETS software is most closely associated with business, finance, and economics, time-series data also arise in many other fields. SAS/ETS software is useful whenever time dependencies, simultaneous relationships, or dynamic processes complicate data analysis. For example, an environmental quality study might use SAS/ETS software’s time-series analysis tools to analyze pollution emissions data. A pharmacokinetic study might use SAS/ETS software’s features for nonlinear systems to model the dynamics of drug metabolism in different tissues.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "57. How do we create a SAS data set with Compressed Observations?",
        "answer": "To create a compressed SAS data set, we use the COMPRESS=YES option as an output DATA set option or in an OPTIONS statement. Compressing a data set reduces its size by reducing repeated consecutive characters or numbers to 2-byte or 3-byte representations.\nTo uncompress observations, we must use a DATA step to copy the data set and use the option COMPRESS=NO for the new data set.\nThe advantages of using a SAS compressed data set are that there would be reduced storage requirements for the data set and only fewer input/output operations would be necessary to read from and write to the data set during processing.\nThe disadvantages include not being able to use the SAS observation number to access an observation. The CPU time required to prepare compressed observations for input/output observations is increased because of the overhead of compressing and expanding the observations. We have to remember that if there are a few repeated characters, a data set can occupy more space in the compressed form than in the uncompressed form, due to the higher overhead per observation. For more details on SAS compression see SAS Language: Reference, Version 6, First Edition, Cary, NC: SAS Institute Inc., 1990.",
        "reference": "intellipaat.com",
        "role": "sas"
    },
    {
        "question": "1. Why choose SAS over other data analytical tools?",
        "answer": "Listed below are a few reasons to choose SAS over other data analysis tools: Learning and using SAS is very easy as compared to other analytics software tools. It has a better and more stable Graphic User Interface (GUI) and offers an easy option (PROC SQL) for users who are already familiar with SQL.\nEvery day, data is growing and securing data becomes more complicated. SAS is very capable of storing and organizing large amounts of data smoothly and reliably.\nIn the corporate world and large companies, SAS is often used, as it is more professional and easier to use compared to other languages. SAS jobs abound all over the market.\nSAS provides adequate graphical functionality. However, it provides limited customization options.\nSince SAS is licensed software and its updates are released in a controlled environment, all of its features have been thoroughly tested. As a result, there are fewer chances of errors.\nThe customer service and technical support provided by SAS are outstanding. In any case, if a user runs into technical difficulties during installation, they will receive immediate assistance from the team.\nWith its high level of security in terms of data privacy, SAS is a recognized and trusted name in the enterprise market. Learning and using SAS is very easy as compared to other analytics software tools. It has a better and more stable Graphic User Interface (GUI) and offers an easy option (PROC SQL) for users who are already familiar with SQL. Every day, data is growing and securing data becomes more complicated. SAS is very capable of storing and organizing large amounts of data smoothly and reliably. In the corporate world and large companies, SAS is often used, as it is more professional and easier to use compared to other languages. SAS jobs abound all over the market. SAS provides adequate graphical functionality. However, it provides limited customization options. Since SAS is licensed software and its updates are released in a controlled environment, all of its features have been thoroughly tested. As a result, there are fewer chances of errors. The customer service and technical support provided by SAS are outstanding. In any case, if a user runs into technical difficulties during installation, they will receive immediate assistance from the team. With its high level of security in terms of data privacy, SAS is a recognized and trusted name in the enterprise market.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "2. What are some common mistakes that people make while writing programs in SAS?",
        "answer": "The following are some of the most common programming errors in SAS: common programming errors If a semicolon is missing from a statement, SAS will misinterpret not only that statement but potentially several that follow.\nA number of errors will result from unclosed quotes and unclosed comments because SAS may fail to read the subsequent statements correctly.\nData and procedure steps have very different functions in SAS, so statements that are valid in one will probably cause errors in the other.\nData is not sorted before using a statement that requires a sort\nSubmitted programs are not checked for log entries.\nThe quotation marks are not matched.\nThe dataset option is invalid or the statement option is invalid.\nDebugging techniques are not used. If a semicolon is missing from a statement, SAS will misinterpret not only that statement but potentially several that follow. A number of errors will result from unclosed quotes and unclosed comments because SAS may fail to read the subsequent statements correctly. Data and procedure steps have very different functions in SAS, so statements that are valid in one will probably cause errors in the other. Data is not sorted before using a statement that requires a sort Submitted programs are not checked for log entries. The quotation marks are not matched. The dataset option is invalid or the statement option is invalid. Debugging techniques are not used.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "3. What are different ways to exclude or include specific variables in a dataset?",
        "answer": "DROP and KEEP statements can be used to exclude or include specific variables from a data set. Drop Statement: This instructs SAS which variables to remove from the data set.\nKeep Statement: The variables in the data set to be retained are specified using this statement. Drop Statement: This instructs SAS which variables to remove from the data set. Drop Statement Keep Statement: The variables in the data set to be retained are specified using this statement. Keep Statement: Example: Consider the following data set: Example: DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; The following DROP statement instructs SAS to drop variables score1 and score2. DROP data readin; \nset outdata; \ntotalsum = sum(score1,score2); \ndrop score1, score2; \nrun; data readin; \nset outdata; \ntotalsum = sum(score1,score2); \ndrop score1, score2; \nrun; Output: Output: Gender  Section   totalsum \nF          A        37 \nF          B        42 \nF          C        27\nM          D        46 Gender  Section   totalsum \nF          A        37 \nF          B        42 \nF          C        27\nM          D        46 The following KEEP statement instructs SAS to retain score1 in the data set. data readin1; \nset readin; \nkeep score1; \nrun; data readin1; \nset readin; \nkeep score1; \nrun; Output: Output: Gender  Section  score1    totalsum \nF         A       17         37 \nF         B       25         42 \nF         C       12         27 \nM         D       21         46 Gender  Section  score1    totalsum \nF         A       17         37 \nF         B       25         42 \nF         C       12         27 \nM         D       21         46",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "4. Explain _N_ and _ERROR_ in SAS.",
        "answer": "In a SAS Data Step, there are two variables that are automatically created, namely, the _ERROR_ variable and the _N_ variable. _N_: Typically, this variable is used to keep track of the number of times a data step has been iterated. It is set to 1 by default. The variable _N_ increases every time the data step of a data statement is iterated.\n_ERROR_: The value is 0 by default and gives information about any errors that occur during execution. Whenever there is an error, such as an input data error, a math error, or a conversion error, the value is set to 1. This variable can be used to locate errors in data records and to display an error message in the SAS log. _N_: Typically, this variable is used to keep track of the number of times a data step has been iterated. It is set to 1 by default. The variable _N_ increases every time the data step of a data statement is iterated. _N_: _ERROR_: The value is 0 by default and gives information about any errors that occur during execution. Whenever there is an error, such as an input data error, a math error, or a conversion error, the value is set to 1. This variable can be used to locate errors in data records and to display an error message in the SAS log. _ERROR_:",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "5. What do you mean by the \"+\" operator and sum function?",
        "answer": "In SAS, summation or addition is performed either with the “sum” function or by using the “+” operator. Function \"Sum\" returns the sum of arguments that are present (non-missing arguments), whereas \"+\" operator returns a missing value if one or more arguments are not present or missing. Example: Consider a data set containing three variables a, b, and c. Example: data variabledata; \ninput a b c; \ncards; \n1      2     3 \n34     3     4 \n.      3     2 \n53     .     3 \n54     4     . \n45     4     2 \n; \nrun; data variabledata; \ninput a b c; \ncards; \n1      2     3 \n34     3     4 \n.      3     2 \n53     .     3 \n54     4     . \n45     4     2 \n; \nrun; There are missing values for all variables and we wish to compute the sum of all variables. data sumofvariables; \nset variabledata; \nx=sum(a,b,c); \ny=a+b+c; \nrun; data sumofvariables; \nset variabledata; \nx=sum(a,b,c); \ny=a+b+c; \nrun; Output: Output: x        y \n6        6 \n41       41 \n5        . \n56       . \n58       . \n51       51 x        y \n6        6 \n41       41 \n5        . \n56       . \n58       . \n51       51 The value of y is missing for the 3rd, 4th, and 5th observations in the output.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "6. Name different data types that SAS support.",
        "answer": "SAS supports two data types, i.e., Character and Numeric. Dates are also considered characters despite the fact that there are implicit functions that can be performed on them. Character Numeric",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "7. State the difference between using the drop = data set option in the set statement and data statement.",
        "answer": "In SAS, the drop= option is used to exclude variables from processing or from the output data set. This option tells SAS which variables you wish to remove from a data set. drop= option The drop= option in the set statement can be used if you do not wish to process certain variables or do not want to have them included in the new data set.\nHowever, if you want to process certain variables but don't want them to be included in the new data set, then choose drop= in the data statement. The drop= option in the set statement can be used if you do not wish to process certain variables or do not want to have them included in the new data set. However, if you want to process certain variables but don't want them to be included in the new data set, then choose drop= in the data statement. Syntax: DROP=variable(s); Syntax: DROP=variable(s); In this case, variable(s) lists one or more names of variables. Variables can be listed in any format SAS supports. Example: Consider the following data set: Example: DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; The following DROP= data set option command SAS to drop variables score1 and score2. DROP= data set option data readin; \nset outdata (drop = score1 score2); \ntotalsum = sum(score1, score2); \nrun; data readin; \nset outdata (drop = score1 score2); \ntotalsum = sum(score1, score2); \nrun; Output: Output: Gender  Section    score1     score2    totalsum \n F       A          .          .          . \n F       B          .          .          .     \n F       C          .          .          .        \n M       D          .          .          . Gender  Section    score1     score2    totalsum \n F       A          .          .          . \n F       B          .          .          .     \n F       C          .          .          .        \n M       D          .          .          .",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "8. What is the meaning of STOP and OUTPUT statements in SAS?",
        "answer": "STOP Statement: Using STOP, SAS immediately stops processing the current DATA step and resumes processing statements after the current DATA step ends. In other words, the STOP statement halts the execution of all statements containing it, including DO statements and looping statements. STOP Statement: Using STOP, SAS immediately stops processing the current DATA step and resumes processing statements after the current DATA step ends. In other words, the STOP statement halts the execution of all statements containing it, including DO statements and looping statements. STOP Statement Syntax:  STOP; Syntax: STOP; Example: As demonstrated in this example, STOP is used to avoid an infinite loop when using a random access method within a DATA step: Example: data sample;  \ndo developerobs=1 to engineeringobs by 10;  \nset master.research point=developerobs nobs=engineeringobs;  \n output;  \nend;  \nstop;  \nrun; data sample;  \ndo developerobs=1 to engineeringobs by 10;  \nset master.research point=developerobs nobs=engineeringobs;  \n output;  \nend;  \nstop;  \nrun; OUTPUT Statement: Output tells SAS to write the current observation immediately to a SAS data set, not at the end of the DATA step. The current observation will be written to all data sets named in the DATA statement if there is no data set name specified in the OUTPUT statement. OUTPUT Statement: Output tells SAS to write the current observation immediately to a SAS data set, not at the end of the DATA step. The current observation will be written to all data sets named in the DATA statement if there is no data set name specified in the OUTPUT statement. OUTPUT Statement: Syntax: OUTPUT <data-set-name(s)>; Syntax: OUTPUT <data-set-name(s)>; Example: Each line of input data can be used to create two or more observations. As given below, for each observation in the data set Scaler, three observations are created in the SAS data set Result. Example: data Result(drop=time4-time6);  \nset Scaler;  \ntime=time4;  \noutput;  \ntime=time5;  \noutput;  \ntime=time6;  \noutput;  \nrun; data Result(drop=time4-time6);  \nset Scaler;  \ntime=time4;  \noutput;  \ntime=time5;  \noutput;  \ntime=time6;  \noutput;  \nrun;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "9. Explain what is first and last in SAS?",
        "answer": "SAS Programming always uses the BY and SET statements to group data based on the order of grouping. When both BY and SET statements are used together, SAS automatically creates two temporary variables, FIRST. and LAST. 'SAS' identifies the first and last observations of a group based on the values of the FIRST. and LAST. variables. These variables are always 1 or 0, depending on the following conditions: FIRST.variable = 1 if an observation of a group is the first one in a BY group.\nFIRST.variable = 0 if observation of group is not the first one in a BY group.\nLAST.variable = 1 if observation of group is the last one in a BY group.\nLAST.variable = 0 if observation of group is not the last one in a BY group. FIRST.variable = 1 if an observation of a group is the first one in a BY group. FIRST.variable FIRST.variable = 0 if observation of group is not the first one in a BY group. FIRST.variable LAST.variable = 1 if observation of group is the last one in a BY group. LAST.variable LAST.variable = 0 if observation of group is not the last one in a BY group. LAST.variable Essentially, SAS stores FIRST.variable and LAST.variable in a program data vector (PDV). As a result, they become available for DATA step processing. However, SAS will not add them to the output data set since they are temporary. Example: In the following example, ID is a grouping variable containing duplicate entries. When FIRST.variable = 1 and LAST.variable = 1, it means that there is only a single value in the group like ID=4, ID=6 and ID=8 as shown below: Example:  ",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "10. Consider the following expression stored in the variable address: 9/4 Infantry Marg Mhow CITY, MP, 453441",
        "answer": "In the following scenario, what would the scan function return? In the following scenario, what would the scan function return? x=scan(address,3); x=scan(address,3); In the above program, we have used the scan function to read the 3rd word in the address string. The following output will the returned by the scan function: x=Marg; x=Marg;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "11. What do you mean by the Scan function in SAS and write its usage?",
        "answer": "The Scan() function is typically used to extract words from a value marked by delimiters (characters or special signs that separate words in a text string). The SCAN function selects individual words from text or variables containing text and stores them in new variables. Syntax: Syntax: scan(argument,n,delimiters) scan(argument,n,delimiters) In this case, Argument: It specifies the character variable or text to be scanned.\nN: The number n indicates which word to read.\nDelimiters: These are characters values or special signs in a text string. Argument: It specifies the character variable or text to be scanned. Argument: N: The number n indicates which word to read. N: Delimiters: These are characters values or special signs in a text string. Delimiters: Example: Example: Consider that we would like to extract the first word from a sentence 'Hello, Welcome to Scaler!'. In this case, the delimiter used is a blank. data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nfirst_word=scan(string, 1, ' ' ); \nput first_word =; \nrun; data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nfirst_word=scan(string, 1, ' ' ); \nput first_word =; \nrun; First_word returns the word 'hello' since it's the first word in the above sentence. Now, consider that we would like to extract the last word from a sentence 'Hello, Welcome to Scaler!'. In this case, the delimiter used is a blank. data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nlast_word=scan(string, -1, ' ' ); \nput last_word =; \nrun; data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nlast_word=scan(string, -1, ' ' ); \nput last_word =; \nrun; Last_word returns 'Scaler!' As Scaler is the last word in the above sentence.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "12. State difference between Missover and Truncover in SAS.",
        "answer": "Missover: The INPUT statement does not jump to the next line when the Missover option is used on the INFILE statement. If the INPUT statement cannot read the entire field specified due to the field length, it will set the value to missing. The variables with no values assigned are set to missing when an INPUT statement reaches the end of an input data record. Missover: The INPUT statement does not jump to the next line when the Missover option is used on the INFILE statement. If the INPUT statement cannot read the entire field specified due to the field length, it will set the value to missing. The variables with no values assigned are set to missing when an INPUT statement reaches the end of an input data record. Missover: Example: An external file with variable-length records, for example, contains the following records: Example: Example: 1 \n22 \n333  \n4444 \n55555 1 \n22 \n333  \n4444 \n55555 Following are the steps to create a SAS data set using these data. The numeric informat 5 is used for this data step and the informatted length of the variable NUM is matched by only one input record. data readin;  \ninfile 'external-file' missover;  \ninput NUM 5.;  \nrun;  \nproc print data=readin;  \nrun; data readin;  \ninfile 'external-file' missover;  \ninput NUM 5.;  \nrun;  \nproc print data=readin;  \nrun; Output: Output: Output: Obs    ID  \n1      .  \n2      . \n3      . \n4      . \n5      55555 Obs    ID  \n1      .  \n2      . \n3      . \n4      . \n5      55555 Those values that were read from input records that were too short have been set to missing. This problem can be corrected by using the TRUNCOVER option in the INFILE statement: Truncover: This option assigns the raw data value to the variable, even if it is shorter than what the INPUT statement expects. Truncover: This option assigns the raw data value to the variable, even if it is shorter than what the INPUT statement expects. Truncover: Example: Example: Example: An external file with variable-length records, for example, contains the following records: 1 \n22 \n333  \n4444\n55555 1 \n22 \n333  \n4444\n55555 Following are the steps to create a SAS data set using these data. The numeric informat 5 is used for this data step. data readin;  \ninfile 'external-file' truncover;  \ninput NUM 5.; \nrun;  \nproc print data=readin;  \nrun; data readin;  \ninfile 'external-file' truncover;  \ninput NUM 5.; \nrun;  \nproc print data=readin;  \nrun; Output: Output: Output: Obs    ID  \n1      1  \n2      22  \n3      333  \n4      4444 \n5      55555 Obs    ID  \n1      1  \n2      22  \n3      333  \n4      4444 \n5      55555 Those values that were read from input records that were too short are not set to missing.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "13. What is PDV (Program Data Vector)?",
        "answer": "Logical areas of memory where SAS builds data sets, one observation at a time are called Program data vectors (PDVs). Whenever a program is executed, SAS usually reads data values from the input buffer or generates them based on SAS language statements and assigns these data values to specific or respective variables in the program data vector. The program data vector also includes two automatic variables i.e., _N_ and _ERROR_ variable. _N_ _ERROR_",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "14. What is the use of Retain in SAS?",
        "answer": "SAS, at the start of each iteration of the data step, reads the data statement and puts the missing values of variables (assigned either through an INPUT statement or via an assignment statement within the data step) into the program data vector (logical areas of memory). RETAIN statements override this default. In other words, a RETAIN statement instructs SAS not to set variables to missing when moving from one iteration of the data step to another. The variables are instead retained. Syntax: Syntax: RETAIN variable1 variable2 ... variablen; RETAIN variable1 variable2 ... variablen; There are no limits to the number of variables you can specify. When you do not specify variable names, SAS retains the values of every variable that was created in INPUT or assignment statement by default.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "15. Write down some capabilities of SAS Framework.",
        "answer": "SAS Framework has the following four capabilities:   Access Data: Data accessibility is a powerful SAS capability. In other words, data can be accessed from different sources including raw databases, excel files, Oracle databases, SAS datasets, etc.\nManage Data: SAS offers additional capabilities including data management. Data accessed from a variety of sources can thus be managed easily in order to generate useful insights. The process of managing data can include creating variables, validating data, cleaning data, creating subsets, etc. SAS manages the existing data to provide the data that you need.\nAnalyze Data: SAS will analyze the data once it has been managed to perform simple evaluations like frequency and averages, along with more complex evaluations like forecasting, regression, etc.\nPresent: The analyzed data can be saved and stored as a graphic report, a list, and overall statistics that can be printed or published. They can also be saved into a data file. Access Data: Data accessibility is a powerful SAS capability. In other words, data can be accessed from different sources including raw databases, excel files, Oracle databases, SAS datasets, etc. Access Data: Manage Data: SAS offers additional capabilities including data management. Data accessed from a variety of sources can thus be managed easily in order to generate useful insights. The process of managing data can include creating variables, validating data, cleaning data, creating subsets, etc. SAS manages the existing data to provide the data that you need. Manage Data Analyze Data: SAS will analyze the data once it has been managed to perform simple evaluations like frequency and averages, along with more complex evaluations like forecasting, regression, etc. Analyze Data: Present: The analyzed data can be saved and stored as a graphic report, a list, and overall statistics that can be printed or published. They can also be saved into a data file. Present:",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "16. What are the essential features of SAS?",
        "answer": "SAS has the following essential features:   SAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools,\nSAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools.\nFurthermore, SAS is a platform-independent software, which means it can run on almost any operating system, including Linux, Windows, Mac, and Ubuntu.\nIt provides very fine control over data manipulation and analysis, which is its USP.\nThe SAS package provides a complete data analysis solution, ranging from simple figures to advanced analysis. One of the best features of SAS software is its Inbuilt Library, which contains all the necessary packages for data analysis and reporting.\nThe reports can be visualized in the form of graphs that range from simple scatter plots and bar graphs to complex multi-page classification panels.\nAnother feature of SAS is its support for multiple data formats. With SAS, you can read data from a variety of file types, formats, and even from files with missing data.\nSince SAS is a 4GL (4 Generation Programming Language), it has an easy-to-learn syntax, which makes it an essential feature. SAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools, SAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools. Furthermore, SAS is a platform-independent software, which means it can run on almost any operating system, including Linux, Windows, Mac, and Ubuntu. It provides very fine control over data manipulation and analysis, which is its USP. The SAS package provides a complete data analysis solution, ranging from simple figures to advanced analysis. One of the best features of SAS software is its Inbuilt Library, which contains all the necessary packages for data analysis and reporting. The reports can be visualized in the form of graphs that range from simple scatter plots and bar graphs to complex multi-page classification panels. Another feature of SAS is its support for multiple data formats. With SAS, you can read data from a variety of file types, formats, and even from files with missing data. Since SAS is a 4GL (4 Generation Programming Language), it has an easy-to-learn syntax, which makes it an essential feature.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "1. What do you mean by SAS Macros and why to use them?",
        "answer": "Macro is a group of SAS statements (program) that automates repetitive tasks. With SAS's Macros feature, we can avoid repeating sections of code and use them again and again when needed without having to type them again and it increases readability also. Automation makes your work faster because you don't have to write the same lines of code every day. %MACRO and %MEND are the start and end statements of a macro program. These can be reused multiple times. The SAS program declares them at the beginning and then calls them out during the body of the program when needed. %MACRO %MEND Macro variables contain a value that will be used over and over again by SAS programs. With a maximum of 65534 characters, macro variables are one of SAS's most powerful tools. They can be either global or local in scope. The % Local macro variable is a variable that can be defined and accessed inside macro programs only. The %Global macro variable is defined in open code (outside of the macro program) and can be accessed from any SAS program running in the SAS environment. Syntax: The local variables are declared in the following syntax. Syntax: In the following program, we have created the Macro variable in which we pass the parameters comma-separated and then we have written the Macro statement followed by the %MEND statement. After that, we have called the macro program by passing the parameters. # Creating a Macro program. \n%MACRO <macro name>(Param1, Param2,....Paramn);  \nMacro Statements; \n%MEND; \n# Calling a Macro program. \n%MacroName (Value1, Value2,.....Valuen); # Creating a Macro program. \n%MACRO <macro name>(Param1, Param2,....Paramn);  \nMacro Statements; \n%MEND; \n# Calling a Macro program. \n%MacroName (Value1, Value2,.....Valuen);",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "2. What do you mean by %Include and %Eval?",
        "answer": "%Include: If you run a program containing the %INCLUDE statement, the SAS System executes any statements or data lines that you bring into the program. Statements are executed immediately. %Include: Syntax: Syntax: %INCLUDE source(s)\n</<SOURCE2> <S2=length> <option-list> >; %INCLUDE source(s)\n</<SOURCE2> <S2=length> <option-list> >; Here, Source(s) specify the location of the information that you wish to access with the %INCLUDE statement.\nSOURCE2 causes the SAS log to show the source statements being used in your SAS program.\nS2=length specifies the length of the input record.\nOption-list specifies options that can be included in %INCLUDE. Source(s) specify the location of the information that you wish to access with the %INCLUDE statement. Source(s) SOURCE2 causes the SAS log to show the source statements being used in your SAS program. SOURCE2 S2=length specifies the length of the input record. S2=length Option-list specifies options that can be included in %INCLUDE. Option-list %Eval: Integer arithmetic is used to evaluate arithmetic or logical expressions. %EVAL accepts only integers as operands in arithmetic expressions. Operands with floating-point values cannot be used in %EVAL arithmetic calculations. %SYSEVALF can be used in these cases. %Eval: Syntax: %EVAL(arithmetic/logical-expression) Syntax: %EVAL(arithmetic/logical-expression) Example: Example: %let d=%eval(13+23); %let d=%eval(13+23); Conclusion Have you been preparing for a SAS interview and wondering how you can succeed?  This useful guide can help you prepare for it. We've compiled a list of the top 30+ SAS interview questions and answers that you're likely to be asked during your interviews. The questions have been specifically designed to familiarize you with the type of questions you might encounter during the interview.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "3. Explain what is INPUT and INFILE Statement.",
        "answer": "In SAS programming, using an INFILE statement identifies an external file containing the data, whereas using an INPUT statement describes the variables used. Syntax of INFILE: INFILE 'filename'; Syntax of INFILE: INFILE 'filename'; Syntax of INPUT: INPUT 'varname1' 'varname2'; Syntax of INPUT: INPUT 'varname1' 'varname2'; Example: Example: DATA readin \nINFILE Test; \nINPUT ID Gender Score; \nRun; DATA readin \nINFILE Test; \nINPUT ID Gender Score; \nRun;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "4. Name the command used for sorting in SAS programs?",
        "answer": "The PROC SORT command can be used to sort data in SAS. The command can be used for multiple variables within a program. It creates a new dataset with sorting and keeps the original dataset unchanged. Syntax: Syntax: PROC SORT DATA=original OUT=Sorted;   \nBY variable_name; PROC SORT DATA=original OUT=Sorted;   \nBY variable_name; Here, Variable_name represents the column name on which sorting happens.\nOriginal represents the dataset name to be sorted.\nSorted represents the dataset name after it is sorted. Variable_name represents the column name on which sorting happens. Variable_name Original represents the dataset name to be sorted. Original Sorted represents the dataset name after it is sorted. Sorted",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "5. What do you mean by NODUP and NODUPKEY options and write difference between them?",
        "answer": "PROC SORT in SAS enables the removal of duplicate values from a table primarily by utilizing two options: NODUP\nNODUPKEY NODUP NODUPKEY NODUP vs NODUPKEY - NODUP vs NODUPKEY NODUP  NODUPKEY \nEach variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement.  \nNODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. \nSyntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; NODUP  NODUPKEY \nEach variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement.  \nNODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. \nSyntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; NODUP  NODUPKEY NODUP  NODUPKEY NODUP NODUPKEY Each variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement.  \nNODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. \nSyntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; Each variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement. Each variable in the data set can be compared with it. NODUPKEY only compares the variables that are listed in the BY statement. NODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. NODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. Syntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; Syntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; Syntax: Syntax: Syntax: PROC SORT DATA=readin NODUP; \nBy varname; \nrun; PROC SORT DATA=readin NODUP; \nBy varname; \nrun; Syntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; Syntax: Syntax: Syntax: PROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; PROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "6. Explain different ways to remove duplicate values in SAS.",
        "answer": "Below are two ways to delete duplicate values in SAS: The use of nodups in the procedure: The use of nodups in the procedure: The NODUPRECS (or NODUPREC or NODUP) option of PROC SORT identifies observations with identical values for all columns and removes them from the output data set. Proc sort data=SAS-Dataset nodups; \nBy varname; \nrun; Proc sort data=SAS-Dataset nodups; \nBy varname; \nrun; The use of PROC SQL in the procedure: The use of PROC SQL in the procedure: PROC SQL can be used to remove duplicates. The DISTINCT keyword is used in the select clause to account for duplicate observations. proc sql;  \ncreate table New_dataset as select distinct * from Old_dataset where var=distinct(var); \nquit; proc sql;  \ncreate table New_dataset as select distinct * from Old_dataset where var=distinct(var); \nquit;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "7. Explain the usage of trailing @@.",
        "answer": "Occasionally, multiple observations need to be created from a single record of raw data. In order to specify how SAS will read such a record, you can use the double trailing at-sign (@@ or \"double trailing @\").  By using a double trailing @@, SAS is told to \"hold the line more strongly\". A double trailing sign (@@) directs SAS not to advance to another input record, but to hold the current input record for the next input statement. It is important to note that the single trailing @ does not hold an input record for subsequent Iterations of the data step. A trailing \"@\" indicates that an input record will only be held for this iteration of the data step (until the processing returns or gets back to the top of the data step), or that it will be passed to the next INPUT statement without a single trailing \"@\".",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "8. How do you specify the number of iterations and specific conditions within a single do loop?",
        "answer": "The code below illustrates how to specify the number of iterations and specific conditions within a single do loop. The iterative DO statement executes the DO loop until the Sum is greater than or equal to 50000, or until the DO loop has executed 10 times, whichever comes first. data Scaler; \ndo i=1 to 50 until (Sum>=50000); \nYear+1; \nSum+5000; \nSum+Sum*.10; \nend; \nrun; data Scaler; \ndo i=1 to 50 until (Sum>=50000); \nYear+1; \nSum+5000; \nSum+Sum*.10; \nend; \nrun;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "9. What is the importance of the Tranwrd function in SAS.",
        "answer": "TRANRWD, when applied to a character string, replaces or eliminates all occurrences of a substring. By using TRANWRD, you can scan for words (or patterns of characters) and replace them with a second word (or pattern of characters). Syntax: Syntax: TRANWRD(source, target, replacement) TRANWRD(source, target, replacement) Here, The source is a character constant, variable, or expression you wish to translate.\nThe target is an expression, constant, or variable searched in the source.\nReplacement specifies an expression, constant, or variable that will replace target. The source is a character constant, variable, or expression you wish to translate. The target is an expression, constant, or variable searched in the source. Replacement specifies an expression, constant, or variable that will replace target. Example:    \nname : Mrs. Johny Lever  \nname=tranwrd(name, \"Mrs.\", \"Ms.\");   \nResult : Ms. Johny Lever Example:   ",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "10. Explain what you mean by SYMGET and SYMPUT.",
        "answer": "In a data step, SYMGET returns a macro variable's value. Conversely, the primary function of SYMPUT is to store the value of the data set in a macro variable. Syntax of Symput: Syntax of Symput: CALL SYMPUT(macro-variable, value); CALL SYMPUT(macro-variable, value); Syntax of SYMGET: Syntax of SYMGET: SYMGET(argument) SYMGET(argument) Example: In the following program we have created a macro variable and then we have used the symput function to put the value where our key is 'avar' and then we have used the symget function to get the micro variable value. Example: * Create a macro variable.  \ndata dataset; \nset sashelp.class; \nif _N_ = 1 then do; \ncall symput('avar', name); \nend; \nrun; \n%put &avar; \n* Get macro variable value in a dataset; \ndata needit; \nvar1=symget('avar'); \nrun; * Create a macro variable.  \ndata dataset; \nset sashelp.class; \nif _N_ = 1 then do; \ncall symput('avar', name); \nend; \nrun; \n%put &avar; \n* Get macro variable value in a dataset; \ndata needit; \nvar1=symget('avar'); \nrun;",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "11. Identify the error in the following code.",
        "answer": "proc mixed data=SASHELP.IRIS plots=all; \nmodel petallength= /; \nclass species; \nrun; proc mixed data=SASHELP.IRIS plots=all; \nmodel petallength= /; \nclass species; \nrun; Basically, it is a syntax error. In all cases, the MODEL statement must appear after the CLASS statement.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "12. What do you mean by functions and procedures in SAS?",
        "answer": "SAS Procedures: They process data in SAS data sets to create statistics, tables, reports, charts, and plots, as well as to perform other analyses and operations on the data. All types of statistical analysis can be performed using SAS procedures. Execution of a procedure is triggered by the keyword PROC, which starts the step. Here are some SAS PROCs: SAS Procedures: PROC SORT\nPROC MEAN\nPROC SQL\nPROC COMPARE\nPROC REPORT\nPROC FREQ, etc. PROC SORT PROC MEAN PROC SQL PROC COMPARE PROC REPORT PROC FREQ, etc. SAS Functions: There are many built-in functions in SAS that aid in the analysis and processing of data. You use them in DATA statements. Different functions take different numbers of arguments. Here is a list of SAS functions: SAS Functions: SCAN()\nNPUT()\nSUBSTR()\nCOUNTC()\nCOMPRESS(), etc. SCAN() NPUT() SUBSTR() COUNTC() COMPRESS(), etc.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "13. State the difference between PROC MEANS and PROC SUMMARY.",
        "answer": "Proc SUMMARY and Proc MEANS are essentially the same methods for calculating descriptive statistics, such as mean, count, sum, median, etc. Also, it is capable of calculating several other metrics such as percentiles, quartiles, variances, standard deviations, and t-tests. N, MIN, MAX, MEAN, and STD DEV are the default statistics produced by PROC MEANS. They differ mainly in the output type they produce by default. Unlike PROC SUMMARY, PROC MEANS by default prints output in the LISTING window or other open destination. When the print option is included in the Proc SUMMARY statement, the results will be printed to the output window.\nBy default, PROC MEANS takes into account all of the numerical variables in the statistical analysis. PROC SUMMARY, on the other hand, takes into account all of the variables described in the VAR statement in the statistical analysis. They differ mainly in the output type they produce by default. Unlike PROC SUMMARY, PROC MEANS by default prints output in the LISTING window or other open destination. When the print option is included in the Proc SUMMARY statement, the results will be printed to the output window. By default, PROC MEANS takes into account all of the numerical variables in the statistical analysis. PROC SUMMARY, on the other hand, takes into account all of the variables described in the VAR statement in the statistical analysis.",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "14. Name some SAS system options that are used to debug SAS Micros.",
        "answer": "There are a number of SAS System options that users can use to troubleshoot macro problems and issues. Macro-option results are automatically shown in the SAS Log. MEMRPT: Displays memory usage statistics in the SAS logs.\nMERROR: SAS will issue a warning if we attempt to invoke a macro that SAS does not recognize. Whenever there is a misspelling or if a macro is not defined, warning messages are displayed.\nMLOGIC: SAS prints details about the macro execution in its log. In short, it identifies and displays micro logic.\nMPRINT: When you execute a macro code, SAS doesn't show it in the LOG file, but when you use the MPRINT option it displays all the SAS statements of the resolved macro code. With the MPRINT option, one statement per line is printed along with the corrected macro code.\nSYMBOLGEN: It prints a message in the LOG file about how a macro variable is resolved. Specifically, a message is printed in the LOG whenever a macro variable is resolved. MEMRPT: Displays memory usage statistics in the SAS logs. MEMRPT: MERROR: SAS will issue a warning if we attempt to invoke a macro that SAS does not recognize. Whenever there is a misspelling or if a macro is not defined, warning messages are displayed. MERROR: MLOGIC: SAS prints details about the macro execution in its log. In short, it identifies and displays micro logic. MLOGIC: MPRINT: When you execute a macro code, SAS doesn't show it in the LOG file, but when you use the MPRINT option it displays all the SAS statements of the resolved macro code. With the MPRINT option, one statement per line is printed along with the corrected macro code. MPRINT: SYMBOLGEN: It prints a message in the LOG file about how a macro variable is resolved. Specifically, a message is printed in the LOG whenever a macro variable is resolved. SYMBOLGEN:",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "15. Explain how %Let and macro parameters can be used to create micro variables in SAS programming?",
        "answer": "%LET: %Let is generally used to create micro variables and assign values to them. You can define it inside or outside a macro. %LET: Syntax: %LET macro-variable-name = value; Syntax: %LET macro-variable-name = value; Any number, text or date can be entered in the Value field, depending on what the program requires. How to use the Micro Variable? How to use the Micro Variable? Whenever referencing macro variables, an ampersand (&) is used followed by the macro variable name as shown below: & <Macro variable Name> & <Macro variable Name> Macro Parameters: Macros have variables called parameters whose values you set when you invoke the macro. The parameters are added to a macro by naming them in parenthesis in %macro. Macro Parameters: Syntax: Syntax: %MACRO macro-name (parameter-1= , parameter-2= , ......parameter-n = ); \nMacro Statements; \n%MEND; %MACRO macro-name (parameter-1= , parameter-2= , ......parameter-n = ); \nMacro Statements; \n%MEND; How to call a Macro? How to call a Macro? To call/use micro variables, we use % followed by the macro variable name and then pass parameters.\n%macro_name(par1,par2,....parn);  %macro_name(par1,par2,....parn);",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "16. Write different ways to create micro variables in SAS Programming?",
        "answer": "The following are some ways to create macro variables: %Let\n%Global\nCall Symput\nProc SQl into clause\nMacro Parameters %Let %Global Call Symput Proc SQl into clause Macro Parameters",
        "reference": "interviewbit.com",
        "role": "sas"
    },
    {
        "question": "1) What is SAS?",
        "answer": "SAS is a short form of Statistical Analytics System that is developed by the SAS Institute. It is the leading integrated set of software products for advanced analytics, predictive analytics, multivariate analytics, data management, and business intelligence. SAS includes a graphical point-and-click solution to make its user-interface easy and smooth. Thus, SAS provides easy-to-use, user-friendly platforms to non-technical users and adds advanced options through SAS language.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "2) What are the features of SAS?",
        "answer": "SAS is one of the best analytical platforms with a wide variety of features. The following are the few main features of SAS:\nAnalytics: SAS is considered one of the leading analytics platforms of different business products and services.\nData Access & Management: SAS also allows users to use it as DBMS (Database Management System) software.\nBusiness Solutions: SAS consists of a solution for performing business analysis. This business analysis can also help companies to build the right business products.\nReporting & Graphics: SAS allows users to generate analysis reports in different formats, such as list, summary, and graphic reports.\nVisualization: SAS enables users to visualize the reports in graphs that may include simple scatter plots to bar charts to other complex multi-page classification panels.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "3) Why do people prefer using SAS over other data analytics tools available in the market?",
        "answer": "There are many alternatives available for SAS, but people prefer using SAS the most. The reason for this is the uniqueness of its features than other data analytics tools in the market. People prefer using SAS due to the following reasons:\nEase of Learning: SAS is straightforward to learn because it has simple concepts. It allows users to use an option like PROC SQL, which makes their work a lot easier. This option is mainly derived from SQL, so users knowing SQL get a slight advantage in working with SAS.\nGraphical Capabilities: SAS includes functional graphical capabilities. Due to this, users can quickly learn and start customizing the plots with a little bit of learning.\nData Handling Capabilities: SAS is considered far better than other leading tools and languages (such as Python, R, etc.) in data handling capabilities. It is the best platform to choose when dealing with the vast amount of data. Also, it is best suited for parallel computations.\nAdvancements in Tool: SAS receives frequent updates, which are designed, developed and tested in a well-controlled environment. On the other side, Python and R are available for contribution openly, and hence there are more chances of error in the latest developments.\nJob Scenario: SAS is one of the top leaders in the global market regarding the availability of jobs. According to some reports, SAS controls around 70% of the data analytics market share in Indian corporate jobs.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "SAS framework has the following essential capabilities:\nAccess: One of the main capabilities of the SAS framework is Data accessibility. That means data can be easily accessed from different sources, such as raw database, excel file, oracle database and SAS datasets, etc.\nManage: Data management is another vital capability of the SAS framework. That means data accessed from various sources can be easily managed. To manage data, one can perform several functions like creating variables, validating data, cleaning data, creating subset data, etc.\nAnalyze: Once the data is accessed and managed, it is then analyzed. We can perform either some fundamental analyses (for example - averages, frequency, etc.) or complex analyses (for example - forecasting, regression, etc.).\nPresent: The analyzed data can be stored or saved in a graphic report, list form, and overall summarized insights. These generated stats can be further printed or published online. Also, these stats can be written into a data file.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "5) How many data types are present in SAS?",
        "answer": "There are two types of data types available in SAS: \"Numeric\" and \"Character\". Besides, dates are also considered characters; however, SAS provides implicit functions to work upon dates.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "The following are the main functions of SAS:\nADVERTISEMENT\nBusiness Planning\nData Warehousing\nStatistical Analysis\nData Management and Project Management\nQuality Management\nInformation Retrieval\nOperational Research and Decisional Support",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "7) What are the essential components of SAS programming?",
        "answer": "There are mainly three components used in SAS programming, such as:\nVariables\nDataset\nStatements",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "8) What are the basic syntax rules to be followed while writing the SAS program?",
        "answer": "To write a program in SAS, we can use an Editor Window. A program consists of several statements consisting of the appropriate syntax. These statements are arranged in order for the SAS to perform desired functions.\nSome basic syntax rules to be followed while writing SAS program are listed below:\nEach statement must include a semicolon (;) at the end.\nA semicolon is designed to be used as a separator. That means we can use a semicolon to separate several statements in a single line.\nStatements in SAS are not case-sensitive. If there are extra spaces before the statements, they are removed automatically.\nSAS has two different options for inserting a comment for statements, such as:\nComment can be included between an asterisk (*) and a semicolon (;). Start a line with an asterisk and end with a semicolon.\nAnother way to insert a comment is to include it between a forwarding slash and an asterisk (/*) and an asterisk and a forward slash (*/).",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "The term PDV is a short form of 'Program Data Vector'. It is generally defined as an area of memory that is used by SAS for building data set. PDV is considered as a logical concept in SAS.\nSome of the main functions of PDV are listed below:\nPDV consists of two automatic variables, such as \"_N_\" and \"_ERROR_\". The first variable shows the number of counts for the data-step, which is being executed. In contrast, the second variable informs about the errors that come at the execution period.\nPDV helps in creating a database that includes one observation at any instant time.\nPDV helps in creating input buffer at compilation-time. These input buffers are used to keep the data from any external files.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "10) How will you elaborate the SAS data set?",
        "answer": "SAS dataset is generally defined as the data that is used for the analysis in the SAS program. It is commonly known as the SAS data table.\nThere are mainly two ways used to arrange data in the data set, such as:\nRows of observations\nColumns of variables",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "11) Why do we use the output statement while writing programs in SAS?",
        "answer": "The 'output' statement is mainly used to save summarized stats in a SAS data set. The saved information can be further used to generate customized reports as per the requirements.\nApart from this, we can use different options in the output statement to perform the followings:\nStore historical data of the entire process.\nDefine the name of the output data set.\nSelect the desired stats to save in the output data set.\nCompute and save percentiles that could not get computed automatically.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "12) Why do we use Stop Statement in the SAS program?",
        "answer": "The 'stop' statement is mainly used in any SAS program to immediately stop current data processing. The processing of the statement is resumed after the end of the corresponding data step.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "13) What, according to you, is the main difference between reading data from the existing data-sets and reading data from external files?",
        "answer": "When reading data from an existing data set, SAS holds the variables' values from one observation to the other corresponding observation. Besides, while reading the data from external files, SAS doesn't hold the values. In this case, SAS only reads the observations. The variables' values must be declared if there is a need for it. This is the main difference between reading data from existing datas sets and reading data from external files.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "It can be explained with a simple example when SAS does not automatically change the character value to a numeric value. Just assume a variable named 'PayRate', and its value starts with a dollar sign ($). In this case, SAS cannot convert or change the values of 'PayRate' to numeric values because the dollar sign prevents the process from being completed. Whenever SAS tries to automatically convert the values, the dollar sign blocks the entire process. As a result, the values don't get converted to numeric values.\nThat is why it is recommended to use INPUT and PUT functions with programs in case of conversions.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "The comparison between SAS BI and SAP BO is tabulated below:\nAttributes SAS BI SAP BO\nAnalytics Easy to use Analytics Platform. Predictive Analytics Platform.\nReason for Deployment Supports quick data integration features with diverse sources. Supports high-level visualization with a user-friendly interface.\nAd-hoc Analysis Average Excellent\nPresentation Average Excellent\nMobile BI Excellent Good\nApplication Connects BI and Analytics to provide enterprise-grade data. Uses frontend suite to provide features like sort, view, and analysis of BI data.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "In SAS, BY-group processing is the method of processing the indexed, ordered, or grouped data based on variables. The BY statement is applied from the BY-group processing to complete the process.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "17) How is INPUT different from INFILE in SAS?",
        "answer": "The INPUT statement is used to specify the SAS programming variables, whereas the INFILE statement is used to specify an external file containing the data.\nThe syntax of INPUT:\ninput 'varname1' 'varname2';  \nThe syntax of INFILE:\ninfile 'filename';",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "18) What is the significant difference between using the drop=data set option in a set statement and data statement?",
        "answer": "In case there is a requirement to process specific variables but don't want them to show in the new data set, we can use the drop=data set option in the data statement.\nWhen we neither want to process specific variables nor want them show in the new data set, we can use the drop=data set option in the set statement.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "The Data step in SAS is a form of SAS dataset containing the data and the 'data dictionary'. The data dictionary's primary function is to store all the information of variables along with their properties.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "SAS Informat is the set of instructions that instruct SAS how to read the data into SAS variables. These Informats are primarily used to read or input data from external files (also called text files, flat files, sequential files, or ASCII files).\nThere are mainly three different types of categories used to place SAS Informats, such as:\nNumeric Informats: INFORMAT w.d\nCharacter Informats: $INFORMATw\nDate/Time Informats: INFORMAT w.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "21) How will you differentiate SAS Format and SAS Informat?",
        "answer": "The main differences between SAS Format and SAS Informat are tabulated below:\nSAS Format SAS Informat\nIt is used to instruct SAS how to show values in the variables. It is used to instruct SAS how to read data from variables.\nFormats are mainly used to write the data. Informats are mainly used for reading or retrieving input data from external files.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "22) What is the command used for performing sorting in SAS programs?",
        "answer": "We can use the PROC SORT command to perform sorting in the SAS program. This command is suitable for any number of variables within the program. The PROC SORT command works on the dataset. That means the command creates a new data set with sorting and keep the original data set unchanged.\nThe syntax below shows the use of PROC SORT command in SAS:\nPROC SORT DATA=original OUT=Sorted;  \nBY variable;  \nThe process of sorting can be applied in both ascending and descending orders. An additional keyword is added in the BY statement depending on the requirement for the desired sorting order. We can either add 'ASCENDING' or 'DESCENDING' keyword to perform the necessary task.\nFor example:\nPROC SORT DATA=original OUT=Sorted;  \nBY DESCENDING variable;",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "When it comes to removing duplicate values from a table in SAS, PROC SORT mainly has two options that are used to perform this:\nNODUP\nNODUPKEY\nWe can differentiate these two options with the help of the following table:\nNODUP NODUPKEY\nIt is used to compare all the variables available inside the data set. It is used to compare only BY variables in the current data set.\nIt is used to find and remove duplicate or repeating observations. It is used to delete options for the variables' values defined in the BY statement.\nThe syntax below displays the use of the NODUP option in PROC SORT:\nPROC SORT DATA=readin NODUP;\nBY variable name;\nRUN; The syntax below displays the use of the NODUPKEY option in PROC SORT:\nPROC SORT DATA=readin NODUPKEY;\nBY variable name;\nRUN;",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "24) How is PROC MEANS different from PROC SUMMARY?",
        "answer": "PROC MEANS produces stats for subgroups only in the case when there is a use of BY statement, and the input data was already sorted (using PROC SORT) by the BY variables before use.\nOn the other side, PROC SUMMARY automatically produces subgroup stats and provides all the information in one run instead of sorting the data set by the variables and running PROC MEANS again and again. However, PROC SUMMARY doesn't provide any information as output unless we have applied the OUTPUT statement to create a new DATA SET and used PROC PRINT to view the complete computed stats.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "25) What is the role of PROC print and PROC contents in SAS?",
        "answer": "In SAS, PROC print's primary role is to make sure that the data inside the data set is read correctly. PROC contents, on the other side, display the information about the data set.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "DATA_NULL_ is such a type of data step that doesn't create or generate any additional data set. It is beneficial in a scenario when there is a need to create macro variables. Additionally, it can also be used to write the output without any data set.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "27) What functions we can use to convert character variables into numeric variables and numeric variables into character variables?",
        "answer": "While working with SAS, there are several tasks when we are required to convert character variables into numeric variables and numeric variables into character variables. There are mainly two different functions used to perform these conversions:\nPUT(): This function is used to convert numeric variables into character variables. The PUT() function is beneficial when there is a requirement to create a new variable having a different name. Here, it is necessary to have a similar source format type as the source variable.\nFor example:\nchar_var= put( num_var, 9.);  \nINPUT(): This function is used to convert character variables into numeric variables. Like PUT(), the INPUT() function is also beneficial when creating a new variable having a different name. Here, the source variable type must always be a character variable.\nFor example:\nnum_var= input(char_var,6.0);",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "28) What is the role of _CHARACTER_ and _NUMERIC_?",
        "answer": "_CHARACTER_ refers to all the character variables, which are currently defined in the existing data step. The statements below are used to specify all the character variables in PROC MEANS:\nproc means;  \nvar_character_;  \nrun;  \nOn the other side, _NUMERIC_ refers to all the numeric variables, which are already defined in the existing data set. The statements below are used to specify all the numeric variables in PROC MEANS:\nproc means;  \nvar_numeric_;  \nrun;",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "29) What are the commands used for including or excluding any particular variables in the data set?",
        "answer": "There are mainly two commands used for including or excluding any particular variables in the data set; they are:\nDROP: We can specify the DROP statement variable to delete or exclude it from the data step.\nKEEP: We can specify the variable in the KEEP statement to retain or include it in the data step.\nApart from this, some data set options can also be used to perform this purpose.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "Some of the main character functions used for data cleaning in SAS are given below:\nTRIM(str): The aim of using this function is to remove trailing blanks from the string.\nCOMPRESS(char_string): The aim of using this function is to remove blanks and other desired characters from the string.\nUPCASE(char_string): The aim of using this function is to convert all the characters into uppercase in the specified string.\nLOWCASE(char_string): The aim of using this function is to convert all the characters into lowercase in the specified string.\nCOMPBL(str): The aim of using this function is to remove multiple blanks from the string and convert them into a single blank.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "31) What is the command used for saving logs in an external file in SAS?",
        "answer": "The PROC PRINTTO command is used for saving logs in an external file in SAS. The syntax of this command is shown below:\nproc printto log=\"location of the folder for creating a new log file\" new;  \nrun;  \nFor Example:\nproc printto log=\"C:\\Users\\javaTpoint\\Downloads\\LOG-FILE.txt\" new;  \nrun;  \nWhile executing this, a new text file named 'LOG-FILE' will be created in the location C:\\Users\\javaTpoint\\Downloads\\",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "32) Why do we use the SUBSTR function while writing programs in SAS?",
        "answer": "SUBSTR function is one of SAS's useful functions that is mainly used when there is a requirement to abstract the substring from a character variable. In case a start position and length are already defined, this function is used to abstract the character string.\nThe syntax below shows the use of the SUBSTR function in SAS:\nSUBSTR(char_var, start,length);",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "33) What methods can we use to create a Macro variable in SAS?",
        "answer": "SAS allows users to use several different methods for creating Macro variables. However, listed below are the five most commonly used methods:\nUsing Macro parameters\nUsing the %DO statement (iterative)\nUsing the %LET statement\nUsing CALL SYMPUTX routine\nUsing INTO in PROC SQL",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "34) What are the few most commonly used options to debug Macros in SAS?",
        "answer": "The following are the most common options used to track the macro code along with the SAS code generated by the macros:\nMLOGIC\nSYMBOLGEN\nMPRINT\nThe messages generated by these options can only be accessed through the SAS log.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "35) What is the main difference between SYMGET and SYMPUT?",
        "answer": "In SAS, the main function of SYMGET is to retrieve a value from a macro variable to a data set. Whereas on the other hand, the main function of SYMPUT is to store the value of the data set in the macro variable.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "",
        "answer": "PROC SQL in SAS programming is considered as the simultaneous process for performing all the observations. The following steps are performed throughout the working of PROC SQL:\nSAS first scans all the SQL procedure statements and makes sure that there are no syntax errors like missing semicolons or the use of any invalid statements.\nThe SQL Optimizer scans all available queries inside the statement and further decides how the SQL query should be executed to reduce run-time and improve overall performance.\nIf there is a table present inside the FROM statement, it will be loaded into the data engine. Because of this, they can be further accessed in memory easily and quickly.\nNext, codes and other available calculations are executed.\nAs a result, the final table gets created in memory.\nThe final table is then transferred to the output table, as specified in the SQL statement.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "37) What is the most common method used to count the total number of intervals between two dates in SAS?",
        "answer": "We can use the interval function INTCK to calculate the total number of intervals between two dates in SAS.\nThe syntax below displays the use of the INTCK function:\nINTCK(interval,start-of-period,end-of-period)",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "38) What are the methods for deleting duplicate observations in SAS?",
        "answer": "There are mainly three methods used for deleting the duplicate observations in SAS:\nBy using an SQL query in the procedure\nProc sql;  \nCreate SAS-Dataset as select * from Old-SAS-Dataset where var=distinct(var);  \nquit;  \nBy cleaning the data\nSet temp;  \nBy group;  \nIf first.group and last.group then  \nRun;  \nBy using the NODUPS option in the procedure\nProc sort data=SAS-Dataset nodups;  \nby var;  \nrun;",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "39) What is the maximum size of the allowed data set in SAS?",
        "answer": "The total number of observations depends entirely on the capacity of the system. There can be any number of observations depending on the system's ability to store and handle them.\nBefore SAS 9.1 version, there was limited support, and the data set had a maximum limit of only 32,767 variables. But, SAS 9.1 or above supports using the maximum possible variable in the SAS data set based on the system's resources.",
        "reference": "javatpoint.com",
        "role": "sas"
    },
    {
        "question": "40) What are some common mistakes that people make while writing programs in SAS?",
        "answer": "When writing SAS programs, people make some common errors, especially when they are beginners. The most common errors are as follows:\nEach statement in SAS must be closed by a semicolon (;). But, most people forget to use it at some points. It is the most common mistake in SAS programming.\nMissing to check logs once the program is submitted.\nNot using the proper methods for debugging process.\nMaking commenting errors by either not using a proper way or failing to implement comments where necessary.",
        "reference": "javatpoint.com",
        "role": "sas"
    }
]