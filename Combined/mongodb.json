[
    {
        "question": "1. Compare MongoDB with Cassandra.",
        "answer": "Learn about a brief comparison between MongoDB and Cassandra using this table.\nCriteria MongoDB Cassandra\nData Model Document Bigtable like\nDatabase scalability Read Write\nQuerying of data Multi-indexed Using Key or Scan\nTo have a detailed comparison between MongoDB and Cassandra, check out Cassandra Versus MongoDB!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "2. What makes MongoDB the best?",
        "answer": "MongoDB is considered to be the best NoSQL database because of its following features:\nDocument-oriented (DO)\nHigh performance (HP)\nHigh availability (HA)\nEasy scalability\nRich query language",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "3. How to do transactions/locking in MongoDB?",
        "answer": "MongoDB does not use conventional locking with reduction as it is planned to be light, high-speed, and knowable in its presentation. It can be considered as parallel to the MySQL MyISAM auto entrust sculpt. With the simplest business sustain, performance is enhanced, particularly in a structure with numerous servers.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "4. When and to what extent does data get extended to multi-slice?",
        "answer": "MongoDB scrap stands on a collection. So, an album of all substances is kept in a lump or mass. Only when there is an additional time slot, there will be more than a few slice data achievement choices, but when there is more than one lump, data gets extended to a lot of slices and it can be extended to 64 MB.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "5. Compare MongoDB with Couchbase and CouchbaseDB.",
        "answer": "Although MongoDB, Couchbase, and Couchbase DB are common in many ways, still they are different in the case of necessities for the execution of the model, crossing points, storage, duplications, etc.\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "6. When do we use a namespace in MongoDB?",
        "answer": "During the sequencing of the names of the database and the collection, the namespace is used.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "7. If you remove an object attribute, is it deleted from the database?",
        "answer": "Yes, it is deleted. Hence, it is better to eliminate the attribute and then save the object again.\nEnroll now in Database Training Course to learn more.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "8. How can we move an old file into the moveChunk directory?",
        "answer": "Once the functions are done, the old files are converted to backup files and moved to the moveChunk directory at the time of balancing the slices.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "9. Explain the situation when an index does not fit into RAM.",
        "answer": "When an index is too huge to fit into RAM, then MongoDB reads the index, which is faster than reading RAM because the indexes easily fit into RAM if the server has got RAM for indexes, along with the remaining set.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "10. How does MongoDB provide consistency?",
        "answer": "MongoDB uses the reader–writer locks, allowing simultaneous readers to access any supply like a database or a collection but always offering private access to single writes.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "11. Why is MongoDB not chosen for a 32-bit system?",
        "answer": "Mongo DB is not considered as a 32-bit system because for running the 32-bit MongoDB, with the server, information and indexes require 2 GB. That is why it is not used in 32-bit devices.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "12. How does Journaling work in MongoDB?",
        "answer": "Write operations are saved in memory while journaling is going on. The on-disk journal files are really dependable for the reason that the journal writes are habitual. Inside dbPath, a journal subdirectory is designed by MongoDB.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "13. How can you isolate the cursors from intervening with the write operations?",
        "answer": "The snapshot() method is used to isolate the cursors from intervening with writes. This method negotiates the index and makes sure that each query comes to any article only once.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "14. Define MongoDB.",
        "answer": "It is a document-oriented database that is used for high availability, easy scalability, and high performance. It supports the dynamic schema design.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "15. Explain the replica set.",
        "answer": "It is a group of mongo instances that maintains the same dataset. Replica sets provide redundancy and high availability and are the basis for all production deployments.\nAlso, Checkout this interesting blog on Redis Vs MongoDB!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "16. What are the key features of MongoDB?",
        "answer": "There are three main features of MongoDB:\nAutomatic scaling\nHigh performance\nHigh availability",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "17. What is CRUD?",
        "answer": "MongoDB provides CRUD operations:\nCreate\nRead\nUpdate\nDelete\nClick here to learn more about MongoDB CRUD Operations in our MongoDB Tutorial!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "18. What is Sharding?",
        "answer": "In MongoDB, sharding means to store data on multiple machines.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "19. What is Aggregation in MongoDB?",
        "answer": "In MongoDB, aggregations are operations that process data records and return computed results.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "20. Define Namespace in MongoDB.",
        "answer": "It is the concatenation of the collection name and the name of the database.\n\nIntermediate Interview Questions",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "21. Which syntax is used to create a Collection in MongoDB?",
        "answer": "We can create a collection in MongoDB using the following syntax:\ndb.createCollection(name,options)",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "22. Which syntax is used to drop a Collection in MongoDB?",
        "answer": "We can use the following syntax to drop a collection in MongoDB:\ndb.collection.drop()",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "23. Explain Replication.",
        "answer": "Replication is the process of synchronizing data across multiple servers.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "24. What is the use of an Index in MongoDB?",
        "answer": "In MongoDB, indexes provide high-performance read operations for frequently used queries.\nIf you have any doubts or queries related to MongoDB, get them clarified from MongoDB Experts on our MongoDB Community!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "25. Which command is used for inserting a document in MongoDB?",
        "answer": "The following command is used for inserting a document in MongoDB:\ndatabase.collection.insert (document)",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "26. What is the use of GridFS in MongoDB?",
        "answer": "GridFS is used for storing and retrieving large files, such as audio, image, and video files.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "27. What is the use of Journaling in MongoDB?",
        "answer": "Journaling is used for safe backups in MongoDB.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "28. Which command is used to see a connection?",
        "answer": "We can use the following command to see the connection:\ndb_adminCommand (“connPoolStats”)",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "29. Define the primary Replica set.",
        "answer": "The primary replica set accepts all write operations from clients.\nTo have a detailed comparison between Firebase and MongoDB, check out Firebase Vs MongoDB!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "30. Define the secondary Replica sets.",
        "answer": "The secondaries replicate the primary replica set’s oplog and apply the operations to their datasets such that the secondaries’ datasets reflect the primary’s dataset.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "31. What is the use of Profiler?",
        "answer": "Profiler is used to show the performance characteristics of every operation against the database.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "32. What type of data is stored by MongoDB?",
        "answer": "MongoDB stores data in the form of documents, which are JSON-like field and value pairs.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "33. What is the purpose of Replication?",
        "answer": "Replication provides redundancy, and it increases data availability.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "34. What are Embedded documents?",
        "answer": "Embedded documents capture relationships between data by storing related data in a single document structure.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "35. Define the application-level Encryption.",
        "answer": "The application-level encryption provides encryption on a per-field or per-document basis within the application layer.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "36. What is Storage Encryption?",
        "answer": "Storage encryption encrypts all MongoDB data on storage or on the operating system to ensure that only authorized processes can access the protected data.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "37. Which method is used to create an index?",
        "answer": "The createIndex() method is used to create an index.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "38. What is Replica set oplog?",
        "answer": "The oplog records all operations that modify the data in the replica set.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "39. What is Vertical Scaling?",
        "answer": "Vertical scaling adds more CPU and storage resources to increase capacity.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "40. Define Horizontal Scaling.",
        "answer": "Horizontal scaling divides the dataset and distributes data over multiple servers, or shards.\n\nAdvanced MongoDB Questions and Answers",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "41. What are the components of the Sharded cluster?",
        "answer": "The sharded cluster has the following components:\nShards\nQuery routers\nConfig servers",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "42. Which command is used to create a database?",
        "answer": "To create a database, we can use the Database_Name command.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "43. Which command is used to drop a database?",
        "answer": "The db.dropDatabse() command is used to drop a database.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "44. What is the use of the pretty() method?",
        "answer": "The pretty() method is used to show the results in a formatted way.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "45. Which method is used to remove a document from a collection?",
        "answer": "The remove() method is used to remove a document from a collection.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "46. Define MongoDB Projection.",
        "answer": "Projection is used to select only the necessary data. It does not select the whole data of a document.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "47. What is the use of the limit() method?",
        "answer": "The limit() method is used to limit the records in the database.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "48. What is the syntax of the limit() method?",
        "answer": "The syntax of the limit() method is as follows:\n>db.COLLECTION_NAME.find().limit(NUMBER)",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "49. What is the syntax of the sort() method?",
        "answer": "In MongoDB, the following syntax is used for sorting documents:\n>db.COLLECTION_NAME.find().sort({KEY:1})",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "50. Which command is used to create a backup of the database?",
        "answer": "The mongodump command is used to create a backup of the database.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "51. What is a Collection in MongoDB?",
        "answer": "In MongoDB, a collection is a group of MongoDB documents.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "52. What is the use of the db command?",
        "answer": "The db command gives the name of the currently selected database.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "53. Which method is used to update documents into a collection?",
        "answer": "The update() and save() methods are used to update documents into a collection.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "54. What is the syntax of the skip() method?",
        "answer": "The syntax of the skip() methopd is as follows:\n>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "55. Which command is used to restore the backup?",
        "answer": "The mongorestore command is used to restore the backup.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "56. What is the use of the dot notation in MongoDB?",
        "answer": "MongoDB uses the dot notation to access the elements of an array and the fields of an embedded document.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "57. Define Auditing.",
        "answer": "Auditing provides administrators with the ability to verify that the implemented security policies are controlling the activity in the system.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "58. Define the Aggregation pipeline.",
        "answer": "The aggregation pipeline is a framework for performing aggregation tasks. The pipeline is used to transform documents into aggregated results.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "59. Define MapReduce.",
        "answer": "MapReduce is a generic multi-phase data aggregation modality that is used for processing quantities of data.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "60. What is Splitting in MongoDB?",
        "answer": "Splitting is a background process that is used to keep chunks from growing too large.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "61. Which language is used to write for MongoDB?",
        "answer": "C++ is used for writing and implementing MongoDB.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "62. In which format does MongoDB store data?",
        "answer": "MongoDB uses collections to store data rather than tables.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "63. What is the use of the save() method?",
        "answer": "The save() method is used to replace the existing document with a new document.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "64. What is MongoDB?",
        "answer": "MongoDB (from humongous) is a cross-platform document-oriented database. Classified as a NoSQL database, MongoDB eschews the traditional table-based relational database structure in favor of JSON-like documents with dynamic schemas (MongoDB calls the format ‘BSON’), making the integration of data in certain types of applications easier and faster. Released under a combination of the GNU Affero General Public License and the Apache License, MongoDB is open-source.\nMongoDB was first developed by the software company 10gen (now, MongoDB Inc.) in October 2007 as a component of a planned platform as a service product. Then, the company shifted to an open-source development model in 2009, with 10gen offering commercial support and other services. Since then, MongoDB has been adopted as backend software by a number of major websites and services, including Craigslist, eBay, Foursquare, SourceForge, Viacom, and the New York Times, among others. Currently, MongoDB is the most popular NoSQL database system.\nFor a better understanding of MongoDB, refer to this What is MongoDB? blog.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "65. What is the use of MongoDB?",
        "answer": "MongoDB is a relational database management system (RDBMS) replacement for web applications. So, when we have something close to RDBMS, MongoDB could be of good use.\nIt gives us the additional partition tolerance, which RDMBS doesn’t offer, but it has problems with availability. Nonetheless, if we want more scalability, MongoDB would be the right choice for us. It’s suitable for real-time analytics and high-speed logging, and it’s highly scalable as well. Craigslist uses MongoDB for archived posts.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "66. What do you understand by NoSQL databases? Is MongoDB a NoSQL database? Explain.",
        "answer": "Presently, the Internet is loaded with big data, big users, and so on that are becoming more complex day by day. NoSQL is the answer to all these problems; it is not a traditional database management system, not even a relational database management system (RDBMS).\nNoSQL stands for ‘Not only SQL’, and it is a type of database that can handle and sort all types of unstructured, messy, and complicated data. It is just a new way to think about databases.\nYes, MongoDB is a NoSQL database.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "67. What type of a DBMS is MongoDB?",
        "answer": "MongoDB is a document-oriented DBMS.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "68. What is the difference between MongoDB and MySQL?",
        "answer": "Although both MongoDB and MySQL are free and open-source databases, there is a lot of difference between them in terms of data representation, relationships, transaction, querying data, schema design and definition, performance speed, normalization, and many more. To compare MySQL with MongoDB is like a comparison between relational and non-relational databases.\nTo have a detailed comparison between Firebase and MongoDB, check out MongoDB vs SQL!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "69. What is the use of MongoDB?",
        "answer": "MongoDB is typically used as the primary data store for operational applications with real-time requirements (i.e., low latency, high availability, etc.). MongoDB is generally a good fit for 60–80 percent of the applications we build today. MongoDB is easy to operate and scale in the ways that are hard if not impossible with relational databases.\nMongoDB excels in many use cases where the relational databases aren’t a good fit, like applications with unstructured, semi-structured, and polymorphic data, as well as those with large scalability requirements or multi-datacenter deployments.\nMongoDB may not be a good fit for some applications. For example, applications that require complex transactions (e.g., a double-entry bookkeeping system) and scan-oriented applications that access large subsets of the data mostly may not be a good fit for MongoDB. Also, MongoDB is not a drop-in replacement for legacy applications built around the relational data model and SQL.\nSome common use cases of MongoDB include mobile apps, product catalogs, real-time personalization, content management, and applications delivering a single view across multiple systems.\nTo get a detailed understanding of MongoDB, enroll in our MongoDB Training now!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "70. What kind of a database is MongoDB?",
        "answer": "MongoDB is a document-oriented DBMS. We can think of it as MySQL but with JSON-like objects comprising the data model, rather than RDBMS tables. Significantly, MongoDB supports neither joins nor transactions. However, it features secondary indexes, an expressive query language, atomic writes on a per-document level, and fully-consistent reads. Operationally, MongoDB offers the master–slave replication with automated failover and built-in horizontal scaling via automated range-based partitioning.\nTo learn more about MongoDB, check out Intellipaat’s MongoDB Tutorial!",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "71. Which language is MongoDB written in?",
        "answer": "MongoDB is implemented in C++. However, drivers and client libraries are typically written in their own respective languages. Although, some drivers use C extensions for better performance.\nGet a detailed comparison between Dynamodb and Mongodb. Read our blog on Dynamodb Vs Mongodb",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "72. What are the limitations of the 32-bit versions of MongoDB?",
        "answer": "MongoDB uses memory-mapped files. When running a 32-bit build of MongoDB, the total storage size for the server, including data and indexes, is 2 GB. For this reason, we do not deploy MongoDB to production on 32-bit machines.\nIf we’re running a 64-bit build of MongoDB, there’s virtually no limit to the storage size. For production deployments, 64-bit builds and operating systems are strongly recommended.",
        "reference": "intellipaat.com",
        "role": "mongodb"
    },
    {
        "question": "1. What are some of the advantages of MongoDB?",
        "answer": "Some advantages of MongoDB are as follows: MongoDB supports field, range-based, string pattern matching type queries. for searching the data in the database \nMongoDB support primary and secondary index on any fields\nMongoDB basically uses JavaScript objects in place of procedures\nMongoDB uses a dynamic database schema\nMongoDB is very easy to scale up or down\nMongoDB has inbuilt support for data partitioning (Sharding). MongoDB supports field, range-based, string pattern matching type queries. for searching the data in the database MongoDB support primary and secondary index on any fields MongoDB basically uses JavaScript objects in place of procedures MongoDB uses a dynamic database schema MongoDB is very easy to scale up or down MongoDB has inbuilt support for data partitioning (Sharding).",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "2. When to use MongoDB?",
        "answer": "You should use MongoDB when you are building internet and business applications that need to evolve quickly and scale elegantly. MongoDB is popular with developers of all kinds who are building scalable applications using agile methodologies.\nMongoDB is a great choice if one needs to:  Support a rapid iterative development.\nScale to high levels of read and write traffic - MongoDB supports horizontal scaling through Sharding, distributing data across several machines, and facilitating high throughput operations with large sets of data.\nScale your data repository to a massive size.\nEvolve the type of deployment as the business changes.\nStore, manage and search data with text, geospatial, or time-series dimensions. Support a rapid iterative development. Scale to high levels of read and write traffic - MongoDB supports horizontal scaling through Sharding, distributing data across several machines, and facilitating high throughput operations with large sets of data. Scale your data repository to a massive size. Evolve the type of deployment as the business changes. Store, manage and search data with text, geospatial, or time-series dimensions.",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "3. What are the data types in MongoDB?",
        "answer": "MongoDB supports a wide range of data types as values in documents. Documents in MongoDB are similar to objects in JavaScript. Along with JSON’s essential key/value–pair nature, MongoDB adds support for a number of additional data types. The common data types in MongoDB are: Null\n{\"x\" : null}\nBoolean\n{\"x\" : true}\nNumber\n{\"x\" : 4}\nString\n{\"x\" : \"foobar\"}\nDate\n{\"x\" : new Date()}\nRegular expression\n{\"x\" : /foobar/i}\nArray\n{\"x\" : [\"a\", \"b\", \"c\"]}\nEmbedded document\n{\"x\" : {\"foo\" : \"bar\"}}\nObject ID\n{\"x\" : ObjectId()}\nBinary Data\nBinary data is a string of arbitrary bytes.\nCode\n{\"x\" : function() { /* ... */ }} Null\n{\"x\" : null}  {\"x\" : null} Boolean\n{\"x\" : true}  {\"x\" : true} Number\n{\"x\" : 4}  {\"x\" : 4} String\n{\"x\" : \"foobar\"}  {\"x\" : \"foobar\"} Date\n{\"x\" : new Date()}  {\"x\" : new Date()} Regular expression\n{\"x\" : /foobar/i}  {\"x\" : /foobar/i} Array\n{\"x\" : [\"a\", \"b\", \"c\"]}  {\"x\" : [\"a\", \"b\", \"c\"]} Embedded document\n{\"x\" : {\"foo\" : \"bar\"}}  {\"x\" : {\"foo\" : \"bar\"}} Object ID\n{\"x\" : ObjectId()}  {\"x\" : ObjectId()} Binary Data\nBinary data is a string of arbitrary bytes.  Code\n{\"x\" : function() { /* ... */ }}  {\"x\" : function() { /* ... */ }}",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "4. How to perform queries in MongoDB?",
        "answer": "The find method is used to perform queries in MongoDB. Querying returns a subset of documents in a collection, from no documents at all to the entire collection. Which documents get returned is determined by the first argument to find, which is a document specifying the query criteria. find find Example:\n> db.users.find({\"age\" : 24})  > db.users.find({\"age\" : 24})",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "5. How do you Delete a Document?",
        "answer": "The CRUD API in MongoDB provides deleteOne and deleteMany for this purpose. Both of these methods take a filter document as their first parameter. The filter specifies a set of criteria to match against in removing documents.\n\nFor example:\n> db.books.deleteOne({\"_id\" : 3}) deleteOne deleteMany    > db.books.deleteOne({\"_id\" : 3})",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "6. How do you Update a Document?",
        "answer": "Once a document is stored in the database, it can be changed using one of several update methods: updateOne, updateMany, and replaceOne. updateOne and updateMany each takes a filter document as their first parameter and a modifier document, which describes changes to make, as the second parameter. replaceOne also takes a filter as the first parameter, but as the second parameter replaceOne expects a document with which it will replace the document matching the filter. updateOne updateMany replaceOne. updateOne updateMany replaceOne replaceOne For example, in order to replace a document: {\n   \"_id\" : ObjectId(\"4b2b9f67a1f631733d917a7a\"),\n   \"name\" : \"alice\",\n   \"friends\" : 24,\n   \"enemies\" : 2\n} {\n   \"_id\" : ObjectId(\"4b2b9f67a1f631733d917a7a\"),\n   \"name\" : \"alice\",\n   \"friends\" : 24,\n   \"enemies\" : 2\n}",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "7. How to add data in MongoDB?",
        "answer": "The basic method for adding data to MongoDB is “inserts”. To insert a single document, use the collection’s insertOne method: insertOne > db.books.insertOne({\"title\" : \"Start With Why\"}) > db.books.insertOne({\"title\" : \"Start With Why\"}) For inserting multiple documents into a collection, we use insertMany. This method enables passing an array of documents to the database. insertMany",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "8. What are some features of MongoDB?",
        "answer": "Indexing: It supports generic secondary indexes and provides unique, compound, geospatial, and full-text indexing capabilities as well.\nAggregation: It provides an aggregation framework based on the concept of data processing pipelines.\nSpecial collection and index types: It supports time-to-live (TTL) collections for data that should expire at a certain time\nFile storage: It supports an easy-to-use protocol for storing large files and file metadata.\nSharding: Sharding is the process of splitting data up across machines. Indexing: It supports generic secondary indexes and provides unique, compound, geospatial, and full-text indexing capabilities as well. Indexing: Aggregation: It provides an aggregation framework based on the concept of data processing pipelines. Aggregation: Special collection and index types: It supports time-to-live (TTL) collections for data that should expire at a certain time Special collection and index types: File storage: It supports an easy-to-use protocol for storing large files and file metadata. File storage: Sharding: Sharding is the process of splitting data up across machines. Sharding:",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "9. How does Scale-Out occur in MongoDB?",
        "answer": "The document-oriented data model of MongoDB makes it easier to split data across multiple servers. Balancing and loading data across a cluster is done by MongoDB. It then redistributes documents automatically.\n\nThe mongos acts as a query router, providing an interface between client applications and the sharded cluster.\n\nConfig servers store metadata and configuration settings for the cluster. MongoDB uses the config servers to manage distributed locks. Each sharded cluster must have its own config servers.      ",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "10. What is the Mongo Shell?",
        "answer": "It is a JavaScript shell that allows interaction with a MongoDB instance from the command line. With that one can perform administrative functions, inspecting an instance, or exploring MongoDB. To start the shell, run the mongo executable: $ mongod\n$ mongo\nMongoDB shell version: 4.2.0\nconnecting to: test\n> $ mongod\n$ mongo\nMongoDB shell version: 4.2.0\nconnecting to: test\n> The shell is a full-featured JavaScript interpreter, capable of running arbitrary JavaScript programs. Let’s see how basic math works on this: > x = 100;\n200\n> x / 5;\n20 > x = 100;\n200\n> x / 5;\n20",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "11. What are Databases in MongoDB?",
        "answer": "MongoDB groups collections into databases. MongoDB can host several databases, each grouping together collections. \nSome reserved database names are as follows:\nadmin\nlocal\nconfig   admin  local  config",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "12. What is a Collection in MongoDB?",
        "answer": "A collection in MongoDB is a group of documents. If a document is the MongoDB analog of a row in a relational database, then a collection can be thought of as the analog to a table.\nDocuments within a single collection can have any number of different “shapes.”, i.e. collections have dynamic schemas. \nFor example, both of the following documents could be stored in a single collection:   {\"greeting\" : \"Hello world!\", \"views\": 3}\n{\"signoff\": \"Good bye\"} {\"greeting\" : \"Hello world!\", \"views\": 3}\n{\"signoff\": \"Good bye\"}",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "13. What is a Document in MongoDB?",
        "answer": "A Document in MongoDB is an ordered set of keys with associated values. It is represented by a map, hash, or dictionary. In JavaScript, documents are represented as objects:\n{\"greeting\" : \"Hello world!\"}  {\"greeting\" : \"Hello world!\"} Complex documents will contain multiple key/value pairs:\n{\"greeting\" : \"Hello world!\", \"views\" : 3}  {\"greeting\" : \"Hello world!\", \"views\" : 3}",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "1. How is Querying done in MongoDB?",
        "answer": "The find method is used to perform queries in MongoDB. Querying returns a subset of documents in a collection, from no documents at all to the entire collection. Which documents get returned is determined by the first argument to find, which is a document specifying the query criteria. find For example: If we have a string we want to match, such as a \"username\" key with the value \"alice\", we use that key/value pair instead: > db.users.find({\"username\" : \"alice\"}) > db.users.find({\"username\" : \"alice\"})",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "2. Explain the SET Modifier in MongoDB?",
        "answer": "If the value of a field does not yet exist, the \"$set\" sets the value. This can be useful for updating schemas or adding user-defined keys. Example: > db.users.findOne()\n{\n   \"_id\" : ObjectId(\"4b253b067525f35f94b60a31\"),\n   \"name\" : \"alice\",\n   \"age\" : 23,\n   \"sex\" : \"female\",\n   \"location\" : \"India\"\n} > db.users.findOne()\n{\n   \"_id\" : ObjectId(\"4b253b067525f35f94b60a31\"),\n   \"name\" : \"alice\",\n   \"age\" : 23,\n   \"sex\" : \"female\",\n   \"location\" : \"India\"\n} To add a field to this, we use “$set”: > db.users.updateOne({\"_id\" : \nObjectId(\"4b253b067525f35f94b60a31\")},\n... {\"$set\" : {\"favorite book\" : \"Start with Why\"}}) > db.users.updateOne({\"_id\" : \nObjectId(\"4b253b067525f35f94b60a31\")},\n... {\"$set\" : {\"favorite book\" : \"Start with Why\"}})",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "3. Explain the process of Sharding.",
        "answer": "Sharding is the process of splitting data up across machines. We also use the term “partitioning” sometimes to describe this concept. We can store more data and handle more load without requiring larger or more powerful machines, by putting a subset of data on each machine.\nIn the figure below, RS0 and RS1 are shards. MongoDB’s sharding allows you to create a cluster of many machines (shards) and break up a collection across them, putting a subset of data on each shard. This allows your application to grow beyond the resource limits of a standalone server or replica set.  Sharded Client Connection  Sharded Client Connection Non Sharded Client Connection  Non Sharded Client Connection",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "4. What are Geospatial Indexes in MongoDB?",
        "answer": "MongoDB has two types of geospatial indexes: 2dsphere and 2d. 2dsphere indexes work with spherical geometries that model the surface of the earth based on the WGS84 datum. This datum model the surface of the earth as an oblate spheroid, meaning that there is some flattening at the poles. Distance calculations using 2sphere indexes, therefore, take the shape of the earth into account and provide a more accurate treatment of distance between, for example, two cities, than do 2d indexes. Use 2d indexes for points stored on a two-dimensional plane. 2dsphere allows you to specify geometries for points, lines, and polygons in the GeoJSON format. A point is given by a two-element array, representing [longitude, latitude]: {\n   \"name\" : \"New York City\",\n   \"loc\" : {\n       \"type\" : \"Point\",\n       \"coordinates\" : [50, 2]\n   }\n} {\n   \"name\" : \"New York City\",\n   \"loc\" : {\n       \"type\" : \"Point\",\n       \"coordinates\" : [50, 2]\n   }\n} A line is given by an array of points: {\n   \"name\" : \"Hudson River\",\n   \"loc\" : {\n       \"type\" : \"LineString\",\n       \"coordinates\" : [[0,1], [0,2], [1,2]]\n   }\n} {\n   \"name\" : \"Hudson River\",\n   \"loc\" : {\n       \"type\" : \"LineString\",\n       \"coordinates\" : [[0,1], [0,2], [1,2]]\n   }\n}",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "5. Explain the term “Indexing” in MongoDB.",
        "answer": "In MongoDB, indexes help in efficiently resolving queries. What an Index does is that it stores a small part of the data set in a form that is easy to traverse. The index stores the value of the specific field or set of fields, ordered by the value of the field as specified in the index. \nMongoDB’s indexes work almost identically to typical relational database indexes.  Indexes look at an ordered list with references to the content. These in turn allow MongoDB to query orders of magnitude faster. To create an index, use the createIndex collection method. createIndex For example: > db.users.find({\"username\": \"user101\"}).explain(\"executionStats\") > db.users.find({\"username\": \"user101\"}).explain(\"executionStats\") Here, executionStats mode helps us understand the effect of using an index to satisfy queries. executionStats",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "1. What do you mean by Transactions?",
        "answer": "A transaction is a logical unit of processing in a database that includes one or more database operations, which can be read or write operations. Transactions provide a useful feature in MongoDB to ensure consistency.\n\nMongoDB provides two APIs to use transactions.   Core API: It is a similar syntax to relational databases (e.g., start_transaction and commit_transaction)\nCall-back API: This is the recommended approach to using transactions. It starts a transaction, executes the specified operations, and commits (or aborts on the error). It also automatically incorporates error handling logic for \"TransientTransactionError\" and\"UnknownTransactionCommitResult\". Core API: It is a similar syntax to relational databases (e.g., start_transaction and commit_transaction) Core API: Call-back API: This is the recommended approach to using transactions. It starts a transaction, executes the specified operations, and commits (or aborts on the error). It also automatically incorporates error handling logic for \"TransientTransactionError\" and\"UnknownTransactionCommitResult\". Call-back API:",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "2. What are MongoDB Charts?",
        "answer": "MongoDB Charts is a new, integrated tool in MongoDB for data visualization.\n\nMongoDB Charts offers the best way to create visualizations using data from a MongoDB database.\nIt allows users to perform quick data representation from a database without writing code in a programming language such as Java or Python.\n\nThe two different implementations of MongoDB Charts are:      MongoDB Charts PaaS (Platform as a Service)\nMongoDB Charts Server MongoDB Charts PaaS (Platform as a Service) MongoDB Charts Server",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "3. What is the Aggregation Framework in MongoDB?",
        "answer": "The aggregation framework is a set of analytics tools within MongoDB that allow you to do analytics on documents in one or more collections.\nThe aggregation framework is based on the concept of a pipeline. With an aggregation pipeline, we take input from a MongoDB collection and pass the documents from that collection through one or more stages, each of which performs a different operation on its inputs (See figure below). Each stage takes as input whatever the stage before it produced as output. The inputs and outputs for all stages are documents—a stream of documents. The aggregation framework is a set of analytics tools within MongoDB that allow you to do analytics on documents in one or more collections. The aggregation framework is based on the concept of a pipeline. With an aggregation pipeline, we take input from a MongoDB collection and pass the documents from that collection through one or more stages, each of which performs a different operation on its inputs (See figure below). Each stage takes as input whatever the stage before it produced as output. The inputs and outputs for all stages are documents—a stream of documents.  ",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "4. Explain the concept of pipeline in the MongoDB aggregation framework.",
        "answer": "An individual stage of an aggregation pipeline is a data processing unit. It takes in a stream of input documents one at a time, processes each document one at a time, and produces an output stream of documents one at a time (see figure below).  ",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "5. What is a Replica Set in MongoDB?",
        "answer": "To keep identical copies of your data on multiple servers, we use replication. It is recommended for all production deployments. Use replication to keep your application running and your data safe, even if something happens to one or more of your servers. Such replication can be created by a replica set with MongoDB. A replica set is a group of servers with one primary, the server taking writes, and multiple secondaries, servers that keep copies of the primary’s data. If the primary crashes, the secondaries can elect a new primary from amongst themselves.",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "6. Explain the Replication Architecture in MongoDB.",
        "answer": "The following diagram depicts the architecture diagram of a simple replica set cluster with only three server nodes – one primary node and two secondary nodes:   In the preceding model, the PRIMARY database is the only active replica set member that receives write operations from database clients. The PRIMARY database saves data changes in the Oplog. Changes saved in the Oplog are sequential—that is, saved in the order that they are received and executed. \nThe SECONDARY database is querying the PRIMARY database for new changes in the Oplog. If there are any changes, then Oplog entries are copied from PRIMARY to SECONDARY as soon as they are created on the PRIMARY node.\nThen, the SECONDARY database applies changes from the Oplog to its own datafiles. Oplog entries are applied in the same order they were inserted in the log. As a result, datafiles on SECONDARY are kept in sync with changes on PRIMARY. \nUsually, SECONDARY databases copy data changes directly from PRIMARY. Sometimes a SECONDARY database can replicate data from another SECONDARY. This type of replication is called Chained Replication because it is a two-step replication process. Chained replication is useful in certain replication topologies, and it is enabled by default in MongoDB. In the preceding model, the PRIMARY database is the only active replica set member that receives write operations from database clients. The PRIMARY database saves data changes in the Oplog. Changes saved in the Oplog are sequential—that is, saved in the order that they are received and executed. The SECONDARY database is querying the PRIMARY database for new changes in the Oplog. If there are any changes, then Oplog entries are copied from PRIMARY to SECONDARY as soon as they are created on the PRIMARY node. Then, the SECONDARY database applies changes from the Oplog to its own datafiles. Oplog entries are applied in the same order they were inserted in the log. As a result, datafiles on SECONDARY are kept in sync with changes on PRIMARY. Usually, SECONDARY databases copy data changes directly from PRIMARY. Sometimes a SECONDARY database can replicate data from another SECONDARY. This type of replication is called Chained Replication because it is a two-step replication process. Chained replication is useful in certain replication topologies, and it is enabled by default in MongoDB.",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "7. What are some utilities for backup and restore in MongoDB?",
        "answer": "The mongo shell does not include functions for exporting, importing, backup, or restore. However, MongoDB has created methods for accomplishing this, so that no scripting work or complex GUIs are needed. For this, several utility scripts are provided that can be used to get data in or out of the database in bulk. These utility scripts are: mongoimport\nmongoexport\nmongodump\nmongorestore mongoimport mongoexport mongodump mongorestore",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "1. Conclusion",
        "answer": "MongoDB is a powerful, flexible, and scalable general-purpose database. It combines the ability to scale out with features such as secondary indexes, range queries, sorting, aggregations, and geospatial indexes.\nThus, in conclusion, MongoDB is:  Supports Indexing\nDesigned to scale\nRich with Features\nHigh Performance\nLoad Balancing\nSupports sharding Supports Indexing Designed to scale Rich with Features High Performance Load Balancing Supports sharding Although MongoDB is powerful, incorporating many features from relational systems, it is not intended to do everything that a relational database does. For some functionality, the database server offloads processing and logic to the client-side (handled either by the drivers or by a user’s application code). Its maintenance of this streamlined design is one of the reasons MongoDB can achieve such high performance.\n\nHere are few References to understand MongoDB in-depth:   https://www.mongodb.com/2\nhttps://docs.mongodb.com https://www.mongodb.com/2 https://www.mongodb.com/2 https://docs.mongodb.com https://docs.mongodb.com Recommended Tutorials: Recommended Tutorials: SQL Interview Questions\nSQL Server Interview Questions\nMySQL Interview Questions\nDBMS Interview Questions\nDatabase Testing Interview Questions\nMongoDB vs MySQL\nMongoDB Cheat Sheet SQL Interview Questions SQL Interview Questions SQL Server Interview Questions SQL Server Interview Questions MySQL Interview Questions MySQL Interview Questions DBMS Interview Questions DBMS Interview Questions Database Testing Interview Questions Database Testing Interview Questions MongoDB vs MySQL MongoDB vs MySQL MongoDB Cheat Sheet MongoDB Cheat Sheet",
        "reference": "interviewbit.com",
        "role": "mongodb"
    },
    {
        "question": "",
        "answer": "At the present time, the internet is loaded with big data, big users, big complexity etc. and also becoming more complex day by day. NoSQL is answer of all these problems, It is not a traditional database management system, not even a relational database management system (RDBMS). NoSQL stands for \"Not Only SQL\". NoSQL is a type of database that can handle and sort all type of unstructured, messy and complicated data. It is just a new way to think about the database.\nYes. MongoDB is a NoSQL database.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "2) Which are the different languages supported by MongoDB?",
        "answer": "MonggoDB provides official driver support for C, C++, C#, Java, Node.js, Perl, PHP, Python, Ruby, Scala, Go and Erlang.\nYou can use MongoDB with any of the above languages. There are some other community supported drivers too but the above mentioned ones are officially provided by MongoDB.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "",
        "answer": "NoSQL database can be classified as 4 basic types:\nKey value store NoSQL database\nDocument store NoSQL database\nColumn store NoSQL database\nGraph base NoSQL databse\nThere are many NoSQL databases. MongoDB, Cassandra, CouchBD, Hypertable, Redis, Riak, Neo4j, HBASE, Couchbase, MemcacheDB, Voldemort, RevenDB etc. are the examples of NoSQL databases.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "4) Is MongoDB better than other SQL databases? If yes then how?",
        "answer": "MongoDB is better than other SQL databases because it allows a highly flexible and scalable document structure.\nFor example:\nADVERTISEMENT\nOne data document in MongoDB can have five columns and the other one in the same collection can have ten columns.\nMongoDB database are faster than SQL databases due to efficient indexing and storage techniques.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "5) What type of DBMS is MongoDB?",
        "answer": "MongoDB is a document oriented DBMS",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "6) What is the difference between MongoDB and MySQL?",
        "answer": "Although MongoDB and MySQL both are free and open source databases, there is a lot of difference between them in the term of data representation, relationship, transaction, querying data, schema design and definition, performance speed, normalization and many more. To compare MySQL with MongoDB is like a comparison between Relational and Non-relational databases.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "7) Why MongoDB is known as best NoSQL database?",
        "answer": "MongoDb is the best NoSQL database because, it is:\nDocument Oriented\nRich Query language\nHigh Performance\nHighly Available\nEasily Scalable",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "8) Does MongoDB support primary-key, foreign-key relationship?",
        "answer": "No. By Default, MongoDB doesn't support primary key-foreign key relationship.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "9) Can you achieve primary key - foreign key relationships in MongoDB?",
        "answer": "We can achieve primary key-foreign key relationship by embedding one document inside another. For example: An address document can be embedded inside customer document.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "10) Does MongoDB need a lot of RAM?",
        "answer": "No. There is no need a lot of RAM to run MongoDB. It can be run even on a small amount of RAM because it dynamically allocates and de-allocates RAM according to the requirement of the processes.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "",
        "answer": "ObjectID is a 12-byte BSON type. These are:\n4 bytes value representing seconds\n3 byte machine identifier\n2 byte process id\n3 byte counter",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "12) Is it true that MongoDB uses BSON to represent document structure?",
        "answer": "Yes.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "13) What are Indexes in MongoDB?",
        "answer": "In MondoDB, Indexes are used to execute query efficiently. Without indexes, MongoDB must perform a collection scan, i.e. scan every document in a collection, to select those documents that match the query statement. If an appropriate index exists for a query, MongoDB can use the index to limit the number of documents it must inspect.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "14) By default, which index is created by MongoDB for every collection?",
        "answer": "By default, the_id collection is created for every collection by MongoDB.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "15) What is a Namespace in MongoDB?",
        "answer": "Namespace is a concatenation of the database name and the collection name. Collection, in which MongoDB stores BSON objects.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "16) Can journaling features be used to perform safe hot backups?",
        "answer": "Yes.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "17) Why does Profiler use in MongoDB?",
        "answer": "MongoDB uses a database profiler to perform characteristics of each operation against the database. You can use a profiler to find queries and write operations",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "18) If you remove an object attribute, is it deleted from the database?",
        "answer": "Yes, it be. Remove the attribute and then re-save() the object.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "19) In which language MongoDB is written?",
        "answer": "MongoDB is written and implemented in C++.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "20) Does MongoDB need a lot space of Random Access Memory (RAM)?",
        "answer": "No. MongoDB can be run on small free space of RAM.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "21) What language you can use with MongoDB?",
        "answer": "MongoDB client drivers supports all the popular programming languages so there is no issue of language, you can use any language that you want.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "22) Does MongoDB database have tables for storing records?",
        "answer": "No. Instead of tables, MongoDB uses \"Collections\" to store data.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "23) Do the MongoDB databases have schema?",
        "answer": "Yes. MongoDB databases have dynamic schema. There is no need to define the structure to create collections.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "24) What is the method to configure the cache size in MongoDB?",
        "answer": "MongoDB's cache is not configurable. Actually MongoDb uses all the free spaces on the system automatically by way of memory mapped files.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "25) How to do Transaction/locking in MongoDB?",
        "answer": "MongoDB doesn't use traditional locking or complex transaction with Rollback. MongoDB is designed to be light weighted, fast and predictable to its performance. It keeps transaction support simple to enhance performance.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "26) Why 32 bit version of MongoDB are not preferred ?",
        "answer": "Because MongoDB uses memory mapped files so when you run a 32-bit build of MongoDB, the total storage size of server is 2 GB. But when you run a 64-bit build of MongoDB, this provides virtually unlimited storage size. So 64-bit is preferred over 32-bit.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "27) Is it possible to remove old files in the moveChunk directory?",
        "answer": "Yes, These files can be deleted once the operations are done because these files are made as backups during normal shard balancing operation. This is a manual cleanup process and necessary to free up space.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "28) What will have to do if a shard is down or slow and you do a query?",
        "answer": "If a shard is down and you even do query then your query will be returned with an error unless you set a partial query option. But if a shard is slow them Mongos will wait for them till response.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "",
        "answer": "A query is called covered query if satisfies the following two conditions:\nThe fields used in the query are part of an index used in the query.\nThe fields returned in the results are in the same index.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "30) What is the importance of covered query?",
        "answer": "Covered query makes the execution of the query faster because indexes are stored in RAM or sequentially located on disk. It makes the execution of the query faster.\nCovered query makes the fields are covered in the index itself, MongoDB can match the query condition as well as return the result fields using the same index without looking inside the documents.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "31) What is sharding in MongoDB?",
        "answer": "In MongoDB, Sharding is a procedure of storing data records across multiple machines. It is a MongoDB approach to meet the demands of data growth. It creates horizontal partition of data in a database or search engine. Each partition is referred as shard or database shard.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "32) What is replica set in MongoDB?",
        "answer": "A replica can be specified as a group of mongo instances that host the same data set. In a replica set, one node is primary, and another is secondary. All data is replicated from primary to secondary nodes.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "33) What is primary and secondary replica set in MongoDB?",
        "answer": "In MongoDB, primary nodes are the node that can accept write. These are also known as master nodes. The replication in MongoDB is single master so, only one node can accept write operations at a time.\nSecondary nodes are known as slave nodes. These are read only nodes that replicate from the primary.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "34) By default, which replica sets are used to write data?",
        "answer": "By default, MongoDB writes data only to the primary replica set.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "35) What is CRUD in MongoDB?",
        "answer": "MongoDB supports following CRUD operations:\nCreate\nRead\nUpdate\nDelete",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "36) In which format MongoDB represents document structure?",
        "answer": "MongoDB uses BSON to represent document structures.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "37) What will happen when you remove a document from database in MongoDB? Does MongoDB remove it from disk?",
        "answer": "Yes. If you remove a document from database, MongoDB will remove it from disk too.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "38) Why are MongoDB data files large in size?",
        "answer": "MongoDB doesn't follow file system fragmentation and pre allocates data files to reserve space while setting up the server. That's why MongoDB data files are large in size.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "39) What is a storage engine in MongoDB?",
        "answer": "A storage engine is the part of a database that is used to manage how data is stored on disk.\nFor example: one storage engine might offer better performance for read-heavy workloads, and another might support a higher-throughput for write operations.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "40) Which are the storage engines used by MongoDB?",
        "answer": "MMAPv1 and WiredTiger are two storage engine used by MongoDB.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "41) What is the usage of profiler in MongoDB?",
        "answer": "A database profiler is used to collect data about MongoDB write operations, cursors, database commands on a running mongod instance. You can enable profiling on a per-database or per-instance basis.\nThe database profiler writes all the data it collects to the system. profile collection, which is a capped collection.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "42) Is it possible to configure the cache size for MMAPv1 in MongoDB?",
        "answer": "No. it is not possible to configure the cache size for MMAPv1 because MMAPv1 does not allow configuring the cache size.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "43) How to configure the cache size for WiredTiger in MongoDB?",
        "answer": "For the WiredTiger storage engine, you can specify the maximum size of the cache that WiredTiger will use for all data. This can be done using storage.wiredTiger.engineConfig.cacheSizeGB option.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "44) How does MongoDB provide concurrency?",
        "answer": "MongoDB uses reader-writer locks for concurrency. Reader-writer locks allow concurrent readers shared access to a resource, such as a database or collection, but give exclusive access to a single write operation.",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "45) What is the difference between MongoDB and Redis database?",
        "answer": "Difference between MongoDB and Redis:\nRedis is faster than MongoDB.\nRedis has a key-value storage whereas MongoDB has a document type storage.\nRedis is hard to code but MongoDB is easy.\nFor more information: click here",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "46) What is the difference between MongoDB and CouchDB?",
        "answer": "Difference between MongoDB and CouchDB:\nMongoDB is faster than CouchDB while CouchDB is safer than MongoDB.\nTriggers are not available in MongoDB while triggers are available in CouchDB.\nMongoDB serializes JSON data to BSON while CouchDB doesn't store data in JSON format.\nFor more information: click here",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "47) What is the difference between MongoDB and Cassandra?",
        "answer": "Difference between MongoDB and Cassandra:\nMongoDB is cross-platform document-oriented database system while Cassandra is high performance distributed database system.\nMongoDB is written in C++ while Cassandra is written in Java.\nMongoDB is easy to administer in the case of failure while Cassandra provides high availability with no single point of failure.\nFor more information: click here",
        "reference": "javatpoint.com",
        "role": "mongodb"
    },
    {
        "question": "48) Is there any need to create database command in MongoDB?",
        "answer": "You don't need to create a database manually in MongoDB because it creates automaically when you save the value into the defined collection at first time.\nFor more information: click here",
        "reference": "javatpoint.com",
        "role": "mongodb"
    }
]