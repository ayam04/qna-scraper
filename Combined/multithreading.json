[
    {
        "question": "1. What is the start() and run() method of Thread class?",
        "answer": "start(): In simple words, the start() method is used to start or begin the execution of a newly created thread. When the start() method is called, a new thread is created and this newly created thread executes the task that is kept in the run() method. One can call the start() method only once.  \n\nrun(): In simple words, the run() method is used to start or begin the execution of the same thread. When the run() method is called, no new thread is created as in the case of the start() method. This method is executed by the current thread. One can call the run() method multiple times. start()   run()",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "2. What is Thread in Java?",
        "answer": "Threads are basically the lightweight and smallest unit of processing that can be managed independently by a scheduler. Threads are referred to as parts of a process that simply let a program execute efficiently with other parts or threads of the process at the same time. Using threads, one can perform complicated tasks in the easiest way. It is considered the simplest way to take advantage of multiple CPUs available in a machine. They share the common address space and are independent of each other.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "3. What are the two ways of implementing thread in Java?",
        "answer": "There are basically two ways of implementing thread in java as given below: Extending the Thread class Extending the Thread class Thread Example: Example: class MultithreadingDemo extends Thread \n{   \n  public void run() \n {   \n     System.out.println(\"My thread is in running state.\");    \n } \n  public static void main(String args[]) \n {   \n    MultithreadingDemo obj=new MultithreadingDemo();  \n        obj.start();  \n  }  \n} class MultithreadingDemo extends Thread \n{   \n  public void run() \n {   \n     System.out.println(\"My thread is in running state.\");    \n } \n  public static void main(String args[]) \n {   \n    MultithreadingDemo obj=new MultithreadingDemo();  \n        obj.start();  \n  }  \n} class MultithreadingDemo extends Thread class MultithreadingDemo extends Thread public void run() public void run () \"My thread is in running state.\" public static void main(String args[]) public static void main (String args[]) new Output: Output: My thread is in running state. My thread is in running state. Implementing Runnable interface in Java Implementing Runnable interface in Java Runnable Example: Example class MultithreadingDemo implements Runnable \n{  \n   public void run() \n {  \n      System.out.println(\"My thread is in running state.\");  \n  }  \n    public static void main(String args[]) \n {  \n      MultithreadingDemo obj=new MultithreadingDemo();   \n      Threadtobj =new Thread(obj);       tobj.start();  \n }   \n} class MultithreadingDemo implements Runnable \n{  \n   public void run() \n {  \n      System.out.println(\"My thread is in running state.\");  \n  }  \n    public static void main(String args[]) \n {  \n      MultithreadingDemo obj=new MultithreadingDemo();   \n      Threadtobj =new Thread(obj);       tobj.start();  \n }   \n} class MultithreadingDemo implements Runnable class MultithreadingDemo implements Runnable public void run() public void run () \"My thread is in running state.\" public static void main(String args[]) public static void main (String args[]) new new Output: Output: My thread is in running state. My thread is in running state.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "4. What's the difference between thread and process?",
        "answer": "Thread: It simply refers to the smallest units of the particular process. It has the ability to execute different parts (referred to as thread) of the program at the same time.  \n\nProcess: It simply refers to a program that is in execution i.e., an active program. A process can be handled using PCB (Process Control Block). Thread   Process   Thread Process\nIt is a subset of a subunit of a process. It is a program in execution containing multiple threads.\nIn this, inter-thread communication is faster, less expensive, easy and efficient because threads share the same memory address of the process they belong to.  In this, inter-process communication is slower, expensive, and complex because each process has different memory space or address.,\nThese are easier to create, lightweight, and have less overhead.  These are difficult to create, heavyweight, and have more overhead.\nIt requires less time for creation, termination, and context switching. It requires more time for creation, termination, and context switching.\nProcesses with multiple threads use fewer resources. Processes without threads use more resources.\nThreads are parts of a process, so they are dependent on each other but each thread executes independently. Processes are independent of each other.\nThere is a need for synchronization in threads to avoid unexpected scenarios or problems. There is no need for synchronization in each process.\nThey share data and information with each other.  They do not share data with each other. Thread Process\nIt is a subset of a subunit of a process. It is a program in execution containing multiple threads.\nIn this, inter-thread communication is faster, less expensive, easy and efficient because threads share the same memory address of the process they belong to.  In this, inter-process communication is slower, expensive, and complex because each process has different memory space or address.,\nThese are easier to create, lightweight, and have less overhead.  These are difficult to create, heavyweight, and have more overhead.\nIt requires less time for creation, termination, and context switching. It requires more time for creation, termination, and context switching.\nProcesses with multiple threads use fewer resources. Processes without threads use more resources.\nThreads are parts of a process, so they are dependent on each other but each thread executes independently. Processes are independent of each other.\nThere is a need for synchronization in threads to avoid unexpected scenarios or problems. There is no need for synchronization in each process.\nThey share data and information with each other.  They do not share data with each other. Thread Process Thread Process Thread Process It is a subset of a subunit of a process. It is a program in execution containing multiple threads.\nIn this, inter-thread communication is faster, less expensive, easy and efficient because threads share the same memory address of the process they belong to.  In this, inter-process communication is slower, expensive, and complex because each process has different memory space or address.,\nThese are easier to create, lightweight, and have less overhead.  These are difficult to create, heavyweight, and have more overhead.\nIt requires less time for creation, termination, and context switching. It requires more time for creation, termination, and context switching.\nProcesses with multiple threads use fewer resources. Processes without threads use more resources.\nThreads are parts of a process, so they are dependent on each other but each thread executes independently. Processes are independent of each other.\nThere is a need for synchronization in threads to avoid unexpected scenarios or problems. There is no need for synchronization in each process.\nThey share data and information with each other.  They do not share data with each other. It is a subset of a subunit of a process. It is a program in execution containing multiple threads. It is a subset of a subunit of a process. It is a program in execution containing multiple threads. In this, inter-thread communication is faster, less expensive, easy and efficient because threads share the same memory address of the process they belong to.  In this, inter-process communication is slower, expensive, and complex because each process has different memory space or address., In this, inter-thread communication is faster, less expensive, easy and efficient because threads share the same memory address of the process they belong to. In this, inter-process communication is slower, expensive, and complex because each process has different memory space or address., These are easier to create, lightweight, and have less overhead.  These are difficult to create, heavyweight, and have more overhead. These are easier to create, lightweight, and have less overhead. These are difficult to create, heavyweight, and have more overhead. It requires less time for creation, termination, and context switching. It requires more time for creation, termination, and context switching. It requires less time for creation, termination, and context switching. It requires more time for creation, termination, and context switching. Processes with multiple threads use fewer resources. Processes without threads use more resources. Processes with multiple threads use fewer resources. Processes without threads use more resources. Threads are parts of a process, so they are dependent on each other but each thread executes independently. Processes are independent of each other. Threads are parts of a process, so they are dependent on each other but each thread executes independently. Processes are independent of each other. There is a need for synchronization in threads to avoid unexpected scenarios or problems. There is no need for synchronization in each process. There is a need for synchronization in threads to avoid unexpected scenarios or problems. There is no need for synchronization in each process. They share data and information with each other.  They do not share data with each other. They share data and information with each other. They do not share data with each other.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "5. What’s the difference between class lock and object lock?",
        "answer": "Class Lock: In java, each and every class has a unique lock usually referred to as a class level lock. These locks are achieved using the keyword ‘static synchronized’ and can be used to make static data thread-safe. It is generally used when one wants to prevent multiple threads from entering a synchronized block. \n\nExample: Class Lock   Example: public class ClassLevelLockExample  \n{    \n  public void classLevelLockMethod()  \n {       \n     synchronized (ClassLevelLockExample.class)  \n       {         \n            //DO your stuff here       \n       }    \n } \n} public class ClassLevelLockExample  \n{    \n  public void classLevelLockMethod()  \n {       \n     synchronized (ClassLevelLockExample.class)  \n       {         \n            //DO your stuff here       \n       }    \n } \n} public class ClassLevelLockExample class ClassLevelLockExample public void classLevelLockMethod() public void classLevelLockMethod () synchronized //DO your stuff here Object Lock: In java, each and every object has a unique lock usually referred to as an object-level lock. These locks are achieved using the keyword ‘synchronized’ and can be used to protect non-static data. It is generally used when one wants to synchronize a non-static method or block so that only the thread will be able to execute the code block on a given instance of the class.  \n\nExample: Object Lock   Example public class ObjectLevelLockExample  \n{    \n  public void objectLevelLockMethod()  \n {   \n     synchronized (this)  \n       {     \n            //DO your stuff here   \n       } \n }\n} public class ObjectLevelLockExample  \n{    \n  public void objectLevelLockMethod()  \n {   \n     synchronized (this)  \n       {     \n            //DO your stuff here   \n       } \n }\n} public class ObjectLevelLockExample class ObjectLevelLockExample public void objectLevelLockMethod() public void objectLevelLockMethod () synchronized this //DO your stuff here",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "6. What's the difference between User thread and Daemon thread?",
        "answer": "User and Daemon are basically two types of thread used in Java by using a ‘Thread Class’.  \n\nUser Thread (Non-Daemon Thread): In Java, user threads have a specific life cycle and its life is independent of any other thread. JVM (Java Virtual Machine) waits for any of the user threads to complete its tasks before terminating it. When user threads are finished, JVM terminates the whole program along with associated daemon threads. \n\nDaemon Thread: In Java, daemon threads are basically referred to as a service provider that provides services and support to user threads. There are basically two methods available in thread class for daemon thread: setDaemon() and isDaemon(). \n\nUser Thread vs Daemon Thread   User Thread (Non-Daemon Thread)   Daemon Thread   User Thread vs Daemon Thread User Thread Daemon Thread \nJVM waits for user threads to finish their tasks before termination.  JVM does not wait for daemon threads to finish their tasks before termination.\nThese threads are normally created by the user for executing tasks concurrently.  These threads are normally created by JVM.\nThey are used for critical tasks or core work of an application.  They are not used for any critical tasks but to do some supporting tasks.\nThese threads are referred to as high-priority tasks, therefore are required for running in the foreground.  These threads are referred to as low priority threads, therefore are especially required for supporting background tasks like garbage collection, releasing memory of unused objects, etc. User Thread Daemon Thread \nJVM waits for user threads to finish their tasks before termination.  JVM does not wait for daemon threads to finish their tasks before termination.\nThese threads are normally created by the user for executing tasks concurrently.  These threads are normally created by JVM.\nThey are used for critical tasks or core work of an application.  They are not used for any critical tasks but to do some supporting tasks.\nThese threads are referred to as high-priority tasks, therefore are required for running in the foreground.  These threads are referred to as low priority threads, therefore are especially required for supporting background tasks like garbage collection, releasing memory of unused objects, etc. User Thread Daemon Thread User Thread Daemon Thread User Thread Daemon Thread JVM waits for user threads to finish their tasks before termination.  JVM does not wait for daemon threads to finish their tasks before termination.\nThese threads are normally created by the user for executing tasks concurrently.  These threads are normally created by JVM.\nThey are used for critical tasks or core work of an application.  They are not used for any critical tasks but to do some supporting tasks.\nThese threads are referred to as high-priority tasks, therefore are required for running in the foreground.  These threads are referred to as low priority threads, therefore are especially required for supporting background tasks like garbage collection, releasing memory of unused objects, etc. JVM waits for user threads to finish their tasks before termination.  JVM does not wait for daemon threads to finish their tasks before termination. JVM waits for user threads to finish their tasks before termination. JVM does not wait for daemon threads to finish their tasks before termination. These threads are normally created by the user for executing tasks concurrently.  These threads are normally created by JVM. These threads are normally created by the user for executing tasks concurrently. These threads are normally created by JVM. They are used for critical tasks or core work of an application.  They are not used for any critical tasks but to do some supporting tasks. They are used for critical tasks or core work of an application. They are not used for any critical tasks but to do some supporting tasks. These threads are referred to as high-priority tasks, therefore are required for running in the foreground.  These threads are referred to as low priority threads, therefore are especially required for supporting background tasks like garbage collection, releasing memory of unused objects, etc. These threads are referred to as high-priority tasks, therefore are required for running in the foreground. These threads are referred to as low priority threads, therefore are especially required for supporting background tasks like garbage collection, releasing memory of unused objects, etc.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "7. How can we create daemon threads?",
        "answer": "We can create daemon threads in java using the thread class setDaemon(true). It is used to mark the current thread as daemon thread or user thread. isDaemon() method is generally used to check whether the current thread is daemon or not. If the thread is a daemon, it will return true otherwise it returns false.  \nExample:   \nProgram to illustrate the use of setDaemon() and isDaemon() method. setDaemon(true) isDaemon()  Example  Program to illustrate the use of setDaemon() and isDaemon() method. public class DaemonThread extends Thread \n{ \n   public DaemonThread(String name){ \n       super(name); \n   } \n   public void run() \n   {  \n       // Checking whether the thread is Daemon or not \n       if(Thread.currentThread().isDaemon()) \n       {  \n           System.out.println(getName() + \" is Daemon thread\");  \n       }    \n       else \n       {  \n           System.out.println(getName() + \" is User thread\");  \n       }  \n   }   \n   public static void main(String[] args) \n   {  \n       DaemonThread t1 = new DaemonThread(\"t1\"); \n       DaemonThread t2 = new DaemonThread(\"t2\"); \n       DaemonThread t3 = new DaemonThread(\"t3\");  \n       // Setting user thread t1 to Daemon \n       t1.setDaemon(true);       \n       // starting first 2 threads  \n       t1.start();  \n       t2.start();   \n       // Setting user thread t3 to Daemon \n       t3.setDaemon(true);  \n       t3.start();         \n   }  \n} public class DaemonThread extends Thread \n{ \n   public DaemonThread(String name){ \n       super(name); \n   } \n   public void run() \n   {  \n       // Checking whether the thread is Daemon or not \n       if(Thread.currentThread().isDaemon()) \n       {  \n           System.out.println(getName() + \" is Daemon thread\");  \n       }    \n       else \n       {  \n           System.out.println(getName() + \" is User thread\");  \n       }  \n   }   \n   public static void main(String[] args) \n   {  \n       DaemonThread t1 = new DaemonThread(\"t1\"); \n       DaemonThread t2 = new DaemonThread(\"t2\"); \n       DaemonThread t3 = new DaemonThread(\"t3\");  \n       // Setting user thread t1 to Daemon \n       t1.setDaemon(true);       \n       // starting first 2 threads  \n       t1.start();  \n       t2.start();   \n       // Setting user thread t3 to Daemon \n       t3.setDaemon(true);  \n       t3.start();         \n   }  \n} public class DaemonThread extends Thread class DaemonThread extends Thread public DaemonThread(String name) public DaemonThread (String name) super public void run() public void run () // Checking whether the thread is Daemon or not if \" is Daemon thread\" else \" is User thread\" public static void main(String[] args) public static void main (String[] args) new \"t1\" new \"t2\" new \"t3\" // Setting user thread t1 to Daemon true // starting first 2 threads // Setting user thread t3 to Daemon true Output: Output t1 is Daemon thread \nt3 is Daemon thread \nt2 is User thread t1 is Daemon thread \nt3 is Daemon thread \nt2 is User thread But one can only call the setDaemon() method before start() method otherwise it will definitely throw IllegalThreadStateException as shown below: setDaemon() public class DaemonThread extends Thread \n{ \n   public void run() \n   { \n       System.out.println(\"Thread name: \" + Thread.currentThread().getName()); \n       System.out.println(\"Check if its DaemonThread: \"  \n                       + Thread.currentThread().isDaemon()); \n   } \n   public static void main(String[] args) \n   { \n       DaemonThread t1 = new DaemonThread(); \n       DaemonThread t2 = new DaemonThread(); \n       t1.start();         \n       // Exception as the thread is already started \n       t1.setDaemon(true); \n       t2.start(); \n   } \n} public class DaemonThread extends Thread \n{ \n   public void run() \n   { \n       System.out.println(\"Thread name: \" + Thread.currentThread().getName()); \n       System.out.println(\"Check if its DaemonThread: \"  \n                       + Thread.currentThread().isDaemon()); \n   } \n   public static void main(String[] args) \n   { \n       DaemonThread t1 = new DaemonThread(); \n       DaemonThread t2 = new DaemonThread(); \n       t1.start();         \n       // Exception as the thread is already started \n       t1.setDaemon(true); \n       t2.start(); \n   } \n} public class DaemonThread extends Thread class DaemonThread extends Thread public void run() public void run () \"Thread name: \" \"Check if its DaemonThread: \" public static void main(String[] args) public static void main (String[] args) new new // Exception as the thread is already started true Output: Output Thread name: Thread-0 \nCheck if its DaemonThread: false Thread name: Thread-0 \nCheck if its DaemonThread: false",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "8. What are the wait() and sleep() methods?",
        "answer": "wait(): As the name suggests, it is a non-static method that causes the current thread to wait and go to sleep until some other threads call the notify () or notifyAll() method for the object’s monitor (lock). It simply releases the lock and is mostly used for inter-thread communication. It is defined in the object class, and should only be called from a synchronized context. wait() Example: Example synchronized(monitor) \n{ \nmonitor.wait();       Here Lock Is Released by Current Thread  \n} synchronized(monitor) \n{ \nmonitor.wait();       Here Lock Is Released by Current Thread  \n} synchronized sleep(): As the name suggests, it is a static method that pauses or stops the execution of the current thread for some specified period. It doesn’t release the lock while waiting and is mostly used to introduce pause on execution. It is defined in thread class, and no need to call from a synchronized context. sleep() Example: Example synchronized(monitor) \n{ \nThread.sleep(1000);     Here Lock Is Held by The Current Thread \n//after 1000 milliseconds, the current thread will wake up, or after we call that is interrupt() method \n} synchronized(monitor) \n{ \nThread.sleep(1000);     Here Lock Is Held by The Current Thread \n//after 1000 milliseconds, the current thread will wake up, or after we call that is interrupt() method \n} synchronized 1000 //after 1000 milliseconds, the current thread will wake up, or after we call that is interrupt() method",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "9. What’s the difference between notify() and notifyAll()?",
        "answer": "notify(): It sends a notification and wakes up only a single thread instead of multiple threads that are waiting on the object’s monitor. notify()   notifyAll(): It sends notifications and wakes up all threads and allows them to compete for the object's monitor instead of a single thread. notifyAll()  ",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "10. Why wait(), notify(), and notifyAll() methods are present in Object class?",
        "answer": "We know that every object has a monitor that allows the thread to hold a lock on the object. But the thread class doesn't contain any monitors. Thread usually waits for the object’s monitor (lock) by calling the wait() method on an object, and notify other threads that are waiting for the same lock using notify() or notifyAll() method.  Therefore, these three methods are called on objects only and allow all threads to communicate with each that are created on that object.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "11. What is Runnable and Callable Interface? Write the difference between them.",
        "answer": "Both the interfaces are generally used to encapsulate tasks that are needed to be executed by another thread. But there are some differences between them as given below: \n\nRunning Interface: This interface is basically available in Java right from the beginning. It is simply used to execute code on a concurrent thread.  \nCallable Interface: This interface is basically a new one that was introduced as a part of the concurrency package. It addresses the limitation of runnable interfaces along with some major changes like generics, enum, static imports, variable argument method, etc. It uses generics to define the return type of object.   Running Interface  Callable Interface public interface Runnable  \n{   \n  public abstract void run(); \n}  \npublic interface Callable<V>  \n{    \nV call() throws Exception;  \n} public interface Runnable  \n{   \n  public abstract void run(); \n}  \npublic interface Callable<V>  \n{    \nV call() throws Exception;  \n} public interface Runnable interface Runnable public abstract void run() public abstract void run () public interface Callable<V> interface Callable V V call() throws Exception call () throws Runnable Interface vs Callable Interface Runnable Interface vs Callable Interface Runnable Interface Callable Interface \nIt does not return any result and therefore, cannot throw a checked exception.  It returns a result and therefore, can throw an exception.\nIt cannot be passed to invokeAll method.  It can be passed to invokeAll method.\nIt was introduced in JDK 1.0. It was introduced in JDK 5.0, so one cannot use it before Java 5. \nIt simply belongs to Java.lang. It simply belongs to java.util.concurrent. \nIt uses the run() method to define a task. It uses the call() method to define a task. \nTo use this interface, one needs to override the run() method.  To use this interface, one needs to override the call() method. Runnable Interface Callable Interface \nIt does not return any result and therefore, cannot throw a checked exception.  It returns a result and therefore, can throw an exception.\nIt cannot be passed to invokeAll method.  It can be passed to invokeAll method.\nIt was introduced in JDK 1.0. It was introduced in JDK 5.0, so one cannot use it before Java 5. \nIt simply belongs to Java.lang. It simply belongs to java.util.concurrent. \nIt uses the run() method to define a task. It uses the call() method to define a task. \nTo use this interface, one needs to override the run() method.  To use this interface, one needs to override the call() method. Runnable Interface Callable Interface Runnable Interface Callable Interface Runnable Interface Callable Interface It does not return any result and therefore, cannot throw a checked exception.  It returns a result and therefore, can throw an exception.\nIt cannot be passed to invokeAll method.  It can be passed to invokeAll method.\nIt was introduced in JDK 1.0. It was introduced in JDK 5.0, so one cannot use it before Java 5. \nIt simply belongs to Java.lang. It simply belongs to java.util.concurrent. \nIt uses the run() method to define a task. It uses the call() method to define a task. \nTo use this interface, one needs to override the run() method.  To use this interface, one needs to override the call() method. It does not return any result and therefore, cannot throw a checked exception.  It returns a result and therefore, can throw an exception. It does not return any result and therefore, cannot throw a checked exception. It returns a result and therefore, can throw an exception. It cannot be passed to invokeAll method.  It can be passed to invokeAll method. It cannot be passed to invokeAll method. It can be passed to invokeAll method. It was introduced in JDK 1.0. It was introduced in JDK 5.0, so one cannot use it before Java 5. It was introduced in JDK 1.0. It was introduced in JDK 5.0, so one cannot use it before Java 5. It simply belongs to Java.lang. It simply belongs to java.util.concurrent. It simply belongs to Java.lang. It simply belongs to java.util.concurrent. It uses the run() method to define a task. It uses the call() method to define a task. It uses the run() method to define a task. It uses the call() method to define a task. To use this interface, one needs to override the run() method.  To use this interface, one needs to override the call() method. To use this interface, one needs to override the run() method. To use this interface, one needs to override the call() method.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "12. What are the benefits of using Multithreading?",
        "answer": "There are various benefits of multithreading as given below: Allow the program to run continuously even if a part of it is blocked. \nImprove performance as compared to traditional parallel programs that use multiple processes. \nAllows to write effective programs that utilize maximum CPU time\nImproves the responsiveness of complex applications or programs. \nIncrease use of CPU resources and reduce costs of maintenance. \nSaves time and parallelism tasks. \nIf an exception occurs in a single thread, it will not affect other threads as threads are independent. \nLess resource-intensive than executing multiple processes at the same time. Allow the program to run continuously even if a part of it is blocked. Improve performance as compared to traditional parallel programs that use multiple processes. Allows to write effective programs that utilize maximum CPU time Improves the responsiveness of complex applications or programs. Increase use of CPU resources and reduce costs of maintenance. Saves time and parallelism tasks. If an exception occurs in a single thread, it will not affect other threads as threads are independent. Less resource-intensive than executing multiple processes at the same time.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "13. Explain thread pool?",
        "answer": "A Thread pool is simply a collection of pre-initialized or worker threads at the start-up that can be used to execute tasks and put back in the pool when completed. It is referred to as pool threads in which a group of fixed-size threads is created.  By reducing the number of application threads and managing their lifecycle, one can mitigate the issue of performance using a thread pool. Using threads, performance can be enhanced and better system stability can occur. To create the thread pools, java.util.concurrent.Executors class usually provides factory methods.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "14. What’s the purpose of the join() method?",
        "answer": "join() method is generally used to pause the execution of a current thread unless and until the specified thread on which join is called is dead or completed. To stop a thread from running until another thread gets ended, this method can be used. It joins the start of a thread execution to the end of another thread’s execution. It is considered the final method of a thread class. join()",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "15. What do you mean by garbage collection?",
        "answer": "Garbage collection is basically a process of managing memory automatically. It uses several GC algorithms among which the popular one includes Mark and Sweep. The process includes three phases i.e., marking, deletion, and compaction/copying. In simple words, a garbage collector finds objects that are no longer required by the program and then delete or remove these unused objects to free up the memory space.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "16. Explain the meaning of the deadlock and when it can occur?",
        "answer": "Deadlock, as the name suggests, is a situation where multiple threads are blocked forever. It generally occurs when multiple threads hold locks on different resources and are waiting for other resources to complete their task.   The above diagram shows a deadlock situation where two threads are blocked forever.  Thread 1 is holding Object 1 but needs object 2 to complete processing whereas Thread 2 is holding Object 2 but needs object 1 first. In such conditions, both of them will hold lock forever and will never complete tasks.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "17. Explain volatile variables in Java?",
        "answer": "A volatile variable is basically a keyword that is used to ensure and address the visibility of changes to variables in multithreaded programming. This keyword cannot be used with classes and methods, instead can be used with variables. It is simply used to achieve thread-safety. If you mark any variable as volatile, then all the threads can read its value directly from the main memory rather than CPU cache, so that each thread can get an updated value of the variable.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "18. How do threads communicate with each other?",
        "answer": "Threads can communicate using three methods i.e., wait(), notify(), and notifyAll().",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "19. Can two threads execute two methods (static and non-static concurrently)?",
        "answer": "Yes, it is possible. If both the threads acquire locks on different objects, then they can execute concurrently without any problem.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "20. What is the purpose of the finalize() method?",
        "answer": "Finalize() method is basically a method of Object class specially used to perform cleanup operations on unmanaged resources just before garbage collection. It is not at all intended to be called a normal method. After the complete execution of finalize() method, the object gets destroyed automatically.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "1. What is ConcurrentHashMap and Hashtable? In java, why is ConcurrentHashMap considered faster than Hashtable?",
        "answer": "ConcurrentHashMap: It was introduced in Java 1.5 to store data using multiple buckets. As the name suggests, it allows concurrent read and writes operations to the map. It only locks a certain portion of the map while doing iteration to provide thread safety so that other readers can still have access to the map without waiting for iteration to complete.  \n\nHashtable: It is a thread-safe legacy class that was introduced in old versions of java to store key or value pairs using a hash table.  It does not provide any lock-free read, unlike ConcurrentHashMap. It just locks the entire map while doing iteration. \n\nConcurrentHashMap and Hashtable, both are thread-safe but ConcurrentHashMap generally avoids read locks and improves performance, unlike Hashtable. ConcurrentHashMap also provides lock-free reads, unlike Hashtable. Therefore, ConcurrentHashMap is considered faster than Hashtable especially when the number of readers is more as compared to the number of writers. ConcurrentHashMap   Hashtable  ",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "2. What is thread starvation?",
        "answer": "Thread starvation is basically a situation or condition where a thread won’t be able to have regular access to shared resources and therefore is unable to proceed or make progress. This is because other threads have high priority and occupy the resources for too long. This usually happens with low-priority threads that do not get CPU for its execution to carry on.  ",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "3. What is Livelock? What happens when it occurs?",
        "answer": "Similar to deadlock, livelock is also another concurrency problem. In this case, the state of threads changes between one another without making any progress. Threads are not blocked but their execution is stopped due to the unavailability of resources.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "4. What is BlockingQueue?",
        "answer": "BlockingQueue basically represents a queue that is thread-safe. Producer thread inserts resource/element into the queue using put() method unless it gets full and consumer thread takes resources from the queue using take() method until it gets empty. But if a thread tries to dequeue from an empty queue, then a particular thread will be blocked until some other thread inserts an item into the queue, or if a thread tries to insert an item into a queue that is already full, then a particular thread will be blocked until some threads take away an item from the queue.   Example: Example Example package org.arpit.java2blog; \n \nimport java.util.concurrent.ArrayBlockingQueue; \nimport java.util.concurrent.BlockingQueue; \n \npublic class BlockingQueuePCExample { \n \n   public static void main(String[] args) { \n \n       BlockingQueue<String> queue=new ArrayBlockingQueue<>(5); \n       Producer producer=new Producer(queue); \n       Consumer consumer=new Consumer(queue); \n       Thread producerThread = new Thread(producer); \n       Thread consumerThread = new Thread(consumer); \n \n       producerThread.start(); \n       consumerThread.start(); \n \n   } \n \n   static class Producer implements Runnable { \n \n       BlockingQueue<String> queue=null; \n \n       public Producer(BlockingQueue queue) { \n           super(); \n           this.queue = queue; \n       } \n \n       @Override \n       public void run() { \n \n               try { \n                   System.out.println(\"Producing element 1\"); \n                   queue.put(\"Element 1\"); \n                   Thread.sleep(1000); \n                   System.out.println(\"Producing element 2\"); \n                   queue.put(\"Element 2\"); \n                   Thread.sleep(1000); \n                   System.out.println(\"Producing element 3\"); \n                   queue.put(\"Element 3\"); \n               } catch (InterruptedException e) { \n \n                   e.printStackTrace(); \n               } \n       } \n   } \n \n   static class Consumer implements Runnable { \n \n       BlockingQueue<String> queue=null; \n \n       public Consumer(BlockingQueue queue) { \n           super(); \n           this.queue = queue; \n       } \n \n       @Override \n       public void run() { \n \n           while(true) \n           { \n               try { \n                   System.out.println(\"Consumed \"+queue.take()); \n               } catch (InterruptedException e) { \n                   e.printStackTrace(); \n               } \n           } \n       } \n \n   } \n} package org.arpit.java2blog; \n \nimport java.util.concurrent.ArrayBlockingQueue; \nimport java.util.concurrent.BlockingQueue; \n \npublic class BlockingQueuePCExample { \n \n   public static void main(String[] args) { \n \n       BlockingQueue<String> queue=new ArrayBlockingQueue<>(5); \n       Producer producer=new Producer(queue); \n       Consumer consumer=new Consumer(queue); \n       Thread producerThread = new Thread(producer); \n       Thread consumerThread = new Thread(consumer); \n \n       producerThread.start(); \n       consumerThread.start(); \n \n   } \n \n   static class Producer implements Runnable { \n \n       BlockingQueue<String> queue=null; \n \n       public Producer(BlockingQueue queue) { \n           super(); \n           this.queue = queue; \n       } \n \n       @Override \n       public void run() { \n \n               try { \n                   System.out.println(\"Producing element 1\"); \n                   queue.put(\"Element 1\"); \n                   Thread.sleep(1000); \n                   System.out.println(\"Producing element 2\"); \n                   queue.put(\"Element 2\"); \n                   Thread.sleep(1000); \n                   System.out.println(\"Producing element 3\"); \n                   queue.put(\"Element 3\"); \n               } catch (InterruptedException e) { \n \n                   e.printStackTrace(); \n               } \n       } \n   } \n \n   static class Consumer implements Runnable { \n \n       BlockingQueue<String> queue=null; \n \n       public Consumer(BlockingQueue queue) { \n           super(); \n           this.queue = queue; \n       } \n \n       @Override \n       public void run() { \n \n           while(true) \n           { \n               try { \n                   System.out.println(\"Consumed \"+queue.take()); \n               } catch (InterruptedException e) { \n                   e.printStackTrace(); \n               } \n           } \n       } \n \n   } \n} package import import public class BlockingQueuePCExample class BlockingQueuePCExample public static void main(String[] args) public static void main (String[] args) new 5 new new new new static class Producer implements Runnable class Producer implements Runnable null public Producer(BlockingQueue queue) public Producer (BlockingQueue queue) super this @Override public void run() public void run () try \"Producing element 1\" \"Element 1\" 1000 \"Producing element 2\" \"Element 2\" 1000 \"Producing element 3\" \"Element 3\" catch static class Consumer implements Runnable class Consumer implements Runnable null public Consumer(BlockingQueue queue) public Consumer (BlockingQueue queue) super this @Override public void run() public void run () while true try \"Consumed \" catch Output: Output Producing element 1 \nConsumed Element 1 \nProducing element 2 \nConsumed Element 2 \nProducing element 3 \nConsumed Element 3 Producing element 1 \nConsumed Element 1 \nProducing element 2 \nConsumed Element 2 \nProducing element 3 \nConsumed Element 3",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "5. Can you start a thread twice?",
        "answer": "No, it's not at all possible to restart a thread once a thread gets started and completes its execution. Thread only runs once and if you try to run it for a second time, then it will throw a runtime exception i.e., java.lang.IllegalThreadStateException. \n\nExample:   Example public class TestThreadTwice1 extends Thread{   \npublic void run(){   \nSystem.out.println(\" thread is executing now........\");   \n}   \npublic static void main(String args[]){   \nTestThreadTwice1 t1=new TestThreadTwice1();   \nt1.start();   \nt1.start();   \n}   \n} public class TestThreadTwice1 extends Thread{   \npublic void run(){   \nSystem.out.println(\" thread is executing now........\");   \n}   \npublic static void main(String args[]){   \nTestThreadTwice1 t1=new TestThreadTwice1();   \nt1.start();   \nt1.start();   \n}   \n} public class TestThreadTwice1 extends Thread class TestThreadTwice1 extends Thread public void run() public void run () \" thread is executing now........\" public static void main(String args[]) public static void main (String args[]) new Output: Output: thread is executing now........ \nException in thread \"main\" java.lang.IllegalThreadStateException thread is executing now........ \nException in thread \"main\" java.lang.IllegalThreadStateException",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "6. Explain context switching.",
        "answer": "Context switching is basically an important feature of multithreading. It is referred to as switching of CPU from one thread or process to another one. It allows multiple processes to share the same CPU. In context switching, the state of thread or process is stored so that the execution of the thread can be resumed later if required.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "7. What is CyclicBarrier and CountDownLatch?",
        "answer": "CyclicBarrier and CountDownLatch, both are required for managing multithreaded programming. But there is some difference between them as given below: CyclicBarrier: It is a tool to synchronize threads processing using some algorithm. It enables a set of threads to wait for each other till they reach a common execution point or common barrier points, and then let them further continue execution. One can reuse the same CyclicBarrier even if the barrier is broken by setting it. CyclicBarrier: CountDownLatch: It is a tool that enables main threads to wait until mandatory operations are performed and completed by other threads. In simple words, it makes sure that a thread waits until the execution in another thread completes before it starts its execution. One cannot reuse the same CountDownLatch once the count reaches 0. CountDownLatch:  ",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "8. What do you mean by inter-thread communication?",
        "answer": "Inter-thread communication, as the name suggests, is a process or mechanism using which multiple threads can communicate with each other. It is especially used to avoid thread polling in java and can be obtained using wait(), notify(), and notifyAll() methods.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "9. What is Thread Scheduler and Time Slicing?",
        "answer": "Thread Scheduler: It is a component of JVM that is used to decide which thread will execute next if multiple threads are waiting to get the chance of execution. By looking at the priority assigned to each thread that is READY, the thread scheduler selects the next run to execute. To schedule the threads, it mainly uses two mechanisms: Preemptive Scheduling and Time slicing scheduling.  \n\nTime Slicing: It is especially used to divide CPU time and allocate them to active threads. In this, each thread will get a predefined slice of time to execute. When the time expires, a particular thread has to wait till other threads get their chances to use their time in a round-robin fashion. Every running thread will get executed for a fixed time period. Thread Scheduler   Time Slicing",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "10. What is a shutdown hook?",
        "answer": "A shutdown hook is simply a thread that is invoked implicitly before JVM shuts down. It is one of the most important features of JVM because it provides the capacity to do resource cleanup or save application state JVM shuts down.  By calling the halt(int) method of the Runtime class, the shutdown hook can be stopped. Using the following method, one can add a shutdown hook. public void addShutdownHook(Thread hook){}     \nRuntime r=Runtime.getRuntime();   \nr.addShutdownHook(new MyThread()); public void addShutdownHook(Thread hook){}     \nRuntime r=Runtime.getRuntime();   \nr.addShutdownHook(new MyThread()); public void addShutdownHook(Thread hook) public void addShutdownHook (Thread hook) new",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "11. What is busy spinning?",
        "answer": "Busy Spinning, also known as Busy-waiting, is a technique in which one thread waits for some condition to happen, without calling wait or sleep methods and releasing the CPU. In this condition, one can pause a thread by making it run an empty loop for a certain time period, and it does not even give CPY control. Therefore, it is used to preserve CPU caches and avoid the cost of rebuilding cache.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "12. What is synchronized method and synchronized block? Which one should be preferred?",
        "answer": "Synchronized Method: In this method, the thread acquires a lock on the object when they enter the synchronized method and releases the lock either normally or by throwing an exception when they leave the method.  No other thread can use the whole method unless and until the current thread finishes its execution and release the lock. It can be used when one wants to lock on the entire functionality of a particular method. \n\nSynchronized Block: In this method, the thread acquires a lock on the object between parentheses after the synchronized keyword, and releases the lock when they leave the block. No other thread can acquire a lock on the locked object unless and until the synchronized block exists. It can be used when one wants to keep other parts of the programs accessible to other threads.\n \nSynchronized blocks should be preferred more as it boosts the performance of a particular program. It only locks a certain part of the program (critical section) rather than the entire method and therefore leads to less contention. Synchronized Method   Synchronized Block  ",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "13. Explain thread priority.",
        "answer": "Thread priority simply means that threads with the highest priority will get a chance for execution prior to low-priority threads. One can specify the priority but it's not necessary that the highest priority thread will get executed before the lower-priority thread. Thread scheduler assigns processor to thread on the basis of thread priority. The range of priority changes between 1-10 from lowest priority to highest priority.  ",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "14. What do you mean by the ThreadLocal variable in Java?",
        "answer": "ThreadLocal variables are special kinds of variables created and provided by the Java ThreadLocal class. These variables are only allowed to be read and written by the same thread. Two threads cannot be able to see each other’s ThreadLocal variable, so even if they will execute the same code, then there won't be any race condition and the code will be thread-safe.  \n\nExample:   Example public class ThreadLocalExp   \n{   \n     public static class MyRunnable implements Runnable    \n   {   \n       private ThreadLocal<Integer> threadLocal =   \n              new ThreadLocal<Integer>();   \n      @Override   \n       public void run() {   \n           threadLocal.set( (int) (Math.random() * 50D) );   \n           try    \n           {   \n               Thread.sleep(1000);   \n           } catch (InterruptedException e) {   \n           }   \n           System.out.println(threadLocal.get());   \n       }   \n   }   \n   public static void main(String[] args)    \n   {   \n       MyRunnable runnableInstance = new MyRunnable();    \n       Thread t1 = new Thread(runnableInstance);   \n       Thread t2 = new Thread(runnableInstance);   \n      // this will call run() method    \n       t1.start();   \n       t2.start();   \n   }   \n} public class ThreadLocalExp   \n{   \n     public static class MyRunnable implements Runnable    \n   {   \n       private ThreadLocal<Integer> threadLocal =   \n              new ThreadLocal<Integer>();   \n      @Override   \n       public void run() {   \n           threadLocal.set( (int) (Math.random() * 50D) );   \n           try    \n           {   \n               Thread.sleep(1000);   \n           } catch (InterruptedException e) {   \n           }   \n           System.out.println(threadLocal.get());   \n       }   \n   }   \n   public static void main(String[] args)    \n   {   \n       MyRunnable runnableInstance = new MyRunnable();    \n       Thread t1 = new Thread(runnableInstance);   \n       Thread t2 = new Thread(runnableInstance);   \n      // this will call run() method    \n       t1.start();   \n       t2.start();   \n   }   \n} public class ThreadLocalExp class ThreadLocalExp public static class MyRunnable implements Runnable class MyRunnable implements Runnable private new @Override public void run() public void run () int 50D try 1000 catch public static void main(String[] args) public static void main (String[] args) new new new // this will call run() method Output: Output 10 \n33 \n10 33 10 \n33 \n10 33",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "15. What is semaphore?",
        "answer": "Semaphore is regarded as a thread synchronization construct that is usually required to control and manage the access to the shared resource using counters. It simply sets the limit of the thread. The semaphore class is defined within the package java.util.concurrent and can be used to send signals between threads to avoid missed signals or to guard critical sections. It can also be used to implement resource pools or bounded collection.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "16. Explain Thread Group. Why should we not use it?",
        "answer": "ThreadGroup is a class that is used to create multiple groups of threads in a single object. This group of threads is present in the form of three structures in which every thread group has a parent except the initial thread. Thread groups can contain other thread groups also. A thread is only allowed to have access to information about its own thread group, not other thread groups. \n\nPreviously in the old version of Java, the only functionality that did not work without a thread group was uncaughtException( Thread t, Throwable e). But now in Java 5 versions, there is Thread.setUncaughtExceptionHandler(UncaughtExceptionHandler). So now even that works without thread groups and therefore, there is no need to use thread groups.   t1.setUncaughtExceptionHandler(new UncaughtExceptionHandler() \n{ \n@Override  \npublic void uncaughtException(Thread t, Throwable e)  \n{  \nSystem.out.println(\"exception occured:\"+e.getMessage()); \n}  \n}; t1.setUncaughtExceptionHandler(new UncaughtExceptionHandler() \n{ \n@Override  \npublic void uncaughtException(Thread t, Throwable e)  \n{  \nSystem.out.println(\"exception occured:\"+e.getMessage()); \n}  \n}; new @Override public void uncaughtException(Thread t, Throwable e) public void uncaughtException (Thread t, Throwable e) \"exception occured:\"",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "17. What is the ExecutorService interface?",
        "answer": "ExecutorService interface is basically a sub-interface of Executor interface with some additional methods or features that help in managing and controlling the execution of threads. It enables us to execute tasks asynchronously on threads.   Example: Example: Example: import java.util.concurrent.ExecutorService;   \nimport java.util.concurrent.Executors;   \nimport java.util.concurrent.TimeUnit;   \n  \npublic class TestThread {   \n                                   public static void main(final String[] arguments) throws InterruptedException {   \nExecutorService e = Executors.newSingleThreadExecutor();   \n \n     try {   \n       e.submit(new Thread());   \n        System.out.println(\"Shutdown executor\");   \n        e.shutdown();   \n        e.awaitTermination(5, TimeUnit.SECONDS);   \n  } catch (InterruptedException ex) {   \n       System.err.println(\"tasks interrupted\");   \n  } finally {   \n  \n        if (!e.isTerminated()) {   \n           System.err.println(\"cancel non-finished tasks\");   \n     }   \n        e.shutdownNow();   \n        System.out.println(\"shutdown finished\");   \n  }   \n  }   \n  \n  static class Task implements Runnable {   \n        \n     public void run() {   \n          \n        try {   \n        Long duration = (long) (Math.random() * 20);   \n           System.out.println(\"Running Task!\");   \n           TimeUnit.SECONDS.sleep(duration);   \n     } catch (InterruptedException ex) {   \n           ex.printStackTrace();   \n     }   \n  }   \n }          \n} import java.util.concurrent.ExecutorService;   \nimport java.util.concurrent.Executors;   \nimport java.util.concurrent.TimeUnit;   \n  \npublic class TestThread {   \n                                   public static void main(final String[] arguments) throws InterruptedException {   \nExecutorService e = Executors.newSingleThreadExecutor();   \n \n     try {   \n       e.submit(new Thread());   \n        System.out.println(\"Shutdown executor\");   \n        e.shutdown();   \n        e.awaitTermination(5, TimeUnit.SECONDS);   \n  } catch (InterruptedException ex) {   \n       System.err.println(\"tasks interrupted\");   \n  } finally {   \n  \n        if (!e.isTerminated()) {   \n           System.err.println(\"cancel non-finished tasks\");   \n     }   \n        e.shutdownNow();   \n        System.out.println(\"shutdown finished\");   \n  }   \n  }   \n  \n  static class Task implements Runnable {   \n        \n     public void run() {   \n          \n        try {   \n        Long duration = (long) (Math.random() * 20);   \n           System.out.println(\"Running Task!\");   \n           TimeUnit.SECONDS.sleep(duration);   \n     } catch (InterruptedException ex) {   \n           ex.printStackTrace();   \n     }   \n  }   \n }          \n} import import import public class TestThread class TestThread public static void main(final String[] arguments) throws InterruptedException public static void main (final String[] arguments) final throws try new \"Shutdown executor\" 5 catch \"tasks interrupted\" finally if \"cancel non-finished tasks\" \"shutdown finished\" static class Task implements Runnable class Task implements Runnable public void run() public void run () try long 20 \"Running Task!\" catch Output: Output: Output: Shutdown executor \nshutdown finished Shutdown executor \nshutdown finished",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "18. What will happen if we don’t override the thread class run() method?",
        "answer": "Nothing will happen as such if we don’t override the run() method. The compiler will not show any error. It will execute the run() method of thread class and we will just don’t get any output because the run() method is with an empty implementation. \n\nExample:   Example: class MyThread extends Thread { \n  //don't override run() method \n} \npublic class DontOverrideRun { \n  public static void main(String[] args) { \n         System.out.println(\"Started Main.\"); \n         MyThread thread1=new MyThread(); \n      thread1.start(); \n         System.out.println(\"Ended Main.\"); \n  } \n} class MyThread extends Thread { \n  //don't override run() method \n} \npublic class DontOverrideRun { \n  public static void main(String[] args) { \n         System.out.println(\"Started Main.\"); \n         MyThread thread1=new MyThread(); \n      thread1.start(); \n         System.out.println(\"Ended Main.\"); \n  } \n} class MyThread extends Thread class MyThread extends Thread //don't override run() method public class DontOverrideRun class DontOverrideRun public static void main(String[] args) public static void main (String[] args) \"Started Main.\" new \"Ended Main.\" Output: Output: Output: Started Main. \nEnded Main. Started Main. \nEnded Main.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "19. What is the lock interface? Why is it better to use a lock interface rather than a synchronized block.?",
        "answer": "Lock interface was introduced in Java 1.5 and is generally used as a synchronization mechanism to provide important operations for blocking.  \n\nAdvantages of using Lock interface over Synchronization block:   Methods of Lock interface i.e., Lock() and Unlock() can be called in different methods. It is the main advantage of a lock interface over a synchronized block because the synchronized block is fully contained in a single method.  \nLock interface is more flexible and makes sure that the longest waiting thread gets a fair chance for execution, unlike the synchronization block. Methods of Lock interface i.e., Lock() and Unlock() can be called in different methods. It is the main advantage of a lock interface over a synchronized block because the synchronized block is fully contained in a single method. Lock interface is more flexible and makes sure that the longest waiting thread gets a fair chance for execution, unlike the synchronization block.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "20. Is it possible to call the run() method directly to start a new thread?",
        "answer": "No, it's not possible at all. You need to call the start method to create a new thread otherwise run method won't create a new thread. Instead, it will execute in the current thread.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "21. Is it possible that each thread can have its stack in multithreaded programming?",
        "answer": "Of course, it is possible. In multithreaded programming, each thread maintains its own separate stack area in memory because of which every thread is independent of each other rather than dependent.",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "22. What is the synchronization process? Why use it?",
        "answer": "Synchronization is basically a process in java that enables a simple strategy for avoiding thread interference and memory consistency errors. This process makes sure that resource will be only used one thread at a time when one thread tries to access a shared resource. It can be achieved in three different ways as given below: By the synchronized method\nBy synchronized block\nBy static synchronization By the synchronized method By synchronized block By static synchronization Syntax: Syntax synchronized (object) \n{        \n   //statement to be synchronized \n} synchronized (object) \n{        \n   //statement to be synchronized \n}",
        "reference": "interviewbit.com",
        "role": "multithreading"
    },
    {
        "question": "1. Conclusion",
        "answer": "Overall, multithreading is a very essential part of Java and modern software development. It is very helpful in making the program more efficient and also reduces the usage of storage resources. In this article, we have discussed important interview questions related to multithreading along with answers that were asked mostly in the Interviews and will help you to crack your interviews. Recommended Tutorials:\nPractice\nJava Developer Skills Recommended Tutorials:  Practice  Java Developer Skills",
        "reference": "interviewbit.com",
        "role": "multithreading"
    }
]