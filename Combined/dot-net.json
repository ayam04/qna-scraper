[
    {
        "question": "1. How does the .NET framework work?",
        "answer": ".NET framework-based applications that are written in supportive languages like C#, F#, or Visual basic are compiled to Common Intermediate Language (CIL).\nCompiled code is stored in the form of an assembly file that has a .dll or .exe file extension.\nWhen the .NET application runs, Common Language Runtime (CLR) takes the assembly file and converts the CIL into machine code with the help of the Just In Time(JIT) compiler.\nNow, this machine code can execute on the specific architecture of the computer it is running on. .NET framework-based applications that are written in supportive languages like C#, F#, or Visual basic are compiled to Common Intermediate Language (CIL). Compiled code is stored in the form of an assembly file that has a .dll or .exe file extension. When the .NET application runs, Common Language Runtime (CLR) takes the assembly file and converts the CIL into machine code with the help of the Just In Time(JIT) compiler. Now, this machine code can execute on the specific architecture of the computer it is running on. How .NET works?  How .NET works?",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "2. Explain about major components of the .NET framework.",
        "answer": "The major components .NET framework are given below: Common Language Runtime(CLR):\nIt is an execution engine that runs the code and provides services that make the development process easier.\nServices provided by CLR are memory management, garbage collection, type safety, exception handling, security, and thread management. It also makes it easier for designing the applications and components whose objects interact across the languages.\nThe programs written for the .NET Framework are executed by the CLR regardless of programming language. Every .NET Framework version is having CLR.\nFramework Class Library(FCL):\nIt has pre-defined methods and properties to implement common and complex functions that can be used by .NET applications. It will also provide types for dates, strings, numbers, etc.\nThis class library includes APIs for database connection, file reading and writing, drawing, etc.\nBase Class Library(BCL):\nThe Base Class Library(BCL) has a huge collection of libraries features and functions that are helpful in implementing various programming languages such as C#, F#, Visual C++, etc., in the .NET Framework.\nBCL is divided into two parts. They are:\nUser-defined class library: It includes Assemblies.\nAssembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly.\nPredefined class library: It contains namespace.\nNamespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace.\nCommon Type System(CTS):\nCTS specifies a standard that will mention which type of data and value can be defined and managed in memory during runtime.\nIt will make sure that programming data defined in different languages should interact with each other for sharing the information. For example, in VB.NET we define datatype as integer, while in C# we define int as a data type.\nIt can be used to prevent data loss when you are trying to transfer data from a type in one language to its equivalent type in another language.\nCommon Language Specification (CLS):\nCommon Language Specification (CLS) is a subset of CTS and defines a set of rules and regulations to be followed by every .NET Framework’s language.\nA CLS will support inter-operability or cross-language integration, which means it provides a common platform for interacting and sharing information. For example, every programming language(C#, F#, VB .Net, etc.) under the .NET framework has its own syntax. So when statements belonging to different languages get executed, a common platform will be provided by the CLS to interact and share the information. Common Language Runtime(CLR):\nIt is an execution engine that runs the code and provides services that make the development process easier.\nServices provided by CLR are memory management, garbage collection, type safety, exception handling, security, and thread management. It also makes it easier for designing the applications and components whose objects interact across the languages.\nThe programs written for the .NET Framework are executed by the CLR regardless of programming language. Every .NET Framework version is having CLR. Common Language Runtime(CLR): It is an execution engine that runs the code and provides services that make the development process easier.\nServices provided by CLR are memory management, garbage collection, type safety, exception handling, security, and thread management. It also makes it easier for designing the applications and components whose objects interact across the languages.\nThe programs written for the .NET Framework are executed by the CLR regardless of programming language. Every .NET Framework version is having CLR. It is an execution engine that runs the code and provides services that make the development process easier. Services provided by CLR are memory management, garbage collection, type safety, exception handling, security, and thread management. It also makes it easier for designing the applications and components whose objects interact across the languages. The programs written for the .NET Framework are executed by the CLR regardless of programming language. Every .NET Framework version is having CLR. Framework Class Library(FCL):\nIt has pre-defined methods and properties to implement common and complex functions that can be used by .NET applications. It will also provide types for dates, strings, numbers, etc.\nThis class library includes APIs for database connection, file reading and writing, drawing, etc. Framework Class Library(FCL): It has pre-defined methods and properties to implement common and complex functions that can be used by .NET applications. It will also provide types for dates, strings, numbers, etc.\nThis class library includes APIs for database connection, file reading and writing, drawing, etc. It has pre-defined methods and properties to implement common and complex functions that can be used by .NET applications. It will also provide types for dates, strings, numbers, etc. This class library includes APIs for database connection, file reading and writing, drawing, etc. Base Class Library(BCL):\nThe Base Class Library(BCL) has a huge collection of libraries features and functions that are helpful in implementing various programming languages such as C#, F#, Visual C++, etc., in the .NET Framework.\nBCL is divided into two parts. They are:\nUser-defined class library: It includes Assemblies.\nAssembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly.\nPredefined class library: It contains namespace.\nNamespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. Base Class Library(BCL): The Base Class Library(BCL) has a huge collection of libraries features and functions that are helpful in implementing various programming languages such as C#, F#, Visual C++, etc., in the .NET Framework.\nBCL is divided into two parts. They are:\nUser-defined class library: It includes Assemblies.\nAssembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly.\nPredefined class library: It contains namespace.\nNamespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. The Base Class Library(BCL) has a huge collection of libraries features and functions that are helpful in implementing various programming languages such as C#, F#, Visual C++, etc., in the .NET Framework. BCL is divided into two parts. They are:\nUser-defined class library: It includes Assemblies.\nAssembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly.\nPredefined class library: It contains namespace.\nNamespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. User-defined class library: It includes Assemblies.\nAssembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly.\nPredefined class library: It contains namespace.\nNamespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. User-defined class library: It includes Assemblies.\nAssembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly. User-defined class library: Assembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly. Assembly: A .NET assembly is considered as the major building block of the .NET Framework. An assembly in the CLI(Common Language Infrastructure) is a logical unit of code, which is used for security, deployment, and versioning. Assembly can be defined in two forms namely Dynamic Link Library(.dll) and executable(.exe) files.\nWhen compilation of the .NET program takes place, metadata with Microsoft Intermediate Language(MSIL) will be generated and will be stored in a file called Assembly. Assembly  Predefined class library: It contains namespace.\nNamespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. Predefined class library: Namespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. Namespace: It is the collection of pre-defined methods and classes that are present in the .Net Framework. A namespace can be added to a .NET program with the help of “using system”, where using represents a keyword and system represents a namespace. Namespace: Common Type System(CTS):\nCTS specifies a standard that will mention which type of data and value can be defined and managed in memory during runtime.\nIt will make sure that programming data defined in different languages should interact with each other for sharing the information. For example, in VB.NET we define datatype as integer, while in C# we define int as a data type.\nIt can be used to prevent data loss when you are trying to transfer data from a type in one language to its equivalent type in another language. Common Type System(CTS): CTS specifies a standard that will mention which type of data and value can be defined and managed in memory during runtime.\nIt will make sure that programming data defined in different languages should interact with each other for sharing the information. For example, in VB.NET we define datatype as integer, while in C# we define int as a data type.\nIt can be used to prevent data loss when you are trying to transfer data from a type in one language to its equivalent type in another language. CTS specifies a standard that will mention which type of data and value can be defined and managed in memory during runtime. It will make sure that programming data defined in different languages should interact with each other for sharing the information. For example, in VB.NET we define datatype as integer, while in C# we define int as a data type. It can be used to prevent data loss when you are trying to transfer data from a type in one language to its equivalent type in another language. Common Language Specification (CLS):\nCommon Language Specification (CLS) is a subset of CTS and defines a set of rules and regulations to be followed by every .NET Framework’s language.\nA CLS will support inter-operability or cross-language integration, which means it provides a common platform for interacting and sharing information. For example, every programming language(C#, F#, VB .Net, etc.) under the .NET framework has its own syntax. So when statements belonging to different languages get executed, a common platform will be provided by the CLS to interact and share the information. Common Language Specification (CLS): Common Language Specification (CLS) is a subset of CTS and defines a set of rules and regulations to be followed by every .NET Framework’s language.\nA CLS will support inter-operability or cross-language integration, which means it provides a common platform for interacting and sharing information. For example, every programming language(C#, F#, VB .Net, etc.) under the .NET framework has its own syntax. So when statements belonging to different languages get executed, a common platform will be provided by the CLS to interact and share the information. Common Language Specification (CLS) is a subset of CTS and defines a set of rules and regulations to be followed by every .NET Framework’s language. A CLS will support inter-operability or cross-language integration, which means it provides a common platform for interacting and sharing information. For example, every programming language(C#, F#, VB .Net, etc.) under the .NET framework has its own syntax. So when statements belonging to different languages get executed, a common platform will be provided by the CLS to interact and share the information.  ",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "3. What is an EXE and a DLL?",
        "answer": "EXE and DLLs are assembly executable modules. EXE is an executable file that runs the application for which it is designed. An EXE is produced when we build an application. Therefore the assemblies are loaded directly when we run an EXE. However, an EXE cannot be shared with the other applications. EXE Dynamic Link Library (DLL) is a library that consists of code that needs to be hidden. The code is encapsulated inside this library. An application can consist of many DLLs which can be shared with the other programs and applications. Dynamic Link Library (DLL)",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "4. What is CTS?",
        "answer": "CTS stands for Common Type System. It follows a set of structured rules according to which a data type should be declared and used in the program code. It is used to describe all the data types that are going to be used in the application. We can create our own classes and functions by following the rules in the CTS. It helps in calling the data type declared in one programming language by other programming languages.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "5. Explain CLS",
        "answer": "Common Language Specification (CLS) helps the application developers to use the components that are inter-language compatible with certain rules that come with CLS. It also helps in reusing the code among all of the .NET-compatible languages. Common Language Specification (CLS)",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "6. What is JIT?",
        "answer": "JIT stands for Just In Time. It is a compiler that converts the intermediate code into the native language during the execution. JIT Just In Time",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "7. What is the difference between int and Int32?",
        "answer": "There is no difference between int and Int32. Int32 is a type provided by the .NET framework class whereas int is an alias name for Int32 in the C# programming language.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "8. Explain the differences between value type and reference type.",
        "answer": "The main differences between value type and reference type are given below: A Value Type holds the actual data directly within the memory location and a reference type contains a pointer which consists of the address of another memory location that holds the actual data.\nValue type stores its contents on the stack memory and reference type stores its contents on the heap memory.\nAssigning a value type variable to another variable will copy the value directly and assigning a reference variable to another doesn’t copy the value, instead, it creates a second copy of the reference.\nPredefined data types, structures, enums are examples of value types. Classes, Objects, Arrays, Indexers, Interfaces, etc are examples of reference types. A Value Type holds the actual data directly within the memory location and a reference type contains a pointer which consists of the address of another memory location that holds the actual data. Value type stores its contents on the stack memory and reference type stores its contents on the heap memory. Assigning a value type variable to another variable will copy the value directly and assigning a reference variable to another doesn’t copy the value, instead, it creates a second copy of the reference. Predefined data types, structures, enums are examples of value types. Classes, Objects, Arrays, Indexers, Interfaces, etc are examples of reference types.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "9. What is the difference between managed and unmanaged code?",
        "answer": "The main difference between managed and unmanaged code is listed below: Managed Code Unmanaged Code\nIt is managed by CLR. It is not managed by CLR.\n.NET framework is a must for execution. Does not require a .NET framework for the execution.\nMemory management is done through garbage collection. Runtime environment takes care of memory management. Managed Code Unmanaged Code\nIt is managed by CLR. It is not managed by CLR.\n.NET framework is a must for execution. Does not require a .NET framework for the execution.\nMemory management is done through garbage collection. Runtime environment takes care of memory management. Managed Code Unmanaged Code Managed Code Unmanaged Code Managed Code Unmanaged Code It is managed by CLR. It is not managed by CLR.\n.NET framework is a must for execution. Does not require a .NET framework for the execution.\nMemory management is done through garbage collection. Runtime environment takes care of memory management. It is managed by CLR. It is not managed by CLR. It is managed by CLR. It is not managed by CLR. .NET framework is a must for execution. Does not require a .NET framework for the execution. .NET framework is a must for execution. Does not require a .NET framework for the execution. Memory management is done through garbage collection. Runtime environment takes care of memory management. Memory management is done through garbage collection. Runtime environment takes care of memory management.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "10. Explain Microsoft Intermediate Language",
        "answer": "MSIL is the Microsoft Intermediate Language, which provides instructions for calling methods, memory handling, storing and initializing values, exception handling, and so on. The instructions provided by MSIL are platform-independent and are generated by the language-specific compiler from the source code. JIT compiler compiles the MSIL into machine code based on the requirement.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "11. What is an assembly?",
        "answer": "An assembly is a file that is automatically generated by the compiler which consists of a collection of types and resources that are built to work together and form a logical unit of functionality. We can also say, assembly is a compiled code and logical unit of code. Assemblies are implemented in the form of executable (.exe) or dynamic link library (.dll) files.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "12. Is ASP.NET different from ASP? If yes, explain how?",
        "answer": "Yes, ASP.NET and ASP(Active Server Pages) both are different. Let’s check how they are different from each other. ASP.NET uses .NET languages such as C# and VB.NET, which are compiled to Microsoft Intermediate Language (MSIL). ASP uses VBScript. ASP code is interpreted during the execution.\nASP.NET which is developed by Microsoft is used to create dynamic web applications while ASP is Microsoft’s server-side technology used to create web pages.\nASP.NET is fully object-oriented but ASP is partially object-oriented.\nASP.NET has full XML Support for easy data exchange whereas ASP has no built-in support for XML.\nASP.NET uses the ADO.NET technology to connect and work with databases. ASP uses ADO technology. ASP.NET uses .NET languages such as C# and VB.NET, which are compiled to Microsoft Intermediate Language (MSIL). ASP uses VBScript. ASP code is interpreted during the execution. ASP.NET which is developed by Microsoft is used to create dynamic web applications while ASP is Microsoft’s server-side technology used to create web pages. ASP.NET is fully object-oriented but ASP is partially object-oriented. ASP.NET has full XML Support for easy data exchange whereas ASP has no built-in support for XML. ASP.NET uses the ADO.NET technology to connect and work with databases. ASP uses ADO technology.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "13. Explain role-based security in .NET",
        "answer": "Role-based security is used to implement security measures in .NET, based on the roles assigned to the users in the organization. In the organization, authorization of users is done based on their roles. For example, windows have role-based access like administrators, users, and guests.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "14. Explain the different types of assembly.",
        "answer": "Assemblies are classified into 2 types. They are: Private Assembly: Private Assembly: It is accessible only to the application.\nWe need to copy this private assembly, separately in all application folders where we want to use that assembly. Without copying, we cannot access the private assembly.\nIt requires to be installed in the installation directory of the application. It is accessible only to the application. We need to copy this private assembly, separately in all application folders where we want to use that assembly. Without copying, we cannot access the private assembly. It requires to be installed in the installation directory of the application. Shared or Public Assembly: Shared or Public Assembly: It can be shared by multiple applications.\nPublic assembly does not require copying separately into all application folders. Only one copy of public assembly is required at the system level, we can use the same copy by multiple applications.\nIt is installed in the Global Assembly Cache(GAC). It can be shared by multiple applications. Public assembly does not require copying separately into all application folders. Only one copy of public assembly is required at the system level, we can use the same copy by multiple applications. It is installed in the Global Assembly Cache(GAC).",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "15. What is the order of the events in a page life cycle?",
        "answer": "There are eight events as given below that take place in an order to successfully render a page: Page_PreInit\nPage_Init\nPage_InitComplete\nPage_PreLoad\nPage_Load\nPage_LoadComplete\nPage_PreRender\nRender Page_PreInit Page_Init Page_InitComplete Page_PreLoad Page_Load Page_LoadComplete Page_PreRender Render",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "16. What is a garbage collector?",
        "answer": "Garbage collector frees the unused code objects in the memory. The memory heap is partitioned into 3 generations: Generation 0: It holds short-lived objects.\nGeneration 1: It stores medium-lived objects.\nGeneration 2: This is for long-lived objects. Generation 0: It holds short-lived objects. Generation 1: It stores medium-lived objects. Generation 2: This is for long-lived objects. Collection of garbage refers to checking for objects in the generations of the managed heap that are no longer being used by the application. It also performs the necessary operations to reclaim their memory. The garbage collector must perform a collection in order to free some memory space. During the garbage collection process: The list of live objects is recognized.\nReferences are updated for the compacted objects.\nThe memory space occupied by dead objects is recollected. The remaining objects are moved to an older segment. The list of live objects is recognized. References are updated for the compacted objects. The memory space occupied by dead objects is recollected. The remaining objects are moved to an older segment. System.GC.Collect() method is used to perform garbage collection in .NET. System.GC.Collect()",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "17. What is caching?",
        "answer": "Caching means storing the data temporarily in the memory so that the data can be easily accessed from the memory by an application instead of searching for it in the original location. It increases the speed and performance efficiency of an application. There are three types of caching: Page caching\nData caching\nFragment caching Page caching Data caching Fragment caching",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "18. Can we apply themes to ASP.NET applications?",
        "answer": "Yes. By modifying the following code in the web.config file, we can apply themes to ASP.NET applications: web.config <configuration>\n   <system.web>\n       <pages theme=\"windows\"/>\n   </system.web>\n</configuration> <configuration>\n   <system.web>\n       <pages theme=\"windows\"/>\n   </system.web>\n</configuration>",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "19. Explain MVC.",
        "answer": "MVC stands for Model View Controller. It is an architecture to build .NET applications. Following are three main logical components of MVC: the model, the view, and the controller. logical components of MVC logical components of MVC Components of MVC  Components of MVC Model: They hold data and its related logic. It handles the object storage and retrieval from the databases for an application. For example:\nA Controller object will retrieve the employee information from the database.\nIt manipulates employee data and sends back to the database or uses it to render the same data. Model:   View: View handles the UI part of an application. They get the information from the models for their display. For example, any employee view will include many components like text boxes, dropdowns, etc. View: Controller: They handle the user interactions, figure out the responses for the user input and also render the final output. For instance, the Employee controller will handle all the interactions and inputs from the Employee View and update the database using the Employee Model. Controller:",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "20. What is cross-page posting?",
        "answer": "Whenever we click on a submit button on a webpage, the data is stored on the same page. But if the data is stored on a different page and linked to the current one, then it is known as a cross-page posting. Cross-page posting is achieved by POSTBACKURL property. POSTBACKURL To get the values that are posted on this page to which the page has been posted, the FindControl method can be used.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "21. What is a delegate in .NET?",
        "answer": "A delegate is a .NET object which defines a method signature and it can pass a function as a parameter. Delegate always points to a method that matches its specific signature. Users can encapsulate the reference of a method in a delegate object. When we pass the delegate object in a program, it will call the referenced method. To create a custom event in a class, we can make use of delegate.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "22. What are security controls available on ASP.NET?",
        "answer": "Following are the five security controls available on ASP.NET: <asp: Login> Provides a login capability that enables the users to enter their credentials with ID and password fields.\n<asp: LoginName> Used to display the user name who has logged-in.\n<asp: LoginView> Provides a variety of views depending on the template that has been selected.\n<asp: LoginStatus> Used to check whether the user is authenticated or not.\n<asp: PasswordRecovery> Sends an email to a user while resetting the password. <asp: Login> Provides a login capability that enables the users to enter their credentials with ID and password fields. <asp: Login> <asp: LoginName> Used to display the user name who has logged-in. <asp: LoginName> <asp: LoginView> Provides a variety of views depending on the template that has been selected. <asp: LoginView> <asp: LoginStatus> Used to check whether the user is authenticated or not. <asp: LoginStatus> <asp: PasswordRecovery> Sends an email to a user while resetting the password. <asp: PasswordRecovery>",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "23. What is boxing and unboxing in .NET?",
        "answer": "Boxing is the process of converting a value type into a reference type directly. Boxing is implicit. Unboxing is the process where reference type is converted back into a value type. Unboxing is explicit. An example is given below to demonstrate boxing and unboxing operations: int a = 10;      // a value type\nobject o = a;     // boxing\nint b = (int)o;   // unboxing int a = 10;      // a value type\nobject o = a;     // boxing\nint b = (int)o;   // unboxing",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "24. What is MIME in .NET?",
        "answer": "MIME stands for Multipurpose Internet Mail Extensions. It is the extension of the e-mail protocol which lets users use the protocol to exchange files over emails easily. Servers insert the MIME header at the beginning of the web transmission to denote that it is a MIME transaction. Then the clients use this header to select an appropriate ‘player’ for the type of data that the header indicates. Some of these players are built into the web browser.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "25. What is the use of manifest in the .NET framework?",
        "answer": "Manifest stores the metadata of the assembly. It contains metadata which is required for many things as given below: Assembly version information.\nScope checking of the assembly.\nReference validation to classes.\nSecurity identification. Assembly version information. Scope checking of the assembly. Reference validation to classes. Security identification.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "26. Explain different types of cookies available in ASP.NET?",
        "answer": "Two types of cookies are available in ASP.NET. They are: Session Cookie: It resides on the client machine for a single session and is valid until the user logs out.\nPersistent Cookie: It resides on the user machine for a period specified for its expiry. It may be an hour, a day, a month, or never. Session Cookie: It resides on the client machine for a single session and is valid until the user logs out. Session Cookie: Persistent Cookie: It resides on the user machine for a period specified for its expiry. It may be an hour, a day, a month, or never. Persistent Cookie:",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "27. What is the meaning of CAS in .NET?",
        "answer": "Code Access Security(CAS) is necessary to prevent unauthorized access to programs and resources in the runtime. It is designed to solve the issues faced when obtaining code from external sources, which may contain bugs and vulnerabilities that make the user’s system vulnerable. CAS gives limited access to code to perform only certain operations instead of providing all at a given point in time. CAS constructs a part of the native .NET security architecture.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "28. What is the appSettings section in the web.config file?",
        "answer": "We can use the appSettings block in the web.config file, if we want to set the user-defined values for the whole application. Example code given below will make use of ConnectionString for the database connection throughout the project: <em>\n   <configuration>\n       <appSettings>\n           <add key= \"ConnectionString\" value=\"server=local; pwd=password; database=default\"  />\n       </appSettings>\n   </configuration>\n</em> <em>\n   <configuration>\n       <appSettings>\n           <add key= \"ConnectionString\" value=\"server=local; pwd=password; database=default\"  />\n       </appSettings>\n   </configuration>\n</em>",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "29. What is the difference between an abstract class and an interface?",
        "answer": "The main difference between an abstract class and an interface are listed below: Abstract Class Interface\nUsed to declare properties, events, methods, and fields as well. Fields cannot be declared using interfaces.\nProvides the partial implementation of functionalities that must be implemented by inheriting classes. Used to declare the behavior of an implementing class.\nDifferent kinds of access modifiers like private, public, protected, etc. are supported. Only public access modifier is supported.\nIt can contain static members. It does not contain static members.\nMultiple inheritances cannot be achieved. Multiple inheritances are achieved. Abstract Class Interface\nUsed to declare properties, events, methods, and fields as well. Fields cannot be declared using interfaces.\nProvides the partial implementation of functionalities that must be implemented by inheriting classes. Used to declare the behavior of an implementing class.\nDifferent kinds of access modifiers like private, public, protected, etc. are supported. Only public access modifier is supported.\nIt can contain static members. It does not contain static members.\nMultiple inheritances cannot be achieved. Multiple inheritances are achieved. Abstract Class Interface Abstract Class Interface Abstract Class Interface Used to declare properties, events, methods, and fields as well. Fields cannot be declared using interfaces.\nProvides the partial implementation of functionalities that must be implemented by inheriting classes. Used to declare the behavior of an implementing class.\nDifferent kinds of access modifiers like private, public, protected, etc. are supported. Only public access modifier is supported.\nIt can contain static members. It does not contain static members.\nMultiple inheritances cannot be achieved. Multiple inheritances are achieved. Used to declare properties, events, methods, and fields as well. Fields cannot be declared using interfaces. Used to declare properties, events, methods, and fields as well. Fields cannot be declared using interfaces. Provides the partial implementation of functionalities that must be implemented by inheriting classes. Used to declare the behavior of an implementing class. Provides the partial implementation of functionalities that must be implemented by inheriting classes. Used to declare the behavior of an implementing class. Different kinds of access modifiers like private, public, protected, etc. are supported. Only public access modifier is supported. Different kinds of access modifiers like private, public, protected, etc. are supported. Only public access modifier is supported. It can contain static members. It does not contain static members. It can contain static members. It does not contain static members. Multiple inheritances cannot be achieved. Multiple inheritances are achieved. Multiple inheritances cannot be achieved. Multiple inheritances are achieved.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "30. What are the types of memories supported in the .NET framework?",
        "answer": "Two types of memories are present in .NET. They are: Stack: Stack is a stored-value type that keeps track of each executing thread and its location. It is used for static memory allocation. Stack: Heap: Heap is a stored reference type that keeps track of the more precise objects or data. It is used for dynamic memory allocation. Heap:",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "31. Explain localization and globalization.",
        "answer": "Localization is the process of customizing our application to behave as per the current culture and locale. Globalization is the process of designing the application so that it can be used by users from across the globe by supporting multiple languages.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "32. What are the parameters that control the connection pooling behaviors?",
        "answer": "There are 4 parameters that control the connection pooling behaviours. They are: Connect Timeout\nMin Pool Size\nMax Pool Size\nPooling Connect Timeout Min Pool Size Max Pool Size Pooling",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "33. What are MDI and SDI?",
        "answer": "MDI (Multiple Document Interface): An MDI allows you to open multiple windows, it will have one parent window and as many child windows. The components are shared from the parent window like toolbar, menubar, etc. MDI (Multiple Document Interface): SDI (Single Document Interface): SDI opens each document in a separate window. Each window has its own components like a toolbar, menubar, etc. Therefore it is not constrained to the parent window. SDI (Single Document Interface):",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "34. Explain the different parts of an Assembly.",
        "answer": "The different parts of an assembly are:   The different parts of an assembly are: Manifest – Every static or dynamic assembly holds a data collection that gives details about how the elements in the assembly relate to each other. An assembly manifest consists of complete metadata required to specify version requirements and security identity of an assembly, and also the metadata required for defining the assembly scope and resolving references to classes and resources.\nThe assembly manifest will be stored in either a standalone PE(Portable Executable) file that holds only assembly manifest information, or in a PE file (a .exe or .dll) with MSIL(Microsoft intermediate language) code.\nType Metadata – Metadata gives you additional information such as types, type names, method names, etc about the contents of an assembly. Metadata will be automatically generated by the Compilers from the source files and the compiler will embed this metadata within target output files like .exe, .dll, or a .netmodule(in the case of multi-module assembly).\nMSIL – Microsoft Intermediate Language(MSIL) is a code that implements the types. It includes instructions to load, store, initialize, and call the methods on objects. Along with this, it also includes instructions for control flow, direct memory access, arithmetic and logical operations, exception handling, etc. This is generated by the compiler using one or more source code files. During the runtime, the JIT(Just In Time) compiler of CLR(Common Language Runtime) converts the MSIL code into native code to the Operating System.\nResources – Resources can be a list of related files such as .bmp or .jpg files. These resources are static, which means they do not change during run time. Resources are not executable items. Manifest – Every static or dynamic assembly holds a data collection that gives details about how the elements in the assembly relate to each other. An assembly manifest consists of complete metadata required to specify version requirements and security identity of an assembly, and also the metadata required for defining the assembly scope and resolving references to classes and resources.\nThe assembly manifest will be stored in either a standalone PE(Portable Executable) file that holds only assembly manifest information, or in a PE file (a .exe or .dll) with MSIL(Microsoft intermediate language) code. Manifest  Type Metadata – Metadata gives you additional information such as types, type names, method names, etc about the contents of an assembly. Metadata will be automatically generated by the Compilers from the source files and the compiler will embed this metadata within target output files like .exe, .dll, or a .netmodule(in the case of multi-module assembly). Type Metadata MSIL – Microsoft Intermediate Language(MSIL) is a code that implements the types. It includes instructions to load, store, initialize, and call the methods on objects. Along with this, it also includes instructions for control flow, direct memory access, arithmetic and logical operations, exception handling, etc. This is generated by the compiler using one or more source code files. During the runtime, the JIT(Just In Time) compiler of CLR(Common Language Runtime) converts the MSIL code into native code to the Operating System. MSIL Resources – Resources can be a list of related files such as .bmp or .jpg files. These resources are static, which means they do not change during run time. Resources are not executable items. Resources",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "1. What are Universal Windows Platform(UWP) Apps in .Net Core?",
        "answer": "Universal Windows Platform(UWP) is one of the methods used to create client applications for Windows. UWP apps will make use of WinRT APIs for providing powerful UI as well as features of advanced asynchronous that are ideal for devices with internet connections. Features of UWP apps: Features of UWP apps: Secure: UWP apps will specify which resources of device and data are accessed by them.\nIt is possible to use a common API on all devices(that run on Windows 10).\nIt enables us to use the specific capabilities of the device and adapt the user interface(UI) to different device screen sizes, DPI(Dots Per Inches), and resolutions.\nIt is available on the Microsoft Store on all or specified devices that run on Windows 10.\nWe can install and uninstall these apps without any risk to the machine/incurring “machine rot”.\nEngaging: It uses live tiles, user activities, and push notifications, that interact with the Timeline of Windows as well as with Cortana’s Pick Up Where I Left Off, for engaging users.\nIt can be programmable in C++, C#, Javascript, and Visual Basic. For UI, you can make use of WinUI, HTML, XAML, or DirectX. Secure: UWP apps will specify which resources of device and data are accessed by them. It is possible to use a common API on all devices(that run on Windows 10). It enables us to use the specific capabilities of the device and adapt the user interface(UI) to different device screen sizes, DPI(Dots Per Inches), and resolutions. It is available on the Microsoft Store on all or specified devices that run on Windows 10. We can install and uninstall these apps without any risk to the machine/incurring “machine rot”. Engaging: It uses live tiles, user activities, and push notifications, that interact with the Timeline of Windows as well as with Cortana’s Pick Up Where I Left Off, for engaging users. It can be programmable in C++, C#, Javascript, and Visual Basic. For UI, you can make use of WinUI, HTML, XAML, or DirectX.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "2. Write a program to calculate the addition of two numbers.",
        "answer": "The steps are as follows: 1. You need to create a new ASP.NET Core Project “CalculateSum”. Open Visual Studio 2015, goto File–> New–> Project. Select the option Web in Left Pane and go for the option ASP.NET Core Web Application (.NET Core) under the central pane. Edit the project name as “CalculateSum” and click on OK. File–> New–> Project ASP.NET Core Web Application 2. In the template window, select Web Application and set the Authentication into “No Authentication” and click on OK. 3. Open “Solution Explorer” and right-click on the folder “Home” (It is Under Views), then click on Add New Item. You need to select MVC View Page Template under ASP.NET Section and rename it as “addition.cshtml” and then click on the Add button. Add New Item MVC View Page Template Add 4. Open addition.cshtml and write the following code: @{\n    ViewBag.Title = \"Addition Page\";\n}\n\n<h1>Welcome to Addition Page</h1>\n\n<form asp-controller=\"Home\" asp-action=\"add\" method=\"post\">\n\n    <span>Enter First Number : </span> <input id=\"Text1\" type=\"text\" name=\"txtFirstNum\" /> <br /><br />\n    <span>Enter Second Number : </span> <input id=\"Text2\" type=\"text\" name=\"txtSecondNum\" /> <br /><br />\n    <input id=\"Submit1\" type=\"submit\" value=\"Add\" />\n</form>\n\n<h2>@ViewBag.Result</h2> @{\n    ViewBag.Title = \"Addition Page\";\n}\n\n<h1>Welcome to Addition Page</h1>\n\n<form asp-controller=\"Home\" asp-action=\"add\" method=\"post\">\n\n    <span>Enter First Number : </span> <input id=\"Text1\" type=\"text\" name=\"txtFirstNum\" /> <br /><br />\n    <span>Enter Second Number : </span> <input id=\"Text2\" type=\"text\" name=\"txtSecondNum\" /> <br /><br />\n    <input id=\"Submit1\" type=\"submit\" value=\"Add\" />\n</form>\n\n<h2>@ViewBag.Result</h2> Here, we have created a simple form that is having two text boxes and a single Add Button. The text boxes are named as txtFirstNum and txtSecondNum. On the controller page, we can access these textboxes using:\n<form asp-controller=\"Home\" asp-action=\"add\" method=\"post\"> txtFirstNum txtSecondNum  <form asp-controller=\"Home\" asp-action=\"add\" method=\"post\"> This form will indicate all the submissions will be moved to HomeController and the method add action will be executed. 5. Open the HomeController.cs and write the following code onto it: HomeController.cs using System;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace CalculateSum.Controllers\n{\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            ViewData[\"Message\"] = \"Application description page.\";\n            return View();\n        }\n\n        public IActionResult Contact()\n        {\n            ViewData[\"Message\"] = \"Contact page.\";\n            return View();\n        }\n\n        public IActionResult Error()\n        {\n            return View();\n        }\n\n        public IActionResult addition()\n        {\n            return View();\n        }\n\n        [HttpPost]\n        public IActionResult add()\n        {\n            int number1 = Convert.ToInt32(HttpContext.Request.Form[\"txtFirstNum\"].ToString());\n            int number2 = Convert.ToInt32(HttpContext.Request.Form[\"txtSecondNum\"].ToString());\n            int res = number1 + number2;\n            ViewBag.Result = res.ToString();\n            return View(\"addition\");\n        }\n    }\n} using System;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace CalculateSum.Controllers\n{\n    public class HomeController : Controller\n    {\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            ViewData[\"Message\"] = \"Application description page.\";\n            return View();\n        }\n\n        public IActionResult Contact()\n        {\n            ViewData[\"Message\"] = \"Contact page.\";\n            return View();\n        }\n\n        public IActionResult Error()\n        {\n            return View();\n        }\n\n        public IActionResult addition()\n        {\n            return View();\n        }\n\n        [HttpPost]\n        public IActionResult add()\n        {\n            int number1 = Convert.ToInt32(HttpContext.Request.Form[\"txtFirstNum\"].ToString());\n            int number2 = Convert.ToInt32(HttpContext.Request.Form[\"txtSecondNum\"].ToString());\n            int res = number1 + number2;\n            ViewBag.Result = res.ToString();\n            return View(\"addition\");\n        }\n    }\n} In this program, we have added two IAction Methods addition() and add(). Addition() method will return the addition view page and add() method obtains input from the browser, processes it, and results will be kept in ViewBag.Result and then returned to the browser. Now, press Ctrl+F5 for running your program. This will launch an ASP.NET Core website into the browser. Add /Home/addition at the end of the link and then hit on enter. The output format is given below: ASP.NET /Home/addition   Conclusion The .NET is a full-stack software development framework, which is essentially used to build large enterprise-scale and scalable software applications. The .NET framework has wide scope in the market. It is a flexible and user-friendly framework, that goes well along with other technologies. The .NET Core was developed in response to the surge in Java popularity. The .NET Core is normally used in low-risk projects. Some of the .NET components can be used in .NET core applications (but not the other way around). This article mainly concentrates on the framework concepts of .Net and .NET Core. We are sure that it would give you sufficient information and a fair knowledge of the common questions that will be asked during an interview. Useful Resources: Useful Resources: .Net Developer: Career Guide .Net Developer: Career Guide ASP. NET Interview ASP. NET Interview C# Interview C# Interview",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "3. Explain about .NET Core Components.",
        "answer": "The .NET Core Framework is composed of the following components:   CLI Tools: Command Line Interface(CLI) tools is a cross-platform tool for developing, building, executing, restoring packages, and publishing. It is also capable of building Console applications and class libraries that can run on the entire .NET framework. It is installed along with .NET Core SDK for the selected platforms. So it does not require separate installation on the development machine. We can verify for the proper CLI installation by typing dotnet on the command prompt of Windows and then pressing Enter. If usage and help-related texts are displayed, then we can conclude that CLI is installed properly.\nRoslyn(.NET Compiler platform): It is a set of an open-source language compiler and also has code analysis API for the C# and Visual Basic (VB.NET) programming languages. Roslyn exposes modules for dynamic compilation to Common Intermediate Language(CLI), syntactic (lexical) and semantic code analysis, and also code emission.\nCoreFX: CoreFX is a set of framework libraries. It consists of the new BCL(Base Class Library) i.e. System.* things like System.Xml, System.Collections, etc.\nCoreCLR: A JIT(Just In Time) based CLR (Command Language Runtime). CoreCLR is the runtime implementation that runs on cross-platform and has the GC, RyuJIT, native interop, etc. CLI Tools: Command Line Interface(CLI) tools is a cross-platform tool for developing, building, executing, restoring packages, and publishing. It is also capable of building Console applications and class libraries that can run on the entire .NET framework. It is installed along with .NET Core SDK for the selected platforms. So it does not require separate installation on the development machine. We can verify for the proper CLI installation by typing dotnet on the command prompt of Windows and then pressing Enter. If usage and help-related texts are displayed, then we can conclude that CLI is installed properly. CLI Tools: dotnet Roslyn(.NET Compiler platform): It is a set of an open-source language compiler and also has code analysis API for the C# and Visual Basic (VB.NET) programming languages. Roslyn exposes modules for dynamic compilation to Common Intermediate Language(CLI), syntactic (lexical) and semantic code analysis, and also code emission. Roslyn(.NET Compiler platform): VB.NET CoreFX: CoreFX is a set of framework libraries. It consists of the new BCL(Base Class Library) i.e. System.* things like System.Xml, System.Collections, etc. CoreFX: System.* System.Xml System.Collections CoreCLR: A JIT(Just In Time) based CLR (Command Language Runtime). CoreCLR is the runtime implementation that runs on cross-platform and has the GC, RyuJIT, native interop, etc. CoreCLR:",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "4. What is middleware in .NET core?",
        "answer": "Middleware is software assembled into an application pipeline for request and response handling. Each component will choose whether the request should be passed to the next component within the pipeline, also it can carry out work before and after the next component within the pipeline.\nFor example, we can have a middleware component for user authentication, another middleware for handling errors, and one more middleware for serving static files like JavaScript files, images, CSS files, etc.\nIt can be built-in into the .NET Core framework, which can be added through NuGet packages. These middleware components are built as part of the configure method’s application startup class. In the ASP.NET Core application, these Configure methods will set up a request processing pipeline. It contains a sequence of request delegates that are called one after another.\nNormally, each middleware will handle the incoming requests and passes the response to the next middleware for processing. A middleware component can take the decision of not calling the next middleware in the pipeline. This process is known as short-circuiting the pipeline or terminating the request pipeline. This process is very helpful as it avoids unnecessary work. For example, if the request is made for a static file such as a CSS file, image, or JavaScript file, etc., these static files middleware can process and serve the request and thus short-circuit the remaining pipeline. Middleware is software assembled into an application pipeline for request and response handling. Each component will choose whether the request should be passed to the next component within the pipeline, also it can carry out work before and after the next component within the pipeline. For example, we can have a middleware component for user authentication, another middleware for handling errors, and one more middleware for serving static files like JavaScript files, images, CSS files, etc. It can be built-in into the .NET Core framework, which can be added through NuGet packages. These middleware components are built as part of the configure method’s application startup class. In the ASP.NET Core application, these Configure methods will set up a request processing pipeline. It contains a sequence of request delegates that are called one after another. ASP.NET Normally, each middleware will handle the incoming requests and passes the response to the next middleware for processing. A middleware component can take the decision of not calling the next middleware in the pipeline. This process is known as short-circuiting the pipeline or terminating the request pipeline. This process is very helpful as it avoids unnecessary work. For example, if the request is made for a static file such as a CSS file, image, or JavaScript file, etc., these static files middleware can process and serve the request and thus short-circuit the remaining pipeline.   Here, there are three middlewares are associated with an ASP.NET Core web application. They can be either middleware provided by the framework, added through NuGet, or your own custom middleware. The HTTP request will be added or modified by each middleware and control will be optionally passed to the next middleware and a final response will be generated on the execution of all middleware components.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "5. Differentiate .NET Core vs .NET framework.",
        "answer": "Features .NET Core .NET framework\nCompatibility It works based on the principle of “build once, run anywhere”. It is cross-platform, so it is compatible with different operating systems such as Linux, Windows, and Mac OS. This framework is compatible with the Windows operating system only. Even though, it was developed for supporting software and applications on all operating systems.\nInstallation Since it is cross-platform, it is packaged and installed independently of the OS. It is installed in the form of a single package for Windows OS.\nApplication Models It does not support developing the desktop application and it focuses mainly on the windows mobile, web, and windows store. It is used for developing both desktop and web applications, along with that it also supports windows forms and WPF applications.\nPerformance and Scalability It provides high performance and scalability. It is less effective compared to .Net Core in terms of performance as well as scalability of applications.\nSupport for Micro-Services and REST Services It supports developing and implementing the micro-services and the user is required to create a REST API for its implementation. It does not support the microservices’ development and implementation, but it supports REST API services.\nPackaging and Shipping It is shipped as a collection of Nugget packages. All the libraries that belong to the .Net Framework are packaged and shipped all at once.\nAndroid Development It is compatible with open-source mobile app platforms like Xamarin, via .NET Standard Library. Developers can make use of tools of Xamarin for configuring the mobile application for particular mobile devices like Android, iOS, and Windows phones. It does not support the development of mobile applications.\nCLI Tools For all supported platforms, it provides lightweight editors along with command-line tools. This framework is heavy for CLI(Command Line Interface) and developers usually prefer to work on the lightweight CLI.\nDeployment Model Updated version of the .NET Core gets initiated on one machine at a time, which means it gets updated in new folders/directories in the existing application without affecting it. Thus, we can say that .NET Core has a very good flexible deployment model. When the updated version is released, it is deployed only on the Internet Information Server at first. Features .NET Core .NET framework\nCompatibility It works based on the principle of “build once, run anywhere”. It is cross-platform, so it is compatible with different operating systems such as Linux, Windows, and Mac OS. This framework is compatible with the Windows operating system only. Even though, it was developed for supporting software and applications on all operating systems.\nInstallation Since it is cross-platform, it is packaged and installed independently of the OS. It is installed in the form of a single package for Windows OS.\nApplication Models It does not support developing the desktop application and it focuses mainly on the windows mobile, web, and windows store. It is used for developing both desktop and web applications, along with that it also supports windows forms and WPF applications.\nPerformance and Scalability It provides high performance and scalability. It is less effective compared to .Net Core in terms of performance as well as scalability of applications.\nSupport for Micro-Services and REST Services It supports developing and implementing the micro-services and the user is required to create a REST API for its implementation. It does not support the microservices’ development and implementation, but it supports REST API services.\nPackaging and Shipping It is shipped as a collection of Nugget packages. All the libraries that belong to the .Net Framework are packaged and shipped all at once.\nAndroid Development It is compatible with open-source mobile app platforms like Xamarin, via .NET Standard Library. Developers can make use of tools of Xamarin for configuring the mobile application for particular mobile devices like Android, iOS, and Windows phones. It does not support the development of mobile applications.\nCLI Tools For all supported platforms, it provides lightweight editors along with command-line tools. This framework is heavy for CLI(Command Line Interface) and developers usually prefer to work on the lightweight CLI.\nDeployment Model Updated version of the .NET Core gets initiated on one machine at a time, which means it gets updated in new folders/directories in the existing application without affecting it. Thus, we can say that .NET Core has a very good flexible deployment model. When the updated version is released, it is deployed only on the Internet Information Server at first. Features .NET Core .NET framework Features .NET Core .NET framework Features .NET Core .NET framework Compatibility It works based on the principle of “build once, run anywhere”. It is cross-platform, so it is compatible with different operating systems such as Linux, Windows, and Mac OS. This framework is compatible with the Windows operating system only. Even though, it was developed for supporting software and applications on all operating systems.\nInstallation Since it is cross-platform, it is packaged and installed independently of the OS. It is installed in the form of a single package for Windows OS.\nApplication Models It does not support developing the desktop application and it focuses mainly on the windows mobile, web, and windows store. It is used for developing both desktop and web applications, along with that it also supports windows forms and WPF applications.\nPerformance and Scalability It provides high performance and scalability. It is less effective compared to .Net Core in terms of performance as well as scalability of applications.\nSupport for Micro-Services and REST Services It supports developing and implementing the micro-services and the user is required to create a REST API for its implementation. It does not support the microservices’ development and implementation, but it supports REST API services.\nPackaging and Shipping It is shipped as a collection of Nugget packages. All the libraries that belong to the .Net Framework are packaged and shipped all at once.\nAndroid Development It is compatible with open-source mobile app platforms like Xamarin, via .NET Standard Library. Developers can make use of tools of Xamarin for configuring the mobile application for particular mobile devices like Android, iOS, and Windows phones. It does not support the development of mobile applications.\nCLI Tools For all supported platforms, it provides lightweight editors along with command-line tools. This framework is heavy for CLI(Command Line Interface) and developers usually prefer to work on the lightweight CLI.\nDeployment Model Updated version of the .NET Core gets initiated on one machine at a time, which means it gets updated in new folders/directories in the existing application without affecting it. Thus, we can say that .NET Core has a very good flexible deployment model. When the updated version is released, it is deployed only on the Internet Information Server at first. Compatibility It works based on the principle of “build once, run anywhere”. It is cross-platform, so it is compatible with different operating systems such as Linux, Windows, and Mac OS. This framework is compatible with the Windows operating system only. Even though, it was developed for supporting software and applications on all operating systems. Compatibility It works based on the principle of “build once, run anywhere”. It is cross-platform, so it is compatible with different operating systems such as Linux, Windows, and Mac OS. This framework is compatible with the Windows operating system only. Even though, it was developed for supporting software and applications on all operating systems. Installation Since it is cross-platform, it is packaged and installed independently of the OS. It is installed in the form of a single package for Windows OS. Installation Since it is cross-platform, it is packaged and installed independently of the OS. It is installed in the form of a single package for Windows OS. Application Models It does not support developing the desktop application and it focuses mainly on the windows mobile, web, and windows store. It is used for developing both desktop and web applications, along with that it also supports windows forms and WPF applications. Application Models It does not support developing the desktop application and it focuses mainly on the windows mobile, web, and windows store. It is used for developing both desktop and web applications, along with that it also supports windows forms and WPF applications. Performance and Scalability It provides high performance and scalability. It is less effective compared to .Net Core in terms of performance as well as scalability of applications. Performance and Scalability It provides high performance and scalability. It is less effective compared to .Net Core in terms of performance as well as scalability of applications. Support for Micro-Services and REST Services It supports developing and implementing the micro-services and the user is required to create a REST API for its implementation. It does not support the microservices’ development and implementation, but it supports REST API services. Support for Micro-Services and REST Services It supports developing and implementing the micro-services and the user is required to create a REST API for its implementation. It does not support the microservices’ development and implementation, but it supports REST API services. Packaging and Shipping It is shipped as a collection of Nugget packages. All the libraries that belong to the .Net Framework are packaged and shipped all at once. Packaging and Shipping It is shipped as a collection of Nugget packages. All the libraries that belong to the .Net Framework are packaged and shipped all at once. Android Development It is compatible with open-source mobile app platforms like Xamarin, via .NET Standard Library. Developers can make use of tools of Xamarin for configuring the mobile application for particular mobile devices like Android, iOS, and Windows phones. It does not support the development of mobile applications. Android Development It is compatible with open-source mobile app platforms like Xamarin, via .NET Standard Library. Developers can make use of tools of Xamarin for configuring the mobile application for particular mobile devices like Android, iOS, and Windows phones. It does not support the development of mobile applications. CLI Tools For all supported platforms, it provides lightweight editors along with command-line tools. This framework is heavy for CLI(Command Line Interface) and developers usually prefer to work on the lightweight CLI. CLI Tools For all supported platforms, it provides lightweight editors along with command-line tools. This framework is heavy for CLI(Command Line Interface) and developers usually prefer to work on the lightweight CLI. Deployment Model Updated version of the .NET Core gets initiated on one machine at a time, which means it gets updated in new folders/directories in the existing application without affecting it. Thus, we can say that .NET Core has a very good flexible deployment model. When the updated version is released, it is deployed only on the Internet Information Server at first. Deployment Model Updated version of the .NET Core gets initiated on one machine at a time, which means it gets updated in new folders/directories in the existing application without affecting it. Thus, we can say that .NET Core has a very good flexible deployment model. When the updated version is released, it is deployed only on the Internet Information Server at first.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "6. Explain Explicit Compilation (Ahead Of Time compilation).",
        "answer": "Ahead-of-time(AOT) compilation is the process of compiling a high-level language into a low-level language during build-time, i.e., before program execution. AOT compilation reduces the workload during run time.\nAOT provides faster start-up time, in larger applications where most of the code executes on startup. But it needs more amount of disk space and memory or virtual address space to hold both IL(Intermediate Language) and precompiled images. In this case, the JIT(Just In Time) Compiler will do a lot of work like disk I/O actions, which are expensive.\nThe explicit compilation will convert the upper-level language into object code on the execution of the program. Ahead of time(AOT) compilers are designed for ensuring whether the CPU will understand line-by-line code before doing any interaction with it.\nAhead-of-Time (AOT) compilation happens only once during build time and it does not require shipping the HTML templates and the Angular compiler into the bundle. The source code generated can begin running immediately after it has been downloaded into the browser, earlier steps are not required. The AOT compilation will turn the HTML template into the runnable code fragment. AOT will analyze and compile our templates statically during build time. Ahead-of-time(AOT) compilation is the process of compiling a high-level language into a low-level language during build-time, i.e., before program execution. AOT compilation reduces the workload during run time. AOT provides faster start-up time, in larger applications where most of the code executes on startup. But it needs more amount of disk space and memory or virtual address space to hold both IL(Intermediate Language) and precompiled images. In this case, the JIT(Just In Time) Compiler will do a lot of work like disk I/O actions, which are expensive. The explicit compilation will convert the upper-level language into object code on the execution of the program. Ahead of time(AOT) compilers are designed for ensuring whether the CPU will understand line-by-line code before doing any interaction with it. Ahead-of-Time (AOT) compilation happens only once during build time and it does not require shipping the HTML templates and the Angular compiler into the bundle. The source code generated can begin running immediately after it has been downloaded into the browser, earlier steps are not required. The AOT compilation will turn the HTML template into the runnable code fragment. AOT will analyze and compile our templates statically during build time.   Benefits of AOT Compilation: Benefits of AOT Compilation: Application size is smaller because the Compiler itself isn’t shipped and unused features can be removed.\nTemplate the parse errors that are detected previously(during build time)\nSecurity is high (not required to dynamically evaluate templates)\nRendering of a component is faster (pre-compiled templates)\nFor AOT compilation, some tools are required to accomplish it automatically in the build process. Application size is smaller because the Compiler itself isn’t shipped and unused features can be removed. Template the parse errors that are detected previously(during build time) Security is high (not required to dynamically evaluate templates) Rendering of a component is faster (pre-compiled templates) For AOT compilation, some tools are required to accomplish it automatically in the build process.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "7. What is MEF?",
        "answer": "The MEF(Managed Extensibility Framework) is a library that is useful for developing extensible and lightweight applications. It permits application developers for using extensions without the need for configuration. It also allows extension developers for easier code encapsulation and thus avoiding fragile hard dependencies. MEF will let you reuse the extensions within applications, as well as across the applications. It is an integral part of the .NET Framework 4. It improves the maintainability, flexibility, and testability of large applications.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "8. In what situations .NET Core and .NET Standard Class Library project types will be used?",
        "answer": ".NET Core library is used if there is a requirement to increase the surface area of the .NET API which your library will access, and permit only applications of .NET Core to be compatible with your library if you are okay with it. .NET Core .NET Standard library will be used in case you need to increase the count of applications that are compatible with your library and reduce surface area(a piece of code that a user can interact with) of the .NET API which your library can access if you are okay with it. .NET Standard",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "9. What is CoreRT?",
        "answer": "CoreRT is the native runtime for the compilation of .NET natively ahead of time and it is a part of the new .NET Native (as announced in April 2014).\nIt is not a virtual machine and it does not have the facility of generating and running the code on the fly as it doesn’t include a JIT. It has the ability for RTTI(run-time type identification) and reflection, along with that it has GC(Garbage Collector).\nThe type system of the CoreRT is designed in such a way that metadata for reflection is not at all required. This feature enables to have an AOT toolchain that can link away unused metadata and can identify unused application code. CoreRT is the native runtime for the compilation of .NET natively ahead of time and it is a part of the new .NET Native (as announced in April 2014). It is not a virtual machine and it does not have the facility of generating and running the code on the fly as it doesn’t include a JIT. It has the ability for RTTI(run-time type identification) and reflection, along with that it has GC(Garbage Collector). The type system of the CoreRT is designed in such a way that metadata for reflection is not at all required. This feature enables to have an AOT toolchain that can link away unused metadata and can identify unused application code.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "10. What is .NET Core SDK?",
        "answer": ".NET Core SDK is a set of tools and libraries that allows the developer to create a .NET application and library for .NET 5 (also .NET Core) and later versions. It includes the .NET CLI for building applications, .NET libraries and runtime for the purpose of building and running apps, and the dotnet.exe(dotnet executable) that runs CLI commands and runs an application. Here's the link to download. link to download",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "11. What is Docker?",
        "answer": "Docker is an open-source platform for the development of applications, and also for shipping and running them. It allows for separating the application from the infrastructure using containers so that software can be delivered quickly. With Docker, you will be able to manage the infrastructure in the same ways you used to manage your applications.\nIt supports shipping, testing, and deploying application code quickly, thus reducing the delay between code writing and running it in production.\nThe Docker platform provides the ability of packaging and application execution in a loosely isolated environment namely container. The isolation and security permit you for running multiple containers at the same time on a given host. Containers are lightweight and they include every necessary thing required for running an application, so you need not depend on what is currently installed within the host. Docker is an open-source platform for the development of applications, and also for shipping and running them. It allows for separating the application from the infrastructure using containers so that software can be delivered quickly. With Docker, you will be able to manage the infrastructure in the same ways you used to manage your applications. It supports shipping, testing, and deploying application code quickly, thus reducing the delay between code writing and running it in production. The Docker platform provides the ability of packaging and application execution in a loosely isolated environment namely container. The isolation and security permit you for running multiple containers at the same time on a given host. Containers are lightweight and they include every necessary thing required for running an application, so you need not depend on what is currently installed within the host.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "12. What is Xamarin?",
        "answer": "Xamarin is an open-source platform useful in developing a modern and efficient application for iOS, Android, and Windows with .NET. It is an abstraction layer used to manage the communication of shared code with fundamental platform code.\nXamarin runs in a managed environment that gives benefits like garbage collection and memory allocation.\nDevelopers can share about 90% of their applications over platforms using Xamarin. This pattern permits developers for writing entire business logic in a single language (or reusing existing app code) but accomplish native performance, look and feel on each platform. The Xamarin applications can be written on Mac or PC and then they will be compiled into native application packages, like a .ipa file on iOS, or .apk file on Android. Xamarin is an open-source platform useful in developing a modern and efficient application for iOS, Android, and Windows with .NET. It is an abstraction layer used to manage the communication of shared code with fundamental platform code. Xamarin runs in a managed environment that gives benefits like garbage collection and memory allocation. Developers can share about 90% of their applications over platforms using Xamarin. This pattern permits developers for writing entire business logic in a single language (or reusing existing app code) but accomplish native performance, look and feel on each platform. The Xamarin applications can be written on Mac or PC and then they will be compiled into native application packages, like a .ipa file on iOS, or .apk file on Android.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "13. How can you differentiate ASP.NET Core from .NET Core?",
        "answer": ".NET Core is a runtime and is used for the execution of an application that is built for it. Whereas ASP.NET Core is a collection of libraries that will form a framework for developing web applications. ASP.NET Core libraries can be used on .NET Core as well as on the “Full .NET Framework”. An application using the tools and libraries of ASP.NET Core is normally referred to as “ASP.NET Core Application”, which in theory doesn’t say whether it is built for .NET Framework or .NET Core. So an application of “ASP.NET Core” can be considered as a “.NET Core Application” or a “.NET Framework Application”.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "14. What is MSBuild in the .NET Core?",
        "answer": "MSBuild is the free and open-source development platform for Visual Studio and Microsoft. It is a build tool that is helpful in automating the software product creation process, along with source code compilation, packaging, testing, deployment, and documentation creation. Using MSBuild, we can build Visual Studio projects and solutions without the need of installing the Visual Studio IDE. In the Universal Windows Platform(UWP) app, if you open the folder named project, you will get to see both files namely project.json and *.csproj. But if you open our previous Console application in .NET Core, you will get to see project.json and *.xproj files. project.json *.csproj project.json *.xproj",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "15. Whether ‘debug’ and ‘trace’ are the same?",
        "answer": "No. The Trace class is used for debugging as well as for certain build releases. It gives execution plan and process timing details. While debug is used mainly for debugging. Debug means going through the program code flow during execution time. Debug and trace allow for monitoring of the application for errors and exceptions without VS.NET IDE.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "16. What is Transfer-encoding?",
        "answer": "Transfer-encoding is used for transferring the payload body(information part of the data sent in the HTTP message body) to the user. It is a hop-by-hop header, that is applied not to a resource itself, but to a message between two nodes. Each multi-node connection segment can make use of various Transfer-encoding values. Transfer-encoding is set to “Chunked” specifying that Hypertext Transfer Protocol’s mechanism of Chunked encoding data transfer is initiated in which data will be sent in a form of a series of “chunks”. This is helpful when the amount of data sent to the client is larger and the total size of the response will not be known until the completion of request processing.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "17. Give the differences between .NET Core and Mono?",
        "answer": ".NET Core Mono\n.Net Core is the subset of implementation for the .NET framework by Microsoft itself. Mono is the complete implementation of the .Net Framework for Linux, Android, and iOS by Xamarin.\n.NET Core only permits you to build web applications and console applications. Mono permits you to build different application types available in .NET Framework, including mobile applications, GUI-enabled desktop apps, etc.\n.NET Core does not have the built-in capability to be compiled into WebAssembly-compatible packages. Mono has the built-in capability to be compiled into WebAssembly-compatible packages.\n.NET Core is never intended for gaming. You can only develop a text-based adventure or relatively basic browser-based game using .NET Core. Mono is intended for the development of Games. Games can be developed using the Unity gaming engine that supports Mono. .NET Core Mono\n.Net Core is the subset of implementation for the .NET framework by Microsoft itself. Mono is the complete implementation of the .Net Framework for Linux, Android, and iOS by Xamarin.\n.NET Core only permits you to build web applications and console applications. Mono permits you to build different application types available in .NET Framework, including mobile applications, GUI-enabled desktop apps, etc.\n.NET Core does not have the built-in capability to be compiled into WebAssembly-compatible packages. Mono has the built-in capability to be compiled into WebAssembly-compatible packages.\n.NET Core is never intended for gaming. You can only develop a text-based adventure or relatively basic browser-based game using .NET Core. Mono is intended for the development of Games. Games can be developed using the Unity gaming engine that supports Mono. .NET Core Mono .NET Core Mono .NET Core Mono .Net Core is the subset of implementation for the .NET framework by Microsoft itself. Mono is the complete implementation of the .Net Framework for Linux, Android, and iOS by Xamarin.\n.NET Core only permits you to build web applications and console applications. Mono permits you to build different application types available in .NET Framework, including mobile applications, GUI-enabled desktop apps, etc.\n.NET Core does not have the built-in capability to be compiled into WebAssembly-compatible packages. Mono has the built-in capability to be compiled into WebAssembly-compatible packages.\n.NET Core is never intended for gaming. You can only develop a text-based adventure or relatively basic browser-based game using .NET Core. Mono is intended for the development of Games. Games can be developed using the Unity gaming engine that supports Mono. .Net Core is the subset of implementation for the .NET framework by Microsoft itself. Mono is the complete implementation of the .Net Framework for Linux, Android, and iOS by Xamarin. .Net Core is the subset of implementation for the .NET framework by Microsoft itself. Mono is the complete implementation of the .Net Framework for Linux, Android, and iOS by Xamarin. .NET Core only permits you to build web applications and console applications. Mono permits you to build different application types available in .NET Framework, including mobile applications, GUI-enabled desktop apps, etc. .NET Core only permits you to build web applications and console applications. Mono permits you to build different application types available in .NET Framework, including mobile applications, GUI-enabled desktop apps, etc. .NET Core does not have the built-in capability to be compiled into WebAssembly-compatible packages. Mono has the built-in capability to be compiled into WebAssembly-compatible packages. .NET Core does not have the built-in capability to be compiled into WebAssembly-compatible packages. Mono has the built-in capability to be compiled into WebAssembly-compatible packages. .NET Core is never intended for gaming. You can only develop a text-based adventure or relatively basic browser-based game using .NET Core. Mono is intended for the development of Games. Games can be developed using the Unity gaming engine that supports Mono. .NET Core is never intended for gaming. You can only develop a text-based adventure or relatively basic browser-based game using .NET Core. Mono is intended for the development of Games. Games can be developed using the Unity gaming engine that supports Mono.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "18. Explain about types of Common Type System(CTS).",
        "answer": "Common Type System(CTS) standardizes all the datatypes that can be used by different programming languages under the .NET framework. CTS has two types. They are:   Value Types: They contain the values that are stored on a stack or allocated inline within a structure. They are divided into :\nBuilt-in Value Types - It includes primitive data types such as Boolean, Byte, Char, Int32, etc.\nUser-defined Value Types - These are defined by the user in the source code. It can be enumeration or structure.\nEnumerations - It is a set of enumerated values stored in the form of numeric type and are represented by labels.\nStructures - It defines both data(fields of the structure) and the methods(operations performed on that data) of the structure. In .NET, all primitive data types like Boolean, Byte, Char, DateTime, Decimal, etc., are defined as structures.\nReference Types: It Stores a reference to the memory address of a value and is stored on the heap. They are divided into :\nInterface types - It is used to implement functionalities such as testing for equality, comparing and sorting, etc.\nPointer types - It is a variable that holds the address of another variable.\nSelf-describing types - It is a data type that gives information about themselves for the sake of garbage collectors. It includes arrays(collection of variables with the same datatype stored under a single name) and class types(they define the operations like methods, properties, or events that are performed by an object and the data that the object contains) like user-defined classes, boxed value types, and delegates(used for event handlers and callback functions). Value Types: They contain the values that are stored on a stack or allocated inline within a structure. They are divided into :\nBuilt-in Value Types - It includes primitive data types such as Boolean, Byte, Char, Int32, etc.\nUser-defined Value Types - These are defined by the user in the source code. It can be enumeration or structure.\nEnumerations - It is a set of enumerated values stored in the form of numeric type and are represented by labels.\nStructures - It defines both data(fields of the structure) and the methods(operations performed on that data) of the structure. In .NET, all primitive data types like Boolean, Byte, Char, DateTime, Decimal, etc., are defined as structures. Value Types: Built-in Value Types - It includes primitive data types such as Boolean, Byte, Char, Int32, etc.\nUser-defined Value Types - These are defined by the user in the source code. It can be enumeration or structure.\nEnumerations - It is a set of enumerated values stored in the form of numeric type and are represented by labels.\nStructures - It defines both data(fields of the structure) and the methods(operations performed on that data) of the structure. In .NET, all primitive data types like Boolean, Byte, Char, DateTime, Decimal, etc., are defined as structures. Built-in Value Types - It includes primitive data types such as Boolean, Byte, Char, Int32, etc. User-defined Value Types - These are defined by the user in the source code. It can be enumeration or structure. Enumerations - It is a set of enumerated values stored in the form of numeric type and are represented by labels. Structures - It defines both data(fields of the structure) and the methods(operations performed on that data) of the structure. In .NET, all primitive data types like Boolean, Byte, Char, DateTime, Decimal, etc., are defined as structures. Reference Types: It Stores a reference to the memory address of a value and is stored on the heap. They are divided into :\nInterface types - It is used to implement functionalities such as testing for equality, comparing and sorting, etc.\nPointer types - It is a variable that holds the address of another variable.\nSelf-describing types - It is a data type that gives information about themselves for the sake of garbage collectors. It includes arrays(collection of variables with the same datatype stored under a single name) and class types(they define the operations like methods, properties, or events that are performed by an object and the data that the object contains) like user-defined classes, boxed value types, and delegates(used for event handlers and callback functions). Reference Types: Interface types - It is used to implement functionalities such as testing for equality, comparing and sorting, etc.\nPointer types - It is a variable that holds the address of another variable.\nSelf-describing types - It is a data type that gives information about themselves for the sake of garbage collectors. It includes arrays(collection of variables with the same datatype stored under a single name) and class types(they define the operations like methods, properties, or events that are performed by an object and the data that the object contains) like user-defined classes, boxed value types, and delegates(used for event handlers and callback functions). Interface types - It is used to implement functionalities such as testing for equality, comparing and sorting, etc. Pointer types - It is a variable that holds the address of another variable. Self-describing types - It is a data type that gives information about themselves for the sake of garbage collectors. It includes arrays(collection of variables with the same datatype stored under a single name) and class types(they define the operations like methods, properties, or events that are performed by an object and the data that the object contains) like user-defined classes, boxed value types, and delegates(used for event handlers and callback functions).",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "19. What is the use of generating SQL scripts in the .NET core?",
        "answer": "It’s useful to generate a SQL script, whenever you are trying to debug or deploy your migrations to a production database. The SQL script can be used in the future for reviewing the accuracy of data and tuned to fit the production database requirement.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "20. What is the IGCToCLR interface?",
        "answer": "IGCToCLR interface will be passed as an argument to the InitializeGarbageCollector() function and it is used for runtime communication. It consists of a lot of built-in methods such as RestartEE(), SuspendEE(), etc.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "21. What is CoreFx?",
        "answer": "CoreFX is the set of class library implementations for .NET Core. It includes collection types, console, file systems, XML, JSON, async, etc. It is platform-neutral code, which means it can be shared across all platforms. Platform-neutral code is implemented in the form of a single portable assembly that can be used on all platforms.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "22. What is Zero Garbage Collectors?",
        "answer": "Zero Garbage Collectors allows you for object allocation as this is required by the Execution Engine. Created objects will not get deleted automatically and theoretically, no longer required memory is never reclaimed. There are two main uses of Zero Garbage Collectors. They are: Using this, you can develop your own Garbage Collection mechanism. It provides the necessary functionalities for properly doing the runtime work.\nIt can be used in special use cases like very short living applications or almost no memory allocation(concepts such as No-alloc or Zero-alloc programming). In these cases, Garbage Collection overhead is not required and it is better to get rid of it. Using this, you can develop your own Garbage Collection mechanism. It provides the necessary functionalities for properly doing the runtime work. It can be used in special use cases like very short living applications or almost no memory allocation(concepts such as No-alloc or Zero-alloc programming). In these cases, Garbage Collection overhead is not required and it is better to get rid of it.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "23. What is the purpose of webHostBuilder()?",
        "answer": "WebHostBuilder function is used for HTTP pipeline creation through webHostBuilder.Use() chaining all at once with WebHostBuilder.Build() by using the builder pattern. This function is provided by Microsoft.AspNet.Hosting namespace. The Build() method’s purpose is building necessary services and a Microsoft.AspNetCore.Hosting.IWebHost for hosting a web application. webHostBuilder.Use() WebHostBuilder.Build() Microsoft.AspNet.Hosting namespace Microsoft.AspNetCore.Hosting.IWebHost",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "24. What is CoreCLR?",
        "answer": "CoreCLR is the run-time execution engine provided by the .NET Core. It consists of a JIT compiler, garbage collector, low-level classes, and primitive data types. .NET Core is a modular implementation of .NET, and can be used as the base stack for large scenario types, ranging from console utilities to web applications in the cloud.   Here, various programming languages will be compiled by respective compilers(Roslyn can compile both C# and VB code as it includes C# and VB compilers) and Common Intermediate Language(CIL) code will be generated. When the application execution begins, this CIL code is compiled into native machine code by using a JIT compiler included within CoreCLR. This CoreCLR is supported by many operating systems such as Windows, Linux, etc.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "25. What are C# and F#?",
        "answer": "C# is a general-purpose and object-oriented programming language from Microsoft that runs on the .NET platform. It is designed for CLI(Common Language Infrastructure), which has executable code and a runtime environment that allows for the usage of different high-level languages on various computer platforms and architectures. It is mainly used for developing web applications, desktop applications, mobile applications, database applications, games, etc. F# is an open-source, functional-first, object-oriented and, cross-platform programming language that runs on a .NET platform and is used for writing robust, succinct, and performant code. We can say that F# is data-oriented because here code involves transforming data with functions. It is mainly used in making scientific models, artificial intelligence research work, mathematical problem solving, financial modelling, GUI games, CPU design, compiler programming, etc.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "26. What is Dot NET Core used for?",
        "answer": ".NET Core is useful in the server application creations, that run on various operating systems like Windows, Mac, and Linux. Using this, developers can write libraries as well as applications in C#, F#, and VB.NET in both runtimes.\nGenerally, it is used for cloud applications or for modifying large enterprise applications into microservices.\n.NET Core 3.0 supports cross-development between WPF, UWP, and Windows Forms.\n.NET Core supports microservices, which permits cross-platform services to work with the .NET Core framework including services developed with .NET Framework, Ruby, Java, etc.\n.NET Core’s features like lightweight, modularity, and flexibility make it easier to deploy .NET Core applications in containers. These containers can be deployed on any platform, Linux, cloud, and Windows. .NET Core is useful in the server application creations, that run on various operating systems like Windows, Mac, and Linux. Using this, developers can write libraries as well as applications in C#, F#, and VB.NET in both runtimes. Generally, it is used for cloud applications or for modifying large enterprise applications into microservices. .NET Core 3.0 supports cross-development between WPF, UWP, and Windows Forms. .NET Core supports microservices, which permits cross-platform services to work with the .NET Core framework including services developed with .NET Framework, Ruby, Java, etc. .NET Core’s features like lightweight, modularity, and flexibility make it easier to deploy .NET Core applications in containers. These containers can be deployed on any platform, Linux, cloud, and Windows.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "27. What is .NET core?",
        "answer": ".NET Core can be said as the newer version of the .NET Framework. It is a cost-free, general-purpose, open-source application development platform provided by Microsoft. It is a cross-platform framework because it runs on various operating systems such as Windows, Linux, and macOS. This Framework can be used to develop applications like mobile, web, IoT, machine learning, game, cloud, microservices, etc. It consists of important features like a cross-platform, sharable library, etc., that are necessary for running a basic .NET Core application. The remaining features are supplied in the form of NuGet packages, that can be added to your application according to your needs. Like this we can say, the .NET Core will boost up the performance of an application, decreases the memory footprint, and becomes easier for maintenance of an application. It follows the modular approach, so instead of the entire .NET Framework installation, your application can install or use only what is required.",
        "reference": "interviewbit.com",
        "role": "dot-net"
    },
    {
        "question": "NET?",
        "answer": ".NET is a framework for software development. It is just like other software development framework like (J2EE). It provides runtime capabilities and a rich set of pre-built functionality in the form of class library and API's. This .NET framework is an environment to build, deploy and run web services and other applications.\nThe .NET framework contains three main parts:\nADVERTISEMENT\nADVERTISEMENT\nCommon Language Runtime\nFramework classes\nASP.NET",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET at present time?",
        "answer": "When .NET was introduced first time, it supports many languages like VB.NET,C#,COBOL, and Perl etc. At present time it supports almost 44 languages.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET to support many languages?",
        "answer": "The .NET language code is compiled to Microsoft Intermediate Language (MSIL). The generated code is called managed code. This managed code is run in .NET environment. So after compilation the language is not a barrier and the code can call or use function of another language also.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET different from ASP? If yes, explain how?",
        "answer": "Yes, ASP.NET is different from ASP. These are the main differences:\nASP.NET is developed by Microsoft to create dynamic web applications while ASP (Active Server Pages) is a Microsoft's server side technology use to create web pages.\nASP.NET is compiled while ASP is interpreted.\nASP uses the technology named ADO while ASP.NET uses ADO.NET.\nASP.NET is completely object oriented while ASP is partially object oriented.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET?",
        "answer": "State management is a technique that is used to manage a state of an object on different request. It is very important to manage state in any web application. There are two types of state management systems in ASP.NET.\nClient side state management\nServer side state management",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "6) What is the difference between trace and debug?",
        "answer": "Debug class is used to debug builds while Trace is used for both debug and release builds.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "string?",
        "answer": "The main differences between system.stringbuilder and system.string are:\nsystem.stringbuilder is a mutable while system.string is immutable.\nAppend keyword is used in system.stringbuilder but not in system.string.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "8) What is the difference between int and int32?",
        "answer": "There is no difference between int and int32. System. Int is an alias name for System.Int32 which is a .Net Class.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "9) What is the difference between namespace and assembly?",
        "answer": "An assembly is a physical grouping of logical units while namespace groups classes. A namespace can span multiple assemblies.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "",
        "answer": "Following are the main differences between value type and reference type:\nValue type contain variable while reference type doesn't contain value directly in its memory.\nIn reference type, memory is allocated in managed heap and in value type memory allocated in stack.\nReference type ex-class value type-struct, enumeration",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "11) What is the difference between session object and application object?",
        "answer": "The session object is used to maintain the session of each user.\nFor example: If a user enters into the application then he will get a session id. If he leaves from the application then the session id is deleted. If he again enters into the application, he will get a different session id.\n\nBut in the case of application object the id is maintained for whole application.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "Net programming language?",
        "answer": "The difference between function and stored procedure:\nFunction returns only one value but procedure can return one or more than one value.\nFunction can be used in select statements but procedure cannot be used.\nFunction has only input parameters while Procedure can have an input and output parameters.\nExceptions can be handled by try catch block in procedures but that is not possible in function.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "13) How to retrieve user name in case of Window Authentication?",
        "answer": "System.Environment.UserName",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "14) What is the difference between Hash table and Array list?",
        "answer": "Hash table stores data in the form of value pair and name while Array list stores only values.\nYou need to pass name to access value from the Hash table while in Array, you need to pass index number to access value.\nIn Array, you can store only similar type of data type while in Hash table you can store different type of data types. ex. int, string etc.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "15) What is the meaning of Immutable?",
        "answer": "Immutable means once you create a thing, you cannot modify it.\nFor example: If you want give new value to old value then it will discard the old value and create new instance in memory to hold the new value.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "16) What are the advantages of using session?",
        "answer": "The advantages of using session are:\nA session stores user states and data to all over the application.\nIt is very easy to implement and we can store any kind of object.\nIt can store every user data separately.\nSession is secure and transparent from user because session object is stored on the server.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "17) What are the disadvantages of using session?",
        "answer": "The disadvantages of using session are:\nPerformance overhead occurs in case of large number of users, because session data is stored in server memory.\nOverhead involved in serializing and De-Serializing session Data. Because In case of StateServer and SQLServer session mode we need to serialize the object before store.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "18) Can you set the session out time manually?",
        "answer": "Yes. Session out time can be set manually in web.config.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "Net?",
        "answer": "Boxing: Boxing is a process of converting value type into reference type.\nUnboxing: Unboxing is a process of converting reference type to value type.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "20) Is it possible to change the index of primary key on table?",
        "answer": "No.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "21) What is HTTPhandler?",
        "answer": "HttpHandler is a low level request and response API which is made to service incoming Http request. Every incoming Http request recieved by ASP.NET is ultimately processed by a instance of a class that implements HttpHandler.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET Framework and what are the main components of it?",
        "answer": ".NET Framework facilitates the developer to develop, run and deploy the applications like console application, window Forms applications, web applications, web services, window services etc. It also provides environment to create sharable components to be used in distributed computing architecture.\nMain components of .Net Framework:\nClass library\nCommon Language Runtime (CLR)\nDynamic Language Runtime (DLR)\nApplication Domains\nRuntime Hosts\nCross-language interoperability\nFramework security\nProfiling etc.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET Framework?",
        "answer": "Manifest is used to store assembly metadata. It contains all the metadata which are necessary for following things.\nVersion of assembly\nSecurity identity\nScope of the assembly\nTo resolve references to resources and classes",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "24) What are the memory-mapped files?",
        "answer": "Memory-mapped files are used to map the content of a file to the logical address of an application. It makes you able to run multiple process on the same machine to share data with each other. To obtain a memory mapped file object, you can use the method MemoryMappedFile.CreateFromFiles( ). It represents a persistent memory-mapped file from a file on disk.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET?",
        "answer": "System.GC.Collect() method.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "26) What is the difference between dispose() and finalize()?",
        "answer": "Although Dispose and Finalize both methods are used by CLR to perform garbage collection of runtime objects of .NET applications but there is a difference between them.\nThe Finalize method is called automatically by the runtime while the Dispose method is called by the programmer.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "",
        "answer": ".NET security model is used to prevent unauthorized access of resources and operations and also restrict the codes to perform particular tasks. Code Access Security is a part of that .NET security.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "28) What is Garbage collection?",
        "answer": "Garbage collection is used to prevent memory leaks during execution of programs. There is a low-priority process name as garbage collector manages the allocation and deallocation a memory for applications. It also checks for the unreferenced variables and objects. If there is ny object which is no further used by application the Garbage collector frees up the memory from that object.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "29) How can you identify that the page is post back?",
        "answer": "There is a property, named as \"IsPostBack\" property. You can check it to know that the page is post backed or not.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET programming language?",
        "answer": "Variable: A variable is a data storage location in the computer memory that contains a value and has a meaningful name. Every variable is attached to a data type which determines what type of value can be stored in the variable.\nVariables can be declared by using the following syntax:\n<data_type>  <variable_name>;  \nConstant: Constant is also similar to the variable except that the value. Value once assigned to a constant can't be changed. Constants must be initialized at the same time they are declared.\nConstants can be declared by using the following syntax:\nconst int interestRate =10;",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "31) If you want to replace multiple if-else statements in code, which statement will you use?",
        "answer": "In Visual basic, we can use Select-Case statement to replace multiple If-Else statement. In C#, we should use Switch-Case statement to replace multiple If-Else statement.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "Net?",
        "answer": "There are two types of indexes in .Net:\nClustered index and non-clustered index",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "Net?",
        "answer": "There are two types of memories in .Net\nStack memory\nHeap Memory",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "0?",
        "answer": "A list of new features of .NET Framework 4.0:\nImproved Application Compatibility and Deployment Support\nDynamic Language Runtime\nManaged Extensibility Framework\nParallel Programming framework\nImproved Security Model\nNetworking Improvements\nImproved Core ASP.NET Services\nImprovements in WPF 4\nImproved Entity Framework (EF)\nIntegration between WCF and WF",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "35) What are cookies?",
        "answer": "A cookie is a small amount of data created by server on the client. When a web server creates a cookie, an additional HTTP header is sent to the browser when a page is served to the browser.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "36) What are the disadvantages of cookies?",
        "answer": "The main disadvantages of cookies are:\nCookie can store only string value.\nCookies are browser dependent.\nCookies are not secure.\nCookies can store only small amount of data.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "37) What is an IL?",
        "answer": "IL stands for Intermediate Language. It is also known as MSIL (Microsoft Intermediate Language) or CIL (Common Intermediate Language).\nAll .NET source codes are first compiled to IL. Then, IL is converted to machine code at the point where the software is installed, or at run-time by a Just-In-Time (JIT) compiler.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "NET?",
        "answer": "System.GC.Collect() method is used to enforce garbage collection in .Net.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "Net?",
        "answer": "A tuple is a fixed-size collection that can have elements of either same or different data types. The user must have to specify the size of a tuple at the time of declaration just like arrays.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "40) How many elements a tuple can hold?",
        "answer": "A tuple can hold up from 1 to 8 elements. In the case of more than 8 elements, then the 8th element can be defined as another tuple. Tuples can be specified as parameter or return type of a method.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "41) Which architecture does a Dataset follow?",
        "answer": "A Dataset follows the disconnected data architecture.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "42) How do you check whether a DataReader is closed or opened?",
        "answer": "There is a property named \"IsClosed\" property is used to check whether a DataReader is closed or opened. This property returns a true value if a Data Reader is closed, otherwise a false value is returned.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "43) What are the basic requirements for connection pooling?",
        "answer": "The following two requirements must be fulfilled for connection pooling:\nThere must be multiple processes to share the same connection describing the same parameters and security settings.\nThe connection string must be identical.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "44) Which adapter should be used to get the data from an Access database?",
        "answer": "OleDbDataAdapter is used to get the data from an Access database.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "45) What are the parameters that control most of connection pooling behaviors?",
        "answer": "The following parameters control the connection pooling behavior:\nConnect Timeout\nMax Pool Size\nMin Pool Size\nPooling",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "46) What do you mean by AutoPostBack?",
        "answer": "AutoPostBack is a property which is used to postback automatically when an event is raised. You have to set the AutoPostBack property of the control to True.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    },
    {
        "question": "47) Which properties are used to bind a DataGridView control?",
        "answer": "The DataSource property and the DataMember property are used to bind a DataGridView control.",
        "reference": "javatpoint.com",
        "role": "dot-net"
    }
]