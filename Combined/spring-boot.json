[
    {
        "question": "1. How do I connect the Spring Boot application to a database using JDBC?",
        "answer": "To connect a Spring Boot application to a database using JDBC, you must:\nInclude the JDBC Starter Dependency in your project’s pom.xml file.\nConfigure the database connection details, such as the URL, username, and password, in the application’s configuration file (application.properties or application.yml).\nUse the appropriate JDBC APIs, such as JdbcTemplate or EntityManager, to interact with the database and execute SQL queries.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "2. What is Thymeleaf, and how to use it?",
        "answer": "Thymeleaf is a popular Java-based template engine used for server-side rendering in Spring Boot applications. It provides a simple and natural way to generate dynamic HTML content by seamlessly integrating with the Spring ecosystem.\nTo use Thymeleaf in a Spring Boot application, you must include the Thymeleaf Starter Dependency in your project’s pom.xml file. Then, you can create HTML templates with Thymeleaf syntax, such as using expressions and tags to dynamically render data and logic within your web pages.\nEnroll in this Full Stack Developer Course and start your journey now!",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "3. How does a Spring Boot application get started?",
        "answer": "A Spring Boot application starts by executing the main method in the application’s entry point class. The entry point class is typically annotated with @SpringBootApplication, which combines several annotations like @Configuration, @EnableAutoConfiguration, and @ComponentScan. The @SpringBootApplication annotation sets up the Spring Boot application context, initializes necessary components, and begins the application’s lifecycle.\nLooking to gain skills in Web Development? Sign up for our Web Development courses now!",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "4. What are the steps to deploy Spring Boot web applications as JAR and WAR files?",
        "answer": "To facilitate the deployment of a Spring Boot web application, simply include the following:\n<plugin>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-maven-plugin</artifactId>\n</plugin>\nWith this plugin, the package phase will generate a JAR file encompassing all essential libraries, dependencies, and even an embedded server. Consequently, the application can be effortlessly executed as a standard JAR file, ensuring seamless functionality.\nSimilarly, when aiming to construct a Web Application Archive(WAR) file, it is imperative to specify the packaging element within the project’s configuration file. By including the <packaging>war</packaging> tag, you can indicate your intention to generate a WAR file successfully. This step is crucial for ensuring the proper deployment and functioning of your web application.\nSpring Boot provides an embedded server to make JAR file deployment a simple matter; just build your application as a JAR file, which includes an embedded server (e.g., Tomcat) to run your web app, and use java -jar to open it up for execution.\nTo deploy as a WAR file, your project should be configured to create one instead of producing JARs. Change the Packaging element in Pom.xml from JAR to War and configure all relevant dependencies and servlet mappings as appropriate before uploading the WAR file onto Tomcat or Jetty for deployment.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "5. How do you create a Spring Boot project using the Boot CLI?",
        "answer": "To use the Spring Boot CLI, first, install it on your system. When ready, open a command prompt and use spring init along with any desired project name or dependencies (for instance, to create a basic Spring Boot project, use spring init myproject –dependencies=web).\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "6. How can we create a custom endpoint in the Spring Boot Actuator?",
        "answer": "To create a custom endpoint in Spring Boot Actuator, you need to define a new @RestController or @Controller class and map it to the desired endpoint URL using @RequestMapping or other relevant annotations. \nWithin the custom endpoint class, you can define methods to handle requests and provide the necessary logic or data to be exposed through the Actuator endpoint. Additionally, you may need to configure any necessary security or authorization settings to control access to the custom endpoint.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "7. What is the role of Starter Dependencies in Spring Boot? Give an example.",
        "answer": "Starter Dependencies in Spring Boot are like ready-to-use toolkits that simplify dependency management. They come bundled with all the necessary libraries for specific functionalities, making it a breeze to kickstart development. \nFor example, “spring-boot-starter-web” is like a magic box containing everything needed to build web applications effortlessly, saving developers from the tedious task of manually handling individual dependencies. It’s like having a shortcut that allows developers to dive straight into coding without worrying about intricate dependency configurations.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "8. What is the significance of the Spring Boot Actuator? Name a few common endpoints it provides.",
        "answer": "The Spring Boot Actuator module significantly provides production-ready features for monitoring and managing Spring Boot applications. It offers valuable endpoints to retrieve information about the application’s health, configuration, metrics, and more. \nCommon endpoints include /health for health status, /info for general application information, /metrics for application metrics, /env for environment details, /configprops for configuration properties, and /actuator as the root endpoint for all Actuator-related endpoints. Actuator empowers developers and administrators with insights into application behavior, facilitating effective monitoring and management of Spring Boot applications.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "9. What makes Spring Boot superior to JAX-RS?",
        "answer": "By utilizing Spring Boot features, users can gain significant advantages over JAX-RS, including:\nReduced development time\nIncreased productivity\nFast deployment\nContainer compatibility\nMinimal configuration\nLower production time\nHigh scalability\nEasy monitoring and management of applications",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "10. What are the differences between JPA and Hibernate?",
        "answer": "The differences between JPA and Hibernate are:\nJPA Hibernate\nStandard API for object-relational mapping in Java EE applications. A popular and widely-used implementation of the JPA specification.\nDefines the set of interfaces and annotations for ORM mapping and CRUD operations. Offers additional features and functionalities beyond the JPA specification.\nCan be implemented by multiple ORM frameworks. A specific ORM framework that implements the JPA specification.\nProvides a common and consistent approach to interacting with different database vendors. Offers advanced features like caching, lazy loading, and interceptors.\nJPA is a specification, so it may have limited features compared to Hibernate. Hibernate provides extensive ORM capabilities and fine-grained control over database operations.\n\nIntermediate Spring Boot Interview Questions and Answers",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "11. What is Spring Boot, and what are its key advantages?",
        "answer": "Spring Boot is a robust framework that simplifies the development of Java applications by providing a streamlined and opinionated approach. It aims to minimize the required configuration and setup, allowing developers to focus more on writing business logic than dealing with boilerplate code.\nIts key advantages include:\nEasy Setup: Spring Boot eliminates manual configuration with sensible defaults, allowing developers to start coding immediately.\nRapid Development: It provides built-in features and starter templates for quick prototyping and development of web applications, REST APIs, and microservices.\nProduction-Ready: Spring Boot promotes best practices, offering built-in support for monitoring, health checks, and metrics to facilitate smooth deployment and management in production environments.\nDependency Management: It simplifies dependency management by providing a curated set of dependencies that work well together. It also enhances code modularity and testability through dependency injection and inversion of control.\nCommunity Support: Spring Boot has an active community that provides extensive documentation, tutorials, and forums for developers to seek help and share knowledge.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "12. What are the Starter Dependencies?",
        "answer": "Starter Dependencies in Spring Boot are curated dependencies designed to enable developers to quickly and easily add shared libraries and frameworks into their applications, providing essential functionality such as web development, database connectivity, security, etc. By including one, Spring Boot automatically configures and sets up the required components and dependencies, thereby streamlining the development process.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "13. What is an IOC container?",
        "answer": "An Inversion of Control(IOC) container is a core concept in the Spring framework that manages the creation and life cycle of objects. It allows the framework to control the flow of application execution by injecting dependencies into objects rather than the objects creating their dependencies. The IOC container facilitates loose coupling, modularity, and easier application testing.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "14. How do you configure Log4j for logging?",
        "answer": "To configure Log4j for logging in to a Spring Boot application, you must include the Log4j dependency in your project’s build configuration (e.g., pom.xml for Maven). Then, create a Log4j configuration file (e.g., log4j2.xml or log4j.properties) to specify logging levels, appenders, and other settings. Place this configuration file in the classpath of your application, and Log4j will automatically use it for logging.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "15. Describe the flow of HTTPS requests through the Spring Boot application.",
        "answer": "The flow of HTTPS requests through a Spring Boot application typically involves the following steps:\nThe client sends an HTTPS request to the Spring Boot application over a secure connection (HTTPS).\nThe request is received by the Spring Boot application’s embedded servlet container (e.g., Tomcat, Jetty). The container’s SSL/TLS implementation handles the decryption of the HTTPS request and verifies the client’s certificate (if required).\nThe request is passed to the appropriate Spring MVC controller based on the request mapping and routing configuration.\nThe controller processes the request, performs any necessary business logic, and generates a response.\nThe response is encrypted and sent back to the client over a secure HTTPS connection.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "16. How to enable HTTP/2 support in Spring Boot?",
        "answer": "To enable HTTP/2 support in a Spring Boot app, take these steps:\nAdd any dependencies necessary for HTTP/2 support, such as spring-boot-starter-tomcat or spring-boot-starter-jetty, which should provide support.\nConfigure your embedded servlet container so it uses an HTTP/2-capable version of Tomcat or Jetty.\nMake sure that your app is only served over HTTPS; HTTP/2 only supports secured connections.\nStart the Spring Boot application, which will become accessible using the HTTP/2 protocol.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "17. What annotations are used to create an Interceptor?",
        "answer": "The annotations used to create an Interceptor in Spring Boot are:\n@Component or a related stereotype annotation to mark the interceptor class as a Spring Bean.\n@Override on the preHandle, postHandle, and afterCompletion methods in the interceptor class to override the corresponding methods of the HandlerInterceptor interface.\n@Order to specify the order in which the interceptor should be executed if you have multiple interceptors.\n@Interceptor (optional) to explicitly declare the class as an interceptor, which is helpful in some frameworks or configurations.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "18. What is a Swagger in Spring Boot?",
        "answer": "Swagger in Spring Boot is an API documentation and generation tool that provides a way to visually represent, interact with, and document RESTful APIs without needing manual documentation.\nSwagger provides developers with a user-friendly interface (the Swagger UI) that enables them to explore API endpoints and input/output parameters, as well as execute requests directly from it.\nIn Spring Boot, it can be integrated using either the springfox or springdoc-openapi libraries alongside relevant annotations in their code to describe API operations and models. Swagger makes API development faster while improving collaboration and understanding among developers and consumers of APIs alike.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "19. What are the different ways to configure a Spring Boot application?",
        "answer": "Spring Boot offers multiple ways to configure applications:\nApplication properties or YAML files for customizing various aspects\nEnvironment variables for runtime configuration\nCommand-line arguments to override default values\nConfiguration classes are annotated with @Configuration for programmatic configuration\nProfiles for environment-specific configurations\nCustom configuration properties for type-safe configuration\nIntegration with Spring Cloud Config for centralized configuration management. These options provide flexibility to configure Spring Boot applications according to specific needs and preferences",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "20. How can you enable Cross-Origin Resource Sharing (CORS) in a Spring Boot application?",
        "answer": "To enable Cross-Origin Resource Sharing (CORS) in a Spring Boot application, you can use the @CrossOrigin annotation at the controller level to allow specific origins, methods, and headers. \nAlternatively, you can configure CORS globally by creating a CorsConfiguration bean or implementing a WebMvcConfigurer to define custom mappings and configurations. External configuration properties can also be utilized. These approaches ensure the secure handling of cross-origin requests and provide flexibility to customize CORS settings according to your application’s requirements.\nHere are some Spring Boot interview questions for experienced developers.\nAdvanced Spring Boot Interview Questions for Experienced",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "21. Explain the concept of profiles in Spring Boot and how they can be used.",
        "answer": "Profiles in Spring Boot enable the customization of application behavior based on different environments or deployment scenarios. By defining profiles, developers can configure environment-specific properties, select different component implementations, customize beans, and conditionally load application parts.\nProfiles are activated using the spring.profiles.active property in the configuration file or command-line arguments. This allows for streamlined configuration management and adaptability, ensuring the application can seamlessly adapt to various environments and meet specific requirements.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "22. How does Spring Boot simplify the development process compared to traditional Spring?",
        "answer": "Spring Boot simplifies development compared to traditional Spring by providing automatic configuration, starter dependencies, embedded servers, opinionated defaults, production-ready features, and enhanced developer tools. \nIt eliminates the need for extensive XML configurations and reduces manual setup. With pre-configured starter dependencies, developers can quickly include the required functionality. \nThe embedded servers eliminate the need for external server installations. Spring Boot’s opinionated defaults and production-ready features streamline development. Additionally, it offers tools for automatic application restart, live reload, and easy dependency management, enhancing the overall development experience.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "23. What is the purpose of the @SpringBootApplication annotation in a Spring Boot application?",
        "answer": "The @SpringBootApplication annotation serves as a key component in a Spring Boot application. It combines three essential annotations: @Configuration, @EnableAutoConfiguration, and @ComponentScan.\n@Configuration: Indicates that the class contains Spring Bean configurations.\n@EnableAutoConfiguration: Enables automatic configuration based on classpath and dependencies.\n@ComponentScan: Scans for Spring components, such as controllers, services, and repositories, to be managed by the Spring container.\nCollectively, the @SpringBootApplication annotation simplifies the configuration and bootstrap process of a Spring Boot application, allowing for effortless setup and initialization.\nRead on:- Java Tutorial to enhance your knowledge!",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "24. How does Spring Boot handle database connectivity and configuration?",
        "answer": "Spring Boot simplifies database connectivity and configuration. It automatically configures database connections based on dependencies. Developers can customize settings through configuration properties in application.properties or application.yml files. Spring Boot seamlessly integrates with Spring Data JPA, providing a high-level abstraction for database operations.\nIt supports embedded databases for lightweight development and testing. Database health checks are available through the Spring Boot Actuator. Customization options allow for tailored configurations, and multi-database support enables working with multiple databases in a single application. Overall, Spring Boot streamlines the process of working with databases, reducing configuration and development efforts.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "25. How can you implement security features in a Spring Boot application?",
        "answer": "Implementing security features in a Spring Boot application can be achieved using Spring Security. Configure authentication, authorization, and role-based access control. Utilize annotations like @Secured or @PreAuthorize for method-level security. Extend WebSecurityConfigurerAdapter to customize security settings. Encrypt passwords securely using bcrypt or PBKDF2. \nImplement custom security filters for additional checks. Enable HTTPS for secure communication. Integrate with external providers like LDAP or OAuth for centralized authentication. Secure Actuator endpoints for managing sensitive information. These measures ensure robust protection against unauthorized access and maintain the integrity of Spring Boot applications.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "26. How does Spring Boot support the development of RESTful APIs?",
        "answer": "Spring Boot provides extensive support for RESTful API development. With Spring MVC, developers can define API endpoints using annotations like @RestController and map them to appropriate HTTP methods. Automatic serialization/deserialization simplifies JSON handling. \nRequest mapping options handle URL patterns and content negotiation. Validation ensures data integrity. Error handling mechanisms deal with exceptions and provide meaningful error responses. \nIntegration with Swagger or Springfox enables API documentation generation. Security features support authentication mechanisms. Actuator endpoints offer monitoring and management capabilities. Together, these features make Spring Boot a powerful framework for efficiently developing RESTful APIs.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "27. How can you handle exceptions and errors in a Spring Boot application?",
        "answer": "In a Spring Boot application, exceptions and errors can be handled using various approaches. Use @ExceptionHandler to handle specific exceptions, or implement a global @ControllerAdvice class for centralized exception handling. Configure custom error pages or define static HTML error pages. \nCustomize HTTP error codes and error message formats. Implement logging to capture and troubleshoot exceptions. Handle validation errors using annotations or validators. Create custom exception classes for application-specific errors. These measures ensure robust error handling and provide meaningful feedback to users and clients.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "28. What is the purpose of the Spring Boot DevTools, and how can they enhance development productivity?",
        "answer": "Spring Boot DevTools aims to enhance development productivity. It offers features like automatic restart, allowing the application to restart upon code changes. Live reload detects and reloads static resource changes without a full restart. Remote debugging enables remote debugging sessions. \nDevTools provides developer-friendly defaults, such as disabling caching and showing detailed error pages. Integration with other tools, like Spring Boot Actuator, adds monitoring and configuration capabilities. These features accelerate development cycles, reduce manual effort, and improve overall productivity for developers using Spring Boot.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "29. How can you deploy a Spring Boot application to a Cloud platform like Heroku or AWS?",
        "answer": "To deploy a Spring Boot application to a Cloud platform like Heroku or AWS, follow these steps: \nBuild a production-ready JAR or WAR file.\nCreate an account on the desired platform.\nProvision a server or container to host your application.\nOptionally, containerize your application if needed.\nConfigure deployment settings, such as environment variables or database connections.\nDeploy the application using the platform-specific deployment methods provided.\nSet-up scaling and monitoring mechanisms to ensure the application performs optimally.\nTest and verify the functionality of the deployed application.\nMonitor and maintain the application by applying updates and patches as necessary. \nFor detailed instructions and specific tools related to the deployment process, refer to the documentation provided by your chosen platform.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "30. Explain the difference between Spring Boot's @Component, @Service, @Repository, and @Controller annotations. When and why would you use each of them?",
        "answer": "The @Component, @Service, @Repository, and @Controller annotations are used in Spring Boot for component scanning and dependency injection. @Component is a generic annotation, while @Service is for business logic/service components, @Repository for data access objects, and @Controller for handling HTTP requests. \nAlthough they have distinct roles, they all facilitate Spring’s dependency injection. When you choose the appropriate annotation, you actively enhance clarity and structure within the codebase. It is important to note that Spring treats these annotations in a similar manner for component scanning and dependency injection, ensuring consistent functionality.",
        "reference": "intellipaat.com",
        "role": "spring-boot"
    },
    {
        "question": "1. What are the advantages of using Spring Boot?",
        "answer": "The advantages of Spring Boot are listed below: Easy to understand and develop spring applications.\nSpring Boot is nothing but an existing framework with the addition of an embedded HTTP server and annotation configuration which makes it easier to understand and faster the process of development.\nIncreases productivity and reduces development time.\nMinimum configuration.\nWe don’t need to write any XML configuration, only a few annotations are required to do the configuration. Easy to understand and develop spring applications. Spring Boot is nothing but an existing framework with the addition of an embedded HTTP server and annotation configuration which makes it easier to understand and faster the process of development. Increases productivity and reduces development time. Minimum configuration. We don’t need to write any XML configuration, only a few annotations are required to do the configuration.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "2. What are the Spring Boot key components?",
        "answer": "Below are the four key components of spring-boot: Spring Boot auto-configuration.\nSpring Boot CLI.\nSpring Boot starter POMs.\nSpring Boot Actuators. Spring Boot auto-configuration. Spring Boot CLI. Spring Boot starter POMs. Spring Boot Actuators.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "3. Why Spring Boot over Spring?",
        "answer": "Below are some key points which spring boot offers but spring doesn’t: Starter POM.\nVersion Management.\nAuto Configuration.\nComponent Scanning.\nEmbedded server.\nInMemory DB.\nActuators Starter POM. Version Management. Auto Configuration. Component Scanning. Embedded server. InMemory DB. Actuators Spring Boot simplifies the spring feature for the user: Spring vs Spring Boot  Spring vs Spring Boot",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "4. What is the starter dependency of the Spring boot module?",
        "answer": "Spring boot provides numbers of starter dependency, here are the most commonly used - Data JPA starter.\nTest Starter.\nSecurity starter.\nWeb starter.\nMail starter.\nThymeleaf starter. Data JPA starter. Test Starter. Security starter. Web starter. Mail starter. Thymeleaf starter.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "5. How does Spring Boot works?",
        "answer": "Spring Boot automatically configures your application based on the dependencies you have added to the project by using annotation. The entry point of the spring boot application is the class that contains @SpringBootApplication annotation and the main method. Spring Boot automatically scans all the components included in the project by using @ComponentScan annotation.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "6. What does the @SpringBootApplication annotation do internally?",
        "answer": "The @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration, and @ComponentScan with their default attributes. Spring Boot enables the developer to use a single annotation instead of using multiple. But, as we know, Spring provided loosely coupled features that we can use for each annotation as per our project needs.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "7. What is the purpose of using @ComponentScan in the class files?",
        "answer": "Spring Boot application scans all the beans and package declarations when the application initializes. You need to add the @ComponentScan annotation for your class file to scan your components added to your project.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "8. How does a spring boot application get started?",
        "answer": "Just like any other Java program, a Spring Boot application must have a main method. This method serves as an entry point, which invokes the SpringApplication#run method to bootstrap the application. @SpringBootApplication \npublic class MyApplication { \n   \n       public static void main(String[] args) {    \n    \n             SpringApplication.run(MyApplication.class);        \n               // other statements     \n       } \n} @SpringBootApplication \npublic class MyApplication { \n   \n       public static void main(String[] args) {    \n    \n             SpringApplication.run(MyApplication.class);        \n               // other statements     \n       } \n} @SpringBootApplication public class MyApplication class MyApplication public static void main(String[] args) public static void main (String[] args) // other statements",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "9. What are the most common Spring Boot CLI commands?",
        "answer": "-run, -test, -grap, -jar, -war, -install, -uninstall, --init, -shell, -help. To check the description, run spring --help from the terminal. Spring Boot CLI Commands  Spring Boot CLI Commands",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "10. What is Spring Boot CLI and what are its benefits?",
        "answer": "Spring Boot CLI is a command-line interface that allows you to create a spring-based java application using Groovy. Example: You don’t need to create getter and setter method or access modifier, return statement. If you use the JDBC template, it automatically loads for you.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "11. What is Spring Initializer?",
        "answer": "Spring Initializer is a web application that helps you to create an initial spring boot project structure and provides a maven or gradle file to build your code. It solves the problem of setting up a framework when you are starting a project from scratch.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "12. What are starter dependencies?",
        "answer": "Spring boot starter is a maven template that contains a collection of all the relevant transitive dependencies that are needed to start a particular functionality.\nLike we need to import spring-boot-starter-web dependency for creating a web application.  <dependency>\n<groupId> org.springframework.boot</groupId>\n<artifactId> spring-boot-starter-web </artifactId>\n</dependency> <dependency>\n<groupId> org.springframework.boot</groupId>\n<artifactId> spring-boot-starter-web </artifactId>\n</dependency>",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "1. What is the difference between @RestController and @Controller in Spring Boot?",
        "answer": "@Controller Map of the model object to view or template and make it human readable but @RestController simply returns the object and object data is directly written in HTTP response as JSON or XML.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "2. What is an IOC container?",
        "answer": "IoC Container is a framework for implementing automatic dependency injection. It manages object creation and its life-time and also injects dependencies into the class.  Important Resources Important Resources Java Spring Boot Free Course with Certificate\nSpring vs Spring Boot\nDifference Between Spring MVC and Spring Boot\nSpring Interview Questions\nSpring Security Interview Questions Java Spring Boot Free Course with Certificate Java Spring Boot Free Course with Certificate Spring vs Spring Boot Spring vs Spring Boot Difference Between Spring MVC and Spring Boot Difference Between Spring MVC and Spring Boot Spring Interview Questions Spring Interview Questions Spring Security Interview Questions Spring Security Interview Questions",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "3. Describe the flow of HTTPS requests through the Spring Boot application?",
        "answer": "On a high-level spring boot application follow the MVC pattern which is depicted in the below flow diagram. Spring Boot Flow Architecture  Spring Boot Flow Architecture",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "4. What is the difference between RequestMapping and GetMapping?",
        "answer": "RequestMapping can be used with GET, POST, PUT, and many other request methods using the method attribute on the annotation. Whereas getMapping is only an extension of RequestMapping which helps you to improve on clarity on request.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "5. What is the use of Profiles in spring boot?",
        "answer": "While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. Even if DBMS is the same across the environment, the URLs will be different. To make this easy and clean, Spring has the provision of Profiles to keep the separate configuration of environments.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "6. What is Spring Actuator? What are its advantages?",
        "answer": "An actuator is an additional feature of Spring that helps you to monitor and manage your application when you push it to production. These actuators include auditing, health, CPU usage, HTTP hits, and metric gathering, and many more that are automatically applied to your application.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "7. How to enable Actuator in Spring boot application?",
        "answer": "To enable the spring actuator feature, we need to add the dependency of “spring-boot-starter-actuator” in pom.xml. <dependency>\n<groupId> org.springframework.boot</groupId>\n<artifactId> spring-boot-starter-actuator </artifactId>\n</dependency> <dependency>\n<groupId> org.springframework.boot</groupId>\n<artifactId> spring-boot-starter-actuator </artifactId>\n</dependency>",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "8. What are the actuator-provided endpoints used for monitoring the Spring boot application?",
        "answer": "Actuators provide below pre-defined endpoints to monitor our application - Health\nInfo\nBeans\nMappings\nConfigprops\nHttptrace\nHeapdump\nThreaddump\nShutdown Health Info Beans Mappings Configprops Httptrace Heapdump Threaddump Shutdown",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "9. How to get the list of all the beans in your Spring boot application?",
        "answer": "Spring Boot actuator “/Beans” is used to get the list of all the spring beans in your application.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "10. How to check the environment properties in your Spring boot application?",
        "answer": "Spring Boot actuator “/env” returns the list of all the environment properties of running the spring boot application.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "11. How to enable debugging log in the spring boot application?",
        "answer": "Debugging logs can be enabled in three ways - We can start the application with --debug switch.\nWe can set the logging.level.root=debug property in application.property file.\nWe can set the logging level of the root logger to debug in the supplied logging configuration file. We can start the application with --debug switch. We can set the logging.level.root=debug property in application.property file. We can set the logging level of the root logger to debug in the supplied logging configuration file.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "12. Where do we define properties in the Spring Boot application?",
        "answer": "You can define both application and Spring boot-related properties into a file called application.properties. You can create this file manually or use Spring Initializer to create this file. You don’t need to do any special configuration to instruct Spring Boot to load this file, If it exists in classpath then spring boot automatically loads it and configure itself and the application code accordingly.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "13. What is dependency Injection?",
        "answer": "The process of injecting dependent bean objects into target bean objects is called dependency injection. Setter Injection: The IOC container will inject the dependent bean object into the target bean object by calling the setter method.\nConstructor Injection: The IOC container will inject the dependent bean object into the target bean object by calling the target bean constructor.\nField Injection: The IOC container will inject the dependent bean object into the target bean object by Reflection API. Setter Injection: The IOC container will inject the dependent bean object into the target bean object by calling the setter method. Constructor Injection: The IOC container will inject the dependent bean object into the target bean object by calling the target bean constructor. Field Injection: The IOC container will inject the dependent bean object into the target bean object by Reflection API.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "14. Explain @RestController annotation in Spring boot?",
        "answer": "It is a combination of @Controller and @ResponseBody, used for creating a restful controller. It converts the response to JSON or XML. It ensures that data returned by each method will be written straight into the response body instead of returning a template.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "15. How to disable a specific auto-configuration class?",
        "answer": "You can use exclude attribute of @EnableAutoConfiguration if you want auto-configuration not to apply to any specific class. //use of exclude\n@EnableAutoConfiguration(exclude={className}) //use of exclude\n@EnableAutoConfiguration(exclude={className}) //use of exclude @EnableAutoConfiguration(exclude={className})",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "16. Can we disable the default web server in the Spring boot application?",
        "answer": "Yes, we can use application.properties to configure the web application type i.e spring.main.web-application-type=none. application.properties spring.main.web-application-type=none.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "17. Can we override or replace the Embedded tomcat server in Spring Boot?",
        "answer": "Yes, we can replace the Embedded Tomcat server with any server by using the Starter dependency in the pom.xml file. Like you can use spring-boot-starter-jetty as a dependency for using a jetty server in your project. pom.xml",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "18. What is the default port of tomcat in spring boot?",
        "answer": "The default port of the tomcat server-id 8080. It can be changed by adding sever.port properties in the application.property file. sever.port application.property",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "19. Is it possible to change the port of the embedded Tomcat server in Spring Boot?",
        "answer": "Yes, it is possible. By using the server.port in the application.properties. server.port application.properties",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "20. Can we create a non-web application in Spring Boot?",
        "answer": "Yes, we can create a non-web application by removing the web dependencies from the classpath along with changing the way Spring Boot creates the application context.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "21. What is Spring Boot dependency management?",
        "answer": "Spring Boot dependency management is used to manage dependencies and configuration automatically without you specifying the version for any of that dependencies.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    },
    {
        "question": "22. What Are the Basic Annotations that Spring Boot Offers?",
        "answer": "The primary annotations that Spring Boot offers reside in its org.springframework.boot.autoconfigure and its sub-packages. Here are a couple of basic ones: org.springframework.boot.autoconfigure @EnableAutoConfiguration – to make Spring Boot look for auto-configuration beans on its classpath and automatically apply them. @SpringBootApplication – used to denote the main class of a Boot Application. This annotation combines @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations with their default attributes.",
        "reference": "interviewbit.com",
        "role": "spring-boot"
    }
]