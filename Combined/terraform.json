[
    {
        "question": "1. What is Terraform?",
        "answer": "Terraform is an infrastructure as code tool that allows you to specify cloud and on-premises resources in human-readable configuration files that can be versioned, reused, and shared.\nAfter that, you can utilize a standardized procedure to provide and manage all of your infrastructures throughout their lifespan. Terraform can manage both low-level components like compute, storage, and networking resources as well as high-level components like DNS records and SaaS functionality.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "2. What do you mean Terraform init?",
        "answer": "Terraform initializes the code with the terraform init command. The working directory for the Terraform configuration files is created with this command. It is acceptable to execute this command many times.\nThe init command can be used for:\nPlugin Installation\nChild Module Installation\nThe backend is being set up.\nUnderstand the Key Difference between Terraform and Ansible",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "3. Who are Terraform's main competitors?",
        "answer": "The main competitors are:\nAnsible\nPacker\nCloud Foundry\nKubernetes",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "4. What is a Terraform provider?",
        "answer": "Terraform is a software application for controlling and informing infrastructure resources such as physical computers, virtual machines (VMs), network switches, containers, and others. API interactions that are smart and disclose resources are the responsibility of the provider. Terraform collaborates with a wide range of cloud providers.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "5. What is the Terraform Work Process?",
        "answer": "Terraform init is used at the initial step to generate an operational directory including all Terraform configuration file contents.\nThe Terraform plan, as the name implies, is to apply an execution strategy in a specific stage of development. It is significant since it will serve as the judging criteria to determine whether the expectations are reached.\nTerraform apply will guarantee that the plan is implemented within the timeframe specified in order to achieve the needed intended state of the infrastructure.\nTerraform destruction is the last stage in which this technology is utilized to remove all deployed resources.\nUnderstand How to create AWS EC2 Instances with Terraform.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "6. Explain the workflow of the core terraform?",
        "answer": "Core Terraform’s workflow process consists of three steps:\n\nWrite – Create infrastructure using coding\nPlan – Before executing the modifications, make a plan in advance to observe how they will seem.\nApply – Apply to build an architecture that is repeatable.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "7. Define Terragrunt?",
        "answer": "Terragrunt is a thin, covering layer that is used to cover terraform. This layer assists in the implementation of terraform-advocated and validated techniques. Terragrunt is useful for writing code on Terraform, but it is only available once. This reduces the need to develop code for each environment structure and deletes redundant code.\nIt has several capabilities, such as lifespan, and it also gives flexibility when utilizing Terraform by supporting a continuous deployment process.\nWant to crack the Azure Certification exam? Check out Intellipaat’s Azure Course in Bangalore!",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "8. Explain the Terraform request flow architecture",
        "answer": "Command Line Interface (CLI):\nDespite some preliminary bootstrapping in the root package, execution of the Terraform program immediately moves to one of the commanding package’s “command” versions when a user launches it.\nThe command names and command package types are mapped together and saved in the command. The file system of the repository contains the go file.\nThe function of the command execution for these instructions is to read and examine any command-line parameters, command-line variables, and environment variables required for the provided operation and use them to construct a backend. aim of the operation The action is then transmitted to the backend that is currently selected.\nBackend:\nA Terraform backend is in charge of several things:\nDeploy appropriate operations (e.g. plan, apply)\nVariables that have been defined in the workspace can be saved.\nTo keep track of the current status\nThe local backend loads and performs initial processing/validation on the configuration specified in the operation using the config loader after first using a state supervisor (either statemgr. Filesystem if indeed the local backend is being used effectively, or an execution supplied via whatever backend is now being encased) to recover the present state for the working space stipulated in the procedure.\nWith these inputs and the additional parameters given via the procedure, it then creates a terraform—context object. The main item that performs actions is terraforming.\n\nConfiguration Loader:\nModel types stand in for the upper configuration structure in package configurations. Config is used to symbolize a configuration (the root module and all of its child modules). The config load is the main access point, despite the fact that the configs package offers some limited configuration object generation capabilities.\nThe configload subpackage contains a loader. Intricacies of installing child modules (during Terraform init) and locating such modules when a configuration is loaded by a backend are handled by a loader. To create a single configuration, it loads all of the child modules recursively after taking the path to the root module.\nState Manager:\nFrames of a workspace’s Terraform state must be saved and retrieved by the state manager.\nThe vast majority of managers handle the entire set of statemgr, whereas each manager handles a portion of the document’s protocols.\nComplete the entire procedure\nThere is no reason to construct a state manager that doesn’t integrate all of statemgr; alternative function declarations often use the smaller protocols to define what operations the module may carry out on the state manager.\nGraph Builder:\nThe Context method calls a graph builder.\nA graph builder is utilized to illustrate the key phases in the process as well as their interdependencies.\nDue to variations in the graph-building procedure, each action has its own graph builder.\nA graph must be generated directly from the configuration for a “plan” operation, whereas a graph is constructed from the set of adjustments indicated in the plan being applied for a “apply” action.\nGraph Walk:\nThe graph walking method explores each vertices of the graph while taking into consideration what “happens after” the edges of the graph.\nEvery vertices in the graph is evaluated such that “happens after” edges are taken into consideration.\nThe graph walk method attempts to evaluate several vertices simultaneously.\nVertex Evaluation:\nExecution describes the process that takes place for each vertex throughout a graph walk.\nExecution carries out a set of arbitrary operations appropriate for the relevant edge type.\nJust before graph walk evaluates additional edges with “happens after” edges, one vertex must be completed successfully.\nThe graph walk is stopped and the user is given the errors when one or more mistakes are made during evaluation.\nAre you looking become a DevOps Expert? Go through Intellipaat’s DevOps Online Training!",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "9. What Terraform commands are the most useful?",
        "answer": "Here are some useful Terraform Commands\nfmt\ninit\nvalidate\nplan\napply\ndestroy\noutput\nshow\nstate\nversion\nHave a look at some Important Git Interview Questions",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "10. Explain Resource Graph in Terraform.",
        "answer": "A resource graph is a graphical presentation of the resources that are accessible. It allows for the simultaneous alternation and generation of separate resources.\nTerraform generates plans and refreshes the state by creating a plan for the graph’s configuration. It promptly and successfully builds structure to assist us in understanding the drawbacks.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "11. What do you understand by the term “Terraform Backend”?",
        "answer": "Terraform provides certain configuration options to work at the backend level called “Terraform Backend,” wherein developers are given a couple of options for the remote or local location to store and manage the built infrastructure. The interface to read and write the state data, along with storing the same file, is done with the help of the backend.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "12. Explain the different types of Terraform Backends.",
        "answer": "Terraform Backends extends as\nLocal Backend: This is the default backend that comes into the picture when no Terraform configurations are mentioned at the backend. This is used to store the state file on the machine itself, where the Terraform Backend is running.\nRemote Backend: When state files are stored in a remote location, it is termed a remote backend. For example, a cloud object storage service like AWS S3 is available on the cloud",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "13. Does Terraform provide options to deploy several providers?",
        "answer": "Yes, Terraform provides options for multi-provider installations, which include SDN management, and also on-premise solutions like OpenStack and VMware.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "14. Do we have any commands that completely remove the Terraform-managed infrastructure?",
        "answer": "Yes, we can use the following command to completely remove the Terraform-managed infrastructure:\n[options] [dir] terraform destroy",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "15. What do you mean by “tainted resource”?",
        "answer": "Terraform considers a resource to be tainted when the resource becomes inconsistent or enters a corrupted state. The terraform confirms that the resource is either damaged or has been downgraded due to any failure it has come across previously.\nHave a look at the Terraform Associate Traning Course from Intellipaat",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "16. How can we discover plugins with the help of Terraform?",
        "answer": "The interpretation of configuration files in the operational directory is done by Terraform using the command “Terraform init”. Post interpretation, the necessary plugins are identified, and then the search begins for the installed plugins in different locations. Additional plugins may also be downloaded when the requirement arises.\nHave a look at Intellipaat’s Free Academy Course on Creating and Deploying AWS Services with Terraform.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "17. Explain the working of the following commands: Terraform -version Terraform fmt Terraform providers",
        "answer": "Terraform -version – This command is used to identify which version of Terraform is installed.\nTerraform fmt: This command can be used to rewrite the configuration files in a different format, like conical styles, etc.\nTerraform providers: This command is used to seek information on the providers that are entitled to work on the current configuration.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "18. Explain the command Terraform Validate.",
        "answer": "This command is used to check the configuration files in the directory that are primarily focused on the configuration and, in turn, ignore any external services used, such as API providers. It validates the configuration to check whether the syntax is correct and consistent enough. Therefore, “Transform Validate” is the best way to validate the modules that are generally reusable.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "19. How do you recover from a failed application in Terraform?",
        "answer": "Before making any changes, it’s advisable to first save and commit your configuration in version control. This ensures that you have a backup in case you need to revert to the previous configuration. Furthermore, it is crucial to consistently resubmit previous versions of your code as new versions in your version control system.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "20. Mention some of the use cases of Terragrunt.",
        "answer": "Terragrunt works like an extension to Terraform. It can enhance the features offered by Terraform, along with making it more user-friendly. Following are the use cases where Terragrunt can be useful:\nDRY (Don’t Repeat Yourself) Infrastructure Code: Terragrunt helps reduce redundant code, hence making the developer’s life easy.\nRemote State Management: It can help simplify remote state management by helping you store it in different storage locations.\nEnvironment-specific Configuration: It can help segregate working environments like Dev, Staging, Prod etc.\nDependencies Management across Terraform Configurations\nEncrypted Variable Values: It can make Terraform configurations more secure by encrypting variable values.\nAutomated Infrastructure Deployment: Provides in-built support for CI/CD pipelines \nTerraform Wrapper: Terragrunt acts as a wrapper around Terraform commands, simplifying and enhancing the Terraform workflow. It adds features like automatic initialization and remote state configuration.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "21. Explain the ‘terraform graph’ command.",
        "answer": "It helps you create visual representations of the resource dependencies in Terraform. This can help you track which resources in the Terraform configuration file require a certain dependency.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "22. What do you mean by a Terraform Directory?",
        "answer": "Terraform directory houses all the configuration files in Terraform, such as main.tf, variables.tf, output.tf, etc. To initialize a Terraform directory, one has to type in the command ‘terraform init’ in the directory.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "23. What do you mean by provisioners in Terraform?",
        "answer": "The scripts that are part of resource creation and can be created either on a local machine or on a remote machine are executed using provisioners in Terraform. It can also be used to bootstrap a resource, clean up, and run/manage the configuration.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "24. What do you understand by the term “Terraform Core”?",
        "answer": "Terraform Core is considered the essential part of Terraform and is responsible for the fundamental functionalities of Terraform, which also include parsing the configuration files, creating an execution plan, and provisioning the infrastructure.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "25. What do you mean by external data source in Terraform?",
        "answer": "Terraform provides a special feature called an external data source feature, wherein users are allowed to use an external program to serve as a data source within the Terraform configuration. Additionally, an extra facility is provided where any kind of data can be shared across the platform using Terraform.\n\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy\n\n\nIntermediate Terraform Interview Questions",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "26. Define dependencies in Terraform?",
        "answer": "You can use depends_on to identify the dependency. You may also use the relies on the parameter to indicate several resources, and Terraform will build the target resource when all of them have been built.\nCheck out How to become a DevOps Engineer",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "27. What do you mean by State File Locking?",
        "answer": "State file locking is a Terraform technique that prohibits multiple users from doing actions on the same state file at the same time. Once one user’s lock on a state file is released, any other user who has a lock on it can act on it.\nThis helps to prevent state file corruption. A backend operation is gaining a lock on a state file in the backend. If getting a lock on the state file takes longer than intended, a status message will be produced.\nUnderstand What is DevOps Pipeline?",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "28. Mention some of the version control tools that Terraform supports.",
        "answer": "Terraform supports the following version control tools:\nGitHub\nGitLab CE\nBucket Cloud\nGitLab EE",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "29. Define Terraform cloud?",
        "answer": "Terraform Cloud is software that enables teams to work together on Terraform. It provides features such as easy access to shared state and secret data, access controls for approving infrastructure changes, a private registry for sharing Terraform modules, detailed policy controls for governing the contents of Terraform configurations, and more to ensure that Terraform runs in a consistent and reliable environment.\nUnderstand the difference between SRE and a DevOps",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "30. What do you mean by Modules in Terraform?",
        "answer": "In Terraform, a module is a container for various resources that are utilized in collaboration. The root module is required for any Terraform that includes resources listed in.tf files.\nWant to get certified in Terraform, here’s a golden chance for your Intellipaat Terraform Certification course!",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "31. How to Ignore the Error Duplicate Resource when applying Terraform?",
        "answer": "Depending on the criteria, solutions might change.\nTo terminate handling the resources, remove them from the Terraform code.\nBy using terraform, you may destroy and regenerate resources through the API.\nExecute an importing action to delete the resources and the code that is attempting to rebuild them.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "32. What are some of the notable applications that make Terraform useful?",
        "answer": "Due to the general ability to terraform, the applications are highly remarkable and diverse in general.\nThe applications are as follows:\nClusters of self-service\nMulti-tier application development\nEnvironment creation\nResource allocation\nCreating a software demonstration\nHeroku app installation",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "33. What is the purpose of Terraform in DevOps?",
        "answer": "Terraform is a flexible tool for designing infrastructure using a proper code style. It is advantageous to have total orchestration control, similar to puppet and ansible.\nTerraform is an efficient and well-structured cloud platform that supports all of the main cloud providers such as GCP, Azure, and AWS.\nIt is simple to manage due to its dynamic framework, which allows for easy configuration changes. It may also be easily switched from one supplier to another.\nIt may be run on the masterless and client-only architecture mainframes with correct installation and use of all APIs.\nYou can even check out our DevOps Interview Questions.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "34. What are the main characteristics of Terraform?",
        "answer": "Infrastructure as Code: Terraform’s high-level configuration language is used to describe your structure in logical file types that are human-readable.\nYou can now create a blueprint that is editable, shareable, and reusable.\nBefore making any infrastructure changes, Terraform develops an execution plan that outlines what it will perform and requests your consent. Before Terraform produces, upgrades, or destroys infrastructure, you may evaluate the changes.\nTerraform generates a resource graph while developing or modifying non-dependent resources. Terraform can now construct resources rapidly while also providing you with additional information about your infrastructure.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "35. What do you mean by IAC?",
        "answer": "IaC is an abbreviation for “Infrastructure as Code” IaC refers to a technique in which developers may run and provide computer data centres automatically rather than engaging in a physical process. Terraform IAC  is an example of an IAC tool.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "36. How do you define a null resource in Terraform?",
        "answer": "The null resource follows the typical resource lifetime but does nothing else. The trigger parameter enables the setting of a subjective set of values that, if misrepresented, will result in the replacement of the reserve.\nThe principal use of the null resource is as a do-nothing container for arbitrary operations done by a provisioner.\nHave a look at a few DevOps Projects for Beginners and Experienced",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "37. Is Terraform suitable for on-premise infrastructure?",
        "answer": "Yes, Terraform can be used to construct infrastructure on-premises. There are several services to choose from. You can choose whichever one best meets your requirements. Many individuals construct their own client Terraform providers; all that is necessary is an API.\nBest Microsoft Azure Training for Administration (AZ-103 = AZ-100 and AZ-101)",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "38. What are some of the built-in provisioners available in Terraform?",
        "answer": "Here is a list of Terraform’s built-in provisioners:\nSalt-masterless Provisioner\nPuppet Provisioner\nFile Provisioner\nChef Provisioner\nRemote-exec Provisioner\nLocal-exec Provisioner\nHabitat Provisioner",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "39. What are the Elements of Terraform architecture?",
        "answer": "The Terraform architecture has the following characteristics:\nExpression Evaluation\nCLI (Command Line interface)\nVertex Evaluation\nSub-graphs\nState Manager\nConfiguration Loader\nGraph Walk\nGraph Builder\nBackend",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "40. What are some of the most recent Terraform Azure Provider factors?",
        "answer": "The most recent versions include additional data resources and Azurem batch certificate, which aids in certificate management. In networking, this resource is used to regulate the prefix. Bugs have been fixed, and azurerm app service has been improved.\nUnderstand the Difference between a DevOps Engineer and a Cloud Engineer",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "41. What is the relevance of Terraform variables?",
        "answer": "Variables in Terraform find their way into enhancing the reusability and flexibility of the configurations. Terraform extends the facility of acting as a parameter that allows the users to customize the configurations and set different values for various environments, allowing them to input the variables to add the adaptability layer to the infrastructural code",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "42. Differentiate between ‘Terraform Plan’ and ‘Terraform apply’.",
        "answer": "Terraform Plan: This command is used to establish an execution plan for the terraform configurations. It also examines the current state and the desired state to figure out the possibility of any potential problems before making any such changes.\nTerraform Apply: This command is used to apply the changes that were proposed in the terraform plan.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "43. Does Terraform allow you to manage resources across multiple cloud providers?",
        "answer": "Yes, Terraform extends capabilities to manage resources available on multiple cloud providers, which include various cloud platforms like Google Cloud Platform, Microsoft Azure, etc.\nHave a look at the DevOps Roadmap to become a DevOps Engineer.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "44. How can you destroy the infrastructure created with Terraform?",
        "answer": "Terraform allows you to destroy the infrastructure created with the help of Terraform using the ‘Terraform Destroy’ command. This command first reads the Terraform configuration, then creates a plan for destruction and throws a prompt to the user for final approval, after which the plan gets executed and changes are applied to the infrastructure.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "45. How does Terraform handle State Management?",
        "answer": "State files play a crucial role in monitoring the present condition of the infrastructure. Every detail regarding resources under the Terraform Management, which also includes their characteristics and interdependencies, is handled by the State Management. It acts as a Terraform’s reference to adjust to the desired changes and achieve the desired state, while also maintaining the historical records of the infrastructure changes.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "46. Does Terraform allow you to roll back the changes you make?",
        "answer": "No, Terraform does not allow you to roll back the changes once they are made. However, the previous state of the infrastructure can be attained by reverting it to a previous state file. It is always important to maintain backups or different versions of the state file so rollbacks may be facilitated if needed.\nUnderstand What are Artifacts in DevOps?",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "47. What do you mean by the “plan refresh” process of Terraform?",
        "answer": "This process involves comparing the configured resources and reading the current state of the infrastructure after analyzing the existing state and figuring out the adjustments required to align it with the desired state. In a nutshell, Terraform deeply analyzes what changes need to be made for better infrastructure.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "48. What do you mean by terraform workspaces?",
        "answer": "Terraform workspaces extend the facility to manage multiple instances of the single infrastructure existing in different environments. Workspaces enable us to maintain multiple instances while saving their respective states and variables without disturbing the Terraform configuration.\nCheck out a Sample Resume for DevOps Engineer",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "49. When are the Terraform workspaces brought into use?",
        "answer": "Workspaces turn out to be useful when we need to maintain different sets of resources, including development, staging, and production environments, without disrupting the Terraform state configuration.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "50. Differentiate between a Terraform provisioner and a resource.",
        "answer": "In Terraform, a resource acts as a blueprint for creating a component of your infrastructure. Think of it like a machine or server on platforms such as AWS or Azure. These resources define the desired structure of your infrastructure. Now, when it comes to ensuring everything is perfectly set up, that’s where provisioners come into play. They are like the hands-on workers who execute scripts or commands on your resource after it has been created or updated. This is useful for tasks such as software installation, configuration management, and application deployment. So essentially, resources shape your infrastructure, while provisioners fine-tune it to meet your requirements.\n\nAdvanced Terraform Interview Questions for Experienced",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "51. Are callbacks possible with Terraform on Azure",
        "answer": "Yes, callbacks are possible with Terraform on Azure using Azure Event Hubs. Terraform’s AzureRM provider provides the necessary functionality to integrate with Azure Event Hubs and trigger callbacks based on specific events.\nCheck out What is Jenkins Pipeline?",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "52. What is Terraform D?",
        "answer": "Terraform D is a declarative syntax for writing Terraform configurations. It’s an alternative to the traditional HCL syntax and aims to provide a more concise and readable way to define infrastructure resources. Terraform D is still under development, but it has the potential to simplify Terraform configurations and make them easier to understand and maintain.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "53. Why is Terraform used for DevOps?",
        "answer": "Terraform is widely used in DevOps because it enables infrastructure as code (IaC), which means that infrastructure is defined and managed using code rather than manual configuration. This approach has several advantages for DevOps, including:\nAutomation: Terraform configurations can be automatically applied and set up, which can save time and reduce errors.\nReproducibility: Infrastructure can be easily replicated and recreated from code, which ensures consistency across different environments.\nVersion control: Terraform configurations can be stored in version control systems, which allows for easy tracking of changes and rollbacks",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "54. Explain the uses of Terraform CLI and list some basic CLI commands.",
        "answer": "Terraform CLI (command-line interface) is the primary tool for interacting with Terraform. It provides a number of commands for managing infrastructure, including:\nterraform init: Initializes a Terraform directory and downloads the necessary providers.\nterraform plan: Generates an execution plan that shows the changes that Terraform will make to the infrastructure.\nTerraform apply: Applies the changes in the execution plan to the infrastructure.\nTerraform destroy: Destroys the infrastructure managed by Terraform.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "55. Name all version controls supported by Terraform.",
        "answer": "Terraform supports multiple version control systems, such as Git, Mercurial, Subversion, and Perforce. Git is commonly used due to its flexibility, branching, and collaboration features, making it the preferred choice for managing Terraform configurations across teams.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "56. Give the terraform configuration for creating a single EC2 instance on AWS.",
        "answer": "provider \"aws\" {\n  region = \"us-west-2\"   # Replace with your desired region\n}\nresource \"aws_instance\" \"example\" {\n  ami           = \"ami-0c55b159cbfafe1f0\"\n  instance_type = \"t2.micro\"\n}\nThis snippet uses the AWS provider to specify the region and creates an EC2 instance with a specified AMI and instance type. Adjust the parameters to fit your requirements.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "57. How does Terraform handle the drift detection of infrastructure state, and what actions can it take?",
        "answer": "Terraform detects infrastructure drift by comparing the current state with the expected state described in configuration files. It offers commands like “terraform plan” to identify changes and “terraform apply” to reconcile and bring the actual state in line with the desired state.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "58. What is a Private Module Registry?",
        "answer": "A private module registry is a repository where organizations can store and manage their own Terraform modules. This allows them to control access to their modules and ensure that only authorized users can use them. Private module registries can be hosted on-premises or in the cloud. Some popular private module registries include GitHub Packages, Terraform Cloud, and HashiCorp Vault.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "59. Can you provide a few examples that we can use for Sentinel policies?",
        "answer": "Sentinel policies are used to define who can use Azure resources and how they can be used. They can be used to enforce security, compliance, and business policies. Here are a few examples of how Sentinel policies can be used:\nEnforce the least privilege: Ensure that users only have access to the resources they need to do their jobs.\nPrevent unauthorized access: Block access to resources from unauthorized users.\nEnforce compliance: Ensure that resource usage complies with company policies and regulations.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "60. Which value of the TF_LOG variable provides the most verbose logging?",
        "answer": "The most verbose logging level in Terraform is TRACE. This level will log all Terraform messages, including debug messages and provider plugin messages. To set the logging level to TRACE, use the following command:\nTF_LOG=TRACE terraform plan\nThe other logging levels, in order of increasing verbosity, are DEBUG, INFO, WARN, and ERROR.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "61. What are the main key responsibilities of Terraform Core?",
        "answer": "There are certain key responsibilities of the Terraform Core:\nInterpolation of module and configuration file\nConstructing resource graphs\nEstablish communication between plugins and RPC\nManaging the state resources",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "62. Why do DevOps teams prefer Terraform?",
        "answer": "Terraform operates as a user-friendly configuration language similar to JSON. The syntaxes provided are simple, which in turn makes them user-friendly. This language empowers the DevOps teams to create configurations for the infrastructure effortlessly. Furthermore, these configurations can be implemented across different clouds and data centers, which provides a versatile solution to build and manage infrastructure setups.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "63. What do you mean by a Terraform provider, and how can you create a custom provider?",
        "answer": "The plugins that interact with infrastructure APIs and enable the facility to manage the resources are called Terraform providers. The available resources, their properties, and the actions to be performed are defined. To create a custom provider, the developer needs to develop a plugin that abides by the TerraformProvider Protocols, implying the necessary operations for resource management.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "64. Explain ‘Terraform as a service’.",
        "answer": "It refers to the practice of providing Terraform functionality as a managed service. There are certain benefits to using Terraform as a service, including:\nInfrastructure provisioning is simplified and managed.\nDevOps tools are seamlessly integrated with the workflows.\nIt provides centralized control and visibility across multiple environments.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "65. How can you structure the modules more effectively?",
        "answer": "The following best practices are advised to be followed to structure the modules:\nKeep the modules focused and single-purpose.\nClear documentation must be provided.\nFlexibility and reusability should be maintained.\nInput variables are defined to customize the module behavior.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "66. How is infrastructure testing implemented and validated?",
        "answer": "Different tools and practices can be brought to use for infrastructure testing and validation, such as:\nThe Terraform validate command can be used to check for configuration errors and syntaxes.\nAutomated testing frameworks can be used by employees like Terratest or Kitchen-Terraform to execute infrastructure tests.\nLining tools like TFLint can be incorporated.\nEnd-to-end testing and leveraging integration can be done to validate the behavior of the infrastructure.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "67. Explain immutable infrastructure.",
        "answer": "When infrastructures are termed disposable and no modification is allowed once they are provisioned, those infrastructures are called immutable infrastructures. Immutable infrastructures are supported by Terraform by promoting the recreation of resources. Commands such as ‘destroy’ and ‘apply’ can be used to destroy and recreate every change, ensuring a consistent and predictable infrastructure.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "68. How do you handle complex dependency management in Terraform?",
        "answer": "The following steps can be followed to handle complex dependency management:\nLeverage implicit and explicit dependencies that are predefined in configurations.\nUse ‘terraform state’ command that helps us modify the resource ordering.\nBreak down complex configurations into smaller modules so that the dependency is simplified.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "69. What do you mean by Terraform State?",
        "answer": "The state that represents the current state within the managed infrastructure is called a Terraform State. The information related to its resources, properties, and dependencies is also managed under the terraform state.",
        "reference": "intellipaat.com",
        "role": "terraform"
    },
    {
        "question": "1. Mention some of the version control tools supported by Terraform.",
        "answer": "Some of the version control tools supported by Terraform are as follows:   GitHub\nGitLab CE\nGitLab EE\nBucket Cloud GitHub GitLab CE GitLab EE Bucket Cloud",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "2. Explain the workflow of the core terraform.",
        "answer": "Terraform's core workflow consists of three steps:   Write - Create infrastructure in the form of code.\nPlan - Plan ahead of time to see how the changes will look before they are implemented.\nApply - Create a repeatable infrastructure. Write - Create infrastructure in the form of code. Write Plan - Plan ahead of time to see how the changes will look before they are implemented. Plan Apply - Create a repeatable infrastructure. Apply",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "3. What do you understand about providers in the context of Terraform?",
        "answer": "To interface with cloud providers, SaaS providers, and other APIs, Terraform uses plugins called \"providers.\" Terraform configurations must specify the providers they need in order for Terraform to install and use them. Some providers also require setup (such as endpoint URLs or cloud regions) before they may be used. Terraform may manage a set of resource types and/or data sources that each provider contributes. A provider implements each resource type; Terraform would be unable to manage any infrastructure without them. The majority of service providers set up a specific infrastructure platform (either cloud or self-hosted). Local utilities, such as generating random numbers for unique resource names, can be offered by providers.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "4. What are the key features of Terraform?",
        "answer": "Following are the key features of Terraform: Infrastructure as Code: Terraform's high-level configuration language is used to describe your infrastructure in declarative configuration files that are human-readable. You may now generate a blueprint that you can edit, share, and reuse.\nExecution Strategies: Before making any infrastructure modifications, Terraform develops an execution plan that describes what it will do and asks for your agreement. Before Terraform produces, upgrades, or destroys infrastructure, you can evaluate the changes.\nGraph of Resources: Terraform develops or alters non-dependent resources while simultaneously building a resource graph. This allows Terraform to construct resources as quickly as possible while also providing you with more information about your infrastructure.\nAutomation of Change: Terraform can automate the application of complex changesets to your infrastructure with little to no human intervention. Terraform identifies what happened when you update configuration files and provides incremental execution plans that take dependencies into account. Infrastructure as Code: Terraform's high-level configuration language is used to describe your infrastructure in declarative configuration files that are human-readable. You may now generate a blueprint that you can edit, share, and reuse. Infrastructure as Code: Execution Strategies: Before making any infrastructure modifications, Terraform develops an execution plan that describes what it will do and asks for your agreement. Before Terraform produces, upgrades, or destroys infrastructure, you can evaluate the changes. Execution Strategies: Graph of Resources: Terraform develops or alters non-dependent resources while simultaneously building a resource graph. This allows Terraform to construct resources as quickly as possible while also providing you with more information about your infrastructure. Graph of Resources: Automation of Change: Terraform can automate the application of complex changesets to your infrastructure with little to no human intervention. Terraform identifies what happened when you update configuration files and provides incremental execution plans that take dependencies into account. Automation of Change:",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "5. Explain the command terraform version in the context of Terraform.",
        "answer": "The terraform version command shows the current Terraform version as well as any installed plugins. Syntax: Syntax: terraform version [options] terraform version [options] Unless disabled, the version will display the Terraform version, the platform it's installed on, installed providers, and the results of upgrade and security checks with no extra arguments. There is one optional flag for this command: If you specify -json, the version information is formatted as a JSON object, with no upgrade or security information.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "6. Explain the command terraform apply in the context of Terraform.",
        "answer": "The terraform apply command is used to carry out the tasks in a Terraform plan. The simplest method to use terraform apply is to run it without any arguments, in which case it will construct a new execution plan (as if you had run terraform plan) and then request you to accept it before doing the activities you specified. Another approach to use terraform apply is to supply it the filename of a saved plan file generated with terraform plan -out=..., in which case Terraform will apply the modifications to the plan without prompting for confirmation. This two-step process is most useful when using Terraform in an automated environment. Syntax: Syntax: terraform apply [options] [plan file] terraform apply [options] [plan file]",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "7. Explain the command terraform validate in the context of Terraform.",
        "answer": "The terraform validate command verifies the configuration files in a directory, focusing solely on the configuration and excluding any outside services such as remote state, provider APIs, and so on. Validate performs checks to see if a configuration is syntactically correct and internally consistent, regardless of any variables or current state. As a result, it's best used for general verification of reusable modules, such as ensuring that attribute names and value types are correct. This command can be executed automatically, for example as a post-save check in a text editor or as a test step for a reusable module in a continuous integration system. Syntax: terraform validate [options] Syntax: terraform validate [options] The following options are available with this command: -json - Create output in the machine-readable JSON format, appropriate for integration with text editors and other automated systems. Color is always turned off.\n-no-color - If supplied, the output will be colourless. -json - Create output in the machine-readable JSON format, appropriate for integration with text editors and other automated systems. Color is always turned off. -json -no-color - If supplied, the output will be colourless. -no-color",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "8. Explain null resource in the context of Terraform.",
        "answer": "  The null resource is a resource that lets you set up provisioners that aren't directly linked to any current resource. Because a null resource behaves like any other resource, you can configure provisioners, connection details, and other meta-parameters just like any other resource. This gives you more precise control over when provisioners execute in the dependency graph.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "9. What are some guidelines that should be followed while using Terraform modules?",
        "answer": "Following are some of the guidelines that should be followed while using Terraform modules : To publish to the Terraform Cloud or Terraform Enterprise module registries, you must use this convention terraform-<PROVIDER>-<NAME>.\nStart thinking about modules as you write your setup. The benefits of using modules outweigh the time it takes to utilise them properly, even for somewhat complicated Terraform settings maintained by a single person.\nTo organise and encapsulate your code, use local modules. Even if you aren't using or publishing remote modules, structuring your configuration in terms of modules from the start will dramatically minimise the time and effort required to maintain and update your setup as your infrastructure becomes more complicated.\nTo identify useful modules, go to the Terraform Registry, which is open to the public. By relying on the efforts of others to create common infrastructure scenarios, you may implement your configuration more quickly and confidently.\nModules can be published and shared with your team. The majority of infrastructure is handled by a group of individuals, and modules are a vital tool for teams to collaborate on infrastructure creation and maintenance. To publish to the Terraform Cloud or Terraform Enterprise module registries, you must use this convention terraform-<PROVIDER>-<NAME>. Start thinking about modules as you write your setup. The benefits of using modules outweigh the time it takes to utilise them properly, even for somewhat complicated Terraform settings maintained by a single person. To organise and encapsulate your code, use local modules. Even if you aren't using or publishing remote modules, structuring your configuration in terms of modules from the start will dramatically minimise the time and effort required to maintain and update your setup as your infrastructure becomes more complicated. To identify useful modules, go to the Terraform Registry, which is open to the public. By relying on the efforts of others to create common infrastructure scenarios, you may implement your configuration more quickly and confidently. Modules can be published and shared with your team. The majority of infrastructure is handled by a group of individuals, and modules are a vital tool for teams to collaborate on infrastructure creation and maintenance.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "10. What are the benefits of using modules in Terraform?",
        "answer": "Following are the benefits of using modules in Terraform : Organization of configuration: By grouping relevant portions of your configuration together, modules make it easier to access, understand, and change your configuration. Hundreds or thousands of lines of configuration can be required to establish even moderately complicated infrastructure. You can organise your configuration into logical components by utilising modules.\nEncapsulation of configuration: Another advantage of modules is that they allow you to separate configuration into logical components. Encapsulation can help you avoid unforeseen consequences, such as a change to one element of your configuration causing changes to other infrastructure, and it can also help you avoid basic mistakes like naming two resources with the same name.\nMaintains consistency and ensures best practices: Modules can also help you maintain uniformity in your configurations. Consistency not only makes complex configurations easier to grasp, but it also ensures that best practices are followed in all of your settings. Cloud providers, for example, offer a variety of options for establishing object storage services like Amazon S3 or Google Cloud Storage buckets. Many high-profile security problems have occurred as a result of improperly secured object storage, and given the number of sophisticated configuration options involved, it's possible to misconfigure these services by accident.\nModules can aid in the reduction of errors: For example, you might design a module to define how all of your organization's public website buckets would be set, as well as a separate module for private logging buckets. In addition, if a configuration for a particular resource type needs to be altered, using modules allows you to do it in one place and have it applied to all scenarios where that module is used.\nAids in reusability: Setting up the configurations from scratch and writing all of your settings can be time-consuming and error-prone. By reusing configuration generated by yourself, other members of your team, or other Terraform practitioners who have published modules for you to utilise, you can save time and avoid costly errors. You can also share modules you've produced with your colleagues or the broader public, allowing them to profit from your efforts. Organization of configuration: By grouping relevant portions of your configuration together, modules make it easier to access, understand, and change your configuration. Hundreds or thousands of lines of configuration can be required to establish even moderately complicated infrastructure. You can organise your configuration into logical components by utilising modules. Organization of configuration: Encapsulation of configuration: Another advantage of modules is that they allow you to separate configuration into logical components. Encapsulation can help you avoid unforeseen consequences, such as a change to one element of your configuration causing changes to other infrastructure, and it can also help you avoid basic mistakes like naming two resources with the same name. Encapsulation of configuration: Maintains consistency and ensures best practices: Modules can also help you maintain uniformity in your configurations. Consistency not only makes complex configurations easier to grasp, but it also ensures that best practices are followed in all of your settings. Cloud providers, for example, offer a variety of options for establishing object storage services like Amazon S3 or Google Cloud Storage buckets. Many high-profile security problems have occurred as a result of improperly secured object storage, and given the number of sophisticated configuration options involved, it's possible to misconfigure these services by accident. Maintains consistency and ensures best practices: Modules can aid in the reduction of errors: For example, you might design a module to define how all of your organization's public website buckets would be set, as well as a separate module for private logging buckets. In addition, if a configuration for a particular resource type needs to be altered, using modules allows you to do it in one place and have it applied to all scenarios where that module is used. Modules can aid in the reduction of errors: Aids in reusability: Setting up the configurations from scratch and writing all of your settings can be time-consuming and error-prone. By reusing configuration generated by yourself, other members of your team, or other Terraform practitioners who have published modules for you to utilise, you can save time and avoid costly errors. You can also share modules you've produced with your colleagues or the broader public, allowing them to profit from your efforts. Aids in reusability:",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "11. What do you understand about Terraform modules?",
        "answer": "A Terraform module is a single directory containing Terraform configuration files. Even a simple arrangement with a single directory having one or more files can be referred to as a module. The files have the extension .tf.  This directory is referred to as the root module when Terraform commands are run directly from it. Terraform commands will only use the configuration files in one location: the current working directory. Your configuration, on the other hand, can employ module blocks to call modules from other directories. When Terraform comes across a module block, it loads and processes the configuration files for that module. A module that is called by another configuration is frequently referred to as that configuration's \"child module.\"",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "12. Explain the destroy command in the context of Terraform.",
        "answer": "The terraform destroy command is a simple way to eliminate all remote objects maintained by a Terraform setup. While you should avoid destroying long-lived objects in a production environment, Terraform is occasionally used to manage temporary infrastructure for development, in which case you can use terraform destroy to quickly clean up all of those temporary objects after you're done. Syntax: terraform destroy [options] Syntax: terraform destroy [options] You may also execute the following command to build a speculative destroy plan to see what the effect of destroying might be: terraform -destroy plan terraform -destroy plan This will launch Terraform Plan in destroy mode, displaying the proposed destroy changes but not allowing you to execute them.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "13. What do you understand about Terraform Cloud?",
        "answer": "  Terraform Cloud is a collaboration tool for teams using Terraform. It offers easy access to shared state and secret data, access controls for approving infrastructure modifications, a private registry for sharing Terraform modules, full policy controls for managing the contents of Terraform configurations, and more. Terraform Cloud is a hosted service that can be found at https://app.terraform.io. Terraform allows small teams to connect to version control, share variables, run Terraform in a reliable remote environment, and securely save remote state for free. Paid tiers provide you with the ability to add more than five people, establish teams with varying levels of access, enforce policies before building infrastructure, and work more efficiently. Large businesses can utilise the Business tier to scale to multiple concurrent runs, establish infrastructure in private environments, manage user access using SSO, and automate infrastructure end-user self-service provisioning.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "14. Mention some of the major competitors of Terraform.",
        "answer": "Following are some of the major competitors of Terraform:   Azure Management Tools.\nMorpheus.\nCloudHealth.\nTurbonomic.\nCloudBolt.\nApptio Cloudability\nAnsible\nKubernetes\nPlatform9 Managed Kubernetes. Azure Management Tools. Morpheus. CloudHealth. Turbonomic. CloudBolt. Apptio Cloudability Ansible Kubernetes Platform9 Managed Kubernetes.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "15. Why is Terraform preferred as one of the DevOps tools?",
        "answer": "Following are the reasons that Terraform is preferred as one of the DevOps tools : Terraform allows you to specify infrastructure in config/code, making it simple to rebuild, alter, and track infrastructure changes. Terraform is a high-level infrastructure description.\nWhile there are a few alternatives, they are all centred on a single cloud provider. Terraform is the only powerful solution that is totally platform-neutral and supports different services.\nTerraform allows you to implement a variety of coding concepts, such as putting your code under version control, writing automated tests, and so on.\nTerraform is the best tool for infrastructure management since many other solutions suffer from an impedance mismatch when attempting to use an API meant for configuring management to govern an infrastructure environment. Instead, Terraform is a perfect match for what you want to do because the API is built around how you think about infrastructure.\nTerraform has a thriving community and is open source, so it's attracting a sizable following. Many people already use it, making it easy to discover individuals who know how to use it, as well as plugins, extensions, and expert assistance. Terraform is also evolving at a much faster rate as a result of this. They have a lot of releases.\nTerraform's speed and efficiency are unrivalled. Terraform's plan command, for example, allows you to see what changes you're about to make before you do them. Terraform and its code reuse feature makes most modifications faster than similar tools like CloudFormation. Terraform allows you to specify infrastructure in config/code, making it simple to rebuild, alter, and track infrastructure changes. Terraform is a high-level infrastructure description. While there are a few alternatives, they are all centred on a single cloud provider. Terraform is the only powerful solution that is totally platform-neutral and supports different services. Terraform allows you to implement a variety of coding concepts, such as putting your code under version control, writing automated tests, and so on. Terraform is the best tool for infrastructure management since many other solutions suffer from an impedance mismatch when attempting to use an API meant for configuring management to govern an infrastructure environment. Instead, Terraform is a perfect match for what you want to do because the API is built around how you think about infrastructure. Terraform has a thriving community and is open source, so it's attracting a sizable following. Many people already use it, making it easy to discover individuals who know how to use it, as well as plugins, extensions, and expert assistance. Terraform is also evolving at a much faster rate as a result of this. They have a lot of releases. Terraform's speed and efficiency are unrivalled. Terraform's plan command, for example, allows you to see what changes you're about to make before you do them. Terraform and its code reuse feature makes most modifications faster than similar tools like CloudFormation.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "16. What do you mean by terraform init in the context of Terraform?",
        "answer": "The terraform init command creates a working directory in which Terraform configuration files can be found. After creating a new Terraform configuration or cloning an old one from version control, run this command first. It is safe to use this command more than once. Despite the fact that successive runs may result in errors, this command will never overwrite your current settings or state. Syntax: Syntax: terraform init [options] terraform init [options] The following options can be used in conjunction with the init command : -input=true: This option is set to true if the user input is mandatory. If no user input is provided, an error will be thrown.\n-lock=false: This option is used to disable the locking of state files during state-related actions.\n-lock-timeout=<duration>: This option is used to override the time it takes Terraform to get a state lock. If the lock is already held by another process, the default is 0s (zero seconds), which results in an immediate failure.\n-no-color: This option disables the color codes in the command output.\n-upgrade: This option can be chosen to upgrade modules and plugins throughout the installation process. -input=true: This option is set to true if the user input is mandatory. If no user input is provided, an error will be thrown. -input=true: -lock=false: This option is used to disable the locking of state files during state-related actions. -lock=false: -lock-timeout=<duration>: This option is used to override the time it takes Terraform to get a state lock. If the lock is already held by another process, the default is 0s (zero seconds), which results in an immediate failure. -lock-timeout=<duration>: -no-color: This option disables the color codes in the command output. -no-color: -upgrade: This option can be chosen to upgrade modules and plugins throughout the installation process. -upgrade:",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "17. Is it feasible to use Terraform on Azure with callbacks? Sending a callback to a logging system, a trigger, or other events, for example?",
        "answer": "Yes. Azure Event Hubs can be used to accomplish this. This capability is now accessible in the Terraform AzureRM provider. Terraform's Azure supplier provides users with simple functionality. Microsoft Azure Cloud Shell includes a Terraform occurrence that has already been setup.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "18. What are the use cases of Terraform?",
        "answer": "Following are the use cases of Terraform: Setting Up a Heroku App:\nHeroku is a prominent platform as a service (PaaS) for hosting web applications. Developers build an app first, then add add-ons like a database or an email service. The ability to elastically scale the number of dynos or workers is one of the nicest features. Most non-trivial applications, on the other hand, quickly require a large number of add-ons and external services.\nTerraform may be used to codify the setup required for a Heroku application, ensuring that all essential add-ons are present, but it can also go beyond, such as configuring DNSimple to set a CNAME or configuring Cloudflare as the app's CDN. Best of all, Terraform can achieve all of this without using a web interface in about 30 seconds. Setting Up a Heroku App:\nHeroku is a prominent platform as a service (PaaS) for hosting web applications. Developers build an app first, then add add-ons like a database or an email service. The ability to elastically scale the number of dynos or workers is one of the nicest features. Most non-trivial applications, on the other hand, quickly require a large number of add-ons and external services.\nTerraform may be used to codify the setup required for a Heroku application, ensuring that all essential add-ons are present, but it can also go beyond, such as configuring DNSimple to set a CNAME or configuring Cloudflare as the app's CDN. Best of all, Terraform can achieve all of this without using a web interface in about 30 seconds. Setting Up a Heroku App: Heroku is a prominent platform as a service (PaaS) for hosting web applications. Developers build an app first, then add add-ons like a database or an email service. The ability to elastically scale the number of dynos or workers is one of the nicest features. Most non-trivial applications, on the other hand, quickly require a large number of add-ons and external services.\nTerraform may be used to codify the setup required for a Heroku application, ensuring that all essential add-ons are present, but it can also go beyond, such as configuring DNSimple to set a CNAME or configuring Cloudflare as the app's CDN. Best of all, Terraform can achieve all of this without using a web interface in about 30 seconds. Heroku is a prominent platform as a service (PaaS) for hosting web applications. Developers build an app first, then add add-ons like a database or an email service. The ability to elastically scale the number of dynos or workers is one of the nicest features. Most non-trivial applications, on the other hand, quickly require a large number of add-ons and external services. Terraform may be used to codify the setup required for a Heroku application, ensuring that all essential add-ons are present, but it can also go beyond, such as configuring DNSimple to set a CNAME or configuring Cloudflare as the app's CDN. Best of all, Terraform can achieve all of this without using a web interface in about 30 seconds.   Clusters of Self-Service: \nA centralised operations team managing a huge and growing infrastructure becomes extremely difficult at a given organisational level. Making \"self-serve\" infrastructure, which allows product teams to manage their own infrastructure using tooling given by the central operations team, becomes more appealing.\nTerraform configuration may be used to document knowledge about how to construct and scale a service. You may then publish these configurations across your business, allowing client teams to administer their services using Terraform.\nQuick Creation of Environments: \nIt is usual to have both a production and staging or quality assurance environment. These environments are smaller clones of their production counterparts, and they're used to test new apps before they're released to the public. Maintaining an up-to-date staging environment gets increasingly difficult as the production environment grows larger and more complicated.\nTerraform may be used to codify the production environment, which can then be shared with staging, QA, and development. These settings can be used to quickly create new environments in which to test and then readily discarded. Terraform can help to reduce the challenge of sustaining parallel environments by making it possible to create and destroy them on the fly.\nDeployment of Multiple Clouds: \nTo boost fault tolerance, it's common to disperse infrastructure across different clouds. When only one region or cloud provider is used, fault tolerance is restricted by that provider's availability. When a region or an entire provider goes down, a multi-cloud strategy provides for more gentle recovery.\nBecause many existing infrastructure management solutions are cloud-specific, implementing multi-cloud installations can be difficult. Terraform is cloud-agnostic, allowing you to manage numerous providers and even cross-cloud dependencies with a single configuration. This helps operators develop large-scale multi-cloud infrastructures by simplifying management and orchestration.\nApplications with Multiple Tier Architecture: \nThe N-tier architecture is a relatively popular structure. A pool of web servers with a database tier is the most popular 2-tier system. API servers, cache servers, routing meshes, and more levels are added. Because the stages can be scaled individually and provide a separation of concerns, this structure is used.\nTerraform is a great tool for creating and managing these types of infrastructures. Terraform will automatically handle the dependencies between each layer if you arrange resources in each tier together. Before provisioning the web servers, Terraform will check that the database layer is up and running, as well as that the load balancers are linked to the web nodes. The count configuration value can then be changed in Terraform to quickly scale each tier. Because resource creation and provisioning are codified and automated, elastic scaling in response to load is a breeze.\nSchedulers of Resources:\nThe static assignment of applications to computers in large-scale infrastructures becomes increasingly difficult. There are a variety of schedulers available to handle this problem, including Borg, Mesos, YARN, and Kubernetes. These may be used to schedule Docker containers, Hadoop, Spark, and a variety of other software tools on a dynamic basis.\nTerraform isn't just for physical providers like Amazon Web Services. Terraform can request resources from resource schedulers because they can be treated as providers. This allows Terraform to work in layers, such as setting up the physical infrastructure that runs the schedulers and provisioning into the scheduled grid.\nSoftware-Defined Networking:\nSDN (Software Defined Networking) is becoming more common in data centers as it gives operators and developers more control over the network and allows the network to better support the applications running on top. A control layer and an infrastructure layer are common in SDN systems.\nTerraform may be used to codify software-defined network setup. By interacting with the control layer, Terraform may use this configuration to automatically set up and adjust settings. This makes it possible to version the settings and automate modifications. Terraform, for example, may be used to set up an AWS VPC.\nDemonstrations of software:\nModern software is becoming increasingly networked and distributed. Although solutions such as Vagrant exist to create virtualized environments for demos, demonstrating software on real infrastructure that more closely resembles production environments remains difficult.\nOn cloud providers like AWS, software authors can give a Terraform configuration to develop, provision, and bootstrap a demo. End customers may simply demo the programme on their own infrastructure, and settings like cluster size can be tweaked to more thoroughly test tools at any scale. Clusters of Self-Service: \nA centralised operations team managing a huge and growing infrastructure becomes extremely difficult at a given organisational level. Making \"self-serve\" infrastructure, which allows product teams to manage their own infrastructure using tooling given by the central operations team, becomes more appealing.\nTerraform configuration may be used to document knowledge about how to construct and scale a service. You may then publish these configurations across your business, allowing client teams to administer their services using Terraform. Clusters of Self-Service: A centralised operations team managing a huge and growing infrastructure becomes extremely difficult at a given organisational level. Making \"self-serve\" infrastructure, which allows product teams to manage their own infrastructure using tooling given by the central operations team, becomes more appealing.\nTerraform configuration may be used to document knowledge about how to construct and scale a service. You may then publish these configurations across your business, allowing client teams to administer their services using Terraform. A centralised operations team managing a huge and growing infrastructure becomes extremely difficult at a given organisational level. Making \"self-serve\" infrastructure, which allows product teams to manage their own infrastructure using tooling given by the central operations team, becomes more appealing. Terraform configuration may be used to document knowledge about how to construct and scale a service. You may then publish these configurations across your business, allowing client teams to administer their services using Terraform. Quick Creation of Environments: \nIt is usual to have both a production and staging or quality assurance environment. These environments are smaller clones of their production counterparts, and they're used to test new apps before they're released to the public. Maintaining an up-to-date staging environment gets increasingly difficult as the production environment grows larger and more complicated.\nTerraform may be used to codify the production environment, which can then be shared with staging, QA, and development. These settings can be used to quickly create new environments in which to test and then readily discarded. Terraform can help to reduce the challenge of sustaining parallel environments by making it possible to create and destroy them on the fly. Quick Creation of Environments: It is usual to have both a production and staging or quality assurance environment. These environments are smaller clones of their production counterparts, and they're used to test new apps before they're released to the public. Maintaining an up-to-date staging environment gets increasingly difficult as the production environment grows larger and more complicated.\nTerraform may be used to codify the production environment, which can then be shared with staging, QA, and development. These settings can be used to quickly create new environments in which to test and then readily discarded. Terraform can help to reduce the challenge of sustaining parallel environments by making it possible to create and destroy them on the fly. It is usual to have both a production and staging or quality assurance environment. These environments are smaller clones of their production counterparts, and they're used to test new apps before they're released to the public. Maintaining an up-to-date staging environment gets increasingly difficult as the production environment grows larger and more complicated. Terraform may be used to codify the production environment, which can then be shared with staging, QA, and development. These settings can be used to quickly create new environments in which to test and then readily discarded. Terraform can help to reduce the challenge of sustaining parallel environments by making it possible to create and destroy them on the fly. Deployment of Multiple Clouds: \nTo boost fault tolerance, it's common to disperse infrastructure across different clouds. When only one region or cloud provider is used, fault tolerance is restricted by that provider's availability. When a region or an entire provider goes down, a multi-cloud strategy provides for more gentle recovery.\nBecause many existing infrastructure management solutions are cloud-specific, implementing multi-cloud installations can be difficult. Terraform is cloud-agnostic, allowing you to manage numerous providers and even cross-cloud dependencies with a single configuration. This helps operators develop large-scale multi-cloud infrastructures by simplifying management and orchestration. Deployment of Multiple Clouds: To boost fault tolerance, it's common to disperse infrastructure across different clouds. When only one region or cloud provider is used, fault tolerance is restricted by that provider's availability. When a region or an entire provider goes down, a multi-cloud strategy provides for more gentle recovery.\nBecause many existing infrastructure management solutions are cloud-specific, implementing multi-cloud installations can be difficult. Terraform is cloud-agnostic, allowing you to manage numerous providers and even cross-cloud dependencies with a single configuration. This helps operators develop large-scale multi-cloud infrastructures by simplifying management and orchestration. To boost fault tolerance, it's common to disperse infrastructure across different clouds. When only one region or cloud provider is used, fault tolerance is restricted by that provider's availability. When a region or an entire provider goes down, a multi-cloud strategy provides for more gentle recovery. Because many existing infrastructure management solutions are cloud-specific, implementing multi-cloud installations can be difficult. Terraform is cloud-agnostic, allowing you to manage numerous providers and even cross-cloud dependencies with a single configuration. This helps operators develop large-scale multi-cloud infrastructures by simplifying management and orchestration. Applications with Multiple Tier Architecture: \nThe N-tier architecture is a relatively popular structure. A pool of web servers with a database tier is the most popular 2-tier system. API servers, cache servers, routing meshes, and more levels are added. Because the stages can be scaled individually and provide a separation of concerns, this structure is used.\nTerraform is a great tool for creating and managing these types of infrastructures. Terraform will automatically handle the dependencies between each layer if you arrange resources in each tier together. Before provisioning the web servers, Terraform will check that the database layer is up and running, as well as that the load balancers are linked to the web nodes. The count configuration value can then be changed in Terraform to quickly scale each tier. Because resource creation and provisioning are codified and automated, elastic scaling in response to load is a breeze. Applications with Multiple Tier Architecture: The N-tier architecture is a relatively popular structure. A pool of web servers with a database tier is the most popular 2-tier system. API servers, cache servers, routing meshes, and more levels are added. Because the stages can be scaled individually and provide a separation of concerns, this structure is used.\nTerraform is a great tool for creating and managing these types of infrastructures. Terraform will automatically handle the dependencies between each layer if you arrange resources in each tier together. Before provisioning the web servers, Terraform will check that the database layer is up and running, as well as that the load balancers are linked to the web nodes. The count configuration value can then be changed in Terraform to quickly scale each tier. Because resource creation and provisioning are codified and automated, elastic scaling in response to load is a breeze. The N-tier architecture is a relatively popular structure. A pool of web servers with a database tier is the most popular 2-tier system. API servers, cache servers, routing meshes, and more levels are added. Because the stages can be scaled individually and provide a separation of concerns, this structure is used. Terraform is a great tool for creating and managing these types of infrastructures. Terraform will automatically handle the dependencies between each layer if you arrange resources in each tier together. Before provisioning the web servers, Terraform will check that the database layer is up and running, as well as that the load balancers are linked to the web nodes. The count configuration value can then be changed in Terraform to quickly scale each tier. Because resource creation and provisioning are codified and automated, elastic scaling in response to load is a breeze. Schedulers of Resources:\nThe static assignment of applications to computers in large-scale infrastructures becomes increasingly difficult. There are a variety of schedulers available to handle this problem, including Borg, Mesos, YARN, and Kubernetes. These may be used to schedule Docker containers, Hadoop, Spark, and a variety of other software tools on a dynamic basis.\nTerraform isn't just for physical providers like Amazon Web Services. Terraform can request resources from resource schedulers because they can be treated as providers. This allows Terraform to work in layers, such as setting up the physical infrastructure that runs the schedulers and provisioning into the scheduled grid. Schedulers of Resources: The static assignment of applications to computers in large-scale infrastructures becomes increasingly difficult. There are a variety of schedulers available to handle this problem, including Borg, Mesos, YARN, and Kubernetes. These may be used to schedule Docker containers, Hadoop, Spark, and a variety of other software tools on a dynamic basis.\nTerraform isn't just for physical providers like Amazon Web Services. Terraform can request resources from resource schedulers because they can be treated as providers. This allows Terraform to work in layers, such as setting up the physical infrastructure that runs the schedulers and provisioning into the scheduled grid. The static assignment of applications to computers in large-scale infrastructures becomes increasingly difficult. There are a variety of schedulers available to handle this problem, including Borg, Mesos, YARN, and Kubernetes. These may be used to schedule Docker containers, Hadoop, Spark, and a variety of other software tools on a dynamic basis. Terraform isn't just for physical providers like Amazon Web Services. Terraform can request resources from resource schedulers because they can be treated as providers. This allows Terraform to work in layers, such as setting up the physical infrastructure that runs the schedulers and provisioning into the scheduled grid. Software-Defined Networking:\nSDN (Software Defined Networking) is becoming more common in data centers as it gives operators and developers more control over the network and allows the network to better support the applications running on top. A control layer and an infrastructure layer are common in SDN systems.\nTerraform may be used to codify software-defined network setup. By interacting with the control layer, Terraform may use this configuration to automatically set up and adjust settings. This makes it possible to version the settings and automate modifications. Terraform, for example, may be used to set up an AWS VPC. Software-Defined Networking: SDN (Software Defined Networking) is becoming more common in data centers as it gives operators and developers more control over the network and allows the network to better support the applications running on top. A control layer and an infrastructure layer are common in SDN systems.\nTerraform may be used to codify software-defined network setup. By interacting with the control layer, Terraform may use this configuration to automatically set up and adjust settings. This makes it possible to version the settings and automate modifications. Terraform, for example, may be used to set up an AWS VPC. SDN (Software Defined Networking) is becoming more common in data centers as it gives operators and developers more control over the network and allows the network to better support the applications running on top. A control layer and an infrastructure layer are common in SDN systems. Terraform may be used to codify software-defined network setup. By interacting with the control layer, Terraform may use this configuration to automatically set up and adjust settings. This makes it possible to version the settings and automate modifications. Terraform, for example, may be used to set up an AWS VPC. Demonstrations of software:\nModern software is becoming increasingly networked and distributed. Although solutions such as Vagrant exist to create virtualized environments for demos, demonstrating software on real infrastructure that more closely resembles production environments remains difficult.\nOn cloud providers like AWS, software authors can give a Terraform configuration to develop, provision, and bootstrap a demo. End customers may simply demo the programme on their own infrastructure, and settings like cluster size can be tweaked to more thoroughly test tools at any scale. Demonstrations of software: Modern software is becoming increasingly networked and distributed. Although solutions such as Vagrant exist to create virtualized environments for demos, demonstrating software on real infrastructure that more closely resembles production environments remains difficult.\nOn cloud providers like AWS, software authors can give a Terraform configuration to develop, provision, and bootstrap a demo. End customers may simply demo the programme on their own infrastructure, and settings like cluster size can be tweaked to more thoroughly test tools at any scale. Modern software is becoming increasingly networked and distributed. Although solutions such as Vagrant exist to create virtualized environments for demos, demonstrating software on real infrastructure that more closely resembles production environments remains difficult. On cloud providers like AWS, software authors can give a Terraform configuration to develop, provision, and bootstrap a demo. End customers may simply demo the programme on their own infrastructure, and settings like cluster size can be tweaked to more thoroughly test tools at any scale.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "1. How can you prevent Duplicate Resource Error in Terraform?",
        "answer": "Depending on the situation and the necessity, it can be accomplished in one of three ways. By destroying the resource, the Terraform code will no longer manage it.\nBy removing resources from APIs\nImporting action will also aid in resource elimination. By destroying the resource, the Terraform code will no longer manage it. By removing resources from APIs Importing action will also aid in resource elimination. Useful Resources Kubernetes\nAWS\nAzure\nDevops\nTerraform Tutorial\nTerraform Download\nComplete Technical Interview Guide Kubernetes Kubernetes AWS AWS Azure Azure Devops Devops Terraform Tutorial Terraform Tutorial Terraform Download Terraform Download Complete Technical Interview Guide Complete Technical Interview Guide",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "2. What do you understand about remote backend in the context of Terraform?",
        "answer": "Terraform's remote backend stores terraform state and can also conduct operations in the terraform cloud. terraform commands such as init, plan, apply, destroy , get, output, providers, state (sub-commands: list, mv, pull, push, rm, show), taint, untaint, validate, and many others can be run from a remote backend. It can be used with a single or several remote terraform cloud workspaces. You can utilise terraform cloud's run environment to conduct remote operations like terraform plan or terraform apply.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "3. What procedures should be taken to make a high-level object from one module available to the other module?",
        "answer": "The steps to make an object from one module available to the other module at a high level are as follows: The first step is to define an output variable in a resource configuration. The scope of local and to a module will not be declared until you define resource configuration details.\nNow you must specify the output variable of module A so that it can be utilised in the setup of other modules. You should establish a fresh new and up-to-date key name, with a value that is equal to the output variable of module A.\nYou must now create a file named variable.tf for module B. Create an input variable with the exact same name as the key you defined in module B inside this file. This variable permits the resource's dynamic setting in a module. Replicate the process to make this variable available to other modules as well. This is because the scope of the variable established here is limited to module B. The first step is to define an output variable in a resource configuration. The scope of local and to a module will not be declared until you define resource configuration details. Now you must specify the output variable of module A so that it can be utilised in the setup of other modules. You should establish a fresh new and up-to-date key name, with a value that is equal to the output variable of module A. You must now create a file named variable.tf for module B. Create an input variable with the exact same name as the key you defined in module B inside this file. This variable permits the resource's dynamic setting in a module. Replicate the process to make this variable available to other modules as well. This is because the scope of the variable established here is limited to module B.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "4. When something goes wrong, how will you control and handle rollbacks in Terraform?",
        "answer": "In our Version Control System, we need to recommit the previous code version to make it the new and current one. This would start the terraform run command, which would execute the old code. Because Terraform is more declarative, we will make sure that everything in the code reverts to its previous state. If the state file becomes corrupted, we would use Terraform Enterprise's State Rollback feature to restore the previous state.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "5. What do you know about Terraform core? What are the primary responsibilities of Terraform core?",
        "answer": "Terraform Core is a binary created in the Go programming language that is statically compiled. The compiled binary is the terraform command line tool (CLI), which is the starting point for anyone who wants to use Terraform. The source code can be found at github.com/hashicorp/terraform. The primary responsibilities of Terraform core includes: Reading and interpolating configuration files and modules using infrastructure as code\nManagement of the state of resources\nResource Graph Construction\nExecution of the plan\nCommunication with plugins through RPC Reading and interpolating configuration files and modules using infrastructure as code Management of the state of resources Resource Graph Construction Execution of the plan Communication with plugins through RPC",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "6. Explain State File Locking in the context of Terraform.",
        "answer": "Terraform's state file locking method prevents conflicts between numerous users doing the same task by blocking activities on a given state file. When one user unlocks the lock, only the other user has access to that state. Terraform will lock your state for any operations that potentially write state if your backend supports it. This prevents outsiders from gaining access to the lock and corrupting your state. All operations that have the potential to write state are automatically locked. There will be no indication that this is happening. Terraform will not continue if state locking fails. The -lock flag can be used to deactivate state locking for most tasks, although it is not advised. Terraform will send a status message if gaining the lock takes longer than planned. If your backend enables state locking, even if Terraform doesn't send a message, it still happens.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "7. What do you know about Terragrunt? What are its uses?",
        "answer": "Terragrunt is a lightweight wrapper that adds extra features for maintaining DRY configurations, dealing with many Terraform modules, and managing remote state.   Following are the use cases of Terragrunt: To Keep Our Background Configuration DRY (Don’t Repeat Yourself): By setting your backend configuration once in a root location and inheriting that information in all child modules, Terragrunt helps you to keep it DRY (\"Don't Repeat Yourself\").\nTo Keep Our Provider Configuration DRY: It might be difficult to unify provider configurations across all of your modules, especially if you wish to alter authentication credentials. You may use Terragrunt to refactor common Terraform code and keep your Terraform modules DRY by using it. The provider configurations can be defined once at a root location, just like the backend configuration.\nTo Keep Our Terraform Command Line Interface arguments DRY: In the Terraform universe, CLI flags are another typical source of copy/paste. It can be difficult and error-prone to have to remember these -var-file options every time. By declaring your CLI parameters as code in your terragrunt.hcl settings, Terragrunt helps you to keep your CLI arguments DRY.\nTo Promote Terraform modules that are immutable and versioned across environments: Large modules should be considered hazardous, according to one of the most important lessons we've learnt from building hundreds of thousands of lines of infrastructure code. That is, defining all of your environments (dev, stage, prod, and so on) or even a huge amount of infrastructure (servers, databases, load balancers, DNS, and so on) in a single Terraform module is a Bad Idea. Large modules are slow, insecure, difficult to update, code review, test, and are brittle. Terragrunt lets you define your Terraform code once and then promote a versioned, immutable \"artifact\" of that code from one environment to the next. To Keep Our Background Configuration DRY (Don’t Repeat Yourself): By setting your backend configuration once in a root location and inheriting that information in all child modules, Terragrunt helps you to keep it DRY (\"Don't Repeat Yourself\"). To Keep Our Background Configuration DRY (Don’t Repeat Yourself): To Keep Our Provider Configuration DRY: It might be difficult to unify provider configurations across all of your modules, especially if you wish to alter authentication credentials. You may use Terragrunt to refactor common Terraform code and keep your Terraform modules DRY by using it. The provider configurations can be defined once at a root location, just like the backend configuration. To Keep Our Provider Configuration DRY: To Keep Our Terraform Command Line Interface arguments DRY: In the Terraform universe, CLI flags are another typical source of copy/paste. It can be difficult and error-prone to have to remember these -var-file options every time. By declaring your CLI parameters as code in your terragrunt.hcl settings, Terragrunt helps you to keep your CLI arguments DRY. To Keep Our Terraform Command Line Interface arguments DRY: To Promote Terraform modules that are immutable and versioned across environments: Large modules should be considered hazardous, according to one of the most important lessons we've learnt from building hundreds of thousands of lines of infrastructure code. That is, defining all of your environments (dev, stage, prod, and so on) or even a huge amount of infrastructure (servers, databases, load balancers, DNS, and so on) in a single Terraform module is a Bad Idea. Large modules are slow, insecure, difficult to update, code review, test, and are brittle. Terragrunt lets you define your Terraform code once and then promote a versioned, immutable \"artifact\" of that code from one environment to the next. To Promote Terraform modules that are immutable and versioned across environments:",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "8. Explain the command terraform fmt in the context of Terraform.",
        "answer": "Terraform configuration files are rewritten using the terraform fmt command in a consistent structure and style. This command uses a subset of the Terraform language style conventions, as well as some small readability tweaks. Other Terraform commands that produce Terraform configuration will produce files that follow the terraform fmt style, therefore following this style in your own files will assure consistency. Because formatting selections are always subjective, you may disagree with terraform fmt's choices. This command is purposely opinionated and lacks customization options because its primary goal is to promote stylistic consistency throughout Terraform codebases, even though the chosen style will never be everyone's favourite. Syntax: Syntax: terraform fmt [options] DIR terraform fmt [options] DIR By default, fmt looks for configuration files in the current directory. If the dir option is provided, it will instead scan the specified directory. The following are the flags that are available: -list=false - This option doesn't show files with discrepancies in formatting.\n-write=false - This option prevents the input files from being overwritten. (When the input is STDIN or -check, this is implied.)\n-diff - Shows the differences in formatting modifications.\n-check - Verifies that the input is properly formatted. If all input is properly formatted, the exit status will be 0, else it will be non-zero.\n-recursive - Process files from subdirectories as well. -list=false - This option doesn't show files with discrepancies in formatting. -list=false -write=false - This option prevents the input files from being overwritten. (When the input is STDIN or -check, this is implied.) -write=false -diff - Shows the differences in formatting modifications. -diff -check - Verifies that the input is properly formatted. If all input is properly formatted, the exit status will be 0, else it will be non-zero. -check -recursive - Process files from subdirectories as well. -recursive",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "9. What do you mean by a Virtual Private Cloud (VPC)? Which command do you use in Terraform to use a VPC service?",
        "answer": "  A Virtual Private Cloud (VPC) is a private virtual network within AWS where you can store all of your AWS services. It will have gateways, route tables, network access control lists (ACL), subnets, and security groups, and will be a logical data centre in AWS. When you create a service on a public cloud, it is effectively open to the rest of the world and can be vulnerable to internet attacks. You lock your instances down and secure them from outside threats by putting them inside a VPC. The VPC limits the types of traffic, IP addresses, and individuals who have access to your instances. This stops unauthorised users from accessing your resources and protects you from DDOS assaults. Because not all services require internet connection, they can be safely stored within a private network. You can then only allow particular machines to connect to the internet. We use the command aws_vpc to use a VPC Service in Terraform.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "10. Differentiate between Terraform and Ansible.",
        "answer": "Ansible : Ansible is a remarkably straightforward IT automation technology. Configuration management, application deployment, cloud provisioning, ad-hoc task execution, network automation, and multi-node orchestration are all handled by this software. Complex modifications, such as zero-downtime rolling updates with load balancers, are simple using Ansible. Ansible : Ansible Following table lists the differences between Ansible and Terraform:   Terraform Ansible \nTerraform is a tool for provisioning. Ansible is a tool for managing configurations.\nIt uses a declarative Infrastructure as Code methodology. It takes a procedural method.\nIt's ideal for orchestrating cloud services and building cloud infrastructure from the ground up. It is mostly used to configure servers with the appropriate software and to update resources that have previously been configured.\nBy default, Terraform does not allow bare metal provisioning.  The provisioning of bare metal servers is supported by Ansible.\nIn terms of packing and templating, it does not provide better support. It includes complete packaging and templating support.\nIt is strongly influenced by lifecycle or state management. It doesn't have any kind of lifecycle management. It does not store the state. Terraform Ansible \nTerraform is a tool for provisioning. Ansible is a tool for managing configurations.\nIt uses a declarative Infrastructure as Code methodology. It takes a procedural method.\nIt's ideal for orchestrating cloud services and building cloud infrastructure from the ground up. It is mostly used to configure servers with the appropriate software and to update resources that have previously been configured.\nBy default, Terraform does not allow bare metal provisioning.  The provisioning of bare metal servers is supported by Ansible.\nIn terms of packing and templating, it does not provide better support. It includes complete packaging and templating support.\nIt is strongly influenced by lifecycle or state management. It doesn't have any kind of lifecycle management. It does not store the state. Terraform Ansible Terraform Ansible Terraform Ansible Terraform is a tool for provisioning. Ansible is a tool for managing configurations.\nIt uses a declarative Infrastructure as Code methodology. It takes a procedural method.\nIt's ideal for orchestrating cloud services and building cloud infrastructure from the ground up. It is mostly used to configure servers with the appropriate software and to update resources that have previously been configured.\nBy default, Terraform does not allow bare metal provisioning.  The provisioning of bare metal servers is supported by Ansible.\nIn terms of packing and templating, it does not provide better support. It includes complete packaging and templating support.\nIt is strongly influenced by lifecycle or state management. It doesn't have any kind of lifecycle management. It does not store the state. Terraform is a tool for provisioning. Ansible is a tool for managing configurations. Terraform is a tool for provisioning. Ansible is a tool for managing configurations. It uses a declarative Infrastructure as Code methodology. It takes a procedural method. It uses a declarative Infrastructure as Code methodology. It takes a procedural method. It's ideal for orchestrating cloud services and building cloud infrastructure from the ground up. It is mostly used to configure servers with the appropriate software and to update resources that have previously been configured. It's ideal for orchestrating cloud services and building cloud infrastructure from the ground up. It is mostly used to configure servers with the appropriate software and to update resources that have previously been configured. By default, Terraform does not allow bare metal provisioning.  The provisioning of bare metal servers is supported by Ansible. By default, Terraform does not allow bare metal provisioning. The provisioning of bare metal servers is supported by Ansible. In terms of packing and templating, it does not provide better support. It includes complete packaging and templating support. In terms of packing and templating, it does not provide better support. It includes complete packaging and templating support. It is strongly influenced by lifecycle or state management. It doesn't have any kind of lifecycle management. It does not store the state. It is strongly influenced by lifecycle or state management. It doesn't have any kind of lifecycle management. It does not store the state.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "11. Explain the command terraform taint in the context of Terraform.",
        "answer": "Terraform receives notification from the terraform taint command that a specific item has been degraded or damaged. This is represented by Terraform designating the item as \"tainted\" in the Terraform state, in which case Terraform will suggest replacing it in the next plan you write. If you want to compel the replacement of a specific object despite the fact that no configuration modifications are required, using the terraform apply -replace option is preferred. Utilizing the \"replace\" option while creating a plan is preferable to using terraform taint because it allows you to see the entire impact of the alteration before taking any externally visible action. When you utilise terraform taint to achieve a similar impact, you run the danger of someone else on your team devising a new strategy to counter your tainted object before you've had a chance to consider the implications. Syntax: Syntax: terraform taint [options] address terraform taint [options] address The address option specifies the location of the infected resource. The following options are available with this command: -allow-missing - Even if the resource is absent, the command will succeed (exit code 0) if it is supplied. Other scenarios, such as a problem reading or writing the state, may cause the command to return an error.\n-lock=false - Turns off Terraform's default behaviour of attempting to lock the state for the duration of the operation.\n-lock-timeout=DURATION - Instructs Terraform to reattempt procuring a lock for a period of time before issuing an error, unless locking is disabled with -lock=false. A number followed by a time unit letter, such as \"3s\" for three seconds, is the duration syntax. -allow-missing - Even if the resource is absent, the command will succeed (exit code 0) if it is supplied. Other scenarios, such as a problem reading or writing the state, may cause the command to return an error. -allow-missing -lock=false - Turns off Terraform's default behaviour of attempting to lock the state for the duration of the operation. -lock=false -lock-timeout=DURATION - Instructs Terraform to reattempt procuring a lock for a period of time before issuing an error, unless locking is disabled with -lock=false. A number followed by a time unit letter, such as \"3s\" for three seconds, is the duration syntax. -lock-timeout=DURATION",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "12. Differentiate between Terraform and Cloudformation.",
        "answer": "The following points highlight the differences between Terraform and Cloudformation:   User-friendliness: \nTerraform encompasses numerous Cloud Service Providers such as AWS, Azure, Google Cloud Platform, and many more, while CloudFormation is limited to AWS services. Terraform covers the majority of AWS resources.\nBased on language: \nCloudFormation employs either JSON or YAML as a language. CloudFormation is now simple to read and manage. However, AWS developers are restricted from creating CloudFormation templates that are more than 51MB in size. Developers must establish a layered stack for the templates if the template exceeds this size restriction.\nTerraform, on the other hand, makes use of Hashicorp's own HCL language (Hashicorp Configuration Language). This language is also JSON compatible.\nState-management: \nBecause CloudFormation is an AWS managed service, it examines the infrastructure on a regular basis to see if the provisioned infrastructure is still in good shape. If anything changes, CloudFormation receives a thorough response.\nTerraform, on the other hand, saves the state of the infrastructure on the provisioning machine, which can be either a virtual machine or a remote computer. The state is saved as a JSON file, which Terraform uses as a map to describe the resources it manages.\nTo summarise, Cloudformation's state is managed out-of-the-box by CloudFormation, which prevents conflicting updates. Terraform stores the state on a local disk, which makes it easier to synchronise the state. Terraform states can also be saved in storage services like S3, which is another recommended practice for state management. This must be defined on the backend, making management easier and safer.\nCost:\nThe nicest aspect about both of these tools is that they are both completely free. Both of these technologies have sizable communities that provide plenty of help and examples. Cloudformation is completely free. The only expense that consumers pay is for the AWS service that CloudFormation provides. Terraform is a completely free and open-source application. Terraform, on the other hand, includes a premium enterprise version with more collaboration and governance features.\nIntegration of Multiple Clouds:\nTerraform is the way to go if you want to supply services across several cloud platforms. While Terraform works with a variety of cloud providers, including AWS, GCP, Azure, and others, CloudFormation is exclusive to AWS. Cloudformation is not for you if your setup includes several cloud installations. If you're using AWS resources like EC2, S3, and so on, you should stick to Cloudformation. User-friendliness: \nTerraform encompasses numerous Cloud Service Providers such as AWS, Azure, Google Cloud Platform, and many more, while CloudFormation is limited to AWS services. Terraform covers the majority of AWS resources. User-friendliness: Terraform encompasses numerous Cloud Service Providers such as AWS, Azure, Google Cloud Platform, and many more, while CloudFormation is limited to AWS services. Terraform covers the majority of AWS resources. Terraform encompasses numerous Cloud Service Providers such as AWS, Azure, Google Cloud Platform, and many more, while CloudFormation is limited to AWS services. Terraform covers the majority of AWS resources. Based on language: \nCloudFormation employs either JSON or YAML as a language. CloudFormation is now simple to read and manage. However, AWS developers are restricted from creating CloudFormation templates that are more than 51MB in size. Developers must establish a layered stack for the templates if the template exceeds this size restriction.\nTerraform, on the other hand, makes use of Hashicorp's own HCL language (Hashicorp Configuration Language). This language is also JSON compatible. Based on language: CloudFormation employs either JSON or YAML as a language. CloudFormation is now simple to read and manage. However, AWS developers are restricted from creating CloudFormation templates that are more than 51MB in size. Developers must establish a layered stack for the templates if the template exceeds this size restriction.\nTerraform, on the other hand, makes use of Hashicorp's own HCL language (Hashicorp Configuration Language). This language is also JSON compatible. CloudFormation employs either JSON or YAML as a language. CloudFormation is now simple to read and manage. However, AWS developers are restricted from creating CloudFormation templates that are more than 51MB in size. Developers must establish a layered stack for the templates if the template exceeds this size restriction. Terraform, on the other hand, makes use of Hashicorp's own HCL language (Hashicorp Configuration Language). This language is also JSON compatible. State-management: \nBecause CloudFormation is an AWS managed service, it examines the infrastructure on a regular basis to see if the provisioned infrastructure is still in good shape. If anything changes, CloudFormation receives a thorough response.\nTerraform, on the other hand, saves the state of the infrastructure on the provisioning machine, which can be either a virtual machine or a remote computer. The state is saved as a JSON file, which Terraform uses as a map to describe the resources it manages.\nTo summarise, Cloudformation's state is managed out-of-the-box by CloudFormation, which prevents conflicting updates. Terraform stores the state on a local disk, which makes it easier to synchronise the state. Terraform states can also be saved in storage services like S3, which is another recommended practice for state management. This must be defined on the backend, making management easier and safer. State-management: Because CloudFormation is an AWS managed service, it examines the infrastructure on a regular basis to see if the provisioned infrastructure is still in good shape. If anything changes, CloudFormation receives a thorough response.\nTerraform, on the other hand, saves the state of the infrastructure on the provisioning machine, which can be either a virtual machine or a remote computer. The state is saved as a JSON file, which Terraform uses as a map to describe the resources it manages.\nTo summarise, Cloudformation's state is managed out-of-the-box by CloudFormation, which prevents conflicting updates. Terraform stores the state on a local disk, which makes it easier to synchronise the state. Terraform states can also be saved in storage services like S3, which is another recommended practice for state management. This must be defined on the backend, making management easier and safer. Because CloudFormation is an AWS managed service, it examines the infrastructure on a regular basis to see if the provisioned infrastructure is still in good shape. If anything changes, CloudFormation receives a thorough response. Terraform, on the other hand, saves the state of the infrastructure on the provisioning machine, which can be either a virtual machine or a remote computer. The state is saved as a JSON file, which Terraform uses as a map to describe the resources it manages. To summarise, Cloudformation's state is managed out-of-the-box by CloudFormation, which prevents conflicting updates. Terraform stores the state on a local disk, which makes it easier to synchronise the state. Terraform states can also be saved in storage services like S3, which is another recommended practice for state management. This must be defined on the backend, making management easier and safer. Cost:\nThe nicest aspect about both of these tools is that they are both completely free. Both of these technologies have sizable communities that provide plenty of help and examples. Cloudformation is completely free. The only expense that consumers pay is for the AWS service that CloudFormation provides. Terraform is a completely free and open-source application. Terraform, on the other hand, includes a premium enterprise version with more collaboration and governance features. Cost: The nicest aspect about both of these tools is that they are both completely free. Both of these technologies have sizable communities that provide plenty of help and examples. Cloudformation is completely free. The only expense that consumers pay is for the AWS service that CloudFormation provides. Terraform is a completely free and open-source application. Terraform, on the other hand, includes a premium enterprise version with more collaboration and governance features. The nicest aspect about both of these tools is that they are both completely free. Both of these technologies have sizable communities that provide plenty of help and examples. Cloudformation is completely free. The only expense that consumers pay is for the AWS service that CloudFormation provides. Terraform is a completely free and open-source application. Terraform, on the other hand, includes a premium enterprise version with more collaboration and governance features. Integration of Multiple Clouds:\nTerraform is the way to go if you want to supply services across several cloud platforms. While Terraform works with a variety of cloud providers, including AWS, GCP, Azure, and others, CloudFormation is exclusive to AWS. Cloudformation is not for you if your setup includes several cloud installations. If you're using AWS resources like EC2, S3, and so on, you should stick to Cloudformation. Integration of Multiple Clouds: Terraform is the way to go if you want to supply services across several cloud platforms. While Terraform works with a variety of cloud providers, including AWS, GCP, Azure, and others, CloudFormation is exclusive to AWS. Cloudformation is not for you if your setup includes several cloud installations. If you're using AWS resources like EC2, S3, and so on, you should stick to Cloudformation. Terraform is the way to go if you want to supply services across several cloud platforms. While Terraform works with a variety of cloud providers, including AWS, GCP, Azure, and others, CloudFormation is exclusive to AWS. Cloudformation is not for you if your setup includes several cloud installations. If you're using AWS resources like EC2, S3, and so on, you should stick to Cloudformation.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "13. Explain the architecture of Terraform request flow.",
        "answer": "A request in Terraform undergoes the following steps as shown in the diagram:   Following are the different components in the above architecture: Command Line Interface (CLI): Command Line Interface (CLI): CLI (Common Language Interface) (command package) Aside from some early bootstrapping in the root package (not shown in the diagram), when a user starts the terraform application, execution jumps right into one of the command package's \"command\" implementations. The commands.go file in the repository's root directory contains the mapping between user-facing command names and their respective command package types. The job of the command implementation for these commands is to read and parse any command line arguments, command-line options, and environment variables required for the given command and use them to generate a backend.operation object. The operation is then transferred to the backend that is currently selected. Backends: Backends: In Terraform, a backend has a variety of responsibilities: Carry out operations (e.g. plan, apply)\nTo save workspace-defined variables\nTo save state Carry out operations (e.g. plan, apply) To save workspace-defined variables To save state The local backend retrieves the current state for the workspace specified in the operation using a state manager (either statemgr.Filesystem if the local backend is being used directly, or an implementation provided by whatever backend is being wrapped), then uses the config loader to load and do initial processing/validation of the configuration specified in the operation. It then constructs a terraform.context object using these, as well as the other parameters specified in the procedure. The main object actually executes Terraform operations. Configuration Loader : Configuration Loader : Model types in package configs represent the top-level configuration structure. configs.Config represents an entire configuration (the root module and all of its child modules). Although the configs package offers some low-level functionality for creating configuration objects, the major entry point is via configload.Loader, which is found in the sub-package configload. When a configuration is loaded by a backend, a loader takes care of all the complexities of installing child modules (during terraform init) and then locating those modules again. It takes the path to a root module and loads all of the child modules in a recursive manner to create a single configs. State Manager: State Manager: The state manager is in charge of storing and retrieving snapshots of a workspace's Terraform state. Each manager is an implementation of a subset of the statemgr package's interfaces, with most practical managers implementing the entire set of statemgr.Full's operations . The smaller interfaces are mostly for use in other function signatures to be specific about what actions the function might perform on the state manager; there's no reason to design a state manager that doesn't implement all of statemgr. Full. Graph Builder: Graph Builder: The terraform.Context method invokes a graph builder. A graph builder is used to represent the essential steps for that operation and the dependence relationships between them. Because the graph-building process differs by operation, each has its own graph builder. A \"plan\" operation, for example, requires a graph created directly from the configuration, whereas an \"apply\" action creates its graph from the set of modifications stated in the plan being applied. Graph Walk: Graph Walk: The graph walking method visits each vertex of the graph in a fashion that respects the graph's \"happens after\" edges. Each vertex in the graph is assessed in such a way that the \"happens after\" edges are taken into account. The graph walk method will assess many vertices at the same time if possible. Vertex Evaluation: Vertex Evaluation: During a graph walk, the action executed for each vertex is referred to as execution. Execution performs a series of random operations that make sense for a given vertex type. Before the graph walk begins evaluating further vertices with \"happens after\" edges, a vertex must be complete correctly. When one or more errors occur during evaluation, the graph walk is interrupted and the errors are returned to the user.",
        "reference": "interviewbit.com",
        "role": "terraform"
    },
    {
        "question": "1) What is Terraform? / What do you understand by Terraform?",
        "answer": "Terraform is an open-source communication as system software tool created by HashiCorp. It is used to build an infrastructure for building, altering, and versioning transportation safely and professionally. Terraform can manage leading and popular service providers and in-house convention solutions.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "2) What are the most important features of Terraform?",
        "answer": "Following is a list of the most important features of Terraform:\nInfrastructure as Code: The high-level configuration language of Terraform is used to describe the infrastructure in declarative configuration files that are human-readable. It facilitates us to generate a blueprint that can be edited, shared, and reused.\nExecution Strategies: Before making any infrastructure modifications, Terraform develops an execution plan to describe what it will do and asks for your agreement. It facilitates us to evaluate the changes before Terraform produces, upgrades or destroys infrastructure.\nGraph of Resources: Terraform develops or alters non-dependent resources while simultaneously building a resource graph. This can be used to construct resources as quickly as possible while also providing more information about your infrastructure.\nAutomation of Change: Terraform can be used to automate the application of complex changesets to your infrastructure with little to no human intervention. Terraform also identifies what happens when you update configuration files and provides incremental execution plans that take dependencies into account.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "3) Are callbacks possible with Terraform on Azure?",
        "answer": "Callbacks are possible by using the Azure Event Hubs. Terraform's Azure supplier provides effortless functionality to users, and Microsoft Azure Cloud Shell provides an already installed Terraform occurrence.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "4) What are the main reasons for choosing Terraform for DevOps?",
        "answer": "Following are the main reasons for choosing Terraform for DevOps:\nFollowing are the reasons for choosing Terraform for DevOps:\nADVERTISEMENT\nTerraform is preferred for DevOps because it can do complete orchestration and not just configuration management such as Ansible and Puppet.\nIt provides amazing support to almost all the popular cloud providers like AWS, Azure, GCP, DigitalOcean, etc.\nIt can easily manage the configuration of an immutable (dynamic) infrastructure.\nIt provides an immutable infrastructure where configuration changes smoothly.\nIt works on HCL (HashiCorp Configuration Language), which is very easy to learn and understand.\nIt is easily portable from one provider to another.\nThe installation of Terraform for DevOps is easy.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "5) What do you understand by Terraform init?",
        "answer": "Terraform init is a control used to initialize an operational index containing Terraform pattern files. This control is the first command that should be run after writing the new Terraform design and can be looped multiple times.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "6) What is the null resource in Terraform?",
        "answer": "The null_resource is used to implement a standard resource library, but no further action is taken. The triggers argument allows an arbitrary set of values that will cause the replacement of resources when changed.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "7) What is Terraform D?",
        "answer": "Terraform D is a plugin used on most in-service systems and Windows. Terraform init by default searches next directories for plugins.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "8) What do you understand by Terraform backend?",
        "answer": "The Terraform backend is used to specify how an operation is executed and how the state is loaded. It uses the 'local' backend by default. The abstraction enables remote execution, non-local file state storage, etc.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "terraform\" directory?",
        "answer": "The \".terraform\" directory is a local cache where Terraform retains some files required for subsequent operations against this configuration. Its contents are not intended to be included in version control.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "10) What are some major competitors of Terraform?",
        "answer": "Following are some major competitors of Terraform:\nPacker\nCloud Foundry\nAnsible\nKubernetes",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "11) What is the usage of Terraform init?",
        "answer": "Terraform init is a command used to initialize the Terraform code. Let's see the all usage of Terraform init command:\nTerraform init command is used to initialize the working directory containing Terraform configuration files.\nIt is used for Plugin Installation.\nIt is also used for Child Module Installation.\nIt is used for Backend Initialization.\nYou can safely run this command multiple times.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "12) What do you understand by Terraform in AWS?",
        "answer": "In AWS, Terraform is an infrastructure as a code tool. It facilitates us to store our Amazon Web Services infrastructure and produce an update, and it is very similar to AWS Cloud Formation.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "13) Why is Terraform used for DevOps?",
        "answer": "Terraform is preferred to use for DevOps because it facilitates us to manage infrastructure as code. The infrastructure as code is the foundation for DevOps practices such as continuous integration, version control, continuous deployment, and code review.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "14) What is the full form of IAC in the context of Terraform?",
        "answer": "The full form of the term IAC is \"Infrastructure as Code\". IaC refers to a scheme whereby developers can run and provision the computer data center's mechanically instead of getting into a physical process. For example, Terraform is a case tool of IaC.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "15) What do you understand by Oracle Cloud Infrastructure?",
        "answer": "Oracle Cloud Infrastructure is a cloud computing service offered by Oracle Corporation. It provides storage, servers, applications, services, and networks through a global network of managed data centers by Oracle Corporation. These services are provisioned on-demand over the Internet by the company.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "16) Is Terraform cloud-agostic? If yes, then what does it mean?",
        "answer": "Yes, Terraform is cloud-agostic and allows a single configuration to manage multiple providers and handle cross-cloud dependencies. It is also used to simplify management and orchestration, facilitates operators to build large-scale multi-cloud infrastructures.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "17) What do you understand by Terraform providers?",
        "answer": "Providers are plugins on that Terraform relies to interact with cloud providers, SaaS providers, and other APIs. The Terraform configurations have to declare which providers they require so that Terraform can install and use them. Some Terraform providers require configuration such as endpoint URLs or cloud regions before using them.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "18) What is the use of Terraform provider?",
        "answer": "Terraform providers add a set of resource types and data sources that Terraform can manage.\nA provider implements every resource type; without providers, Terraform can't manage any infrastructure.\nTerraform providers configure a specific infrastructure platform (either cloud or self-hosted).\nTerraform providers can also offer local utilities for tasks such as generating random numbers for unique resource names.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "19) What do you understand by Terraform Backends? What are the most recommended Backends we should use?",
        "answer": "Terraform backends are used to define where and how operations are performed, where state snapshots are stored, etc. Each Terraform configuration can specify a backend.\nFollowing are the two types of most recommended Terraform Backends:\nIf the new users are still learning how to use Terraform, the default \"local\" backend is most recommended, which requires no configuration.\nFor the expert users, if they or their team are using Terraform to manage meaningful infrastructure, the most recommended backend is the \"remote\" backend with Terraform Cloud or Terraform Enterprise.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "20) What are the biggest competitors of Terraform?",
        "answer": "The following list specifies some of the biggest competitors of Terraform:\nAnsible\nKubernetes\nTurbonomic\nCloudBolt\nAzure Management Tools\nMorpheus\nCloudHealth\nApptio Cloudability\nPlatform9 Managed Kubernetes etc.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "21) What is the working of Terraform core?",
        "answer": "The Terraform core is used to look after the configuration monitoring and create analysis and evaluation based on the configuration. It is also used to keep track and compare the current and previous versions and display the output through the terminal.\nTerraform core mainly takes two inputs:\nThe first one is Terraform Configuration, used to keep track of the infrastructure detail.\nThe second one is Terraform state that is used to keep track of the infrastructure status.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "22) What is the usage of provisioners in Terraform?",
        "answer": "In Terraform, provisioners are used to preparing servers or other infrastructure objects for service. They are used on the local machine as well as on the remote machines.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "23) What are some Built-in provisioners available in Terraform?",
        "answer": "Following is the list of some Built-in provisioners in Terraform:\nFile Provisioner\nChef Provisioner\nHabitat Provisioner\nPuppet Provisioner\nLocal-exec Provisioner\nRemote-exec Provisioner\nSalt-masterless Provisioner",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "24) What do you understand by Terraform cloud? What are the benefits of using it?",
        "answer": "The Terraform cloud is a collaboration tool for teams using Terraform. It is a platform that can make teams use Terraform together, either on-demand or in response to various events. Terraform Cloud is deeply integrated with Terraform's workflows and data, unlike a general-purpose continuous integration system. It can also use for easy access to shared state and secret data, detailed policy controls for updating infrastructure and governing the contents of Terraform, and many more.\nThe Terraform cloud is hosted as a service at https://app.terraform.io.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "25) What is Terraform Cloud for Business?",
        "answer": "Terraform Cloud for Business is very much similar to Terraform Cloud, and it also uses the same hosted environment as Terraform Cloud but with additional features for larger teams. It provides some additional features such as single sign-on, audit logging, and the ability to Terraform on-premise resources from the Cloud, etc.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "26) What are the usages of Terraform CLI?",
        "answer": "The Terraform CLI stands for Terraform Command Line Interface. It is used to manage infrastructure and interact with Terraform state, configuration files, providers, etc.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "27) What are some basic CLI commands?",
        "answer": "Following is a list of some basic CLI commands:\nterraform init: The terraform init CLI command is used to prepare a working directory for other commands.\nterraform destroy: The terraform destroy CLI command is used to destroy the previously-created infrastructure.\nterraform validate: The terraform validate CLI command is used to check whether the configuration is valid or not.\nterraform apply: The terraform apply CLI command is used to create or update the infrastructure.\nterraform plan: The terraform plan CLI command shows the changes needed by the current configuration.\nterraform refresh: The terraform refresh CLI command is used to refresh the state file.\nterraform graph: The terraform graph CLI command creates a DOT-formatted graph.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "28) What is the full form of Terraform HCL?",
        "answer": "The full form of Terraform HCL is Terraform HashiCorp Configuration Language. It is a configuration language built by HashiCorp Corporation. It is used to build a structured configuration language that is both human and machine-friendly for use with command-line tools but specifically targeted towards DevOps tools, servers, etc.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "29) What are the modules in Terraform?",
        "answer": "A Terraform module is a set of numerous resources used jointly. It is a single directory containing Terraform configuration files. A simple arrangement with a single directory having one or more files can be referred to as a module. The directory is called the root module when Terraform commands are run directly, and the files have the extension .tf. A module that is called by another configuration is called configuration's \"child module.\"",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "30) Is Terraform usable for an on-prem infrastructure?",
        "answer": "Yes, Terraform is usable for an on-prem infrastructure as it allows a lot of obtainable providers which we can choose according to the best usage by using an API.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "31) Does Terraform support multi-provider deployments?",
        "answer": "Yes, Terraform supports multi-provider deployments such as on-prem like Openstack, VMware, etc. We can manage SDN even using Terram too.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "32) What do you understand by the term IaC?",
        "answer": "The full form of IaC is \"Infrastructure as Code\". It specifies a system where developers can automatically manage the computer data centers instead of getting into a manual process. Terraform, for instance, is an example tool of IaC.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "33) What guidelines should we follow while using Terraform modules?",
        "answer": "Following is a list of some guidelines that should be followed while using Terraform modules:\nIf you want to publish to the Terraform Cloud or Terraform Enterprise module registries, you can use this convention terraform-<PROVIDER>-<NAME>.\nYou can select modules just after writing your setup. The benefits of using modules are that you can utilize them properly, even for somewhat complicated Terraform settings maintained by a single person.\nYou should use local modules to organize and encapsulate your code. Even if you aren't using or publishing remote modules, structuring your configuration in terms of modules from the start will dramatically minimize the time and effort required to maintain and update your setup as your infrastructure becomes more complicated.\nThe Terraform Registry is open to the public, where you can identify useful modules. You can create and implement your configuration more quickly and confidently without relying on the efforts of others to create common infrastructure scenarios.\nYou can publish and share modules with your team. Individuals handle the majority of infrastructure, and modules are a vital tool for teams to collaborate on infrastructure creation and maintenance.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "34) What can you do to ignore duplicate resource errors during Terraform apply?",
        "answer": "We can follow the steps given below to ignore duplicate resource errors during Terraform apply:\nYou can delete those resources from the cloud provider (API) and recreate them using Terraform.\nYou can delete those resources from Terraform code to stop its management.\nYou can do a Terraform import of the resource and remove the code trying to recreate them.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "35) What is the Remote Backend in Terraform?",
        "answer": "In Terraform, the Remote Backend is an extension used to state the status of Terraform and run the Terraform cloud operations. The backend operation consists of several commands to carry out all the operations of Terraform. The remote function can work on a single cloud workspace to access multiple fronts for executing remote applications like a plan or application.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "36) What are the version controls supported by Terraform?",
        "answer": "Following is the list of all version controls supported by Terraform:\nAzure DevOps Services\nAzure DevOps Server\nBitbucket Server\nBitbucket Cloud\nGitlab EE and CE\nGitlab.com\nGitHub Enterprise\nGitHub.com\nGitHub.com (OAuth)",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "37) Is there any way to lock the Terraform Module Versions?",
        "answer": "Yes, there is a way to lock the Terraform Module Versions. If the Terraform module registry is being used as a source, then the 'version' attribute can be used in the module in a configuration file of Terraform.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "38) What is the difference between Terraform and Cloudformation?",
        "answer": "The following table specifies the main differences between Terraform and Cloudformation:\nTerraform Cloudformation\nTerraform is more user-friendly as it encompasses numerous Cloud Service Providers such as AWS, Azure, Google Cloud Platform, and many more. CloudFormation is only limited to AWS services.\nTerraform saves the state of the infrastructure on a virtual machine or a remote computer. The state is saved as a JSON file used as a map to describe the resources it manages. The state of Cloudformation is managed out-of-the-box by CloudFormation, which prevents conflicting updates.\nTerraform is a completely free and open-source application. It provides a premium enterprise version with more collaboration and governance features. Cloudformation is completely free. Consumers have to pay only for the AWS service that CloudFormation provides.\nTerraform can work with various cloud providers such as AWS, GCP, Azure, etc. Cloudformation may be complicated if your setup requires several cloud installations. It is best for AWS resources such as EC2, S3, etc.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "39) How can we create a dependency between modules in Terraform?",
        "answer": "In Terraform, the dependencies between modules are generally created automatically by references, rather than explicitly using depends_on. In Terraform, there is no way to use depends_on variables.",
        "reference": "javatpoint.com",
        "role": "terraform"
    },
    {
        "question": "40) What do you understand by SDN or Software Defined Networking?",
        "answer": "The term SDN stands for Software Defined Networking. It is an approach used for network management that facilitates us to create dynamic, programmatically efficient network configurations to improve network performance and monitoring.",
        "reference": "javatpoint.com",
        "role": "terraform"
    }
]