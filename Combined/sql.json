[
    {
        "question": "1. What is a primary key?",
        "answer": "Primary keys are unique values used to identify records. Think of this as a unique identification card such as an Aadhar Card, or PAN Card of the data. It cannot have null values and must have a unique value just like your PAN Card number, or Aadhar Number. Only one primary key is allowed in one table (one Aadhar, or PAN Card per person). It can have one or more fields making the primary key a composite key. Now, we will write a query to demonstrate the use of a primary key for the employee table:\n // CREATE TABLE Employee ( ID int NOT NULL, Employee_name varchar(255) NOT NULL, Employee_designation varchar(255), Employee_Age int, PRIMARY KEY (ID) );",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "2. Explain the different types of SQL commands.",
        "answer": "Types of SQL Languages\nDDL: DDL is that part of SQL that defines the data structure of the database in the initial stage when the database is about to be created. It is mainly used to create and restructure database objects. Commands in DDL are:\nCreate table\nAlter table\nDrop table\nDML: DML is used to manipulate already existing data in a database, i.e., it helps users to retrieve and manipulate data. It is used to perform operations such as inserting data into the database through the insert command, updating data with the update command, and deleting data from the database through the delete command.\nDCL: DCL is used to control access to the data in the database. DCL commands are normally used to create objects related to user access and to control the distribution of privileges among users. The commands that are used in DCL are Grant and Revoke.\nTCL: TCL is used to control the changes made by DML commands. It also authorizes the statements to assemble in conjunction with logical transactions. The commands that are used in TCL are Commit, Rollback, Savepoint, Begin, and Transaction.\nAlso, Have a look at SQL Command Cheatsheet.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "3. Explain the types of SQL joins.",
        "answer": "There are four different types of SQL Joins: (Inner) Join: An inner join is used to retrieve the records that have matching values in tables involved in the join. It combines rows from two tables based on a related column and returns only the matching record. Inner Join is mostly used to join queries.\n SELECT * FROM Table_A JOIN Table_B; SELECT * FROM Table_A INNER JOIN Table_B; \nLeft (Outer) Join: The use of left join is to retrieve all the records or rows from the left and the matched ones from the right.\n SELECT * FROM Table_A A LEFT JOIN Table_B B ON A.col = B.col; \nRight (Outer) Join: The use of Right join is to retrieve all the records or rows from the right and the matched ones from the left.\n SELECT * FROM Table_A A RIGHT JOIN Table_B B ON A.col = B.col; \nFull (Outer) Join: The use of Full join is to retrieve the records that have a match either in the left table or the right table.\n SELECT * FROM Table_A A FULL JOIN Table_B B ON A.col = B.col; \nAce your next SQL interview with our expert-written Sql Join Query Interview Questions.\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "4. What are the uses of SQL?",
        "answer": "SQL databases are your data powerhouse. Using them, you can do the following:\nCreate New Databases: It is like planting seeds for future growth.\nInsert Data: You can add new information to your database, like filling out forms.\nDelete Data: Remove outdated information you no longer need. It’s cleaning house.\nUpdate Records: Modify existing data to keep it accurate and relevant.\nRetrieve Data: Fetch relevant data you need; think of it as using a library’s catalogue search.\nCreate/Drop Tables: Build or remove structures to organize your data; imagine setting up or taking down shelves in your garage.\nCreate Functions/Views: Customize how you access your data; this is creating shortcuts or custom views.\nConvert Data Types: Transform data into a different format; think of changing a recipe from metric to imperial.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "5. What is the ACID property in a database?",
        "answer": "When we talk about transactions, ACID here stands for Atomicity, Consistency, Isolation and Durability that acts as a checklist to check on reliability.\nAtomicity: It means either the whole transaction succeeds or none of it will do. It is like going to a departmental store and buying a complete range of items if one item is missing, you do not buy anything at all.\nConsistency: It is about how well the data sticks to the rules. Just imagine ensuring your recipe menu does all the steps correctly; in case any step is omitted or done wrongly then you will not serve the dish.\nIsolation: Picture it as managing multiple transactions without interference. For instance, in a busy kitchen where every chef has their own dish; no one will interfere with someone else’s recipe.\nDurability: Look at it as how well the transaction can stand against interruptions. You can think of this as having your message passed through despite harsh weather, once sent always delivered regardless of external factors.\nEnroll now in SQL course in Bangalore to learn more in-depth about SQL.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "6. What is normalization and what are its types?",
        "answer": "Data normalization is like tidying your house by arranging it into a city. This way, every information bit has its own storage, and nothing is dependent on something else except for when it’s necessary. Thus, we reduce chaos and ambiguity. It’s like sort of putting all the clothes into different boxes so that you can easily find them whenever you need them.\nThere are various types of Normalization which are discussed below:\nIn the First Normal Form (1NF), each data in your cell should be made up of only indivisible values as if ensuring that every house in your city has a single owner with no shared rooms or multiple keys.\nThe Second Normal Form (2NF) eliminates partial dependencies so that any non-key attribute is fully functionally dependent on the primary key. This is the same as every house in your city having one owner to avoid shared ownership.\nThe Third Normal Form (3NF) deals with transitive dependencies which means a non-key attribute must not transitively depend on another non-key attribute. It’s just like making sure house ownership in your city doesn’t rely on owning other things such as another car.\nBCNF is a stricter version of 3NF, where every functional dependency X -> Y, X is a super key, thus, all the rules are clear, and it makes the organization smooth. It is like a city plan to make sure that all the houses have a single owner who is the owner of the house himself without any intermediaries.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "7. What is the difference between DBMS and RDBMS?",
        "answer": "A Database Management System is like a normal paper filing cabinet in that each folder represents a data item. This behaves well when one is keeping a few pieces of information in a simple way. When the data becomes too much or when one wants to get a certain kind of information from the cabinet, it becomes hard to find. This happens because the files are unlinked or are unstructured. \nIn the case of Relational Database Management Systems, they are just like modern libraries that put books into tables with unique identification aspects. Therefore, any kind of data can be linked or grouped together so that we can be able to tap into vast amounts of information. Moreover, this helps us to understand the buried relations between the data.\nParameters DBMS RDBMS\nAccess Data elements need to be accessed separately Multiple data elements can be accessed at the same time\nRelationship Between Data No relationship between data Data in tables are related to each other\nNormalization It is not present It is present\nDistributed Database It does not support distributed databases. It supports distributed database\nData Storage Format Data is stored in either a navigational or hierarchical form Data is stored in a tabular structure with headers being the column names and the rows containing the corresponding values\nAmount of Data It deals with a small quantity of data It deals with a larger amount of data\nData Redundancy It is prevalent Keys and indexes do not allow data redundancy\nNumber of Users It supports a single user It supports multiple users\nData Fetching It is slower for large amounts of data It is speedy due to the relational approach\nData Security Low-security levels when it comes to data manipulation Multiple levels of data security exist\nSoftware and Hardware Requirements Low High\nExamples XML, Window Registry, etc. MySQL, SQL Server, Oracle, Microsoft Access, PostgreSQL, etc.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "8. What are the applications of SQL?",
        "answer": "Think of SQL as a toolbox for streamlining your information resources:\nData Integration Scripts: Equally, when writing data integration scripts, think of SQL as your personal data librarian. It helps you to combine various databases and sources into one single output.\nSetting and Running Analytical Queries: SQL allows you to question your data like an intelligent detective who can recognize patterns in the information provided.\nRetrieving Subsets of Information: For instance, it’s like a treasure map guiding you to specific pieces of information you want whether for processing transactions or analyzing while working with it.\nAdding, Updating, and Deleting Data: Using SQL is almost like reshaping and cleaning up raw material with some simple commands. With the help of SQL, inserting new records, modifying ones that already exist or removing some irrelevant information is only a matter of seconds.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "9. What are the subsets of SQL?",
        "answer": "Depending on what you want to do, SQL queries come primarily in four flavours:\nDDL (Data Definition Language): This is for defining the database structure.\nCREATE: to construct databases, tables and indexes.\nDROP: to drop databases, tables and views.\nALTER: change the table’s structure (e.g. adding or dropping columns).\nDML (Data Manipulation Language): It is used to manipulate data in the database.\nINSERT: For adding new records\nUPDATE: To modify existing records\nDELETE: Deleting of records\nSELECT INTO: Copying data from one table into another\nDCL (Data Control Language): These control user access rights and permissions.\nGRANT: Assigns privileges to database objects.\nREVOKE: Withdraws privileges granted earlier from a certain object in the database.\nTCL (Transaction Control Language): Basically, it consists of transaction management and commands that are used in the manipulation of that information within a given transaction.\nCOMMIT: To save changes permanently.\nROLLBACK: It undoes changes made during a transaction.\nSAVEPOINT: This defines a point where the current transaction can be rolled back too in case an error occurs. \nSET TRANSACTION: This is used for setting up transaction characteristics. \nTogether they ensure efficient management, security and integrity of your database.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "10. What is a DEFAULT constraint?",
        "answer": "Imagine you’re setting up a game with rules, and default constraints in SQL are like the default settings you establish before you start playing.\nDefining Default Values: Think of default constraints as setting the starting point for a game. You establish a default value for a column in a table, so if no other value is specified when you add a new record, it automatically gets this default value.\nExample: Let’s say you have a table for employee data, and you want to set a default salary for new employees. You can add a default constraint to the salary column, specifying that if no salary is provided, it defaults to a specific value, like $85,000.\nCreating a Default Constraint: It’s like creating a rule for your game. You start by creating a new table for your data. Then, when defining the structure of your table, you add a default constraint to the column where you want to apply the rule. This ensures that every time a new record is added to the table without specifying a value for that column, it automatically follows the default rule you’ve set.\nSo, default constraints in SQL act as handy rules that ensure consistency in your data, providing a default value unless you specify otherwise. It’s like having a safety net to catch any missing information and keep your database organized.\nAlso, learn from our blog on MySQL Interview Questions and Answers to crack any Interview.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "11. What is a UNIQUE constraint?",
        "answer": "Think of unique constraints as a lottery ticket. Just like we have different lottery numbers for every ticket, in the same manner, in the column where the unique constraint is applied, only unique values will be allowed.\n\nA PRIMARY KEY constraint will automatically have a UNIQUE constraint. However, unlike a PRIMARY KEY, multiple UNIQUE constraints are allowed per table.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "12. What is an index?",
        "answer": "The indexes in a database are like the index in a book. They are the ones to assist you in getting the info at a fast pace. For example, take a library where there is no catalogue, you would have to take a long time to find a book. The index is a tool that allows you to find books faster. Also, in the case of SQL, the index creation is the reason of the faster searches by means of the index which is the roadmap to the relevant data.\nSyntax:\nCREATE INDEX INDEX_NAME ON TABLE_NAME (COLUMN)",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "13. Explain the types of indexes.",
        "answer": "Primary Index: Think of it as the main key to a building. It is unique and provides entrance into all rooms. In the same way that a primary index in a database uniquely identifies each row and speeds up searches.\nSecondary Index: Imagine this like one departmental index in a noticeably big library. Whereas the primary index leads you to the book, the secondary index helps narrow down your search within specific sections, so you find it quicker.\nClustered Index: Picture this as organizing books on shelves with alphabetical titles. Consequently, it organizes data physically in a table that matches the sequence of the index thereby facilitating easy retrieval just like finding them on shelves well arranged.\nNon-Clustered Index: Just like card catalogues, a clustered index sorts out data on the shelf while a non-clustered index gives another lookup for some information that can be narrowed down further for ease in searching.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "14. What are entities and relationships?",
        "answer": "Visualize a database as a digital world where entities are the characters and relationships are the connections between them. \nEntities: Visualize entities as the characters in a novel, each one representing an individual, a location, or an item that keeps data. For instance, when considering employees, projects, and wages in company databases they appear as separate entities just like in any novel story.\nRelationships: Relationships are contacts that help to achieve this interconnection of the characters as it is done in stories. For example, within university information systems, the student entity is linked with the department entity because there is an association among them; it could be representative of various departments attended by students.\nSo, for example with regards to the database world, you can say that all casts involved are these entities and their relationships complete plot lines creating a narrative out of data.\n\nIntermediate SQL Interview Questions and Answers",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "15. What are SQL operators?",
        "answer": "SQL operators are the special keywords or characters that perform specific operations. They are also used in SQL queries. These operators can be used within the WHERE clause of SQL commands. Based on the specified condition, SQL operators filter the data.\nThe SQL operators can be categorized into the following types:\nArithmetic Operators:For mathematical operations on numerical data\naddition (+)\nsubtraction (-)\nmultiplication (*)\ndivision (/)\nremainder/modulus (%)\nLogical Operators: For evaluating the expressions and returning results in True or False\nALL\nAND\nANY\nISNULL\nEXISTS\nBETWEEN\nIN\nLIKE\nNOT\nOR\nUNIQUE\nComparison Operators: For comparisons of two values and checking whether they are the same or not\nequal to (=)\nnot equal to (!= or <>)\nless than (<),\ngreater than (>;)\nless than or equal to (&<=)\ngreater than or equal to (>=)\nnot less than (!<)\nnot greater than (!>)\nBitwise Operators: For bit manipulations between two expressions of integer type. It first performs the conversion of integers into binary bits and then applied operators\nAND (& symbol)\nOR (|, ^)\nNOT (~)\nCompound Operators: For operations on a variable before setting the variable’s result to the operation’s result\nAdd equals (+=)\nsubtract equals (-=)\nmultiply equals (*=)\ndivide equals (/=)\nmodulo equals (%=)\nString Operators: For concatenation and pattern matching of strings\n+ (String concatenation)\n+= (String concatenation assignment)\n% (Wildcard)\n[] (Character(s) matches)\n[^] (Character(s) not to match)\n_ (Wildcard match one character)",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "16. What do you mean by data integrity?",
        "answer": "Data integrity is like a loyal protector, guaranteeing data accuracy and consistency. It is there from the creation to deletion, like a lifelong companion. Integrity constraints are its rules that make sure that data is following the guidelines. It is your faithful friend, guaranteeing your data is correct and dependable.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "17. What is a data warehouse?",
        "answer": "A data warehouse is a large store of accumulated data, from a wide range of sources, within an organization. The data helps drive business decisions.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "18. How would you find the second highest salary from the following table?",
        "answer": "Code:\nselect * from employee\nselect max(e_salary) from employee \nwhere e_salary not in (select max(e_salary) \nfrom employee)\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "19. Why is the FLOOR function used in SQL Server?",
        "answer": "The FLOOR() function helps to find the largest integer value for a given number, which can be an equal or lesser number.\nAre you planning to learn SQL Server? Here is the SQL Certification training. Enroll now!",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "20. State the differences between clustered and non-clustered indexes",
        "answer": "Clustered Index: It is used to sort the rows of data by their key values. A clustered index is like the contents of a phone book. We can directly open the book on David’s index (for “David, Thompson”) and find information for all Davids right next to each other. Since the data are located next to each other, it helps a lot in fetching the data based on range-based queries. A clustered index is actually related to how the data is stored; only one clustered index is possible per table.\nNon-Clustered Index: It stores data at one location and indexes at another location. The index has pointers that point to the location of the data. As the indexes in a non-clustered index are stored in a different place, there can be many non-clustered indexes for a table.\n\nState the differences between the Clustered and Non-clustered indexesState the differences between the Clustered and Non-clustered indexes\nNow, we will see the major differences between clustered and non-clustered indexes:\nParameters Clustered Index Non-Clustered Index\nUsed For Sorting and storing records physically in memory Creating a logical order for data rows; pointers are used for physical data files\nMethods for Storing Stores data in the leaf nodes of the index Never stores data in the leaf nodes of the index\nSize Quite large Comparatively, small\nData Accessing Fast Slow\nAdditional Disk Space Not required Required to store indexes separately\nType of Key By default, the primary key of a table is a clustered index It can be used with the unique constraint on the table that acts as a composite key\nMain Feature Improves the performance of data retrieval Should be created on columns used in Joins",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "21. What do you know about CDC in SQL Server?",
        "answer": "CDC refers to change data capture. It captures recent INSERT, DELETE, and UPDATE activity applied to SQL Server tables. It records changes to SQL Server tables in a compatible format.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "22. What is the difference between SQL and MySQL?",
        "answer": "Now Let’s compare the difference between SQL and MySQL.\nSQL MySQL\nIt is a structured query language used in a database It is a database management system\nIt is used for query and operating database systems, It allows data handling, storing, and modification in an organized manner\nIt is always the same It keeps updating\nIt supports only a single storage engine It supports multiple storage engines\nThe server is independent During backup sessions, the server blocks the database",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "23. State the differences between SQL and PL/SQL",
        "answer": "SQL PL/SQL\nIt is a database structured query language It is a programming language for a database that uses SQL\nIt is an individual query that is used to execute DML and DDL commands It is a block of codes used to write the entire procedure or a function\nIt is a declarative and data-oriented language It is a procedural and application-oriented language\nIt is mainly used for data manipulation It is used for creating applications\nIt provides interaction with the database server It does not provide interaction with the database server\nIt cannot contain PL/SQL code It can contain SQL because it is an extension of SQL",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "24. What is the need for group functions in SQL?",
        "answer": "Group functions operate on a series of rows and return a single result for each group. COUNT(), MAX(), MIN(), SUM(), AVG(), and VARIANCE() are some of the most widely used group functions.\nEnroll now in SQL course in Bangalore to learn more in-depth about SQL.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "25. What do you understand about a character manipulation function?",
        "answer": "Character manipulation functions are used for the manipulation of character data types.\nSome of the character manipulation functions are as follows:\nUPPER: It returns the string in uppercase.\nSyntax:\nUPPER(‘string’)\nExample:\nSELECT UPPER(‘demo string’) from String;\nOutput:\nDEMO STRING\nLOWER: It returns the string in lowercase.\nSyntax:\nLOWER(‘STRING’)\nExample:\nSELECT LOWER (‘DEMO STRING’) from String\nOutput:\ndemo string\nINITCAP: It converts the first letter of the string to uppercase and retains others in lowercase.\nSyntax:\nInitcap(‘sTRING’)\nExample:\nSELECT Initcap(‘dATASET’) from String\nOutput:\nDataset\nCONCAT: It is used to concatenate two strings.\nSyntax:\nCONCAT(‘str1’,’str2’)\nExample:\nSELECT CONCAT(‘Data’,’Science’) from String\nOutput:\nData Science\nLENGTH: It is used to get the length of a string.\nSyntax:\nLENGTH(‘String’)\nExample:\nSELECT LENGTH(‘Hello World’) from String\nOutput: 11",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "26. What is AUTO_INCREMENT?",
        "answer": "AUTO_INCREMENT is used in SQL to automatically generate a unique number whenever a new record is inserted into a table.\nSince the primary key is unique for each record, this primary field is added as the AUTO_INCREMENT field so that it is incremented when a new record is inserted.\nThe AUTO-INCREMENT value starts at 1 and is incremented by 1 whenever a new record is inserted.\nSyntax:\nCREATE TABLE Employee(\nEmployee_id int NOT NULL AUTO-INCREMENT,\nEmployee_name varchar(255) NOT NULL,\nEmployee_designation varchar(255)\nAge int,\nPRIMARY KEY (Employee_id)\n)\nCheck out our Blog on PL/SQL Interview Questions to crack your SQL Interview.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "27. What is a “TRIGGER” in SQL?",
        "answer": "Triggers are the silent guardians of the database that are automatically fired upon the occurrence of an event such as data insertion, updating, or deletion. They are protective keepers who enforce the rules and do not tolerate any unauthorized changes likely to alter data illegally. The triggers are sentinels with an invisible break that protects the treasure.\nThe syntax used to generate the trigger function is as follows:\nCREATE TRIGGER trigger_name",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "28. Where are usernames and passwords stored in SQL Server?",
        "answer": "In SQL Server, usernames and passwords are stored in the main database in the sysxlogins table.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "29. What are the types of relationships in SQL Server databases?",
        "answer": "Relationships are developed by interlinking the columns of one table with the column of another table. There are three different types of relationships, which are as follows:\nOne-to-one relationship\nMany-to-one relationship\nMany-to-many relationship",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "30. How can you handle expectations in SQL Server?",
        "answer": "TRY and CATCH blocks handle exceptions in SQL Server. Put the SQL statement in the TRY block and write the code in the CATCH block to handle expectations. If there is an error in the code in the TRY block, then the control will automatically move to the CATCH block.\n\nAdvanced SQL Interview Questions for Experienced",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "31. Which command is used to find out the SQL Server version?",
        "answer": "The following command is used to identify the version of SQL Server:\nSelect SERVERPROPERTY('productversion')",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "32. What is the COALESCE function?",
        "answer": "The COALESCE function takes a set of inputs and returns the first non-null value.\nSyntax:\nCOALESCE(val1,val2,val3,……,nth val)\nExample:\nSELECT COALESCE(NULL, 1, 2, ‘MYSQL’)\nOutput:\n1",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "33. What do you know about magic tables in SQL Server?",
        "answer": "A magic table can be defined as a provisional logical table that is developed by an SQL Server for tasks such as insert, delete, or update (DML) operations. The operations recently performed on the rows are automatically stored in magic tables. Magic tables are not physical tables; they are just temporary internal tables.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "34. Explain Inner Join with an example.",
        "answer": "Inner Join gives us those records that have matching values in two tables.\nLet us assume that we have two tables: Table A and Table B. When we apply Inner Join to these two tables, we will get only records common to both Table A and Table B.\nSyntax:\nSELECT columns\nFROM table1\nINNER JOIN table2\nON table1.column_x=table2.column_y;\nExample:\nselect * from employee\nselect * from department\nOutput:\n\nNow, we will apply Inner Join to both these tables, where the e_dept column in the employee table is equal to the d_name column of the department table.\nSyntax:\nselect employee.e_name, employee.e_dept, department.d_name, department.d_location\nfrom employee inner join department\non\nemployee.e_dept=department.d_name\nOutput:\n\nAfter applying Inner Join, we have only those records where the departments match in both tables. As we can see, the matched departments are Support, Analytics, and Sales.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "35. What are the types of views in SQL?",
        "answer": "In SQL, the views are classified into four types. They are the following:\nSimple View: It is a view based on a single table and does not have a GROUP BY clause or other features.\nComplex View: It is a view built from several tables and includes a GROUP BY clause as well as functions.\nInline View: It is a view built on a subquery in the FROM clause, which provides a temporary table and simplifies a complicated query.\nMaterialized View: It is a view that saves both the definition and the details. It builds data replicas by physically preserving them.\n\nSQL Interview Questions for 3 Years Experienced",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "36. How many authentication modes are there in SQL Server? What are they?",
        "answer": "Two authentication modes are available in SQL Server. They are as follows:\nWindows Authentication Mode: It allows authentication for Windows but not for SQL Server.\nMixed Mode: It allows both types of authentication—Windows and SQL Server.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "37. What is a function in SQL Server?",
        "answer": "A function is an SQL Server database object. It is basically a set of SQL statements that allow input parameters, perform processing, and return results only. A function can only return a single value or table. The ability to insert, update, and delete records in database tables is not available.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "38. What is SQL Server Agent?",
        "answer": "SQL Server Agent plays an important role in the daily work of SQL Server administrators or DBAs. This is one of the important parts of SQL Server. The aim of the server agent is to easily implement tasks using a scheduler engine that enables the tasks to be performed at scheduled times. SQL Server Agent uses SQL Server to store scheduled management task information.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "39. What are views? Give an example.",
        "answer": "Views are virtual tables used to limit the tables that we want to display. Views are nothing but the result of an SQL statement that has a name associated with it. Since views are not physically present, they take less space to store.\n\nLet us consider an example. In the following employee table, say we want to perform multiple operations on the records with the gender “Female”. We can create a view-only table for the female employees from the entire employee table.\nNow, let us implement it on SQL Server.\nThis is the employee table:\nselect * from employee\n\nNow, we will write the syntax for the view.\nSyntax:\ncreate view female_employee as select * from employee where e_gender=’Female’\nselect * from female_employee\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "40. State the differences between views and tables.",
        "answer": "Views Tables\nA view is a virtual table that is extracted from a database. A table is structured with a set number of columns and a boundless number of rows.\nA view does not hold the data itself. A table contains data and stores it in databases.\nA view is utilized to query certain information contained in a few distinct tables. A table holds fundamental client information and cases of a characterized object.\nIn a view, we will get frequently queried information. In a table, changing the information in the database changes the information that appears in the view.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "41. What do you understand by Self Join? Explain using an example",
        "answer": "Self Join in SQL is used for joining a table with itself. Here, depending on some conditions, each row of the table is joined with itself and with other rows of the table.\nSyntax:\nSELECT a.column_name, b.column_name\nFROM table a, table b\nWHERE condition\nExample:\nConsider the customer table given below.\nID Name Age Address Salary\n1 Anand 32 Ahmedabad 2,000.00\n2 Abhishek 25 Delhi 1,500.00\n3 Shivam 23 Kota 2,000.00\n4 Vishal 25 Mumbai 6,500.00\n5 Sayeedul 27 Bhopal 8,500.00\n6 Amir 22 MP 4,500.00\n7 Arpit 24 Indore 10,000.00\nWe will now join the table using Self Join:\nSQL > SELECT a.ID, b.NAME, a.SALARY\nFROM CUSTOMERS a, CUSTOMERS b\nWHERE a.SALARY < b.SALARY;[/code] Output:\nID Name Salary\n2 Anand 1,500.00\n2 Abhishek 1,500.00\n1 Vishal 2,000.00\n2 Vishal 1,500.00\n3 Vishal 2,000.00\n6 Vishal 4,500.00\n1 Sayeedul 2,000.00\n2 Sayeedul 1,500.00\n3 Sayeedul 2,000.00\n4 Sayeedul 6,500.00\n6 Sayeedul 4,500.00\n1 Amir 2,000.00\n2 Amir 1,500.00\n3 Amir 2,000.00\n1 Arpit 2,000.00\n2 Arpit 1,500.00\n3 Arpit 2,000.00\n4 Arpit 6,500.00\n5 Arpit 8,500.00\n6 Arpit 4,500.00",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "42. What is the difference between Union and Union All operators?",
        "answer": "The union operator is used to combine the result set of two or more select statements. For example, the first select statement returns the fish shown in Image A, and the second statement returns the fish shown in Image B. The Union operator will then return the result of the two select statements as shown in Image A U B. If there is a record present in both tables, then we will get only one of them in the final result.\n\nSyntax:\nSELECT column_list FROM table1\nUnion:\nSELECT column_list FROM table2\nNow, we will execute it in the SQL Server.\nThese are the two tables in which we will use the Union operator.\n\nselect * from student_details1\nUnion:\nselect * from student_details2\nOutput:\n\nThe Union All operator gives all the records from both tables including the duplicates.\n\nLet us implement it in the SQL Server.\nSyntax:\nselect * from student_details1\nUnion All:\nselect * from student_details2\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "43. Can you identify the employee who has the third-highest salary from the given employee table (with salary-related data)?",
        "answer": "Consider the following employee table. In the table, Sabid has the third-highest salary (60,000).\nName Salary\nTarun 70,000\nSabid 60,000\nAdarsh 30,000\nVaibhav 80,000\nBelow is a simple query to find out which employee who has the third-highest salary. The functions RANK, DENSE RANK, and ROW NUMBER are used to obtain the increasing integer value by imposing the ORDER BY clause in the SELECT statement, based on the ordering of the rows. The ORDER BY clause is necessary when the RANK, DENSE RANK, or ROW NUMBER functions are used. On the other hand, the PARTITION BY clause is optional.\nWITH CTE AS\n(\nSELECT Name, Salary, RN = ROW_NUMBER() OVER (ORDER BY Salary DESC) FROM EMPLOYEE\n)\nSELECT Name, Salary FROM CTE WHERE RN =3",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "44. How would you find the second-highest salary in a table?",
        "answer": "There are several ways to find the second highest salary in a table.\nUsing the ORDER BY, LIMIT, and OFFSET Clauses:\nSELECT distinct(salary) from table_name ORDER BY salary DESC LIMIT 1 OFFSET 1;\nUsing Subquery:\nSELECT MAX(salary) AS salary \nFROM table_name WHERE salary <> (SELECT MAX(salary) \nFROM table_name);\n\n\nWhere,\ntable_name: your table name\nsalary: salary column present in your table",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "45. What is an effective way to prevent SQL injection in your queries?",
        "answer": "The effective way to prevent SQL injection attacks is through input validation and parameterized queries, which include prepared statements. The developer can sanitize all the inputs, not only just the web form input, because the application code should never use the input directly.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "46. What is the significance of an index in a database, and how do you use it?",
        "answer": "Database indexing helps the DBMS find the specific rows in a table very quickly. The most common database index is the B-tree Index. A B-tree index is a situation where the data has few distinct values, such as name, dates or state codes.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "47. What is the significance of transactions, and how do you ensure their consistency?",
        "answer": "Transactions help to ensure the data consistency and integrity of the data; they also protect against errors by grouping many actions into a single unit.\nTransaction funds from one account to another are the best example of ensuring data consistency;  the total value of the funds in both accounts is the same at the start and end of each transaction.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "48. How will you optimize a slow-moving SQL query? What are some of the optimization techniques?",
        "answer": "We can optimize a slow-moving SQL query by using indexing in the DBMS to find the specific rows in a table very quickly.\nThere are several optimization techniques:\nIndexing\nUsing Distinct\nHaving and Where clauses\nAvoiding correlated subqueries\nLimit\nColumn statistics\n\nSQL Interview Questions for 5 Years Experienced",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "49. What is wrong with the following SQL query?",
        "answer": "SELECT gender, AVG(age) FROM employee WHERE AVG(age)&>30 GROUP BY gender\nWhen this command is executed, it gives the following error:\nMsg 147, Level 16, State 1, Line 1\nAggregation may not appear in the WHERE clause unless it is in a subquery contained in the HAVING clause or a select list; the column being aggregated is an outer reference.\nMsg 147, Level 16, State 1, Line 1\nInvalid column name ‘gender’.\nThis means that whenever we work with aggregate functions and use the GROUP BY clause, we cannot use the WHERE clause. Therefore, instead of the WHERE clause, we should use the HAVING clause.\nWhen we use the HAVING clause, the GROUP BY clause should come first, followed by the HAVING clause.\nselect e_gender, avg(e_age) from employee group by e_gender having avg(e_age)>30\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "50. What do you know about the stuff() function?",
        "answer": "The stuff() function deletes a part of the string and then inserts another part into the string, starting at a specified position.\nSyntax:\nSTUFF(String1, Position, Length, String2)\nHere, String1 is the one that will be overwritten. The position indicates the starting location for overwriting the string. Length is the length of the substitute string, and String2 is the string that will overwrite String1.\nExample:\nselect stuff(‘SQL Tutorial’,1,3,’Python’)\nThis will change ‘SQL Tutorial’ to ‘Python Tutorial’\nOutput:\nPython Tutorial",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "51. What is a stored procedure? Give an example.",
        "answer": "A stored procedure is a prepared SQL code that can be saved and reused. In other words, we can consider a stored procedure to be a function consisting of many SQL statements to access the database system. We can consolidate several SQL statements into a stored procedure and execute them whenever and wherever required.\nA stored procedure can be used as a means of modular programming, i.e., we can create a stored procedure once, store it, and call it multiple times as required. This also supports faster execution when compared to executing multiple queries.\nSyntax:\nCREATE PROCEDURE procedure_name\nAS\nSql_statement\nGO;\nTo execute we will use this:\nEXEC procedure_name\nExample:\nWe are going to create a stored procedure that will help us extract the age of the employees.\ncreate procedure employee_age\nas\nselect e_age from employee\ngo\nNow, we will execute it.\nexec employee_age\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "52. What do you understand about a temporary table? Write a query to create a temporary table",
        "answer": "A temporary table helps us store and process intermediate results. Temporary tables are created and can be automatically deleted when they are no longer used. They are very useful in places where temporary data needs to be stored.\nSyntax:\nCREATE TABLE #table_name();\nThe below query will create a temporary table:\ncreate table #book(b_id int, b_cost int)\nNow, we will insert the records.\ninsert into #book values(1,100)\ninsert into #book values(2,232)\nselect * from #book\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "53. What is a database cursor? How to use a database cursor?",
        "answer": "A database cursor is a control that allows you to navigate around a table’s rows or documents. It can be referred to as a pointer for a row in a set of rows. Cursors are extremely useful for database traversal operations such as extraction, insertion, and elimination.\nAfter any variable declaration, DECLARE a cursor. A SELECT statement must always be aligned with the cursor declaration.\nTo initialize the result set, OPEN statements must be called before fetching the rows from the result table.\nTo grab and switch to the next row in the result set, use the FETCH statement.\nTo deactivate the cursor, use the CLOSE expression.\nFinally, use the DEALLOCATE clause to uninstall the cursor description and clear all the resources associated with it.\nHere is an example SQL cursor:\nDECLARE @name VARCHAR(50)\nDECLARE db_cursor CURSOR FOR\nSELECT name\nFrom myDB.company\nWHERE employee_name IN (‘Jay’, ‘Shyam’)\nOPEN db_cursor\nFETCH next\nFROM db_cursor\nInto @name\nClose db_cursor\nDEALLOCATE db_cursor",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "54. What is the use of the INTERSECT operator?",
        "answer": "The INTERSECT operator helps combine two select statements and returns only those records that are common to both select statements. After we get Table A and Table B over here, and if we apply the INTERSECT operator on these two tables, then we will get only those records that are common to the result of the select statements of these two tables.\n\nSyntax:\nSELECT column_list FROM table1\nINTERSECT\nSELECT column_list FROM table2\nNow, let us take a look at an example of the INTERSECT operator.\nselect * from student_details1\nselect * from student_details1\nOutput:\n\nselect * from student_details1\nintersect\nselect * from student_details2\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "55. Describe how to delete duplicate rows using a single statement but without any table creation.",
        "answer": "Let us create an employee table where the column names are ID, NAME, DEPARTMENT, and EMAIL. Below are the SQL scripts for generating the sample data:\nCREATE TABLE EMPLOYEE\n(\nID INT,\nNAME Varchar(100),\nDEPARTMENT INT,\nEMAIL Varchar(100)\n)\nINSERT INTO EMPLOYEE VALUES (1,'Tarun',101,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (2,'Sabid',102,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (3,'Adarsh',103,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (4,'Vaibhav',104,'[email protected]')\n–These are the duplicate rows:\nINSERT INTO EMPLOYEE VALUES (5,'Tarun',101,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (6,'Sabid',102,'[email protected]')\n\nWe can see the duplicate rows in the above table.\nDELETE e1 FROM EMPLOYEE e1, EMPLOYEE e2 WHERE e1.name = e2.name AND e1.id > e2.id\nThe SQL query above will delete the rows, where the name fields are duplicated, and it will retain only those unique rows in which the names are unique and the ID fields are the lowest, i.e., the rows with IDs 5 and 6 are deleted, while the rows with IDs 1 and 2 are retained.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "56. Explain database white box testing and black box testing.",
        "answer": "The white box testing method mainly deals with the internal structure of a particular database, where users hide specification details. The white box testing method involves the following:\nAs the coding error can be detected by testing the white box, it can eliminate internal errors.\nTo check for the consistency of the database, it selects the default table values.\nThis method verifies the referential integrity rule.\nIt helps perform the module testing of database functions, triggers, views, and SQL queries.\nThe black box testing method generally involves interface testing and database integration. The black box testing method involves the following:\nMapping details\nVerification of incoming data\nVerification of outgoing data from the other query functions",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "57. What is Blocking and Troubleshooting?",
        "answer": "Blocking: Blocking occurs when one session holds a lock on a specific resource and a second SPID attempts to acquire a conflicting lock type on the same resource.\nTroubleshooting: To start the troubleshooting, you first have to define the symptoms. Troubleshooting starts with identifying the biggest CPU resource users. The most common SQL server performance symptoms are CPU, memory, network, and slow-running queries.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "58. What is an Optimal Disk Configuration for a server?",
        "answer": "Optimal Disk Configuration involves strategically organizing and using storage resources on a server, which helps us achieve the best performance and reliability for a specific workload. The main aim of optimal disk configuration is to minimize bottlenecks and ensure efficient support for the read and write demands of the database.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "59. What is a Deadlock or a live Deadlock, and how do you resolve it?",
        "answer": "A deadlock is a situation where a set of processes are blocked because each process is holding the resource and waiting for the other resource. A live deadlock is just like a deadlock-like situation where the processes block each other with a repeated state change yet make no progress.\nThere are several ways to prevent a deadlock or live deadlock situation:\nAcquired multiple locks for a thread.\nAbort and restart the process.\nTimeouts\nTransaction Rollback",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "60. What are statistics in SQL, and how do you update them?",
        "answer": "Statistics in SQL help us compute the standard statistics, which help us execute the SQL queries more efficiently. The statistics will help us understand the total structure of the data. There are various functions that we can use in statistics, such as MEAN, MAX, MIN, MEDIAN, MODE, and Standard Deviation, and we can also use inferential statistics in SQL, like t-test, f-test, ANOVA, and analytics functions.\nUpdating statistics for a specific table\nGo to the menu of the table and choose Definition.\nOpen the Optimizer Statistics tab page.\nChoose the Update option in the context menu of the Table Statistics field.\nDefine the sample type and size that you want to use to generate the statistics.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "61. What is an efficient structure to speed up the table reads?",
        "answer": "With the help of Database Indexing we can improve the speed of the table read.\nDatabase indexing helps DBMS find the specific rows in a table very quickly. The most common database index is the B-tree Index.that has few distinct values, such as name, dates, or state codes.\n\nSQL Technical Interview Questions",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "62. What is the difference between the DELETE and TRUNCATE commands?",
        "answer": "DELETE:This query is used to delete or remove one or more existing tables.\nTRUNCATE:This statement deletes all the data inside a table.\n\nThe differences between DELETE and TRUNCATE commands are the following:\nTRUNCATE is a DDL command, and DELETE is a DML command.\nWith TRUNCATE, we cannot really execute and trigger, while with DELETE, we can accomplish a trigger.\nIf a table is referenced by foreign key constraints, then TRUNCATE will not work. So, if we have a foreign key, we have to use the DELETE command.\nThe syntax for the DELETE command is as follows:\nDELETE FROM table_name\n[WHERE condition];\nExample:\nselect * from stu\nOutput:\ndelete from stu where s_name=’Bob’\nOutput:\n\nThe syntax for the TRUNCATE command:\nTRUNCATE TABLE\nTable_name;\nExample:\nselect * from stu1\nOutput:\n\ntruncate table stu1\nOutput:\n\nThis deletes all the records from a table.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "63. What is the difference between the DROP and TRUNCATE commands?",
        "answer": "If a table is dropped, all things associated with that table are dropped as well. This includes the relationships defined on the table with other tables, access privileges, and grants that the table has, as well as the integrity checks and constraints.\nTo create and use the table again in its original form, all the elements associated with the table need to be redefined.\nHowever, if a table is truncated, there are no such problems as mentioned above. The table retains its original structure.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "64. What are the third-party tools that are used in SQL Server?",
        "answer": "The following is the list of third-party tools that are used in SQL Server:\nSQL CHECK\nSQL DOC 2\nSQL Backup 5\nSQL Prompt\nLitespeed 5.0",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "65. Can we link SQL Server with others?",
        "answer": "Yes, SQL Server can be linked with other database systems using various methods. One common method is through the use of linked servers. Linked servers allow SQL Server to establish connections and access data from other database platforms. By configuring appropriate settings and creating the necessary connections, SQL Server can interact with databases such as MySQL, Oracle, PostgreSQL, and more, enabling data integration and querying across multiple systems.\nAlso, check out the blog on PostgreSQL vs. MySQL.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "66. What are some common clauses used with SELECT queries in SQL?",
        "answer": "There are many SELECT statement clauses in SQL. Some of the most commonly used clauses with SELECT queries are as follows:\nFROM\nThe FROM clause defines the tables and views from which data can be interpreted. The tables and views listed must exist at the time the question is given.\nWHERE\nThe WHERE clause defines the parameters that are used to limit the contents of the results table. You can test for basic relationships or for relationships between a column and a series of columns using subselects.\nGROUP BY\nThe GROUP BY clause is commonly used for aggregate functions to produce a single outcome row for each set of unique values in a set of columns or expressions.\nORDER BY\nThe ORDER BY clause helps in choosing the columns on which the table’s result should be sorted.\nHAVING\nThe HAVING clause filters the results of the GROUP BY clause by using an aggregate function.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "67. Explain the difference between OLTP and OLAP.",
        "answer": "OLTP: It stands for Online transaction processing, and we can consider it a category of software applications that are efficient for supporting transaction-oriented programs. One of the important attributes of the OLTP system is its potential to maintain consistency. The OLTP system often follows decentralized planning to avoid single points of failure. This system is generally designed for a large audience of end users to perform short transactions. The queries involved in such databases are generally simple, require a fast response time, and, in comparison, return only a few records. So, the number of transactions per second acts as an effective measure for those systems.\n\nOLAP: It stands for online analytical processing, and it is a category of software programs that are identified by a comparatively lower frequency of online transactions. For OLAP systems, the efficiency of computing depends heavily on the response time. Hence, such systems are generally used for data mining or maintaining aggregated historical data, and they are usually used in multidimensional schemas.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "68. What is Hybrid OLAP?",
        "answer": "Hybrid OLAP (HOLAP) uses a combination of multidimensional data structures and relational database tables to store multidimensional data. The aggregations for a HOLAP partition are stored by analysis services in a multidimensional structure. The facts are stored in a relational database.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "69. How can you copy data from one table to another table?",
        "answer": "Here, we have our employee table.\n\nWe have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we will have to create another table that will have the same structure as the above-given table.\nSyntax:\ncreate table employee_duplicate(\ne_id int,\ne_name varchar(20),\ne_salary int,\ne_age int,\ne_gender varchar(20)\ne_dept varchar(20)\n)\nFor copying the data, we will use the following query:\ninsert into employee_duplicate select * from employees\nLet us take a look at the copied table.\nselect * from employee_duplicate\nOutput:",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "70. What is the difference between BETWEEN and IN operators in SQL?",
        "answer": "The BETWEEN operator is employed to identify rows that fall within a specified range of values, encompassing numerical, textual, or date values. It returns the count of values that exist between the two defined boundaries.\nOn the other hand, the IN operator serves as a condition operator utilized for searching values within a predetermined range. When multiple values are available for selection, the IN operator is utilized.\nCheck out how to use IN and BETWEEN Operators in SQL with examples.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "71. What is the difference between HAVING and WHERE clauses?",
        "answer": "The main difference between the ‘HAVING’ and ‘WHERE’ clauses in SQL is that the ‘WHERE’ clause operates on individual rows of data, while the ‘HAVING’ clause is used to filter aggregated data. The ‘WHERE’ clause cannot be used with aggregate functions, whereas the ‘HAVING’ clause specifically filters results based on aggregate conditions.\nLet us consider the employee table below.\nName Department Salary\nTarun Production 50,000\nTarun Testing 60,000\nSabid Marketing 70,000\nAdarsh Production 80,000\nVaibhav Testing 90,000\nThe following will select the data on a row-by-row basis:\nSELECT Name, Salary FROM Employee WHERE Salary >=50000\nOutput:\nName Salary\nTarun 50,000\nTarun 60,000\nSabid 70,000\nAdarsh 80,000\nVaibhav 90,000\nThe HAVING clause, on the other hand, operates on the aggregated results.\nSELECT Department, SUM(Salary) AS total FROM Employee GROUP BY Department\nOutput:\nDepartment Total\nMarketing 70,000\nProduction 130,000\nTesting 150,000\nNow, let us see the output when we apply HAVING to the above query.\nSELECT Department, SUM(Salary) AS total FROM Employee GROUP BY Department HAVING SUM(Salary)>70000\nOutput:\nDepartment Total\nProduction 130,000\nTesting 150,000",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "72. How can you create empty tables with the same structure as another table?",
        "answer": "This can be achieved by fetching the records of one table into a new table using the INTO operator while fixing a WHERE clause to be false for all records. In this way, SQL prepares the new table with a duplicate structure to accept the fetched records. However, there are no records that will get fetched due to the WHERE clause in action. Therefore, nothing is inserted into the new table, thus creating an empty table.\nSELECT * INTO Students_copy\nFROM Students WHERE 1 = 2;",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "73. How will you update the prices in a product column by increasing 5% of the prices in each row?",
        "answer": "We can update the prices of the product columns by using the UPDATE method, which is part of the DML.\nUPDATE table_name SET price = price*1.05;\nWhere,\ntable_name: your table name\nprice: price column present in your table\nWith this code, we can easily modify the price of each product by 5%.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "74. How will you fetch the most recent entries in a database?",
        "answer": "We can fetch the most recent entries in a database by using the ORDER BY clause along with the timestamp column in descending order.\nSELECT * FROM table_name ORDER BY timestamp_column DESC;\nWhere,\ntable_name: your table name\ntimestamp_column: datetime column present in your table",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "75. How will you calculate the average price of products in each category?",
        "answer": "To calculate the average price of products in each category, we can use the aggregate function (AVG) with the price column and group it by the category column.\nSELECT category, AVG(price) as average_price FROM table_name GROUP BY category;\nWhere,\ntable_name: table name\ncategory: category column in your table\nprice: price column in your table",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "76. How will you calculate the total sales in each category of a product sales table?",
        "answer": "To calculate the total sales in each category of a product sales table, we can use the aggregate function (SUM) with the sales amount column and group it by the category column.\nSELECT category, SUM(sales_amount) as total_sales FROM sales GROUP BY category;\nWhere,\nsales: table name\ncategory: category column in your table\nsales_amount: sales_amount column in your table",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "77. How will you find the IDs or details where there have been no entries in terms of sales?",
        "answer": "To find the IDs or details where there have been no entries in terms of sales, we can use the LEFT JOIN or NOT EXISTS clause.\nAssume we have two tables: ‘product’ with product details and ‘sales’ with sales data.\nLeft Joins:\nSELECT p.product_id, p.product_name FROM product p LEFT JOIN sales s on p.product_id = s.product_id WHERE s.product_id is NULL;\nWhere,\np.product_id: product id in the product table\np.product_name: product name in the product table\ns.product_id: product id in the sales table\nHere, the WHERE s.product_id is NULL condition helps us filter out the rows where a match in the sales table is not found.\nNot Exists:\nSELECT p.product_id, p.product_name FROM products p WHERE NOT EXISTS (SELECT 1 FROM sales s WHERE s.product_id = p.product_id );\n\nWhere,\np.product_id: product id in the product table\np.product_name: product name in the product table\ns.product_id: product id in the sales table\n\nSQL Scenario-Based Interview Questions",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "78. Suppose there is a database where information about the employees in various verticals is stored. Your task is to find the average salary of each vertical and the highest salary among the lot.",
        "answer": "To find the average salary of each vertical and the highest salary among the employees, we can use the group by clause along with the aggregate functions (AVG and MAX).\nSELECT vertical, AVG(salary) as average_salary, MAX(salary) as highest_salary FROM employees GROUP BY vertical;\nWhere,\nvertical: column that you want to group\nsalary: column in the table\nemployees: table name",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "79. Given data where store inventory is stored, your task is to find the top 3 products in each category in terms of prices.",
        "answer": "To find the top 3 products in each category in terms of price, we can group by clause along with the  aggregate function (MAX) with the price column and set the limit as 3 in descending order.\nSELECT category, product_name, MAX(price) as max_price FROM inventory GROUP BY category, product_name ORDER BY category, max_price DESC LIMIT 3;\nWhere,\ncategory: column name having different categories\nproduct_name: name of the product column\nprice: column having the price details\ninventory: table name",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "80. Write an SQL query to find the month-on-month sales of a specific product in a store.",
        "answer": "To calculate the month-on-month sales of a specific product in a store, we can use a combination of date functions and aggregate functions.\nSELECT EXTRACT(YEAR_MONTH FROM sale_date) AS year_month, SUM(quantity_sold) AS total_sales FROM sales WHERE product_id = 'your_product_id' GROUP BY year_month ORDER BY year_month;\nWhere,\nsale_date: date of the sales column\nquantity_sold: number of quantity sold column\nsales: table name\nproduct_id: Id of the product column\nyour_product_id: pass the product ID for which you want to check.",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "81. Suppose in an organization, employees are mapped under managers. Write a SQL query that will fetch you the managers and employees working under them.",
        "answer": "To fetch the managers and employees working under them, we can use a self-join to fetch the managers and the employees working under them.\nSELECT M.manager_id AS manager_id, M.manager_name AS manager_name, E.employee_id AS employee_id, E.employee_name AS employee_name FROM employees E JOIN employees M ON E.manager_id = M.employee_id ORDER BY M.manager_id, E.employee_id;\nWhere,\nmanager_id: manager id column\nmanager_name: manager name column\nemployee_id: employee id column\nemployee_name: employee name column",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "82. In a store inventory, your task is to fetch the total quantity of the top product purchased by the customers.",
        "answer": "To fetch the total quantity of the top product purchased by the customers, we can use a group by clause along with the limit in descending order.\nSELECT product_id, SUM(quantity_purchased) AS total_quantity_purchased FROM purchases GROUP BY product_id ORDER BY total_quantity_purchased DESC LIMIT 1;\nWhere,\nproduct_id: product id column\nquantity_purchased: column having the no. of the quantity purchased\npurchases: table name",
        "reference": "intellipaat.com",
        "role": "sql"
    },
    {
        "question": "1. What is Pattern Matching in SQL?",
        "answer": "SQL pattern matching provides for pattern search in data if you have no clue as to what that word should be. This kind of SQL query uses wildcards to match a string pattern, rather than writing the exact word. The LIKE operator is used in conjunction with SQL Wildcards to fetch the required information. SQL Wildcards Using the % wildcard to perform a simple search Using the % wildcard to perform a simple search Using the % wildcard to perform a simple search The % wildcard matches zero or more characters of any type and can be used to define wildcards both before and after the pattern. Search a student in your database with first name beginning with the letter K: SELECT *\nFROM students\nWHERE first_name LIKE 'K%' SELECT *\nFROM students\nWHERE first_name LIKE 'K%' SELECT * FROM WHERE LIKE 'K%' Omitting the patterns using the NOT keyword Omitting the patterns using the NOT keyword Omitting the patterns using the NOT keyword Use the NOT keyword to select records that don't match the pattern. This query returns all students whose first name does not begin with K. SELECT *\nFROM students\nWHERE first_name NOT LIKE 'K%' SELECT *\nFROM students\nWHERE first_name NOT LIKE 'K%' SELECT * FROM WHERE NOT LIKE 'K%' Matching a pattern anywhere using the % wildcard twice Matching a pattern anywhere using the % wildcard twice Matching a pattern anywhere using the % wildcard twice Search for a student in the database where he/she has a K in his/her first name. SELECT *\nFROM students\nWHERE first_name LIKE '%Q%' SELECT *\nFROM students\nWHERE first_name LIKE '%Q%' SELECT * FROM WHERE LIKE '%Q%' Using the _ wildcard to match pattern at a specific position Using the _ wildcard to match pattern at a specific position Using the _ wildcard to match pattern at a specific position The _ wildcard matches exactly one character of any type. It can be used in conjunction with % wildcard. This query fetches all students with letter K at the third position in their first name. SELECT *\nFROM students\nWHERE first_name LIKE '__K%' SELECT *\nFROM students\nWHERE first_name LIKE '__K%' SELECT * FROM WHERE LIKE '__K%' Matching patterns for a specific length Matching patterns for a specific length Matching patterns for a specific length The _ wildcard plays an important role as a limitation when it matches exactly one character. It limits the length and position of the matched results. For example - SELECT *   /* Matches first names with three or more letters */\nFROM students\nWHERE first_name LIKE '___%'\n\nSELECT *   /* Matches first names with exactly four characters */\nFROM students\nWHERE first_name LIKE '____' SELECT *   /* Matches first names with three or more letters */\nFROM students\nWHERE first_name LIKE '___%'\n\nSELECT *   /* Matches first names with exactly four characters */\nFROM students\nWHERE first_name LIKE '____' SELECT * /* Matches first names with three or more letters */ FROM WHERE LIKE '___%' SELECT * /* Matches first names with exactly four characters */ FROM WHERE LIKE '____'",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "2. How to create empty tables with the same structure as another table?",
        "answer": "Creating empty tables with the same structure can be done smartly by fetching the records of one table into a new table using the INTO operator while fixing a WHERE clause to be false for all records. Hence, SQL prepares the new table with a duplicate structure to accept the fetched records but since no records get fetched due to the WHERE clause in action, nothing is inserted into the new table. SELECT * INTO Students_copy\nFROM Students WHERE 1 = 2; SELECT * INTO Students_copy\nFROM Students WHERE 1 = 2; SELECT * INTO FROM WHERE 1 = 2",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "3. What is a Recursive Stored Procedure?",
        "answer": "A stored procedure that calls itself until a boundary condition is reached, is called a recursive stored procedure. This recursive function helps the programmers to deploy the same set of code several times as and when required. Some SQL programming languages limit the recursion depth to prevent an infinite loop of procedure calls from causing a stack overflow, which slows down the system and may lead to system crashes. DELIMITER $$     /* Set a new delimiter => $$ */\nCREATE PROCEDURE calctotal( /* Create the procedure */\n   IN number INT,   /* Set Input and Ouput variables */\n   OUT total INT\n) BEGIN\nDECLARE score INT DEFAULT NULL;   /* Set the default value => \"score\" */\nSELECT awards FROM achievements   /* Update \"score\" via SELECT query */\nWHERE id = number INTO score;\nIF score IS NULL THEN SET total = 0;   /* Termination condition */\nELSE\nCALL calctotal(number+1);   /* Recursive call */\nSET total = total + score;   /* Action after recursion */\nEND IF;\nEND $$     /* End of procedure */\nDELIMITER ;     /* Reset the delimiter */ DELIMITER $$     /* Set a new delimiter => $$ */\nCREATE PROCEDURE calctotal( /* Create the procedure */\n   IN number INT,   /* Set Input and Ouput variables */\n   OUT total INT\n) BEGIN\nDECLARE score INT DEFAULT NULL;   /* Set the default value => \"score\" */\nSELECT awards FROM achievements   /* Update \"score\" via SELECT query */\nWHERE id = number INTO score;\nIF score IS NULL THEN SET total = 0;   /* Termination condition */\nELSE\nCALL calctotal(number+1);   /* Recursive call */\nSET total = total + score;   /* Action after recursion */\nEND IF;\nEND $$     /* End of procedure */\nDELIMITER ;     /* Reset the delimiter */ /* Set a new delimiter => $$ */ CREATE PROCEDURE /* Create the procedure */ IN INT /* Set Input and Ouput variables */ OUT INT BEGIN DECLARE INT DEFAULT NULL /* Set the default value => \"score\" */ SELECT FROM /* Update \"score\" via SELECT query */ WHERE = INTO IS NULL THEN SET = 0 /* Termination condition */ ELSE CALL + 1 /* Recursive call */ SET = + /* Action after recursion */ END END /* End of procedure */ /* Reset the delimiter */",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "4. What is a Stored Procedure?",
        "answer": "A stored procedure is a subroutine available to applications that access a relational database management system (RDBMS). Such procedures are stored in the database data dictionary. The sole disadvantage of stored procedure is that it can be executed nowhere except in the database and occupies more memory in the database server. It also provides a sense of security and functionality as users who can't access the data directly can be granted access via stored procedures. DELIMITER $$\nCREATE PROCEDURE FetchAllStudents()\nBEGIN\nSELECT *  FROM myDB.students;\nEND $$\nDELIMITER ; DELIMITER $$\nCREATE PROCEDURE FetchAllStudents()\nBEGIN\nSELECT *  FROM myDB.students;\nEND $$\nDELIMITER ; CREATE PROCEDURE BEGIN SELECT * FROM END  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "5. What is Collation? What are the different types of Collation Sensitivity?",
        "answer": "Collation refers to a set of rules that determine how data is sorted and compared. Rules defining the correct character sequence are used to sort the character data. It incorporates options for specifying case sensitivity, accent marks, kana character types, and character width. Below are the different types of collation sensitivity: Case sensitivity: A and a are treated differently.\nAccent sensitivity: a and á are treated differently.\nKana sensitivity: Japanese kana characters Hiragana and Katakana are treated differently.\nWidth sensitivity: Same character represented in single-byte (half-width) and double-byte (full-width) are treated differently. Case sensitivity: A and a are treated differently. Case sensitivity: A a Accent sensitivity: a and á are treated differently. Accent sensitivity: a á Kana sensitivity: Japanese kana characters Hiragana and Katakana are treated differently. Kana sensitivity: Width sensitivity: Same character represented in single-byte (half-width) and double-byte (full-width) are treated differently. Width sensitivity:",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "6. What are the differences between OLTP and OLAP?",
        "answer": "OLTP stands for Online Transaction Processing, is a class of software applications capable of supporting transaction-oriented programs. An important attribute of an OLTP system is its ability to maintain concurrency. OLTP systems often follow a decentralized architecture to avoid single points of failure. These systems are generally designed for a large audience of end-users who conduct short transactions. Queries involved in such databases are generally simple, need fast response times, and return relatively few records. A number of transactions per second acts as an effective measure for such systems. OLTP Online Transaction Processing OLAP stands for Online Analytical Processing, a class of software programs that are characterized by the relatively low frequency of online transactions. Queries are often too complex and involve a bunch of aggregations. For OLAP systems, the effectiveness measure relies highly on response time. Such systems are widely used for data mining or maintaining aggregated, historical data, usually in multi-dimensional schemas. OLAP Online Analytical Processing  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "7. What is OLTP?",
        "answer": "OLTP stands for Online Transaction Processing, is a class of software applications capable of supporting transaction-oriented programs. An essential attribute of an OLTP system is its ability to maintain concurrency. To avoid single points of failure, OLTP systems are often decentralized. These systems are usually designed for a large number of users who conduct short transactions. Database queries are usually simple, require sub-second response times, and return relatively few records. Here is an insight into the working of an OLTP system [ Note - The figure is not important for interviews ] - OLTP [ Note - The figure is not important for interviews ] -  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "8. What is User-defined function? What are its various types?",
        "answer": "The user-defined functions in SQL are like functions in any other programming language that accept parameters, perform complex calculations, and return a value. They are written to use the logic repetitively whenever required. There are two types of SQL user-defined functions: Scalar Function: As explained earlier, user-defined scalar functions return a single scalar value.\nTable-Valued Functions: User-defined table-valued functions return a table as output.\nInline: returns a table data type based on a single SELECT statement.\nMulti-statement: returns a tabular result-set but, unlike inline, multiple SELECT statements can be used inside the function body. Scalar Function: As explained earlier, user-defined scalar functions return a single scalar value. Table-Valued Functions: User-defined table-valued functions return a table as output.\nInline: returns a table data type based on a single SELECT statement.\nMulti-statement: returns a tabular result-set but, unlike inline, multiple SELECT statements can be used inside the function body. Inline: returns a table data type based on a single SELECT statement.\nMulti-statement: returns a tabular result-set but, unlike inline, multiple SELECT statements can be used inside the function body. Inline: returns a table data type based on a single SELECT statement. Inline: Multi-statement: returns a tabular result-set but, unlike inline, multiple SELECT statements can be used inside the function body. Multi-statement:",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "9. What is a UNIQUE constraint?",
        "answer": "A UNIQUE constraint ensures that all values in a column are different. This provides uniqueness for the column(s) and helps identify each row uniquely. Unlike primary key, there can be multiple unique constraints defined per table. The code syntax for UNIQUE is quite similar to that of PRIMARY KEY and can be used interchangeably. CREATE TABLE Students (   /* Create table with a single field as unique */\n   ID INT NOT NULL UNIQUE\n   Name VARCHAR(255)\n);\n\nCREATE TABLE Students (   /* Create table with multiple fields as unique */\n   ID INT NOT NULL\n   LastName VARCHAR(255)\n   FirstName VARCHAR(255) NOT NULL\n   CONSTRAINT PK_Student\n   UNIQUE (ID, FirstName)\n);\n\nALTER TABLE Students   /* Set a column as unique */\nADD UNIQUE (ID);\nALTER TABLE Students   /* Set multiple columns as unique */\nADD CONSTRAINT PK_Student   /* Naming a unique constraint */\nUNIQUE (ID, FirstName); CREATE TABLE Students (   /* Create table with a single field as unique */\n   ID INT NOT NULL UNIQUE\n   Name VARCHAR(255)\n);\n\nCREATE TABLE Students (   /* Create table with multiple fields as unique */\n   ID INT NOT NULL\n   LastName VARCHAR(255)\n   FirstName VARCHAR(255) NOT NULL\n   CONSTRAINT PK_Student\n   UNIQUE (ID, FirstName)\n);\n\nALTER TABLE Students   /* Set a column as unique */\nADD UNIQUE (ID);\nALTER TABLE Students   /* Set multiple columns as unique */\nADD CONSTRAINT PK_Student   /* Naming a unique constraint */\nUNIQUE (ID, FirstName); CREATE TABLE /* Create table with a single field as unique */ INT NOT NULL UNIQUE VARCHAR 255 CREATE TABLE /* Create table with multiple fields as unique */ INT NOT NULL VARCHAR 255 VARCHAR 255 NOT NULL CONSTRAINT UNIQUE ALTER TABLE /* Set a column as unique */ ADD UNIQUE ALTER TABLE /* Set multiple columns as unique */ ADD CONSTRAINT /* Naming a unique constraint */ UNIQUE",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "10. What is a Query?",
        "answer": "A query is a request for data or information from a database table or combination of tables. A database query can be either a select query or an action query. SELECT fname, lname    /* select query */\nFROM myDb.students\nWHERE student_id = 1; SELECT fname, lname    /* select query */\nFROM myDb.students\nWHERE student_id = 1; SELECT /* select query */ FROM WHERE = 1 UPDATE myDB.students    /* action query */\nSET fname = 'Captain', lname = 'America'\nWHERE student_id = 1; UPDATE myDB.students    /* action query */\nSET fname = 'Captain', lname = 'America'\nWHERE student_id = 1; /* action query */ SET = 'Captain' = 'America' WHERE = 1",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "11. What is Data Integrity?",
        "answer": "Data Integrity is the assurance of accuracy and consistency of data over its entire life-cycle and is a critical aspect of the design, implementation, and usage of any system which stores, processes, or retrieves data. It also defines integrity constraints to enforce business rules on the data when it is entered into an application or a database.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "12. What is the difference between Clustered and Non-clustered index?",
        "answer": "As explained above, the differences can be broken down into three small factors - Clustered index modifies the way records are stored in a database based on the indexed column. A non-clustered index creates a separate entity within the table which references the original table.\nClustered index is used for easy and speedy retrieval of data from the database, whereas, fetching records from the non-clustered index is relatively slower.\nIn SQL, a table can have a single clustered index whereas it can have multiple non-clustered indexes. Clustered index modifies the way records are stored in a database based on the indexed column. A non-clustered index creates a separate entity within the table which references the original table. Clustered index is used for easy and speedy retrieval of data from the database, whereas, fetching records from the non-clustered index is relatively slower. In SQL, a table can have a single clustered index whereas it can have multiple non-clustered indexes.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "13. What is an Index? Explain its different types.",
        "answer": "A database index is a data structure that provides a quick lookup of data in a column or columns of a table. It enhances the speed of operations accessing data from a database table at the cost of additional writes and memory to maintain the index data structure. CREATE INDEX index_name   /* Create Index */\nON table_name (column_1, column_2);\nDROP INDEX index_name;   /* Drop Index */ CREATE INDEX index_name   /* Create Index */\nON table_name (column_1, column_2);\nDROP INDEX index_name;   /* Drop Index */ CREATE /* Create Index */ ON DROP /* Drop Index */ There are different types of indexes that can be created for different purposes: Unique and Non-Unique Index: Unique and Non-Unique Index: Unique and Non-Unique Index: Unique indexes are indexes that help maintain data integrity by ensuring that no two rows of data in a table have identical key values. Once a unique index has been defined for a table, uniqueness is enforced whenever keys are added or changed within the index. CREATE UNIQUE INDEX myIndex\nON students (enroll_no); CREATE UNIQUE INDEX myIndex\nON students (enroll_no); CREATE UNIQUE ON Non-unique indexes, on the other hand, are not used to enforce constraints on the tables with which they are associated. Instead, non-unique indexes are used solely to improve query performance by maintaining a sorted order of data values that are used frequently. Clustered and Non-Clustered Index: Clustered and Non-Clustered Index: Clustered and Non-Clustered Index: Clustered indexes are indexes whose order of the rows in the database corresponds to the order of the rows in the index. This is why only one clustered index can exist in a given table, whereas, multiple non-clustered indexes can exist in the table. The only difference between clustered and non-clustered indexes is that the database manager attempts to keep the data in the database in the same order as the corresponding keys appear in the clustered index. Clustering indexes can improve the performance of most query operations because they provide a linear-access path to data stored in the database. Write a SQL statement to create a UNIQUE INDEX \"my_index\" on \"my_table\" for fields \"column_1\" & \"column_2\". Write a SQL statement to create a UNIQUE INDEX \"my_index\" on \"my_table\" for fields \"column_1\" & \"column_2\". Write a SQL statement to create a UNIQUE INDEX \"my_index\" on \"my_table\" for fields \"column_1\" & \"column_2\". Write a SQL statement to create a UNIQUE INDEX \"my_index\" on \"my_table\" for fields \"column_1\" & \"column_2\". Write a SQL statement to create a UNIQUE INDEX \"my_index\" on \"my_table\" for fields \"column_1\" & \"column_2\".      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "14. What is a Cross-Join?",
        "answer": "Cross join can be defined as a cartesian product of the two tables included in the join. The table after join contains the same number of rows as in the cross-product of the number of rows in the two tables. If a WHERE clause is used in cross join then the query will work like an INNER JOIN. SELECT stu.name, sub.subject \nFROM students AS stu\nCROSS JOIN subjects AS sub; SELECT stu.name, sub.subject \nFROM students AS stu\nCROSS JOIN subjects AS sub; SELECT FROM AS CROSS JOIN AS   Write a SQL statement to CROSS JOIN 'table_1' with 'table_2' and fetch 'col_1' from table_1 & 'col_2' from table_2 respectively. Do not use alias. Write a SQL statement to CROSS JOIN 'table_1' with 'table_2' and fetch 'col_1' from table_1 & 'col_2' from table_2 respectively. Do not use alias. Write a SQL statement to CROSS JOIN 'table_1' with 'table_2' and fetch 'col_1' from table_1 & 'col_2' from table_2 respectively. Do not use alias. Write a SQL statement to CROSS JOIN 'table_1' with 'table_2' and fetch 'col_1' from table_1 & 'col_2' from table_2 respectively. Do not use alias. Write a SQL statement to CROSS JOIN 'table_1' with 'table_2' and fetch 'col_1' from table_1 & 'col_2' from table_2 respectively. Do not use alias.       Write a SQL statement to perform SELF JOIN for 'Table_X' with alias 'Table_1' and 'Table_2', on columns 'Col_1' and 'Col_2' respectively. Write a SQL statement to perform SELF JOIN for 'Table_X' with alias 'Table_1' and 'Table_2', on columns 'Col_1' and 'Col_2' respectively. Write a SQL statement to perform SELF JOIN for 'Table_X' with alias 'Table_1' and 'Table_2', on columns 'Col_1' and 'Col_2' respectively. Write a SQL statement to perform SELF JOIN for 'Table_X' with alias 'Table_1' and 'Table_2', on columns 'Col_1' and 'Col_2' respectively. Write a SQL statement to perform SELF JOIN for 'Table_X' with alias 'Table_1' and 'Table_2', on columns 'Col_1' and 'Col_2' respectively.      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "15. What is a Self-Join?",
        "answer": "A self JOIN is a case of regular join where a table is joined to itself based on some relation between its own column(s). Self-join uses the INNER JOIN or LEFT JOIN clause and a table alias is used to assign different names to the table within the query. self JOIN SELECT A.emp_id AS \"Emp_ID\",A.emp_name AS \"Employee\",\nB.emp_id AS \"Sup_ID\",B.emp_name AS \"Supervisor\"\nFROM employee A, employee B\nWHERE A.emp_sup = B.emp_id; SELECT A.emp_id AS \"Emp_ID\",A.emp_name AS \"Employee\",\nB.emp_id AS \"Sup_ID\",B.emp_name AS \"Supervisor\"\nFROM employee A, employee B\nWHERE A.emp_sup = B.emp_id; SELECT AS AS AS AS FROM WHERE =",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "16. What is a Join? List its different types.",
        "answer": "The SQL Join clause is used to combine records (rows) from two or more tables in a SQL database based on a related column between the two. SQL Join SQL Join   There are four different types of JOINs in SQL: (INNER) JOIN: Retrieves records that have matching values in both tables involved in the join. This is the widely used join for queries. (INNER) JOIN: Retrieves records that have matching values in both tables involved in the join. This is the widely used join for queries. (INNER) JOIN: SELECT *\nFROM Table_A\nJOIN Table_B;\nSELECT *\nFROM Table_A\nINNER JOIN Table_B; SELECT *\nFROM Table_A\nJOIN Table_B;\nSELECT *\nFROM Table_A\nINNER JOIN Table_B; SELECT * FROM JOIN SELECT * FROM INNER JOIN LEFT (OUTER) JOIN: Retrieves all the records/rows from the left and the matched records/rows from the right table. LEFT (OUTER) JOIN: Retrieves all the records/rows from the left and the matched records/rows from the right table. LEFT (OUTER) JOIN: SELECT *\nFROM Table_A A\nLEFT JOIN Table_B B\nON A.col = B.col; SELECT *\nFROM Table_A A\nLEFT JOIN Table_B B\nON A.col = B.col; SELECT * FROM LEFT JOIN ON = RIGHT (OUTER) JOIN: Retrieves all the records/rows from the right and the matched records/rows from the left table. RIGHT (OUTER) JOIN: Retrieves all the records/rows from the right and the matched records/rows from the left table. RIGHT (OUTER) JOIN: SELECT *\nFROM Table_A A\nRIGHT JOIN Table_B B\nON A.col = B.col; SELECT *\nFROM Table_A A\nRIGHT JOIN Table_B B\nON A.col = B.col; SELECT * FROM RIGHT JOIN ON = FULL (OUTER) JOIN: Retrieves all the records where there is a match in either the left or right table. FULL (OUTER) JOIN: Retrieves all the records where there is a match in either the left or right table. FULL (OUTER) JOIN: SELECT *\nFROM Table_A A\nFULL JOIN Table_B B\nON A.col = B.col; SELECT *\nFROM Table_A A\nFULL JOIN Table_B B\nON A.col = B.col; SELECT * FROM FULL JOIN ON =",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "17. What is a Foreign Key?",
        "answer": "A FOREIGN KEY comprises of single or collection of fields in a table that essentially refers to the PRIMARY KEY in another table. Foreign key constraint ensures referential integrity in the relation between two tables.\nThe table with the foreign key constraint is labeled as the child table, and the table containing the candidate key is labeled as the referenced or parent table.  CREATE TABLE Students (   /* Create table with foreign key - Way 1 */\n   ID INT NOT NULL\n   Name VARCHAR(255)\n   LibraryID INT\n   PRIMARY KEY (ID)\n   FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID)\n);\n\nCREATE TABLE Students (   /* Create table with foreign key - Way 2 */\n   ID INT NOT NULL PRIMARY KEY\n   Name VARCHAR(255)\n   LibraryID INT FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID)\n);\n\nALTER TABLE Students   /* Add a new foreign key */\nADD FOREIGN KEY (LibraryID)\nREFERENCES Library (LibraryID); CREATE TABLE Students (   /* Create table with foreign key - Way 1 */\n   ID INT NOT NULL\n   Name VARCHAR(255)\n   LibraryID INT\n   PRIMARY KEY (ID)\n   FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID)\n);\n\nCREATE TABLE Students (   /* Create table with foreign key - Way 2 */\n   ID INT NOT NULL PRIMARY KEY\n   Name VARCHAR(255)\n   LibraryID INT FOREIGN KEY (Library_ID) REFERENCES Library(LibraryID)\n);\n\nALTER TABLE Students   /* Add a new foreign key */\nADD FOREIGN KEY (LibraryID)\nREFERENCES Library (LibraryID); CREATE TABLE /* Create table with foreign key - Way 1 */ INT NOT NULL VARCHAR 255 INT PRIMARY FOREIGN REFERENCES CREATE TABLE /* Create table with foreign key - Way 2 */ INT NOT NULL PRIMARY VARCHAR 255 INT FOREIGN REFERENCES ALTER TABLE /* Add a new foreign key */ ADD FOREIGN REFERENCES What type of integrity constraint does the foreign key ensure? What type of integrity constraint does the foreign key ensure? What type of integrity constraint does the foreign key ensure? What type of integrity constraint does the foreign key ensure? What type of integrity constraint does the foreign key ensure?       Write a SQL statement to add a FOREIGN KEY 'col_fk' in 'table_y' that references 'col_pk' in 'table_x'. Write a SQL statement to add a FOREIGN KEY 'col_fk' in 'table_y' that references 'col_pk' in 'table_x'. Write a SQL statement to add a FOREIGN KEY 'col_fk' in 'table_y' that references 'col_pk' in 'table_x'. Write a SQL statement to add a FOREIGN KEY 'col_fk' in 'table_y' that references 'col_pk' in 'table_x'. Write a SQL statement to add a FOREIGN KEY 'col_fk' in 'table_y' that references 'col_pk' in 'table_x'.      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "18. What is a Subquery? What are its types?",
        "answer": "A subquery is a query within another query, also known as a nested query or inner query. It is used to restrict or enhance the data to be queried by the main query, thus restricting or enhancing the output of the main query respectively. For example, here we fetch the contact information for students who have enrolled for the maths subject: nested query inner query SELECT name, email, mob, address\nFROM myDb.contacts\nWHERE roll_no IN (\n SELECT roll_no\n FROM myDb.students\n WHERE subject = 'Maths'); SELECT name, email, mob, address\nFROM myDb.contacts\nWHERE roll_no IN (\n SELECT roll_no\n FROM myDb.students\n WHERE subject = 'Maths'); SELECT FROM WHERE IN SELECT FROM WHERE = 'Maths' There are two types of subquery - Correlated and Non-Correlated. Correlated Non-Correlated A correlated subquery cannot be considered as an independent query, but it can refer to the column in a table listed in the FROM of the main query.\nA non-correlated subquery can be considered as an independent query and the output of the subquery is substituted in the main query. A correlated subquery cannot be considered as an independent query, but it can refer to the column in a table listed in the FROM of the main query. correlated A non-correlated subquery can be considered as an independent query and the output of the subquery is substituted in the main query. non-correlated Write a SQL query to update the field \"status\" in table \"applications\" from 0 to 1. Write a SQL query to update the field \"status\" in table \"applications\" from 0 to 1. Write a SQL query to update the field \"status\" in table \"applications\" from 0 to 1. Write a SQL query to update the field \"status\" in table \"applications\" from 0 to 1. Write a SQL query to update the field \"status\" in table \"applications\" from 0 to 1.       Write a SQL query to select the field \"app_id\" in table \"applications\" where \"app_id\" less than 1000. Write a SQL query to select the field \"app_id\" in table \"applications\" where \"app_id\" less than 1000. Write a SQL query to select the field \"app_id\" in table \"applications\" where \"app_id\" less than 1000. Write a SQL query to select the field \"app_id\" in table \"applications\" where \"app_id\" less than 1000. Write a SQL query to select the field \"app_id\" in table \"applications\" where \"app_id\" less than 1000.       Write a SQL query to fetch the field \"app_name\" from \"apps\" where \"apps.id\" is equal to the above collection of \"app_id\". Write a SQL query to fetch the field \"app_name\" from \"apps\" where \"apps.id\" is equal to the above collection of \"app_id\". Write a SQL query to fetch the field \"app_name\" from \"apps\" where \"apps.id\" is equal to the above collection of \"app_id\". Write a SQL query to fetch the field \"app_name\" from \"apps\" where \"apps.id\" is equal to the above collection of \"app_id\". Write a SQL query to fetch the field \"app_name\" from \"apps\" where \"apps.id\" is equal to the above collection of \"app_id\".      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "19. What is a Primary Key?",
        "answer": "The PRIMARY KEY constraint uniquely identifies each row in a table. It must contain UNIQUE values and has an implicit NOT NULL constraint.\nA table in SQL is strictly restricted to have one and only one primary key, which is comprised of single or multiple fields (columns).  CREATE TABLE Students (   /* Create table with a single field as primary key */\n   ID INT NOT NULL\n   Name VARCHAR(255)\n   PRIMARY KEY (ID)\n);\n\nCREATE TABLE Students (   /* Create table with multiple fields as primary key */\n   ID INT NOT NULL\n   LastName VARCHAR(255)\n   FirstName VARCHAR(255) NOT NULL,\n   CONSTRAINT PK_Student\n   PRIMARY KEY (ID, FirstName)\n);\n\nALTER TABLE Students   /* Set a column as primary key */\nADD PRIMARY KEY (ID);\nALTER TABLE Students   /* Set multiple columns as primary key */\nADD CONSTRAINT PK_Student   /*Naming a Primary Key*/\nPRIMARY KEY (ID, FirstName); CREATE TABLE Students (   /* Create table with a single field as primary key */\n   ID INT NOT NULL\n   Name VARCHAR(255)\n   PRIMARY KEY (ID)\n);\n\nCREATE TABLE Students (   /* Create table with multiple fields as primary key */\n   ID INT NOT NULL\n   LastName VARCHAR(255)\n   FirstName VARCHAR(255) NOT NULL,\n   CONSTRAINT PK_Student\n   PRIMARY KEY (ID, FirstName)\n);\n\nALTER TABLE Students   /* Set a column as primary key */\nADD PRIMARY KEY (ID);\nALTER TABLE Students   /* Set multiple columns as primary key */\nADD CONSTRAINT PK_Student   /*Naming a Primary Key*/\nPRIMARY KEY (ID, FirstName); CREATE TABLE /* Create table with a single field as primary key */ INT NOT NULL VARCHAR 255 PRIMARY CREATE TABLE /* Create table with multiple fields as primary key */ INT NOT NULL VARCHAR 255 VARCHAR 255 NOT NULL CONSTRAINT PRIMARY ALTER TABLE /* Set a column as primary key */ ADD PRIMARY ALTER TABLE /* Set multiple columns as primary key */ ADD CONSTRAINT /*Naming a Primary Key*/ PRIMARY write a sql statement to add primary key 't_id' to the table 'teachers'.\nWrite a SQL statement to add primary key constraint 'pk_a' for table 'table_a' and fields 'col_b, col_c'. write a sql statement to add primary key 't_id' to the table 'teachers'. write a sql statement to add primary key 't_id' to the table 'teachers'. write a sql statement to add primary key 't_id' to the table 'teachers'. write a sql statement to add primary key 't_id' to the table 'teachers'.       Write a SQL statement to add primary key constraint 'pk_a' for table 'table_a' and fields 'col_b, col_c'. Write a SQL statement to add primary key constraint 'pk_a' for table 'table_a' and fields 'col_b, col_c'. Write a SQL statement to add primary key constraint 'pk_a' for table 'table_a' and fields 'col_b, col_c'. Write a SQL statement to add primary key constraint 'pk_a' for table 'table_a' and fields 'col_b, col_c'.      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "20. What are Constraints in SQL?",
        "answer": "Constraints are used to specify the rules concerning data in the table. It can be applied for single or multiple fields in an SQL table during the creation of the table or after creating using the ALTER TABLE command. The constraints are: NOT NULL - Restricts NULL value from being inserted into a column.\nCHECK - Verifies that all values in a field satisfy a condition.\nDEFAULT - Automatically assigns a default value if no value has been specified for the field.\nUNIQUE - Ensures unique values to be inserted into the field.\nINDEX - Indexes a field providing faster retrieval of records.\nPRIMARY KEY - Uniquely identifies each record in a table.\nFOREIGN KEY - Ensures referential integrity for a record in another table. NOT NULL - Restricts NULL value from being inserted into a column. NOT NULL CHECK - Verifies that all values in a field satisfy a condition. CHECK DEFAULT - Automatically assigns a default value if no value has been specified for the field. DEFAULT UNIQUE - Ensures unique values to be inserted into the field. UNIQUE INDEX - Indexes a field providing faster retrieval of records. INDEX PRIMARY KEY - Uniquely identifies each record in a table. PRIMARY KEY FOREIGN KEY - Ensures referential integrity for a record in another table. FOREIGN KEY",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "21. What are Tables and Fields?",
        "answer": "A table is an organized collection of data stored in the form of rows and columns. Columns can be categorized as vertical and rows as horizontal. The columns in a table are called fields while the rows can be referred to as records.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "22. What is the difference between SQL and MySQL?",
        "answer": "SQL is a standard language for retrieving and manipulating structured databases. On the contrary, MySQL is a relational database management system, like SQL Server, Oracle or IBM DB2, that is used to manage SQL databases.  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "23. What is SQL?",
        "answer": "SQL stands for Structured Query Language. It is the standard language for relational database management systems. It is especially useful in handling organized data comprised of entities (variables) and relations between different entities of the data.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "24. What is RDBMS? How is it different from DBMS?",
        "answer": "RDBMS stands for Relational Database Management System. The key difference here, compared to DBMS, is that RDBMS stores data in the form of a collection of tables, and relations can be defined between the common fields of these tables. Most modern database management systems like MySQL, Microsoft SQL Server, Oracle, IBM DB2, and Amazon Redshift are based on RDBMS. here  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "25. What is DBMS?",
        "answer": "DBMS stands for Database Management System. DBMS is a system software responsible for the creation, retrieval, updation, and management of the database. It ensures that our data is consistent, organized, and is easily accessible by serving as an interface between the database and its end-users or application software.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "26. What is Database?",
        "answer": "A database is an organized collection of data, stored and retrieved digitally from a remote or local computer system. Databases can be vast and complex, and such databases are developed using fixed design and modeling approaches.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "27. What is the SELECT statement?",
        "answer": "SELECT operator in SQL is used to select data from a database. The data returned is stored in a result table, called the result-set. SELECT * FROM myDB.students; SELECT * FROM myDB.students; SELECT * FROM",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "28. What are some common clauses used with SELECT query in SQL?",
        "answer": "Some common SQL clauses used in conjuction with a SELECT query are as follows: WHERE clause in SQL is used to filter records that are necessary, based on specific conditions.\nORDER BY clause in SQL is used to sort the records based on some field(s) in ascending (ASC) or descending order (DESC). WHERE clause in SQL is used to filter records that are necessary, based on specific conditions. WHERE ORDER BY clause in SQL is used to sort the records based on some field(s) in ascending (ASC) or descending order (DESC). ORDER BY ASC DESC) SELECT *\nFROM myDB.students\nWHERE graduation_year = 2019\nORDER BY studentID DESC; SELECT *\nFROM myDB.students\nWHERE graduation_year = 2019\nORDER BY studentID DESC; SELECT * FROM WHERE = 2019 ORDER BY DESC GROUP BY clause in SQL is used to group records with identical data and can be used in conjunction with some aggregation functions to produce summarized results from the database.\nHAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since the WHERE clause cannot filter aggregated records. GROUP BY clause in SQL is used to group records with identical data and can be used in conjunction with some aggregation functions to produce summarized results from the database. GROUP BY HAVING clause in SQL is used to filter records in combination with the GROUP BY clause. It is different from WHERE, since the WHERE clause cannot filter aggregated records. HAVING SELECT COUNT(studentId), country\nFROM myDB.students\nWHERE country != \"INDIA\"\nGROUP BY country\nHAVING COUNT(studentID) > 5; SELECT COUNT(studentId), country\nFROM myDB.students\nWHERE country != \"INDIA\"\nGROUP BY country\nHAVING COUNT(studentID) > 5; SELECT COUNT FROM WHERE != GROUP BY HAVING COUNT > 5",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "29. What are UNION, MINUS and INTERSECT commands?",
        "answer": "The UNION operator combines and returns the result-set retrieved by two or more SELECT statements.\nThe MINUS operator in SQL is used to remove duplicates from the result-set obtained by the second SELECT query from the result-set obtained by the first SELECT query and then return the filtered results from the first.\nThe INTERSECT clause in SQL combines the result-set fetched by the two SELECT statements where records from one match the other and then returns this intersection of result-sets. UNION  MINUS  INTERSECT Certain conditions need to be met before executing either of the above statements in SQL - Each SELECT statement within the clause must have the same number of columns\nThe columns must also have similar data types\nThe columns in each SELECT statement should necessarily have the same order Each SELECT statement within the clause must have the same number of columns The columns must also have similar data types The columns in each SELECT statement should necessarily have the same order SELECT name FROM Students   /* Fetch the union of queries */\nUNION\nSELECT name FROM Contacts;\nSELECT name FROM Students   /* Fetch the union of queries with duplicates*/\nUNION ALL\nSELECT name FROM Contacts; SELECT name FROM Students   /* Fetch the union of queries */\nUNION\nSELECT name FROM Contacts;\nSELECT name FROM Students   /* Fetch the union of queries with duplicates*/\nUNION ALL\nSELECT name FROM Contacts; SELECT FROM /* Fetch the union of queries */ UNION SELECT FROM SELECT FROM /* Fetch the union of queries with duplicates*/ UNION ALL SELECT FROM SELECT name FROM Students   /* Fetch names from students */\nMINUS     /* that aren't present in contacts */\nSELECT name FROM Contacts; SELECT name FROM Students   /* Fetch names from students */\nMINUS     /* that aren't present in contacts */\nSELECT name FROM Contacts; SELECT FROM /* Fetch names from students */ /* that aren't present in contacts */ SELECT FROM SELECT name FROM Students   /* Fetch names from students */\nINTERSECT    /* that are present in contacts as well */\nSELECT name FROM Contacts; SELECT name FROM Students   /* Fetch names from students */\nINTERSECT    /* that are present in contacts as well */\nSELECT name FROM Contacts; SELECT FROM /* Fetch names from students */ INTERSECT /* that are present in contacts as well */ SELECT FROM Write a SQL query to fetch \"names\" that are present in either table \"accounts\" or in table \"registry\". Write a SQL query to fetch \"names\" that are present in either table \"accounts\" or in table \"registry\". Write a SQL query to fetch \"names\" that are present in either table \"accounts\" or in table \"registry\". Write a SQL query to fetch \"names\" that are present in either table \"accounts\" or in table \"registry\". Write a SQL query to fetch \"names\" that are present in either table \"accounts\" or in table \"registry\".       Write a SQL query to fetch \"names\" that are present in \"accounts\" but not in table \"registry\". Write a SQL query to fetch \"names\" that are present in \"accounts\" but not in table \"registry\". Write a SQL query to fetch \"names\" that are present in \"accounts\" but not in table \"registry\". Write a SQL query to fetch \"names\" that are present in \"accounts\" but not in table \"registry\". Write a SQL query to fetch \"names\" that are present in \"accounts\" but not in table \"registry\".       Write a SQL query to fetch \"names\" from table \"contacts\" that are neither present in \"accounts.name\" nor in \"registry.name\". Write a SQL query to fetch \"names\" from table \"contacts\" that are neither present in \"accounts.name\" nor in \"registry.name\". Write a SQL query to fetch \"names\" from table \"contacts\" that are neither present in \"accounts.name\" nor in \"registry.name\". Write a SQL query to fetch \"names\" from table \"contacts\" that are neither present in \"accounts.name\" nor in \"registry.name\". Write a SQL query to fetch \"names\" from table \"contacts\" that are neither present in \"accounts.name\" nor in \"registry.name\".      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "30. What is Cursor? How to use a Cursor?",
        "answer": "A database cursor is a control structure that allows for the traversal of records in a database. Cursors, in addition, facilitates processing after traversal, such as retrieval, addition, and deletion of database records. They can be viewed as a pointer to one row in a set of rows. Working with SQL Cursor: Working with SQL Cursor: DECLARE a cursor after any variable declaration. The cursor declaration must always be associated with a SELECT Statement.\nOpen cursor to initialize the result set. The OPEN statement must be called before fetching rows from the result set.\nFETCH statement to retrieve and move to the next row in the result set.\nCall the CLOSE statement to deactivate the cursor.\nFinally use the DEALLOCATE statement to delete the cursor definition and release the associated resources. DECLARE a cursor after any variable declaration. The cursor declaration must always be associated with a SELECT Statement. DECLARE Open cursor to initialize the result set. The OPEN statement must be called before fetching rows from the result set. OPEN FETCH statement to retrieve and move to the next row in the result set. FETCH Call the CLOSE statement to deactivate the cursor. CLOSE Finally use the DEALLOCATE statement to delete the cursor definition and release the associated resources. DEALLOCATE DECLARE @name VARCHAR(50)   /* Declare All Required Variables */\nDECLARE db_cursor CURSOR FOR   /* Declare Cursor Name*/\nSELECT name\nFROM myDB.students\nWHERE parent_name IN ('Sara', 'Ansh')\nOPEN db_cursor   /* Open cursor and Fetch data into @name */ \nFETCH next\nFROM db_cursor\nINTO @name\nCLOSE db_cursor   /* Close the cursor and deallocate the resources */\nDEALLOCATE db_cursor DECLARE @name VARCHAR(50)   /* Declare All Required Variables */\nDECLARE db_cursor CURSOR FOR   /* Declare Cursor Name*/\nSELECT name\nFROM myDB.students\nWHERE parent_name IN ('Sara', 'Ansh')\nOPEN db_cursor   /* Open cursor and Fetch data into @name */ \nFETCH next\nFROM db_cursor\nINTO @name\nCLOSE db_cursor   /* Close the cursor and deallocate the resources */\nDEALLOCATE db_cursor DECLARE @name VARCHAR 50 /* Declare All Required Variables */ DECLARE CURSOR FOR /* Declare Cursor Name*/ SELECT FROM WHERE IN 'Sara' 'Ansh' OPEN /* Open cursor and Fetch data into @name */ FETCH FROM INTO @name CLOSE /* Close the cursor and deallocate the resources */ DEALLOCATE",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "31. What are Entities and Relationships?",
        "answer": "Entity: An entity can be a real-world object, either tangible or intangible, that can be easily identifiable. For example, in a college database, students, professors, workers, departments, and projects can be referred to as entities. Each entity has some associated properties that provide it an identity. Entity Relationships: Relations or links between entities that have something to do with each other. For example - The employee's table in a company's database can be associated with the salary table in the same database. Relationships  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "32. List the different types of relationships in SQL.",
        "answer": "One-to-One - This can be defined as the relationship between two tables where each record in one table is associated with the maximum of one record in the other table.\nOne-to-Many & Many-to-One - This is the most commonly used relationship where a record in a table is associated with multiple records in the other table.\nMany-to-Many - This is used in cases when multiple instances on both sides are needed for defining a relationship.\nSelf-Referencing Relationships - This is used when a table needs to define a relationship with itself. One-to-One - This can be defined as the relationship between two tables where each record in one table is associated with the maximum of one record in the other table. One-to-One One-to-Many & Many-to-One - This is the most commonly used relationship where a record in a table is associated with multiple records in the other table. One-to-Many & Many-to-One Many-to-Many - This is used in cases when multiple instances on both sides are needed for defining a relationship. Many-to-Many Self-Referencing Relationships - This is used when a table needs to define a relationship with itself. Self-Referencing Relationships",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "33. What is an Alias in SQL?",
        "answer": "An alias is a feature of SQL that is supported by most, if not all, RDBMSs. It is a temporary name assigned to the table or table column for the purpose of a particular SQL query. In addition, aliasing can be employed as an obfuscation technique to secure the real names of database fields. A table alias is also called a correlation name. An alias is represented explicitly by the AS keyword but in some cases, the same can be performed without it as well. Nevertheless, using the AS keyword is always a good practice. SELECT A.emp_name AS \"Employee\"  /* Alias using AS keyword */\nB.emp_name AS \"Supervisor\"\nFROM employee A, employee B   /* Alias without AS keyword */\nWHERE A.emp_sup = B.emp_id; SELECT A.emp_name AS \"Employee\"  /* Alias using AS keyword */\nB.emp_name AS \"Supervisor\"\nFROM employee A, employee B   /* Alias without AS keyword */\nWHERE A.emp_sup = B.emp_id; SELECT AS /* Alias using AS keyword */ AS FROM /* Alias without AS keyword */ WHERE = Write an SQL statement to select all from table \"Limited\" with alias \"Ltd\". Write an SQL statement to select all from table \"Limited\" with alias \"Ltd\". Write an SQL statement to select all from table \"Limited\" with alias \"Ltd\". Write an SQL statement to select all from table \"Limited\" with alias \"Ltd\". Write an SQL statement to select all from table \"Limited\" with alias \"Ltd\".      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "34. What is a View?",
        "answer": "A view in SQL is a virtual table based on the result-set of an SQL statement. A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "35. What is Normalization?",
        "answer": "Normalization represents the way of organizing structured data in the database efficiently. It includes the creation of tables, establishing relationships between them, and defining rules for those relationships. Inconsistency and redundancy can be kept in check based on these rules, hence, adding flexibility to the database.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "36. What is Denormalization?",
        "answer": "Denormalization is the inverse process of normalization, where the normalized schema is converted into a schema that has redundant information. The performance is improved by using redundancy and keeping the redundant data consistent. The reason for performing denormalization is the overheads produced in the query processor by an over-normalized structure.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "37. What are the various forms of Normalization?",
        "answer": "Normal Forms are used to eliminate or reduce redundancy in database tables. The different forms are as follows: First Normal Form:\nA relation is in first normal form if every attribute in that relation is a single-valued attribute. If a relation contains a composite or multi-valued attribute, it violates the first normal form. Let's consider the following students table. Each student in the table, has a name, his/her address, and the books they issued from the public library - First Normal Form:\nA relation is in first normal form if every attribute in that relation is a single-valued attribute. If a relation contains a composite or multi-valued attribute, it violates the first normal form. Let's consider the following students table. Each student in the table, has a name, his/her address, and the books they issued from the public library - First Normal Form:  single-valued attribute students Students Table Students Table Student  Address  Books Issued  Salutation\nSara  Amanora Park Town 94  Until the Day I Die (Emily Carpenter), Inception (Christopher Nolan) Ms.\nAnsh 62nd Sector A-10  The Alchemist (Paulo Coelho), Inferno (Dan Brown)  Mr.\nSara  24th Street Park Avenue  Beautiful Bad (Annie Ward), Woman 99 (Greer Macallister) Mrs.\nAnsh  Windsor Street 777  Dracula (Bram Stoker) Mr. Student  Address  Books Issued  Salutation\nSara  Amanora Park Town 94  Until the Day I Die (Emily Carpenter), Inception (Christopher Nolan) Ms.\nAnsh 62nd Sector A-10  The Alchemist (Paulo Coelho), Inferno (Dan Brown)  Mr.\nSara  24th Street Park Avenue  Beautiful Bad (Annie Ward), Woman 99 (Greer Macallister) Mrs.\nAnsh  Windsor Street 777  Dracula (Bram Stoker) Mr. Student  Address  Books Issued  Salutation Student  Address  Books Issued  Salutation Student Address Books Issued Salutation Sara  Amanora Park Town 94  Until the Day I Die (Emily Carpenter), Inception (Christopher Nolan) Ms.\nAnsh 62nd Sector A-10  The Alchemist (Paulo Coelho), Inferno (Dan Brown)  Mr.\nSara  24th Street Park Avenue  Beautiful Bad (Annie Ward), Woman 99 (Greer Macallister) Mrs.\nAnsh  Windsor Street 777  Dracula (Bram Stoker) Mr. Sara  Amanora Park Town 94  Until the Day I Die (Emily Carpenter), Inception (Christopher Nolan) Ms. Sara Amanora Park Town 94 Until the Day I Die (Emily Carpenter), Inception (Christopher Nolan) Ms. Ansh 62nd Sector A-10  The Alchemist (Paulo Coelho), Inferno (Dan Brown)  Mr. Ansh 62nd Sector A-10 The Alchemist (Paulo Coelho), Inferno (Dan Brown) Mr. Sara  24th Street Park Avenue  Beautiful Bad (Annie Ward), Woman 99 (Greer Macallister) Mrs. Sara 24th Street Park Avenue Beautiful Bad (Annie Ward), Woman 99 (Greer Macallister) Mrs. Ansh  Windsor Street 777  Dracula (Bram Stoker) Mr. Ansh Windsor Street 777 Dracula (Bram Stoker) Mr. As we can observe, the Books Issued field has more than one value per record, and to convert it into 1NF, this has to be resolved into separate individual records for each book issued. Check the following table in 1NF form - Students Table (1st Normal Form) Students Table (1st Normal Form) Student  Address  Books Issued  Salutation\nSara Amanora Park Town 94 Until the Day I Die (Emily Carpenter)  Ms.\nSara Amanora Park Town 94 Inception (Christopher Nolan)  Ms.\nAnsh 62nd Sector A-10 The Alchemist (Paulo Coelho)  Mr.\nAnsh 62nd Sector A-10 Inferno (Dan Brown)  Mr.\nSara 24th Street Park Avenue Beautiful Bad (Annie Ward)  Mrs.\nSara 24th Street Park Avenue Woman 99 (Greer Macallister)  Mrs.\nAnsh Windsor Street 777 Dracula (Bram Stoker)  Mr. Student  Address  Books Issued  Salutation\nSara Amanora Park Town 94 Until the Day I Die (Emily Carpenter)  Ms.\nSara Amanora Park Town 94 Inception (Christopher Nolan)  Ms.\nAnsh 62nd Sector A-10 The Alchemist (Paulo Coelho)  Mr.\nAnsh 62nd Sector A-10 Inferno (Dan Brown)  Mr.\nSara 24th Street Park Avenue Beautiful Bad (Annie Ward)  Mrs.\nSara 24th Street Park Avenue Woman 99 (Greer Macallister)  Mrs.\nAnsh Windsor Street 777 Dracula (Bram Stoker)  Mr. Student  Address  Books Issued  Salutation Student  Address  Books Issued  Salutation Student Address Books Issued Salutation Sara Amanora Park Town 94 Until the Day I Die (Emily Carpenter)  Ms.\nSara Amanora Park Town 94 Inception (Christopher Nolan)  Ms.\nAnsh 62nd Sector A-10 The Alchemist (Paulo Coelho)  Mr.\nAnsh 62nd Sector A-10 Inferno (Dan Brown)  Mr.\nSara 24th Street Park Avenue Beautiful Bad (Annie Ward)  Mrs.\nSara 24th Street Park Avenue Woman 99 (Greer Macallister)  Mrs.\nAnsh Windsor Street 777 Dracula (Bram Stoker)  Mr. Sara Amanora Park Town 94 Until the Day I Die (Emily Carpenter)  Ms. Sara Amanora Park Town 94 Until the Day I Die (Emily Carpenter) Ms. Sara Amanora Park Town 94 Inception (Christopher Nolan)  Ms. Sara Amanora Park Town 94 Inception (Christopher Nolan) Ms. Ansh 62nd Sector A-10 The Alchemist (Paulo Coelho)  Mr. Ansh 62nd Sector A-10 The Alchemist (Paulo Coelho) Mr. Ansh 62nd Sector A-10 Inferno (Dan Brown)  Mr. Ansh 62nd Sector A-10 Inferno (Dan Brown) Mr. Sara 24th Street Park Avenue Beautiful Bad (Annie Ward)  Mrs. Sara 24th Street Park Avenue Beautiful Bad (Annie Ward) Mrs. Sara 24th Street Park Avenue Woman 99 (Greer Macallister)  Mrs. Sara 24th Street Park Avenue Woman 99 (Greer Macallister) Mrs. Ansh Windsor Street 777 Dracula (Bram Stoker)  Mr. Ansh Windsor Street 777 Dracula (Bram Stoker) Mr. Second Normal Form: Second Normal Form: Second Normal Form: A relation is in second normal form if it satisfies the conditions for the first normal form and does not contain any partial dependency. A relation in 2NF has no partial dependency, i.e., it has no non-prime attribute that depends on any proper subset of any candidate key of the table. Often, specifying a single column Primary Key is the solution to the problem. Examples - no partial dependency Example 1 - Consider the above example. As we can observe, the Students Table in the 1NF form has a candidate key in the form of [Student, Address] that can uniquely identify all records in the table. The field Books Issued (non-prime attribute) depends partially on the Student field. Hence, the table is not in 2NF. To convert it into the 2nd Normal Form, we will partition the tables into two while specifying a new Primary Key attribute to identify the individual records in the Students table. The Foreign Key constraint will be set on the other table to ensure referential integrity. Example 1 Primary Key Primary Key Foreign Key Foreign Key Students Table (2nd Normal Form) Students Table (2nd Normal Form) Student_ID  Student Address  Salutation\n1 Sara Amanora Park Town 94  Ms.\n2 Ansh 62nd Sector A-10  Mr.\n3 Sara 24th Street Park Avenue  Mrs.\n4 Ansh Windsor Street 777  Mr. Student_ID  Student Address  Salutation\n1 Sara Amanora Park Town 94  Ms.\n2 Ansh 62nd Sector A-10  Mr.\n3 Sara 24th Street Park Avenue  Mrs.\n4 Ansh Windsor Street 777  Mr. Student_ID  Student Address  Salutation Student_ID  Student Address  Salutation Student_ID Student Address Salutation 1 Sara Amanora Park Town 94  Ms.\n2 Ansh 62nd Sector A-10  Mr.\n3 Sara 24th Street Park Avenue  Mrs.\n4 Ansh Windsor Street 777  Mr. 1 Sara Amanora Park Town 94  Ms. 1 Sara Amanora Park Town 94 Ms. 2 Ansh 62nd Sector A-10  Mr. 2 Ansh 62nd Sector A-10 Mr. 3 Sara 24th Street Park Avenue  Mrs. 3 Sara 24th Street Park Avenue Mrs. 4 Ansh Windsor Street 777  Mr. 4 Ansh Windsor Street 777 Mr. Books Table (2nd Normal Form) Books Table (2nd Normal Form) Student_ID  Book Issued\n1 Until the Day I Die (Emily Carpenter)\n1 Inception (Christopher Nolan)\n2 The Alchemist (Paulo Coelho)\n2 Inferno (Dan Brown)\n3 Beautiful Bad (Annie Ward)\n3 Woman 99 (Greer Macallister)\n4 Dracula (Bram Stoker) Student_ID  Book Issued\n1 Until the Day I Die (Emily Carpenter)\n1 Inception (Christopher Nolan)\n2 The Alchemist (Paulo Coelho)\n2 Inferno (Dan Brown)\n3 Beautiful Bad (Annie Ward)\n3 Woman 99 (Greer Macallister)\n4 Dracula (Bram Stoker) Student_ID  Book Issued Student_ID  Book Issued Student_ID Book Issued 1 Until the Day I Die (Emily Carpenter)\n1 Inception (Christopher Nolan)\n2 The Alchemist (Paulo Coelho)\n2 Inferno (Dan Brown)\n3 Beautiful Bad (Annie Ward)\n3 Woman 99 (Greer Macallister)\n4 Dracula (Bram Stoker) 1 Until the Day I Die (Emily Carpenter) 1 Until the Day I Die (Emily Carpenter) 1 Inception (Christopher Nolan) 1 Inception (Christopher Nolan) 2 The Alchemist (Paulo Coelho) 2 The Alchemist (Paulo Coelho) 2 Inferno (Dan Brown) 2 Inferno (Dan Brown) 3 Beautiful Bad (Annie Ward) 3 Beautiful Bad (Annie Ward) 3 Woman 99 (Greer Macallister) 3 Woman 99 (Greer Macallister) 4 Dracula (Bram Stoker) 4 Dracula (Bram Stoker) Example 2 - Consider the following dependencies in relation to R(W,X,Y,Z) Example 2 WX -> Y    [W and X together determine Y] \n XY -> Z    [X and Y together determine Z] WX -> Y    [W and X together determine Y] \n XY -> Z    [X and Y together determine Z] - > and - > and Here, WX is the only candidate key and there is no partial dependency, i.e., any proper subset of WX doesn’t determine any non-prime attribute in the relation. Third Normal Form Third Normal Form Third Normal Form A relation is said to be in the third normal form, if it satisfies the conditions for the second normal form and there is no transitive dependency between the non-prime attributes, i.e., all non-prime attributes are determined only by the candidate keys of the relation and not by any other non-prime attribute. no transitive dependency Example 1 - Consider the Students Table in the above example. As we can observe, the Students Table in the 2NF form has a single candidate key Student_ID (primary key) that can uniquely identify all records in the table. The field Salutation (non-prime attribute), however, depends on the Student Field rather than the candidate key. Hence, the table is not in 3NF. To convert it into the 3rd Normal Form, we will once again partition the tables into two while specifying a new Foreign Key constraint to identify the salutations for individual records in the Students table. The Primary Key constraint for the same will be set on the Salutations table to identify each record uniquely. Example 1 Foreign Key Foreign Key Primary Key Primary Key Students Table (3rd Normal Form) Students Table (3rd Normal Form) Student_ID  Student  Address  Salutation_ID\n1 Sara Amanora Park Town 94  1\n2 Ansh 62nd Sector A-10  2\n3 Sara 24th Street Park Avenue  3\n4 Ansh Windsor Street 777  1 Student_ID  Student  Address  Salutation_ID\n1 Sara Amanora Park Town 94  1\n2 Ansh 62nd Sector A-10  2\n3 Sara 24th Street Park Avenue  3\n4 Ansh Windsor Street 777  1 Student_ID  Student  Address  Salutation_ID Student_ID  Student  Address  Salutation_ID Student_ID Student Address Salutation_ID 1 Sara Amanora Park Town 94  1\n2 Ansh 62nd Sector A-10  2\n3 Sara 24th Street Park Avenue  3\n4 Ansh Windsor Street 777  1 1 Sara Amanora Park Town 94  1 1 Sara Amanora Park Town 94 1 2 Ansh 62nd Sector A-10  2 2 Ansh 62nd Sector A-10 2 3 Sara 24th Street Park Avenue  3 3 Sara 24th Street Park Avenue 3 4 Ansh Windsor Street 777  1 4 Ansh Windsor Street 777 1 Books Table (3rd Normal Form) Books Table (3rd Normal Form) Student_ID Book Issued\n1 Until the Day I Die (Emily Carpenter)\n1 Inception (Christopher Nolan)\n2 The Alchemist (Paulo Coelho)\n2 Inferno (Dan Brown)\n3 Beautiful Bad (Annie Ward)\n3 Woman 99 (Greer Macallister)\n4 Dracula (Bram Stoker) Student_ID Book Issued\n1 Until the Day I Die (Emily Carpenter)\n1 Inception (Christopher Nolan)\n2 The Alchemist (Paulo Coelho)\n2 Inferno (Dan Brown)\n3 Beautiful Bad (Annie Ward)\n3 Woman 99 (Greer Macallister)\n4 Dracula (Bram Stoker) Student_ID Book Issued Student_ID Book Issued Student_ID Book Issued 1 Until the Day I Die (Emily Carpenter)\n1 Inception (Christopher Nolan)\n2 The Alchemist (Paulo Coelho)\n2 Inferno (Dan Brown)\n3 Beautiful Bad (Annie Ward)\n3 Woman 99 (Greer Macallister)\n4 Dracula (Bram Stoker) 1 Until the Day I Die (Emily Carpenter) 1 Until the Day I Die (Emily Carpenter) 1 Inception (Christopher Nolan) 1 Inception (Christopher Nolan) 2 The Alchemist (Paulo Coelho) 2 The Alchemist (Paulo Coelho) 2 Inferno (Dan Brown) 2 Inferno (Dan Brown) 3 Beautiful Bad (Annie Ward) 3 Beautiful Bad (Annie Ward) 3 Woman 99 (Greer Macallister) 3 Woman 99 (Greer Macallister) 4 Dracula (Bram Stoker) 4 Dracula (Bram Stoker) Salutations Table (3rd Normal Form) Salutations Table (3rd Normal Form) Salutation_ID Salutation\n1 Ms.\n2 Mr.\n3 Mrs. Salutation_ID Salutation\n1 Ms.\n2 Mr.\n3 Mrs. Salutation_ID Salutation Salutation_ID Salutation Salutation_ID Salutation 1 Ms.\n2 Mr.\n3 Mrs. 1 Ms. 1 Ms. 2 Mr. 2 Mr. 3 Mrs. 3 Mrs. Example 2 - Consider the following dependencies in relation to R(P,Q,R,S,T) Example 2 P -> QR     [P together determine C] \n RS -> T     [B and C together determine D] \n Q -> S \n T -> P P -> QR     [P together determine C] \n RS -> T     [B and C together determine D] \n Q -> S \n T -> P - > - > and - > - > For the above relation to exist in 3NF, all possible candidate keys in the above relation should be {P, RS, QR, T}. Boyce-Codd Normal Form Boyce-Codd Normal Form Boyce-Codd Normal Form A relation is in Boyce-Codd Normal Form if satisfies the conditions for third normal form and for every functional dependency, Left-Hand-Side is super key. In other words, a relation in BCNF has non-trivial functional dependencies in form X –> Y, such that X is always a super key. For example - In the above example, Student_ID serves as the sole unique identifier for the Students Table and Salutation_ID for the Salutations Table, thus these tables exist in BCNF. The same cannot be said for the Books Table and there can be several books with common Book Names and the same Student_ID.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "38. What are the TRUNCATE, DELETE and DROP statements?",
        "answer": "DELETE statement is used to delete rows from a table. DELETE DELETE FROM Candidates\nWHERE CandidateId > 1000; DELETE FROM Candidates\nWHERE CandidateId > 1000; DELETE FROM WHERE > 1000 TRUNCATE command is used to delete all the rows from the table and free the space containing the table. TRUNCATE TRUNCATE TABLE Candidates; TRUNCATE TABLE Candidates; TRUNCATE TABLE DROP command is used to remove an object from the database. If you drop a table, all the rows in the table are deleted and the table structure is removed from the database. DROP DROP TABLE Candidates; DROP TABLE Candidates; DROP TABLE Write a SQL statement to wipe a table 'Temporary' from memory. Write a SQL statement to wipe a table 'Temporary' from memory. Write a SQL statement to wipe a table 'Temporary' from memory. Write a SQL statement to wipe a table 'Temporary' from memory. Write a SQL statement to wipe a table 'Temporary' from memory.       Write a SQL query to remove first 1000 records from table 'Temporary' based on 'id'. Write a SQL query to remove first 1000 records from table 'Temporary' based on 'id'. Write a SQL query to remove first 1000 records from table 'Temporary' based on 'id'. Write a SQL query to remove first 1000 records from table 'Temporary' based on 'id'. Write a SQL query to remove first 1000 records from table 'Temporary' based on 'id'.       Write a SQL statement to delete the table 'Temporary' while keeping its relations intact. Write a SQL statement to delete the table 'Temporary' while keeping its relations intact. Write a SQL statement to delete the table 'Temporary' while keeping its relations intact. Write a SQL statement to delete the table 'Temporary' while keeping its relations intact. Write a SQL statement to delete the table 'Temporary' while keeping its relations intact.      ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "39. What is the difference between DROP and TRUNCATE statements?",
        "answer": "If a table is dropped, all things associated with the tables are dropped as well. This includes - the relationships defined on the table with other tables, the integrity checks and constraints, access privileges and other grants that the table has. To create and use the table again in its original form, all these relations, checks, constraints, privileges and relationships need to be redefined. However, if a table is truncated, none of the above problems exist and the table retains its original structure.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "40. What is the difference between DELETE and TRUNCATE statements?",
        "answer": "The TRUNCATE command is used to delete all the rows from the table and free the space containing the table.\nThe DELETE command deletes only the rows from the table based on the condition given in the where clause or deletes all the rows from the table if no condition is specified. But it does not free the space containing the table. TRUNCATE  DELETE",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "41. What are Aggregate and Scalar functions?",
        "answer": "An aggregate function performs operations on a collection of values to return a single scalar value. Aggregate functions are often used with the GROUP BY and HAVING clauses of the SELECT statement. Following are the widely used SQL aggregate functions: AVG() - Calculates the mean of a collection of values.\nCOUNT() - Counts the total number of records in a specific table or view.\nMIN() - Calculates the minimum of a collection of values.\nMAX() - Calculates the maximum of a collection of values.\nSUM() - Calculates the sum of a collection of values.\nFIRST() - Fetches the first element in a collection of values.\nLAST() - Fetches the last element in a collection of values. AVG() - Calculates the mean of a collection of values. AVG() COUNT() - Counts the total number of records in a specific table or view. COUNT() MIN() - Calculates the minimum of a collection of values. MIN() MAX() - Calculates the maximum of a collection of values. MAX() SUM() - Calculates the sum of a collection of values. SUM() FIRST() - Fetches the first element in a collection of values. FIRST() LAST() - Fetches the last element in a collection of values. LAST() Note: All aggregate functions described above ignore NULL values except for the COUNT function. Note: A scalar function returns a single value based on the input value. Following are the widely used SQL scalar functions: LEN() - Calculates the total length of the given field (column).\nUCASE() - Converts a collection of string values to uppercase characters.\nLCASE() - Converts a collection of string values to lowercase characters.\nMID() - Extracts substrings from a collection of string values in a table.\nCONCAT() - Concatenates two or more strings.\nRAND() - Generates a random collection of numbers of a given length.\nROUND() - Calculates the round-off integer value for a numeric field (or decimal point values).\nNOW() - Returns the current date & time.\nFORMAT() - Sets the format to display a collection of values. LEN() - Calculates the total length of the given field (column). LEN() UCASE() - Converts a collection of string values to uppercase characters. UCASE() LCASE() - Converts a collection of string values to lowercase characters. LCASE() MID() - Extracts substrings from a collection of string values in a table. MID() CONCAT() - Concatenates two or more strings. CONCAT() RAND() - Generates a random collection of numbers of a given length. RAND() ROUND() - Calculates the round-off integer value for a numeric field (or decimal point values). ROUND() NOW() - Returns the current date & time. NOW() FORMAT() - Sets the format to display a collection of values. FORMAT()",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "1. What is PostgreSQL?",
        "answer": "PostgreSQL was first called Postgres and was developed by a team led by Computer Science Professor Michael Stonebraker in 1986. It was developed to help developers build enterprise-level applications by upholding data integrity by making systems fault-tolerant. PostgreSQL is therefore an enterprise-level, flexible, robust, open-source, and object-relational DBMS that supports flexible workloads along with handling concurrent users. It has been consistently supported by the global developer community. Due to its fault-tolerant nature, PostgreSQL has gained widespread popularity among developers. PostgreSQL",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "2. What is the capacity of a table in PostgreSQL?",
        "answer": "The maximum size of PostgreSQL is 32TB.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "3. What is the importance of the TRUNCATE statement?",
        "answer": "TRUNCATE TABLE name_of_table statement removes the data efficiently and quickly from the table.\nThe truncate statement can also be used to reset values of the identity columns along with data cleanup as shown below: TRUNCATE TABLE name_of_table  TRUNCATE TABLE name_of_table \nRESTART IDENTITY; TRUNCATE TABLE name_of_table \nRESTART IDENTITY; We can also use the statement for removing data from multiple tables all at once by mentioning the table names separated by comma as shown below: TRUNCATE TABLE \n   table_1, \n   table_2,\n   table_3; TRUNCATE TABLE \n   table_1, \n   table_2,\n   table_3;",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "4. Define tokens in PostgreSQL?",
        "answer": "A token in PostgreSQL is either a keyword, identifier, literal, constant, quotes identifier, or any symbol that has a distinctive personality. They may or may not be separated using a space, newline or a tab. If the tokens are keywords, they are usually commands with useful meanings. Tokens are known as building blocks of any PostgreSQL code.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "5. What are partitioned tables called in PostgreSQL?",
        "answer": "Partitioned tables are logical structures that are used for dividing large tables into smaller structures that are called partitions. This approach is used for effectively increasing the query performance while dealing with large database tables. To create a partition, a key called partition key which is usually a table column or an expression, and a partitioning method needs to be defined. There are three types of inbuilt partitioning methods provided by Postgres: Range Partitioning: This method is done by partitioning based on a range of values. This method is most commonly used upon date fields to get monthly, weekly or yearly data. In the case of corner cases like value belonging to the end of the range, for example: if the range of partition 1 is 10-20 and the range of partition 2 is 20-30, and the given value is 10, then 10 belongs to the second partition and not the first.\nList Partitioning: This method is used to partition based on a list of known values. Most commonly used when we have a key with a categorical value. For example, getting sales data based on regions divided as countries, cities, or states.\nHash Partitioning: This method utilizes a hash function upon the partition key. This is done when there are no specific requirements for data division and is used to access data individually. For example, you want to access data based on a specific product, then using hash partition would result in the dataset that we require. Range Partitioning: This method is done by partitioning based on a range of values. This method is most commonly used upon date fields to get monthly, weekly or yearly data. In the case of corner cases like value belonging to the end of the range, for example: if the range of partition 1 is 10-20 and the range of partition 2 is 20-30, and the given value is 10, then 10 belongs to the second partition and not the first. Range Partitioning List Partitioning: This method is used to partition based on a list of known values. Most commonly used when we have a key with a categorical value. For example, getting sales data based on regions divided as countries, cities, or states. List Partitioning: Hash Partitioning: This method utilizes a hash function upon the partition key. This is done when there are no specific requirements for data division and is used to access data individually. For example, you want to access data based on a specific product, then using hash partition would result in the dataset that we require. Hash Partitioning: The type of partition key and the type of method used for partitioning determines how positive the performance and the level of manageability of the partitioned table are.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "6. How can we start, restart and stop the PostgreSQL server?",
        "answer": "To start the PostgreSQL server, we run: To start the PostgreSQL server, we run: start service postgresql start service postgresql start Once the server is successfully started, we get the below message: Once the server is successfully started, we get the below message: server Starting PostgreSQL: ok Starting PostgreSQL: ok To restart the PostgreSQL server, we run: To restart the PostgreSQL server, we run: restart service postgresql restart service postgresql restart Once the server is successfully restarted, we get the message: Restarting PostgreSQL: server stopped\nok Restarting PostgreSQL: server stopped\nok To stop the server, we run the command: To stop the server, we run the command: stop service postgresql stop service postgresql stop Once stopped successfully, we get the message: Stopping PostgreSQL: server stopped\nok Stopping PostgreSQL: server stopped\nok",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "7. What is the command used for creating a database in PostgreSQL?",
        "answer": "The first step of using PostgreSQL is to create a database. This is done by using the createdb command as shown below: createdb db_name\nAfter running the above command, if the database creation was successful, then the below message is shown: createdb db_name  CREATE DATABASE CREATE DATABASE",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "8. How will you change the datatype of a column?",
        "answer": "This can be done by using the ALTER TABLE statement as shown below: Syntax: Syntax: ALTER TABLE tname\nALTER COLUMN col_name [SET DATA] TYPE new_data_type; ALTER TABLE tname\nALTER COLUMN col_name [SET DATA] TYPE new_data_type;",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "9. How do you define Indexes in PostgreSQL?",
        "answer": "Indexes are the inbuilt functions in PostgreSQL which are used by the queries to perform search more efficiently on a table in the database. Consider that you have a table with thousands of records and you have the below query that only a few records can satisfy the condition, then it will take a lot of time to search and return those rows that abide by this condition as the engine has to perform the search operation on every single to check this condition. This is undoubtedly inefficient for a system dealing with huge data. Now if this system had an index on the column where we are applying search, it can use an efficient method for identifying matching rows by walking through only a few levels. This is called indexing. Select * from some_table where table_col=120 Select * from some_table where table_col=120",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "10. Define sequence.",
        "answer": "A sequence is a schema-bound, user-defined object which aids to generate a sequence of integers. This is most commonly used to generate values to identity columns in a table. We can create a sequence by using the CREATE SEQUENCE statement as shown below: CREATE SEQUENCE CREATE SEQUENCE serial_num START 100; CREATE SEQUENCE serial_num START 100; To get the next number 101 from the sequence, we use the nextval() method as shown below: SELECT nextval('serial_num'); SELECT nextval('serial_num'); We can also use this sequence while inserting new records using the INSERT command: INSERT INTO ib_table_name VALUES (nextval('serial_num'), 'interviewbit'); INSERT INTO ib_table_name VALUES (nextval('serial_num'), 'interviewbit');",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "11. What are string constants in PostgreSQL?",
        "answer": "They are character sequences bound within single quotes. These are using during data insertion or updation to characters in the database.\nThere are special string constants that are quoted in dollars. Syntax: $tag$<string_constant>$tag$ The tag in the constant is optional and when we are not specifying the tag, the constant is called a double-dollar string literal.  $tag$<string_constant>$tag$",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "12. How can you get a list of all databases in PostgreSQL?",
        "answer": "This can be done by using the command \\l -> backslash followed by the lower-case letter L. \\l",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "13. How can you delete a database in PostgreSQL?",
        "answer": "This can be done by using the DROP DATABASE command as shown in the syntax below: DROP DATABASE database_name; DROP DATABASE database_name; If the database has been deleted successfully, then the following message would be shown: DROP DATABASE DROP DATABASE",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "14. What are ACID properties? Is PostgreSQL compliant with ACID?",
        "answer": "ACID stands for Atomicity, Consistency, Isolation, Durability. They are database transaction properties which are used for guaranteeing data validity in case of errors and failures. Atomicity: This property ensures that the transaction is completed in all-or-nothing way.\nConsistency: This ensures that updates made to the database is valid and follows rules and restrictions.\nIsolation: This property ensures integrity of transaction that are visible to all other transactions.\nDurability: This property ensures that the committed transactions are stored permanently in the database. Atomicity: This property ensures that the transaction is completed in all-or-nothing way. Atomicity Consistency: This ensures that updates made to the database is valid and follows rules and restrictions. Consistency Isolation: This property ensures integrity of transaction that are visible to all other transactions. Isolation Durability: This property ensures that the committed transactions are stored permanently in the database. Durability PostgreSQL is compliant with ACID properties.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "15. Can you explain the architecture of PostgreSQL?",
        "answer": "The architecture of PostgreSQL follows the client-server model.\nThe server side comprises of background process manager, query processer, utilities and shared memory space which work together to build PostgreSQL’s instance that has access to the data. The client application does the task of connecting to this instance and requests data processing to the services. The client can either be GUI (Graphical User Interface) or a web application. The most commonly used client for PostgreSQL is pgAdmin. The architecture of PostgreSQL follows the client-server model. The server side comprises of background process manager, query processer, utilities and shared memory space which work together to build PostgreSQL’s instance that has access to the data. The client application does the task of connecting to this instance and requests data processing to the services. The client can either be GUI (Graphical User Interface) or a web application. The most commonly used client for PostgreSQL is pgAdmin.  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "16. What do you understand by multi-version concurrency control?",
        "answer": "MVCC or Multi-version concurrency control is used for avoiding unnecessary database locks when 2 or more requests tries to access or modify the data at the same time. This ensures that the time lag for a user to log in to the database is avoided. The transactions are recorded when anyone tries to access the content. For more information regarding this, you can refer here. here",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "17. What do you understand by command enable-debug?",
        "answer": "The command enable-debug is used for enabling the compilation of all libraries and applications. When this is enabled, the system processes get hindered and generally also increases the size of the binary file. Hence, it is not recommended to switch this on in the production environment. This is most commonly used by developers to debug the bugs in their scripts and help them spot the issues. For more information regarding how to debug, you can refer here. here",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "18. How do you check the rows affected as part of previous transactions?",
        "answer": "SQL standards state that the following three phenomena should be prevented whilst concurrent transactions. SQL standards define 4 levels of transaction isolations to deal with these phenomena. Dirty reads: If a transaction reads data that is written due to concurrent uncommitted transaction, these reads are called dirty reads.\nPhantom reads: This occurs when two same queries when executed separately return different rows. For example, if transaction A retrieves some set of rows matching search criteria. Assume another transaction B retrieves new rows in addition to the rows obtained earlier for the same search criteria. The results are different.\nNon-repeatable reads: This occurs when a transaction tries to read the same row multiple times and gets different values each time due to concurrency. This happens when another transaction updates that data and our current transaction fetches that updated data, resulting in different values. Dirty reads: If a transaction reads data that is written due to concurrent uncommitted transaction, these reads are called dirty reads. Dirty reads Phantom reads: This occurs when two same queries when executed separately return different rows. For example, if transaction A retrieves some set of rows matching search criteria. Assume another transaction B retrieves new rows in addition to the rows obtained earlier for the same search criteria. The results are different. Phantom reads Non-repeatable reads: This occurs when a transaction tries to read the same row multiple times and gets different values each time due to concurrency. This happens when another transaction updates that data and our current transaction fetches that updated data, resulting in different values. Non-repeatable reads To tackle these, there are 4 standard isolation levels defined by SQL standards. They are as follows: Read Uncommitted – The lowest level of the isolations. Here, the transactions are not isolated and can read data that are not committed by other transactions resulting in dirty reads.\nRead Committed – This level ensures that the data read is committed at any instant of read time. Hence, dirty reads are avoided here. This level makes use of read/write lock on the current rows which prevents read/write/update/delete of that row when the current transaction is being operated on.\nRepeatable Read – The most restrictive level of isolation. This holds read and write locks for all rows it operates on. Due to this, non-repeatable reads are avoided as other transactions cannot read, write, update or delete the rows.\nSerializable – The highest of all isolation levels. This guarantees that the execution is serializable where execution of any concurrent operations are guaranteed to be appeared as executing serially. Read Uncommitted – The lowest level of the isolations. Here, the transactions are not isolated and can read data that are not committed by other transactions resulting in dirty reads. Read Uncommitted Read Committed – This level ensures that the data read is committed at any instant of read time. Hence, dirty reads are avoided here. This level makes use of read/write lock on the current rows which prevents read/write/update/delete of that row when the current transaction is being operated on. Read Committed Repeatable Read – The most restrictive level of isolation. This holds read and write locks for all rows it operates on. Due to this, non-repeatable reads are avoided as other transactions cannot read, write, update or delete the rows. Repeatable Read Serializable – The highest of all isolation levels. This guarantees that the execution is serializable where execution of any concurrent operations are guaranteed to be appeared as executing serially. Serializable The following table clearly explains which type of unwanted reads the levels avoid: Isolation levels  Dirty Reads  Phantom Reads  Non-repeatable reads\nRead Uncommitted  Might occur Might occur Might occur\nRead Committed  Won’t occur Might occur Might occur\nRepeatable Read Won’t occur Might occur Won’t occur\nSerializable Won’t occur Won’t occur Won’t occur Isolation levels  Dirty Reads  Phantom Reads  Non-repeatable reads\nRead Uncommitted  Might occur Might occur Might occur\nRead Committed  Won’t occur Might occur Might occur\nRepeatable Read Won’t occur Might occur Won’t occur\nSerializable Won’t occur Won’t occur Won’t occur Isolation levels  Dirty Reads  Phantom Reads  Non-repeatable reads Isolation levels  Dirty Reads  Phantom Reads  Non-repeatable reads Isolation levels Dirty Reads Phantom Reads Non-repeatable reads Read Uncommitted  Might occur Might occur Might occur\nRead Committed  Won’t occur Might occur Might occur\nRepeatable Read Won’t occur Might occur Won’t occur\nSerializable Won’t occur Won’t occur Won’t occur Read Uncommitted  Might occur Might occur Might occur Read Uncommitted Might occur Might occur Might occur Read Committed  Won’t occur Might occur Might occur Read Committed Won’t occur Might occur Might occur Repeatable Read Won’t occur Might occur Won’t occur Repeatable Read Won’t occur Might occur Won’t occur Serializable Won’t occur Won’t occur Won’t occur Serializable Won’t occur Won’t occur Won’t occur",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "19. What can you tell about WAL (Write Ahead Logging)?",
        "answer": "Write Ahead Logging is a feature that increases the database reliability by logging changes before any changes are done to the database. This ensures that we have enough information when a database crash occurs by helping to pinpoint to what point the work has been complete and gives a starting point from the point where it was discontinued. before For more information, you can refer here. here",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "20. What is the main disadvantage of deleting data from an existing table using the DROP TABLE command?",
        "answer": "DROP TABLE command deletes complete data from the table along with removing the complete table structure too. In case our requirement entails just remove the data, then we would need to recreate the table to store data in it. In such cases, it is advised to use the TRUNCATE command. DROP TABLE",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "21. How do you perform case-insensitive searches using regular expressions in PostgreSQL?",
        "answer": "To perform case insensitive matches using a regular expression, we can use POSIX (~*) expression from pattern matching operators. For example: (~*) 'interviewbit' ~* '.*INTervIewBit.*' 'interviewbit' ~* '.*INTervIewBit.*'",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "22. How will you take backup of the database in PostgreSQL?",
        "answer": "We can achieve this by using the pg_dump tool for dumping all object contents in the database into a single file. The steps are as follows: Step 1: Navigate to the bin folder of the PostgreSQL installation path. Step 1 C:\\>cd C:\\Program Files\\PostgreSQL\\10.0\\bin C:\\>cd C:\\Program Files\\PostgreSQL\\10.0\\bin Step 2: Execute pg_dump program to take the dump of data to a .tar folder as shown below: Step 2: pg_dump -U postgres -W -F t sample_data > C:\\Users\\admin\\pgbackup\\sample_data.tar pg_dump -U postgres -W -F t sample_data > C:\\Users\\admin\\pgbackup\\sample_data.tar The database dump will be stored in the sample_data.tar file on the location specified.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "23. Does PostgreSQL support full text search?",
        "answer": "Full-Text Search is the method of searching single or collection of documents stored on a computer in a full-text based database. This is mostly supported in advanced database systems like SOLR or ElasticSearch. However, the feature is present but is pretty basic in PostgreSQL.",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "24. What are parallel queries in PostgreSQL?",
        "answer": "Parallel Queries support is a feature provided in PostgreSQL for devising query plans capable of exploiting multiple CPU processors to execute the queries faster.  ",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "25. Differentiate between commit and checkpoint.",
        "answer": "The commit action ensures that the data consistency of the transaction is maintained and it ends the current transaction in the section. Commit adds a new record in the log that describes the COMMIT to the memory. Whereas, a checkpoint is used for writing all changes that were committed to disk up to SCN which would be kept in datafile headers and control files. Conclusion: SQL is a language for the database. It has a vast scope and robust capability of creating and manipulating a variety of database objects using commands like CREATE, ALTER, DROP, etc, and also in loading the database objects using commands like INSERT. It also provides options for Data Manipulation using commands like DELETE, TRUNCATE and also does effective retrieval of data using cursor commands like FETCH, SELECT, etc. There are many such commands which provide a large amount of control to the programmer to interact with the database in an efficient way without wasting many resources. The popularity of SQL has grown so much that almost every programmer relies on this to implement their application's storage functionalities thereby making it an exciting language to learn. Learning this provides the developer a benefit of understanding the data structures used for storing the organization's data and giving an additional level of control and in-depth understanding of the application. PostgreSQL being an open-source database system having extremely robust and sophisticated ACID, Indexing, and Transaction supports has found widespread popularity among the developer community. References and Resources: References and Resources: PostgreSQL Download\nPostgreSQL Tutorial\nSQL Guide\nSQL Server Interview Questions\nSQL Query Interview Questions and Answers\nSQL Interview Questions for Data Science\nMySQL Interview Questions\nDBMS Interview Questions\nPL SQL Interview Questions\nMongoDB Interview Questions\nDatabase Testing Interview Questions\nSQL Vs MySQL\nPostgreSQL vs MySQL\nDifference Between SQL and PLSQL\nDifference between RDBMS and DBMS\nSQL Vs NoSQL\nSQL IDE\nSQL Projects\nMySQL Commands\nSQL Books\nOLTP vs OLAP PostgreSQL Download PostgreSQL Download PostgreSQL Tutorial PostgreSQL Tutorial SQL Guide SQL Guide SQL Server Interview Questions SQL Server Interview Questions SQL Query Interview Questions and Answers SQL Query Interview Questions and Answers SQL Interview Questions for Data Science SQL Interview Questions for Data Science MySQL Interview Questions MySQL Interview Questions DBMS Interview Questions DBMS Interview Questions PL SQL Interview Questions PL SQL Interview Questions MongoDB Interview Questions MongoDB Interview Questions Database Testing Interview Questions Database Testing Interview Questions SQL Vs MySQL SQL Vs MySQL PostgreSQL vs MySQL PostgreSQL vs MySQL Difference Between SQL and PLSQL Difference Between SQL and PLSQL Difference between RDBMS and DBMS Difference between RDBMS and DBMS SQL Vs NoSQL SQL Vs NoSQL SQL IDE SQL IDE SQL Projects SQL Projects MySQL Commands MySQL Commands SQL Books SQL Books OLTP vs OLAP OLTP vs OLAP",
        "reference": "interviewbit.com",
        "role": "sql"
    },
    {
        "question": "1) What is SQL?",
        "answer": "SQL stands for the Structured Query Language. It is the standard language used to maintain the relational database and perform many different data manipulation operations on the data. SQL was initially invented in 1970. It is a database language used for database creation, deletion, fetching and modifying rows, etc. sometimes, it is pronounced as 'sequel.' We can also use it to handle organized data comprised of entities (variables) and relations between different entities of the data.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "2) When SQL appeared?",
        "answer": "SQL first appeared in 1974. It is one of the most used languages for maintaining the relational database. In 1986, SQL became the standard of the American National Standards Institute (ANSI) and ISO (International Organization for Standardization) in 1987.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "3) What are the usages of SQL?",
        "answer": "SQL is responsible for maintaining the relational data and the data structures present in the database. Some of the common usages are given below:\nADVERTISEMENT\nTo execute queries against a database\nTo retrieve data from a database\nTo inserts records in a database\nTo updates records in a database\nTo delete records from a database\nTo create new databases\nTo create new tables in a database\nTo create views in a database\nTo perform complex operations on the database.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "4) Does SQL support programming language features?",
        "answer": "SQL refers to the Standard Query Language. Therefore, it is true that SQL is a language but does not actually support the programming language. It is a common language that doesn't have a loop, conditional statements, and logical operations. It cannot be used for anything other than data manipulation. It is a command language to perform database operations. The primary purpose of SQL is to retrieve, manipulate, update, delete, and perform complex operations like joins on the data present in the database.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "5) What are the subsets of SQL?",
        "answer": "The following are the four significant subsets of the SQL:\nData definition language (DDL): It defines the data structure that consists of commands like CREATE, ALTER, DROP, etc.\nData manipulation language (DML): It is used to manipulate existing data in the database. The commands in this category are SELECT, UPDATE, INSERT, etc.\nData control language (DCL): It controls access to the data stored in the database. The commands in this category include GRANT and REVOKE.\nTransaction Control Language (TCL): It is used to deal with the transaction operations in the database. The commands in this category are COMMIT, ROLLBACK, SET TRANSACTION, SAVEPOINT, etc.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "6) What is the purpose of DDL Language?",
        "answer": "DDL stands for Data definition language. It is the subset of a database that defines the data structure of the database when the database is created. For example, we can use the DDL commands to add, remove, or modify tables. It consists of the following commands: CREATE, ALTER and DELETE database objects such as schema, tables, indexes, view, sequence, etc.\nExample\nCREATE TABLE Students  \n(  \nRoll_no INT,  \nName VARCHAR(45),  \nBranch VARCHAR(30),  \n);",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "7) What is the purpose of DML Language?",
        "answer": "Data manipulation language makes the user able to retrieve and manipulate data in a relational database. The DML commands can only perform read-only operations on data. We can perform the following operations using DDL language:\nInsert data into the database through the INSERT command.\nRetrieve data from the database through the SELECT command.\nUpdate data in the database through the UPDATE command.\nDelete data from the database through the DELETE command.\nExample\nINSERT INTO Student VALUES (111, 'George', 'Computer Science')",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "8) What is the purpose of DCL Language?",
        "answer": "Data control language allows users to control access and permission management to the database. It is the subset of a database, which decides that what part of the database should be accessed by which user at what point of time. It includes two commands, GRANT and REVOKE.\nGRANT: It enables system administrators to assign privileges and roles to the specific user accounts to perform specific tasks on the database.\nREVOKE: It enables system administrators to revoke privileges and roles from the user accounts so that they cannot use the previously assigned permission on the database.\nExample\nGRANT * ON mydb.Student TO javatpoint@localhsot;",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "9) What are tables and fields in the database?",
        "answer": "A table is a set of organized data in the form of rows and columns. It enables users to store and display records in the structure format. It is similar to worksheets in the spreadsheet application. Here rows refer to the tuples, representing the simple data item, and columns are the attribute of the data items present in a particular row. Columns can categorize as vertical, and Rows are horizontal.\nFields are the components to provide the structure for the table. It stores the same category of data in the same data type. A table contains a fixed number of columns but can have any number of rows known as the record. It is also called a column in the table of the database. It represents the attribute or characteristics of the entity in the record.\nExample\nTable: Student\nField: Stud_rollno, Stud_name, Date of Birth, Branch, etc.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "10) What is a primary key?",
        "answer": "A primary key is a field or the combination of fields that uniquely identify each record in the table. It is one of a special kind of unique key. If the column contains a primary key, it cannot be null or empty. A table can have duplicate columns, but it cannot have more than one primary key. It always stores unique values into a column. For example, the ROLL Number can be treated as the primary key for a student in the university or college.\n\nWe can define a primary key into a student table as follows:\nCREATE TABLE Student (    \n    roll_number INT PRIMARY KEY,    \n    name VARCHAR(45),     \n);    \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "11) What is a foreign key?",
        "answer": "The foreign key is used to link one or more tables together. It is also known as the referencing key. A foreign key is specified as a key that is related to the primary key of another table. It means a foreign key field in one table refers to the primary key field of the other table. It identifies each row of another table uniquely that maintains the referential integrity. The primary key-foreign key relationship is a very crucial relationship as it maintains the ACID properties of the database sometimes. It also prevents actions that would destroy links between the child and parent tables.\nWe can define a foreign key into a table as follows:\nCONSTRAINT constraint_name]    \n    FOREIGN KEY [foreign_key_name] (col_name, ...)    \n    REFERENCES parent_tbl_name (col_name,...)",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "12) What is a unique key?",
        "answer": "A unique key is a single or combination of fields that ensure all values stores in the column will be unique. It means a column cannot stores duplicate values. This key provides uniqueness for the column or set of columns. For example, the email addresses and roll numbers of student's tables should be unique. It can accept a null value but only one null value per column. It ensures the integrity of the column or group of columns to store different values into a table.\nWe can define a foreign key into a table as follows:\nCREATE TABLE table_name(    \n    col1 datatype,    \n    col2 datatype UNIQUE,    \n    ...    \n);  \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "13) What is the difference between a primary key and a unique key?",
        "answer": "The primary key and unique key both are essential constraints of the SQL. The main difference among them is that the primary key identifies each record in the table. In contrast, the unique key prevents duplicate entries in a column except for a NULL value. The following comparison chart explains it more clearly:\nPrimary Key Unique Key\nThe primary key act as a unique identifier for each record in the table. The unique key is also a unique identifier for records when the primary key is not present in the table.\nWe cannot store NULL values in the primary key column. We can store NULL value in the unique key column, but only one NULL is allowed.\nWe cannot change or delete the primary key column values. We can modify the unique key column values.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "14) What is a Database?",
        "answer": "A database is an organized collection of data that is structured into tables, rows, columns, and indexes. It helps the user to find the relevant information frequently. It is an electronic system that makes data access, data manipulation, data retrieval, data storing, and data management very easy. Almost every organization uses the database for storing the data due to its easily accessible and high operational ease. The database provides perfect access to data and lets us perform required tasks.\nThe following are the common features of a database:\nManages large amounts of data\nAccurate\nEasy to update\nSecurity\nData integrity\nEasy to research data",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "15) What is meant by DBMS?",
        "answer": "DBMS stands for Database Management System. It is a software program that primarily functions as an interface between the database and the end-user. It provides us the power such as managing the data, the database engine, and the database schema to facilitate the organization and manipulation of data using a simple query in almost no time. It is like a File Manager that manages data in a database rather than saving it in file systems. Without the database management system, it would be far more difficult for the user to access the database's data.\nThe following are the components of a DBMS:\nSoftware\nData\nProcedures\nDatabase Languages\nQuery Processor\nDatabase Manager\nDatabase Engine\nReporting",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "16) What are the different types of database management systems?",
        "answer": "The database management systems can be categorized into several types. Some of the important lists are given below:\nHierarchical databases (DBMS)\nNetwork databases (IDMS)\nRelational databases (RDBMS\nObject-oriented databases\nDocument databases (Document DB)\nGraph databases\nER model databases\nNoSQL databases",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "17) What is RDBMS?",
        "answer": "RDBMS stands for Relational Database Management System. It is a database management system based on a relational model. It facilitates you to manipulate the data stored in the tables by using relational operators. RDBMS stores the data into the collection of tables and links those tables using the relational operators easily whenever required. Examples of relational database management systems are Microsoft Access, MySQL, SQL Server, Oracle database, etc.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "18) What is Normalization in a Database?",
        "answer": "Normalization is used to minimize redundancy and dependency by organizing fields and table of a database.\nThere are some rules of database normalization, which is commonly known as Normal From, and they are:\nFirst normal form(1NF)\nSecond normal form(2NF)\nThird normal form(3NF)\nBoyce-Codd normal form(BCNF)\nUsing these steps, the redundancy, anomalies, inconsistency of the data in the database can be removed.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "19) What is the primary use of Normalization?",
        "answer": "Normalization is mainly used to add, delete or modify a field that can be made in a single table. The primary use of Normalization is to remove redundancy and remove the insert, delete and update distractions. Normalization breaks the table into small partitions and then links them using different relationships to avoid the chances of redundancy.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "20) What are the disadvantages of not performing database Normalization?",
        "answer": "The major disadvantages are:\nThe occurrence of redundant terms in the database causes the waste of space in the disk.\nDue to redundant terms, inconsistency may also occur. If any change is made in the data of one table but not made in the same data of another table, then inconsistency will occur. This inconsistency will lead to the maintenance problem and effects the ACID properties as well.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "21) What is an inconsistent dependency?",
        "answer": "An Inconsistent dependency refers to the difficulty of getting relevant data due to a missing or broken path to the data. It leads users to search the data in the wrong table, resulting in an error as an output.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "22) What is Denormalization in a Database?",
        "answer": "Denormalization is a technique used by database administrators to optimize the efficiency of their database infrastructure. The denormalization concept is based on Normalization, which is defined as arranging a database into tables correctly for a particular purpose. This method allows us to add redundant data into a normalized database to alleviate issues with database queries that merge data from several tables into a single table. It adds redundant terms into the tables to avoid complex joins and many other complex operations.\nDenormalization doesn't mean that normalization will not be done. It is an optimization strategy that takes place after the normalization process.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "23) What are the different types of SQL operators?",
        "answer": "Operators are the special keywords or special characters reserved for performing particular operations. They are also used in SQL queries. We can primarily use these operators within the WHERE clause of SQL commands. It's a part of the command to filters data based on the specified condition. The SQL operators can be categorized into the following types:\nArithmetic operators: These operators are used to perform mathematical operations on numerical data. The categories of this operators are addition (+), subtraction (-), multiplication (*), division (/), remainder/modulus (%), etc.\nLogical operators: These operators evaluate the expressions and return their results in True or False. This operator includes ALL, AND, ANY, ISNULL, EXISTS, BETWEEN, IN, LIKE, NOT, OR, UNIQUE.\nComparison operators: These operators are used to perform comparisons of two values and check whether they are the same or not. It includes equal to (=), not equal to (!= or <>), less than (<), greater than (>), less than or equal to (<=), greater than or equal to (>=), not less than (!<), not greater than (!>), etc.\nBitwise operators: It is used to do bit manipulations between two expressions of integer type. It first performs conversion of integers into binary bits and then applied operators such as AND (& symbol), OR (|, ^), NOT (~), etc.\nCompound operators: These operators perform operations on a variable before setting the variable's result to the operation's result. It includes Add equals (+=), subtract equals (-=), multiply equals (*=), divide equals (/=), modulo equals (%=), etc.\nString operators: These operators are primarily used to perform concatenation and pattern matching of strings. It includes + (String concatenation), += (String concatenation assignment), % (Wildcard), [] (Character(s) matches), [^] (Character(s) not to match), _ (Wildcard match one character), etc.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "24) What is a view in SQL?",
        "answer": "A view is a database object that has no values. It is a virtual table that contains a subset of data within a table. It looks like an actual table containing rows and columns, but it takes less space because it is not present physically. It is operated similarly to the base table but does not contain any data of its own. Its name is always unique. A view can have data from one or more tables. If any changes occur in the underlying table, the same changes reflected in the views also.\n\nThe primary use of a view is to implement the security mechanism. It is the searchable object where we can use a query to search the view as we use for the table. It only shows the data returned by the query that was declared when the view was created.\nWe can create a view by using the following syntax:\nCREATE VIEW view_name AS  \nSELECT column_lists FROM table_name  \nWHERE condition;",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "25) What is an Index in SQL?",
        "answer": "An index is a disc structure associated with a table or view that speeds up row retrieval. It reduces the cost of the query because the query's high cost will lead to a fall in its performance. It is used to increase the performance and allow faster retrieval of records from the table. Indexing reduces the number of data pages we need to visit to find a particular data page. It also has a unique value meaning that the index cannot be duplicated. An index creates an entry for each value which makes it faster to retrieve data.\nFor example: Suppose we have a book which carries the details of the countries. If you want to find out information about India, why will you go through every page of that book? You could directly go to the index. Then from the index, you can go to that particular page where all the information about India is given.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "26) What are the different types of indexes in SQL?",
        "answer": "SQL indexes are nothing more than a technique of minimizing the query's cost. The higher the query's cost, the worse the query's performance. The following are the different types of Indexes supported in SQL:\nUnique Index\nClustered Index\nNon-Clustered Index\nBit-Map Index\nNormal Index\nComposite Index\nB-Tree Index\nFunction-Based Index",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "27) What is the unique index?",
        "answer": "UNIQUE INDEX is used to enforce the uniqueness of values in single or multiple columns. We can create more than one unique index in a single table. For creating a unique index, the user has to check the data in the column because the unique indexes are used when any column of the table has unique values. This indexing does not allow the field to have duplicate values if the column is unique indexed. A unique index can be applied automatically when a primary key is defined.\nWe can create it by using the following syntax:\nCREATE UNIQUE INDEX index_name    \nON table_name (index_column1, index_column2,...);  \nExample\nCREATE TABLE Employee(      \n    ID int AUTO_INCREMENT PRIMARY KEY,       \n    Name varchar(45),     \n    Phone varchar(15),    \n    City varchar(25),   \n);  \nSuppose we want to make a Phone column as a unique index. We can do this like below:\nCREATE UNIQUE INDEX index_name_phone ON Employee (Phone);    \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "28) What is clustered index in SQL?",
        "answer": "A clustered index is actually a table where the data for the rows are stored. It determines the order of the table data based on the key values that can sort in only one direction. Each table can have only one clustered index. It is the only index, which has been automatically created when the primary key is generated. If many data modifications needed to be done in the table, then clustered indexes are preferred.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "29) What is the non-clustered index in SQL?",
        "answer": "The indexes other than PRIMARY indexes (clustered indexes) are called non-clustered indexes. We know that clustered indexes are created automatically when primary keys are generated, and non-clustered indexes are created when multiple joins conditions and various filters are used in the query. The non-clustered index and table data are both stored in different places. It cannot be able to alter the physical order of the table and maintains the logical order of data.\nThe purpose of creating a non-clustered index is for searching the data. Its best example is a book where the content is written in one place, and the index is at a different place. We can create 0 to 249 non-clustered indexes in each table. The non-clustered indexing improves the performance of the queries which use keys without assigning the primary key.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "30) What are the differences between SQL, MySQL, and SQL Server?",
        "answer": "The following comparison chart explains their main differences:\nSQL MySQL SQL Server\nSQL or Structured Query Language is useful for managing our relational databases. It is used to query and operate the database. MySQL is the popular database management system used for managing the relational database. It is a fast, scalable, and easy-to-use database. SQL Server is an RDBMS database system mainly developed for the Windows system to store, retrieve, and access data requested by the developer.\nSQL first appeared in 1974. MySQL first appeared on May 23, 1995. SQL Server first appeared on April 24, 1989.\nSQL was developed by IBM Corporation. MySQL was developed by Oracle Corporation. SQL Server was developed by Microsoft Company.\nSQL is a query language for managing databases. MySQL is database software that uses SQL language to conduct with the database. SQL Server is also a software that uses SQL language to conduct with the database.\nSQL has no variables. MySQL can use variables constraints and data types. SQL Server can use variables constraints and data types.\nSQL is a programming language, so that it does not get any updates. Its commands are always fixed and remain the same. MySQL is software, so it gets frequent updation. SQL Server is also software, so it gets frequent updation.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "31) What is the difference between SQL and PL/SQL?",
        "answer": "The following comparison chart explains their main differences:\nSQL PL/SQL\nSQL is a database structured query language used to communicate with relational databases. It was developed by IBM Corporations and first appeared in 1974. PL/SQL or Procedural Language/Structured Query Language is a dialect of SQL used to enhance the capabilities of SQL. Oracle Corporation developed it in the early 90's. It uses SQL as its database language.\nSQL is a declarative and data-oriented language. PL/SQL is a procedural and application-oriented language.\nSQL has no variables. PL/SQL can use variables constraints and data types.\nSQL can execute only a single query at a time. PL/SQL can execute a whole block of code at once.\nSQL query can be embedded in PL/SQL. PL/SQL cannot be embedded in SQL as SQL does not support any programming language and keywords.\nSQL can directly interact with the database server. PL/SQL cannot directly interact with the database server.\nSQL is like the source of data that we need to display. PL/SQL provides a platform where SQL data will be shown.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "32) Is it possible to sort a column using a column alias?",
        "answer": "Yes. We can use the alias method in the ORDER BY instead of the WHERE clause for sorting a column.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "33) What is the difference between clustered and non-clustered indexes in SQL?",
        "answer": "Indexing is a method to get the requested data very fast. There are mainly two types of indexes in SQL, clustered index and non-clustered index. The differences between these two indexes are very important from an SQL performance perspective. The following comparison chart explains their main differences:\nClustered Index Non-Clustered Index\nA clustered index is a table or view where the data for the rows are stored. In a relational database, if the table column contains a primary key, MySQL automatically creates a clustered index named PRIMARY. The indexes other than PRIMARY indexes (clustered indexes) are called non-clustered indexes. It has a structure separate from the data row. The non-clustered indexes are also known as secondary indexes.\nClustered indexes store the data information and the data itself. Non-clustered indexes stores only the information, and then it will refer you to the data stored in clustered data.\nThere can only be one clustered index per table. There can be one or more non-clustered indexes in a table.\nA clustered index determines how data is stored physically in the table. Therefore, reading from a clustered index is faster. It creates a logical ordering of data rows and uses pointers for accessing the physical data files. Therefore, reading from a clustered index is slower.\nA clustered index always contains an index id of 0. A non-clustered index always contains an index id>0.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "34) What is the SQL query to display the current date?",
        "answer": "There is a built-in function in SQL called GetDate(), which is used to return the current timestamp.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "35) Which are joins in SQL? Name the most commonly used SQL joins?",
        "answer": "SQL joins are used to retrieve data from multiple tables into a meaningful result set. It is performed whenever you need to fetch records from two or more tables. They are used with SELECT statement and join conditions.\nThe following are the most commonly used joins in SQL:\nINNER JOIN\nLEFT OUTER JOIN\nRIGHT OUTER JOIN",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "36) What are the different types of joins in SQL?",
        "answer": "Joins are used to merge two tables or retrieve data from tables. It depends on the relationship between tables. According to the ANSI standard, the following are the different types of joins used in SQL:\nINNER JOIN\nSELF JOIN\nLEFT OUTER JOIN\nRIGHT OUTER JOIN\nFULL OUTER JOIN\nCROSS JOIN\n\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "37) What is INNER JOIN in SQL?",
        "answer": "Inner join returns only those records from the tables that match the specified condition and hides other rows and columns. In simple words, it fetches rows when there is at least one match of rows between the tables is found. INNER JOIN keyword joins the matching records from two tables. It is assumed as a default join, so it is optional to use the INNER keyword with the query.\nThe below visual representation explain this join more clearly:\n\n\nThe following syntax illustrates the INNER JOIN:\nSELECT column_lists  \nFROM table1    \nINNER JOIN table2 ON join_condition1    \nINNER JOIN table3 ON join_condition2    \n...;    \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "38) What is the Right JOIN in SQL?",
        "answer": "The Right join is used to retrieve all rows from the right-hand table and only those rows from the other table that fulfilled the join condition. It returns all the rows from the right-hand side table even though there are no matches in the left-hand side table. If it finds unmatched records from the left side table, it returns a Null value. This join is also known as Right Outer Join.\nThe below visual representation explain this join more clearly:\n\nThe following syntax illustrates the RIGHT JOIN:\nSELECT colum_lists    \nFROM table1     \nRIGHT JOIN table2    \nON join_condition;  \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "39) What is Left Join in SQL?",
        "answer": "The Left Join is used to fetch all rows from the left-hand table and common records between the specified tables. It returns all the rows from the left-hand side table even though there are no matches on the right-hand side table. If it will not find any matching record from the right side table, then it returns null. This join can also be called a Left Outer Join.\nThe following visual representation explains it more clearly:\n\nThe following syntax illustrates the RIGHT JOIN:\nSELECT colum_lists    \nFROM table1     \nLEFT JOIN table2    \nON join_condition;  \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "40) What is Full Join in SQL?",
        "answer": "The Full Join results from a combination of both left and right join that contains all the records from both tables. It fetches rows when there are matching rows in any one of the tables. This means it returns all the rows from the left-hand side table and all the rows from the right-hand side tables. If a match is not found, it puts NULL value. It is also known as FULL OUTER JOIN.\nThe following visual representation explains it more clearly:\n\nThe following syntax illustrates the FULL JOIN:\nSELECT * FROM table1     \nFULL OUTER JOIN table2    \nON join_condition;  \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "41) What is a \"TRIGGER\" in SQL?",
        "answer": "A trigger is a set of SQL statements that reside in a system catalog. It is a special type of stored procedure that is invoked automatically in response to an event. It allows us to execute a batch of code when an insert, update or delete command is run against a specific table because the trigger is the set of activated actions whenever DML commands are given to the system.\nSQL triggers have two main components one is action, and another is an event. When certain actions are taken, an event occurs as a result of those actions.\nWe use the CREATE TRIGGER statement for creating a trigger in SQL. Here is the syntax:\nCREATE TRIGGER trigger_name      \n    (AFTER | BEFORE) (INSERT | UPDATE | DELETE)    \n         ON table_name FOR EACH ROW      \n         BEGIN      \n        --variable declarations      \n        --trigger code      \n        END;  \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "42) What is self-join and what is the requirement of self-join?",
        "answer": "A SELF JOIN is used to join a table with itself. This join can be performed using table aliases, which allow us to avoid repeating the same table name in a single sentence. It will throw an error if we use the same table name more than once in a single query without using table aliases.\nA SELF JOIN is required when we want to combine data with other data in the same table itself. It is often very useful to convert a hierarchical structure to a flat structure.\nThe following syntax illustrates the SELF JOIN:\nSELECT column_lists    \nFROM table1 AS T1, table1 AS T2    \nWHERE join_conditions;    \nExample\nSuppose we have a table 'Student' having the following data:\n\nIf we want to get retrieve the student_id and name from the table where student_id is equal, and course_id is not equal, it can be done by using the self-join:\nSELECT  s1.student_id, s1.name    \nFROM student AS s1, student s2    \nWHERE s1.student_id=s2.student_id    \nAND s1.course_id<>s2.course_id;    \nHere is the result:\n\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "43) What are the set operators in SQL?",
        "answer": "We use the set operators to merge data from one or more tables of the same kind. Although the set operators are like SQL joins, there is a significant distinction. SQL joins combine columns from separate tables, whereas SQL set operators combine rows from different queries. SQL queries that contain set operations are called compound queries. The set operators in SQL are categories into four different types:\n\nA. UNION: It combines two or more results from multiple SELECT queries into a single result set. It has a default feature to remove the duplicate rows from the tables. The following syntax illustrates the Union operator:\nSELECT columns FROM table1    \nUNION    \nSELECT columns FROM table2;    \nB. UNION ALL: This operator is similar to the Union operator, but it does not remove the duplicate rows from the output of the SELECT statements. The following syntax illustrates the UNION ALL operator:\nSELECT columns FROM table1    \nUNION  ALL  \nSELECT columns FROM table2;    \nC. INTERSECT: This operator returns the common records from two or more SELECT statements. It always retrieves unique records and arranges them in ascending order by default. Here, the number of columns and data types should be the same. The following syntax illustrates the INTERSECT operator:\nSELECT columns FROM table1    \nINTERSECT  \nSELECT columns FROM table2;    \nD. MINUS: This operator returns the records from the first query, which is not found in the second query. It does not return duplicate values. The following syntax illustrates the MINUS operator:\nSELECT columns FROM table1    \nMINUS  \nSELECT columns FROM table2;    \nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "44) What is the difference between IN and BETWEEN operators?",
        "answer": "The following comparison chart explains their main differences:\nBETWEEN Operator IN Operator\nThis operator is used to selects the range of data between two values. The values can be numbers, text, and dates as well. It is a logical operator to determine whether or not a specific value exists within a set of values. This operator reduces the use of multiple OR conditions with the query.\nIt returns records whose column value lies in between the defined range. It compares the specified column's value and returns the records when the match exists in the set of values.\nThe following syntax illustrates this operator:\nSELECT * FROM table_name\nWHERE column_name BETWEEN 'value1' AND 'value2'; The following syntax illustrates this operator:\nSELECT * FROM table_name\nWHERE column_name IN ('value1','value 2');",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "",
        "answer": "The constraint is used to specify the rule and regulations that allows or restricts what values/data will be stored in the table. It ensures data accuracy and integrity inside the table. It enforces us to store valid data and prevents us from storing irrelevant data. If any interruption occurs between the constraint and data action, the action is failed. Some of the most commonly used constraints are NOT NULL, PRIMARY KEY, FOREIGN KEY, AUTO_INCREMENT, UNIQUE KEY, etc.\nThe following syntax illustrates us to create a constraint for a table:\nCREATE TABLE table_name (    \n    column1 datatype constraint,    \n    column2 datatype constraint,   \n    .........    \n);    \nSQL categories the constraints into two levels:\nColumn Level Constraints: These constraints are only applied to a single column and limit the type of data that can be stored in that column.\nTable Level Constraints: These constraints are applied to the entire table and limit the type of data that can be entered.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "46) How to write an SQL query to find students' names start with 'A'?",
        "answer": "We can write the following query to get the student details whose name starts with A:\nSELECT * FROM student WHERE stud_name like 'A%';  \nHere is the demo example where we have a table named student that contains two names starting with the 'A' character.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "",
        "answer": "The following query is the simplest way to get the third maximum salary of an employee:\nSELECT * FROM `employees` ORDER BY `salary` DESC LIMIT 1 OFFSET 2  \nHere is the demo example that shows how to get the third maximum salary of an employee.\n\nThe following are the alternative way to get the third-highest salary of an employee:\nA. Using LIMIT Keyword\nSELECT salary FROM employees   \nORDER BY salary DESC   \nLIMIT 2, 1;  \nB. Using Subquery\nSELECT salary    \nFROM   \n    (SELECT salary   \n     FROM employees   \n     ORDER BY salary DESC   \n     LIMIT 3) AS Temp   \nORDER BY salary LIMIT 1;  \nC. Using TOP Keyword\nSELECT TOP 1 salary   \nFROM   \n    (SELECT DISTINCT TOP 3 salary   \n     FROM employees   \n     ORDER BY salary DESC) AS Temp   \nORDER BY salary ASC;",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "48) What is the difference between DELETE and TRUNCATE statements in SQL?",
        "answer": "The main difference between them is that the delete statement deletes data without resetting a table's identity, whereas the truncate command resets a particular table's identity. The following comparison chart explains it more clearly:\nNo. DELETE TRUNCATE\n1) The delete statement removes single or multiple rows from an existing table depending on the specified condition. The truncate command deletes the whole contents of an existing table without the table itself. It preserves the table structure or schema.\n2) DELETE is a DML command. TRUNCATE is a DML command.\n3) We can use the WHERE clause in the DELETE command. We cannot use the WHERE clause with TRUNCATE.\n4) DELETE statement is used to delete a row from a table. TRUNCATE statement is used to remove all the rows from a table.\n5) DELETE is slower because it maintained the log. TRUNCATE statement is faster than DELETE statement as it deletes entire data at a time without maintaining transaction logs.\n6) You can roll back data after using the DELETE statement. It is not possible to roll back after using the TRUNCATE statement.\n7) DELETE query takes more space. TRUNCATE query occupies less space.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "49) What is the ACID property in a database?",
        "answer": "The ACID properties are meant for the transaction that goes through a different group of tasks. A transaction is a single logical order of data. It provides properties to maintain consistency before and after the transaction in a database. It also ensures that the data transactions are processed reliably in a database system.\nThe ACID property is an acronym for Atomicity, Consistency, Isolation, and Durability.\nAtomicity: It ensures that all statements or operations within the transaction unit must be executed successfully. If one part of the transaction fails, the entire transaction fails, and the database state is left unchanged. Its main features are COMMIT, ROLLBACK, and AUTO-COMMIT.\nConsistency: This property ensures that the data must meet all validation rules. In simple words, we can say that the database changes state only when a transaction will be committed successfully. It also protects data from crashes.\nIsolation: This property guarantees that the concurrent property of execution in the transaction unit must be operated independently. It also ensures that statements are transparent to each other. The main goal of providing isolation is to control concurrency in a database.\nDurability: This property guarantees that once a transaction has been committed, it persists permanently even if the system crashes, power loss, or failed.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "50) Is a blank space or zero the same as a NULL value?",
        "answer": "No. The NULL value is not the same as zero or a blank space. The following points explain their main differences:\nA NULL value is a value, which is 'unavailable, unassigned, unknown or not applicable.' It would be used in the absence of any value. We can perform arithmetic operations on it. On the other hand, zero is a number, and a blank space is treated as a character.\nThe NULL value can be treated as an unknown and missing value, but zero and blank spaces differ from the NULL value.\nWe can compare a blank space or a zero to another blank space or a zero. On the other hand, one NULL may not be the same as another NULL. NULL indicates that no data has been provided or that no data exists.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "51) What are functions and their usage in SQL?",
        "answer": "SQL functions are simple code snippets that are frequently used and re-used in database systems for data processing and manipulation. Functions are the measured values. It always performs a specific task. The following rules should be remembered while creating functions:\nA function should have a name, and the name cannot begin with a special character such as @, $, #, or other similar characters.\nFunctions can only work with the SELECT statements.\nEvery time a function is called, it compiles.\nFunctions must return value or result.\nFunctions are always used with input parameters.\nSQL categories the functions into two types:\nUser-Defined Function: Functions created by a user based on their needs are termed user-defined functions.\nSystem Defined Function: Functions whose definition is defined by the system are termed system-defined functions. They are built-in database functions.\nSQL functions are used for the following purposes:\nTo perform calculations on data\nTo modify individual data items\nTo manipulate the output\nTo format dates and numbers\nTo convert data types",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "",
        "answer": "Case manipulation functions are part of the character functions. It converts the data from the state in which it is already stored in the table to upper, lower, or mixed case. The conversion performed by this function can be used to format the output. We can use it in almost every part of the SQL statement. Case manipulation functions are mostly used when you need to search for data, and you don't have any idea that the data you are looking for is in lower case or upper case.\nThere are three case manipulation functions in SQL:\nLOWER: This function is used to converts a given character into lowercase. The following example will return the 'STEPHEN' as 'stephen':\nSELECT LOWER ('STEPHEN') AS Case_Reault FROM dual;  \nNOTE: Here, 'dual' is a dummy table.\nUPPER: This function is used to converts a given character into uppercase. The following example will return the 'stephen' as 'STEPHEN':\nSELECT UPPER ('stephen') AS Case_Reault FROM dual;  \nINITCAP: This function is used to converts given character values to uppercase for the initials of each word. It means every first letter of the word is converted into uppercase, and the rest is in lower case. The following example will return the 'hello stephen' as 'Hello Stephen':\nSELECT INITCAP ('hello stephen') AS Case_Reault FROM dual;",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "",
        "answer": "Character-manipulation functions are used to change, extract, and alter the character string. When one or more characters and words are passed into the function, the function will perform its operation on those input strings and return the result.\nThe following are the character manipulation functions in SQL:\nA) CONCAT: This function is used to join two or more values together. It always appends the second string into the end of the first string. For example:\nInput: SELECT CONCAT ('Information-', 'technology') FROM DUAL;\nOutput: Information-technology\nB) SUBSTR: It is used to return the portion of the string from a specified start point to an endpoint. For example:\nInput: SELECT SUBSTR ('Database Management System', 9, 11) FROM DUAL;\nOutput: Management\nC) LENGTH: This function returns the string's length in numerical value, including the blank spaces. For example:\nInput: SELECT LENGTH ('Hello Javatpoint') FROM DUAL;\nOutput: 16\nD) INSTR: This function finds the exact numeric position of a specified character or word in a given string. For example:\nInput: SELECT INSTR ('Hello Javatpoint', 'Javatpoint');\nOutput: 7\nE) LPAD: It returns the padding of the left-side character value for right-justified value. For example:\nInput: SELECT LPAD ('200', 6,'*');\nOutput: ***200\nF) RPAD: It returns the padding of the right-side character value for left-justified value. For example:\nInput: SELECT RPAD ('200', 6,'*');\nOutput: 200***\nG) TRIM: This function is used to remove all the defined characters from the beginning, end, or both. It also trimmed extra spaces. For example:\nInput: SELECT TRIM ('A' FROM 'ABCDCBA');\nOutput: BCDCB\nH) REPLACE: This function is used to replace all occurrences of a word or portion of the string (substring) with the other specified string value. For example:\nInput: SELECT REPLACE ( 'It is the best coffee at the famous coffee shop.', 'coffee', 'tea');\nOutput: It is the best tea at the famous tea shop.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "54) What is the usage of the NVL() function?",
        "answer": "The NVL() function is used to convert the NULL value to the other value. The function returns the value of the second parameter if the first parameter is NULL. If the first parameter is anything other than NULL, it is left unchanged. This function is used in Oracle, not in SQL and MySQL. Instead of NVL() function, MySQL have IFNULL() and SQL Server have ISNULL() function.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "55) Which function is used to return remainder in a division operator in SQL?",
        "answer": "The MOD function returns the remainder in a division operation.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "56) What are the syntax and use of the COALESCE function?",
        "answer": "The COALESCE() function evaluates the arguments in sequence and returns the first NON-NULL value in a specified number of expressions. If it evaluates arguments as NULL or not found any NON-NULL value, it returns the NULL result.\nThe syntax of COALESCE function is given below:\nCOALESCE (exp1, exp2, .... expn)   \nExample:\nSELECT COALESCE(NULL, 'Hello', 'Javatpoint', NULL) AS Result;  \nThis statement will return the following output:",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "57) How do we use the DISTINCT statement? What is its use?",
        "answer": "The DISTINCT keyword is used to ensure that the fetched value always has unique values. It does not allow to have duplicate values. The DISTINCT keyword is used with the SELECT statement and retrieves different values from the table's column. We can use it with the help of the following syntax:\nSELECT DISTINCT column_lists FROM table_name WHERE [condition];  \nSuppose we have a table 'customer' containing eight records in which the name column has some duplicate values.\n\nIf we want to get the name column without any duplicate values, the DISTINCT keyword is required. Executing the below command will return a name column with unique values.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "58) What is the default ordering of data using the ORDER BY clause? How could it be changed?",
        "answer": "The ORDER BY clause is used to sort the table data either in ascending or descending order. By default, it will sort the table in ascending order. If we want to change its default behavior, we need to use the DESC keyword after the column name in the ORDER BY clause.\nThe syntax to do this is given below:\nSELECT expressions FROM tables    \nWHERE conditions    \nORDER BY expression [ASC | DESC];    \nWe have taken a customer table in the previous example. Now, we will demonstrate the ORDER BY clause on them as well.\nIn the below output, we can see that the first query will sort the table data in ascending order based on the name column. However, if we run the second query by specifying the DESC keyword, the table's order is changed in descending order.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "59) Is the following query returns the output?",
        "answer": "SELECT subject_code, AVG (marks)  \nFROM Students  \nWHERE AVG(marks) > 70  \nGROUP BY subject_code;  \nAnswer: No. The above query does not return the output because we cannot use the WHERE clause to restrict the groups. We need to use the HAVING clause instead of the WHERE clause to get the correct output.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "60) What is the difference between the WHERE and HAVING clauses?",
        "answer": "The main difference is that the WHERE clause is used to filter records before any groupings are established, whereas the HAVING clause is used to filter values from a group. The below comparison chart explains the most common differences:\nWHERE HAVING\nThis clause is implemented in row operations. This clause is implemented in column operations.\nIt does not allow to work with aggregate functions. It can work with aggregate functions.\nThis clause can be used with the SELECT, UPDATE, and DELETE statements. This clause can only be used with the SELECT statement.\nTo know more differences, click here.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "61) How many Aggregate functions are available in SQL?",
        "answer": "The aggregate function is used to determine and calculate several values in a table and return the result as a single number. For example, the average of all values, the sum of all values, and the maximum and minimum value among particular groupings of values.\nThe following syntax illustrates how to use aggregate functions:\nfunction_name (DISTINCT | ALL expression)    \nSQL provides seven (7) aggregate functions, which are given below:\nAVG(): This function is used to returns the average value from specified columns.\nCOUNT(): This function is used to returns the number of table rows, including rows with null values.\nMAX(): This function is used to returns the largest value among the group.\nMIN(): This function is used to returns the smallest value among the group.\nSUM(): This function is used to returns the total summed values(non-null) of the specified column.\nFIRST(): This function is used to returns the first value of an expression.\nLAST(): This function is used to returns the last value of an expression.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "62) What is SQL Injection?",
        "answer": "SQL injection is a type of vulnerability in website and web app code that allows attackers to control back-end operations and access, retrieve, and destroy sensitive data from databases. In this technique, malicious SQL statements are inserted into a database entry field, and once they are performed, the database becomes vulnerable to an attacker. This technique is commonly used to access sensitive data and perform administrative activities on databases by exploiting data-driven applications. It is also known as SQLi attack.\nSome common examples of SQL injection are:\nAccessing confidential data to modify an SQL query to get desired results.\nUNION attacks to steal data from different database tables.\nExamine the database to extract information regarding the version and structure of the database.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "63) What is the difference between the RANK() and DENSE_RANK() functions?",
        "answer": "The RANK function determines the rank for each row within your ordered partition in the result set. If the two rows are assigned the same rank, then the next number in the ranking will be its previous rank plus a number of duplicate numbers. For example, if we have three records at rank 4, the next rank listed would be ranked 7.\nThe DENSE_RANK function assigns a unique rank for each row within a partition as per the specified column value without any gaps. It always specifies ranking in consecutive order. If the two rows are assigned the same rank, this function will assign it with the same rank, and the next rank being the next sequential number. For example, if we have 3 records at rank 4, the next rank listed would be ranked 5.",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "64) Is it possible to implicitly insert a row for the identity column?",
        "answer": "Yes. We can implicitly insert a row for the identity column. Here is an example of doing this:\nSET IDENTITY_INSERT TABLE1 ON  \nINSERT INTO demo_table1 (id, name, branch)  \nSELECT id, name, branch FROM demo_table2  \nSET IDENTITY_INSERT OFF",
        "reference": "javatpoint.com",
        "role": "sql"
    },
    {
        "question": "65) What are SQL comments?",
        "answer": "Comments are explanations or annotations in SQL queries that are readable by programmers. It's used to make SQL statements easier to understand for humans. During the parsing of SQL code, it will be ignored. Comments can be written on a single line or across several lines.\nSingle Line Comments: It starts with two consecutive hyphens (--).\nMulti-line Comments: It starts with /* and ends with */.\nAdvanced SQL MCQ Questions and Answers\nThis section provides multiple-choice questions and answers based on advanced query optimization.\n1) What type of join do you need when you want to include rows with values that don't match?\nEqui-Join\nOuter Join\nNatural Join\nAll of the above.\nShow Answer\nWorkspace\n\n\n2) Which of the following option matched a CASE SQL statement?\nA way to establish an IF-THEN-ELSE in SQL.\nA way to establish a loop in SQL.\nA way to establish a data definition in SQL.\nNone of the above.\nShow Answer\nWorkspace\n\n\n3) Which of the following is an illegal data type in SQL?\nNUMBER\nCLOB\nBLOB\nLINT\nShow Answer\nWorkspace\n\n\n4) The view is updated immediately if the actual relations used in the view definition change. These views are referred to as _________.\nInstant views\nInstantaneous views\nMaterialized views\nMaterialistic views\nShow Answer\nWorkspace\n\n\n5) The part of SQL that deals with the SQL support constructs are called _______.\nPersistent Construct Dealer\nPersistent Supports Centre\nPrimary Storage Medium\nPersistent Storage Module\nShow Answer\nWorkspace\n\n\n6) Which of the following is true regarding a correlated subquery?\nUses the result of an outer query to determine the processing of an inner query.\nUses the result of an inner query to determine the processing of an outer query.\nUses the result of an inner query to determine the processing of an inner query.\nUses the result of an outer query to determine the processing of an outer query.\nShow Answer\nWorkspace\n\n\n7) Whenever a database is modified, the system executes a statement called _________.\nFunction\nTrigger\nPackage\nProtocol\nShow Answer\nWorkspace\n\n\n8) A transaction starts when\nA COMMIT statement is issued\nA ROLLBACK statement is issued\nA CREATE statement is used\nAll of the above\nShow Answer\nWorkspace\n\n\n9) Which of the below sequential statements cannot be used in a function?\nIF\nWAIT\nCASE\nLOOP\nShow Answer\nWorkspace\n\n\n10) In the data type TIME(p), what does p stands for?\nThe amount of delay required to be added to the time\nThe maximum number of allowed hours\nThe number of fractional digits for the seconds\nNone of the above\nShow Answer\nWorkspace\n\n\n11) Which of the following is a privilege in SQL standard?\nSELECT\nINSERT\nUPDATE\nAll of the above\nShow Answer\nWorkspace\n\n\n12) Which of the following indicates another name for referential integrity constraints?\nFunctional dependencies\nSubset dependencies\nSuperset dependencies\nPrimary dependencies\nShow Answer\nWorkspace\n\n\n13) Triggers are stored blocks of code that have to be called in order to operate.\nTRUE\nFALSE\nShow Answer\nWorkspace\n\n\n14) Outer join is the same as equi-join, except one of the duplicate columns in the result table is removed.\nTRUE\nFALSE\nShow Answer\nWorkspace\n\n\n15) A transaction is a collection of closely related update commands that must all be completed, or none at all, for the database to be valid.\nTRUE\nFALSE\nShow Answer\nWorkspace",
        "reference": "javatpoint.com",
        "role": "sql"
    }
]