[
    {
        "question": "1. How important is System Design, and what does it entail?",
        "answer": "System Design, the procedure for developing and integrating a multifaceted software system tailored to the wants of customers and organizations, is a critical endeavor. It entails determining system prerequisites, selecting suitable technologies and blueprints, and creating a system that is trustworthy, cost-efficient, and adaptable. The importance of system design lies in its ability to ensure an easily adjustable, dependable, and reasonably priced output, as well as a perfect match for clients’ and organizations’ requirements.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "2. What fundamental System Design principles are there?",
        "answer": "Templates for system design are common in Software­ Engineering. These templates typically include­ the following components:\nModel-View-Controller (MVC)\nPublisher-Subscriber\nPipes and Filters\nLayered Architecture\nMicroservices Architecture",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "3. What distinguishes a Microservices design from a Monolithic architecture?",
        "answer": "A one-size-fits-all strategy is easier to design and implement, wherein the entire program is created as one standalone unit using a Monolithic design. However, a Microservices architecture offers more flexibility, agility, and maintainability as it breaks the application into autonomous services that interact via APIs.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "4. What distinguishes a RESTful API from a SOAP API?",
        "answer": "Resources that are identifiable by URLs can be accessed and modified using HTTP methods such as GET, POST, PUT, and DELETE when utilizing an architectural design called RESTful API (Representational State Transfer). On the other hand, the SOAP API (Simple Object Access Protocol) uses XML-based messaging to access and modify resources. In contrast to SOAP APIs, RESTful APIs are faster, lighter, and easier to implement.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "5. What does load balancing entail, and why is it crucial for system design?",
        "answer": "In order to maximize the overall system’s performance and reliability, load balancing introduces stalwart measures to minimize server overloading. By segregating the workload among a multitude of servers, scalability and flexibility are optimized while ensuring no single device is overwhelmed with an excessive number of tasks. Consequently, load balancing enables systems to become more robust against increased stress and accommodate increases in user traffic.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "6. What common methods of Database replication are there?",
        "answer": "The process of transferring data from one data store to another for backup, disaster recovery, or scaling purposes is known as database replication. Here are a few methods typically employed for database replication:\nMaster-Slave Replication: One data store server serves as the master, where all changes are made. The slave servers then display the modifications. \nMaster-Master Replication: Changes are made on any of the servers, and multiple servers act as both master and slave. The remaining servers are then updated with the updates.\nMulti-Master Replication: This type of replication uses a lot of servers that can act as both masters and slaves, with each server having the ability to create changes that are reflected on other servers.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "7. What standard caching techniques are used in System Design?",
        "answer": "In order to increase functionality, caching is the practice of saving frequently accessed material in a cache. Some of the systems frequently utilized in system design for caching are listed below:\nIn-Memory Caching: Information is kept in memory for quick access to frequently used information.\nDistributed Caching: Scalability and fault tolerance are provided by holding data in a shared cache across numerous servers. \nContent Delivery Networks (CDNs): CDNs store frequently accessed data on servers dispersed throughout the world, providing clients based in various locations with instant access to data.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "8. How do horizontal and vertical scaling differ from one another?",
        "answer": "To handle increased traffic and demand, a system can be horizontally scaled by adding extra servers. Usually, systems with high traffic and loads adopt this system. To handle increased traffic and demand, however, vertical scaling entails adding more resources, like CPUs and memory, to one server. This technology is typically utilized for applications where high performance and low latency are required.\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "9. How do Synchronous and Asynchronous communication differ from one another?",
        "answer": "Synchronous communication involves sending and receiving messages immediately, requiring the sender to patiently wait for a response before proceeding. On the other hand, Asynchronous communication refers to an exchange where senders transmit messages without expecting a prompt reply. When real-time synchronization is dispensable, the latter approach is commonly used.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "10. What distinguishes a Stateful system from a Stateless system?",
        "answer": "Each request in a stateful system depends on earlier requests, whereas requests in a stateless system are independent of one another. Stateless systems are typically simpler to develop and scale, while stateful systems can be more complicated and demand more management.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "11. What distinguishes a caching server from a CDN?",
        "answer": "While a CDN stores frequently visited material on numerous servers across the world, a caching server keeps that data in memory to improve performance. While a cache server is used to improve performance for all users, a CDN is primarily used to serve static content, such as images and videos, to faraway users.\n\nIntermediate System Design Interview Questions",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "12. Why is Sharding used in database design, and what does it entail?",
        "answer": "In order to increase scalability and performance, a database may be “sharded,” or divided into a number of smaller databases. In database design, it is used to spread out the data across several servers, speed up queries, and improve fault tolerance.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "13. What is a message queue, and why do System designers employ them?",
        "answer": "A mechanism called a message queue enables two or more programs to exchange messages. Decoupling application components helps systems be more scalable, maintainable, and reliable. Applications can interact asynchronously using message queues, which means that the sender need not wait for the recipient to respond before continuing.\nDo checkout our blog on top features of linux operating system to gain in-depth knowledge about it!",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "14. What exactly is a distributed system, and what are some typical difficulties encountered when creating them?",
        "answer": "A distributed system is a system made up of numerous connected parts that often run on various servers or nodes. Security, fault tolerance, and distributed coordination are issues with distributed systems.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "15. What is the purpose of a Content Delivery Network (CDN) in system design?",
        "answer": "A Content Delivery Network (CDN) is a system used to boost performance for remote users that stores frequently accessed data on servers dispersed throughout the world. In order to increase speed and decrease latency for users in various locations, CDNs are employed in system architecture.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "16. Why is a distributed database utilized in system design, and what is it?",
        "answer": "A database that is spread across several servers or nodes is referred to as a distributed database. Databases are scaled, performance is enhanced, and fault tolerance and disaster recovery capabilities are increased.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "17. What is DevOps, and how does system design relate to it?",
        "answer": "To improve software delivery and operations, a set of practices called DevOps brings together development and IT operations. Teams can increase their capacity for software system deployment and maintenance by including DevOps practices into their system architecture.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "18. How does the concept of a container relate to system design?",
        "answer": "Code, libraries, and dependencies are all contained in a small, standalone executable package known as a container. Application deployment and administration across many settings and platforms are made simpler by the use of containers.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "19. Why is Serverless architecture employed in system design, and what does it mean?",
        "answer": "A serverless architecture is one in which the serverless platform of a cloud provider, such as AWS Lambda or Azure Functions, is used to operate the application logic. Serverless architectures concentrate on creating and deploying code while reducing the complexity of the infrastructure.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "20. What distinguishes a container from a virtual machine?",
        "answer": "A container is a small, independent executable package that simply contains the application and its dependencies, as opposed to a virtual machine (VM), which is a software simulation of a physical computer with its own operating system, programs, and hardware resources. While containers offer more agility and scalability, virtual machines offer higher isolation and security.\n\nAdvanced System Design Interview Questions",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "21. What distinguishes an asynchronous system from a synchronous system, and when would you use each?",
        "answer": "Synchronous systems refer to those where the sender requires the recipient’s response as a prerequisite for the next operation, meaning that they pause at each step until they’ve heard back. Asynchronous systems, on the other hand, do not rely on immediate responses — they allow the sender to progress to the next step without waiting for a reply. Asynchronous systems are better suited for situations where response time is not of great importance, such as batch processing, while synchronous systems are more apt for real-time systems with strict time frames.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "22. What is the CAP theorem, and how does it apply to the design of systems?",
        "answer": "The CAP theorem, an essential principle of distributed computing, states that a distributed system is unable to provide all three of the guarantees of consistency, availability, and partition tolerance simultaneously. To ensure a system is designed to meet application needs, it is essential for system architects to understand the trade-offs between these assurances. By utilizing perplexity and burstiness, architects can be presented with a clearer understanding of the trade-off between the three guarantees and can construct a system that is optimized for their specific requirements.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "23. What is a distributed file system, and why is it critical to the architecture of a system?",
        "answer": "A distributed file system is a type of file system that enables files to be accessed by various clients and stored on several servers. The ability to scale and store vast volumes of data in fault-tolerant distributed file systems makes them crucial for system design. By enabling data to be accessed from numerous servers at once, they can enhance system performance.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "24. What distinguishes a shared-everything architecture from a shared-nothing architecture?",
        "answer": "Each node in the system has its own resources and runs independently of the other nodes in a shared-nothing design. All nodes in a shared-everything architecture pool their resources, including memory and storage, into a single pool. Shared-everything designs are generally employed in parallel processing systems, but shared-nothing architectures are more frequently used in distributed systems.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "25. What are some standard database indexing methods, and how do they affect the efficiency of the system?",
        "answer": "B-tree indexing, hash indexing, and bitmap indexing are examples of common database indexing methods. Range searches are indexed using a B-tree, equality queries are indexed using a hash, and low-cardinality attributes are indexed using a bitmap. By minimizing the number of disc accesses necessary to retrieve data, indexing can dramatically boost system performance.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "26. How does a Service-Oriented Architecture (SOA) differ from other software architectures, and what does it mean?",
        "answer": "Service-Oriented Architecture (SOA) is characterized by its ability to create flexible and scalable software components. Through a loose connection between its parts, SOA can withstand more than typical monolithic or microservice architectures. It grants developers a new level of power and control, allowing them to create unique applications in a more efficient manner. At its heart, SOA allows the exchange of data in the form of independent services, giving users the advantage of modifying the arrangement of data as needed. With more efficient and speedy systems in place, SOA stands out as the architecture with higher complexity. Additionally, its burstiness expands the level of control and understanding developers have in creating stand-alone services that can be implemented and accessed by other system components. SOA is a capable and reliable software architecture that gives developers a unique tool to build remarkable applications.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "27. What distinguishes a Push-based message queue system from a pull-based message queue system?",
        "answer": "In a Push-based message queue system, messages are sent to the recipient by the sender, making it ideal for real-time production systems. Meanwhile, pull-based message queue systems can be used in batch processing scenarios where the recipient actively retrieves messages from the sender. This allows for variations in the complexity and length of sentences, creating a dynamic system of communication.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "28. What is a Circuit breaker, and how does it help improve system reliability?",
        "answer": "A Circuit breaker is a pattern that aims to improve system reliability by monitoring the health of a service. When a failure is detected, the breaker trips, preventing any further requests from being sent to the failed system. This technique helps avoid cascading breakdowns and enables graceful degradation in the face of failures. In addition, the usage of perplexity and burstiness in the text allows for a higher level of complexity while also creating variation in sentences, ensuring an optimal amount of complexity and range in the article.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "29. How do Monorepos and Polyrepos differ from one another, and when would you use each?",
        "answer": "A polyrepo is an amalgamation of contrasting repositories, accommodating the source code for separate projects- distinct from a monorepo, which comprises a sole repository for all projects. In comparison to larger organizations with interdependent projects leaning towards a monorepo, smaller firms or free-standing projects prefer a polyrepo. The code within every repository in the polyrepo holds its own complexities. However, the high degree of perplexity and burstiness increases the sophistication of the overall collection. Thus, the polyrepo is a compilation of the various and intricate project-specific repositories.",
        "reference": "intellipaat.com",
        "role": "system-design"
    },
    {
        "question": "1. What is CAP theorem?",
        "answer": "CAP(Consistency-Availability-Partition Tolerance) theorem says that a distributed system cannot guarantee C, A and P simultaneously. It can at max provide any 2 of the 3 guarantees. Let us understand this with the help of a distributed database system. Consistency: This states that the data has to remain consistent after the execution of an operation in the database. For example, post database updation, all queries should retrieve the same result.\nAvailability: The databases cannot have downtime and should be available and responsive always.\nPartition Tolerance: The database system should be functioning despite the communication becoming unstable. Consistency: This states that the data has to remain consistent after the execution of an operation in the database. For example, post database updation, all queries should retrieve the same result. Consistency Availability: The databases cannot have downtime and should be available and responsive always. Availability Partition Tolerance: The database system should be functioning despite the communication becoming unstable. Partition Tolerance The following image represents what databases guarantee what aspects of the CAP Theorem simultaneously. We see that RDBMS databases guarantee consistency and Availability simultaneously. Redis, MongoDB, Hbase databases guarantee Consistency and Partition Tolerance. Cassandra, CouchDB guarantees Availability and Partition Tolerance. Complete Video Tutorial. Complete Video Tutorial Complete Video Tutorial  ",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "2. How is Horizontal scaling different from Vertical scaling?",
        "answer": "Horizontal scaling refers to the addition of more computing machines to the network that shares the processing and memory workload across a distributed network of devices. In simple words, more instances of servers are added to the existing pool and the traffic load is distributed across these devices in an efficient manner.\nVertical scaling refers to the concept of upgrading the resource capacity such as increasing RAM, adding efficient processors etc of a single machine or switching to a new machine with more capacity. The capability of the server can be enhanced without the need for code manipulation. Horizontal scaling refers to the addition of more computing machines to the network that shares the processing and memory workload across a distributed network of devices. In simple words, more instances of servers are added to the existing pool and the traffic load is distributed across these devices in an efficient manner. Horizontal scaling Vertical scaling refers to the concept of upgrading the resource capacity such as increasing RAM, adding efficient processors etc of a single machine or switching to a new machine with more capacity. The capability of the server can be enhanced without the need for code manipulation. Vertical scaling This has been demonstrated in the image below:   Horizontal scaling vs. Vertical scaling: Horizontal scaling vs. Vertical scaling: Category  Horizontal Scaling Vertical Scaling\nLoad Balancing Requires load balancing for distributing request traffic across multiple machines. Since there is just one single machine, the load balancer is not required.\nFailure Resilience This is more resistant to application failure because if one server fails, traffic is routed to other servers. This is more prone to failure as there is only one machine and failure of this results in failure of the entire application.\nMachine Communication Since there are multiple machines being involved, it is very much necessary to have network communication. Vertical scaling makes use of inter-process communication within the machine which makes it quite fast.\nData Consistency There exist possibilities of data inconsistencies here because there are different machines for handling different requests which might result in data being out of sync. As there is only one machine, there is no issue of data inconsistency.\nLimitations Since this scaling requires multiple servers, there might be concerns on budget and space but the scaling of the application can be done as much as needed based on the business needs. Vertical scaling has a limit on the capacity of the resources that are achievable. If the resources are scaled up above this limit, then the application might crash and result in downtime. Category  Horizontal Scaling Vertical Scaling\nLoad Balancing Requires load balancing for distributing request traffic across multiple machines. Since there is just one single machine, the load balancer is not required.\nFailure Resilience This is more resistant to application failure because if one server fails, traffic is routed to other servers. This is more prone to failure as there is only one machine and failure of this results in failure of the entire application.\nMachine Communication Since there are multiple machines being involved, it is very much necessary to have network communication. Vertical scaling makes use of inter-process communication within the machine which makes it quite fast.\nData Consistency There exist possibilities of data inconsistencies here because there are different machines for handling different requests which might result in data being out of sync. As there is only one machine, there is no issue of data inconsistency.\nLimitations Since this scaling requires multiple servers, there might be concerns on budget and space but the scaling of the application can be done as much as needed based on the business needs. Vertical scaling has a limit on the capacity of the resources that are achievable. If the resources are scaled up above this limit, then the application might crash and result in downtime. Category  Horizontal Scaling Vertical Scaling Category  Horizontal Scaling Vertical Scaling Category Horizontal Scaling Vertical Scaling Load Balancing Requires load balancing for distributing request traffic across multiple machines. Since there is just one single machine, the load balancer is not required.\nFailure Resilience This is more resistant to application failure because if one server fails, traffic is routed to other servers. This is more prone to failure as there is only one machine and failure of this results in failure of the entire application.\nMachine Communication Since there are multiple machines being involved, it is very much necessary to have network communication. Vertical scaling makes use of inter-process communication within the machine which makes it quite fast.\nData Consistency There exist possibilities of data inconsistencies here because there are different machines for handling different requests which might result in data being out of sync. As there is only one machine, there is no issue of data inconsistency.\nLimitations Since this scaling requires multiple servers, there might be concerns on budget and space but the scaling of the application can be done as much as needed based on the business needs. Vertical scaling has a limit on the capacity of the resources that are achievable. If the resources are scaled up above this limit, then the application might crash and result in downtime. Load Balancing Requires load balancing for distributing request traffic across multiple machines. Since there is just one single machine, the load balancer is not required. Load Balancing Requires load balancing for distributing request traffic across multiple machines. Since there is just one single machine, the load balancer is not required. Failure Resilience This is more resistant to application failure because if one server fails, traffic is routed to other servers. This is more prone to failure as there is only one machine and failure of this results in failure of the entire application. Failure Resilience This is more resistant to application failure because if one server fails, traffic is routed to other servers. This is more prone to failure as there is only one machine and failure of this results in failure of the entire application. Machine Communication Since there are multiple machines being involved, it is very much necessary to have network communication. Vertical scaling makes use of inter-process communication within the machine which makes it quite fast. Machine Communication Since there are multiple machines being involved, it is very much necessary to have network communication. Vertical scaling makes use of inter-process communication within the machine which makes it quite fast. Data Consistency There exist possibilities of data inconsistencies here because there are different machines for handling different requests which might result in data being out of sync. As there is only one machine, there is no issue of data inconsistency. Data Consistency There exist possibilities of data inconsistencies here because there are different machines for handling different requests which might result in data being out of sync. As there is only one machine, there is no issue of data inconsistency. Limitations Since this scaling requires multiple servers, there might be concerns on budget and space but the scaling of the application can be done as much as needed based on the business needs. Vertical scaling has a limit on the capacity of the resources that are achievable. If the resources are scaled up above this limit, then the application might crash and result in downtime. Limitations Since this scaling requires multiple servers, there might be concerns on budget and space but the scaling of the application can be done as much as needed based on the business needs. Vertical scaling has a limit on the capacity of the resources that are achievable. If the resources are scaled up above this limit, then the application might crash and result in downtime.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "3. What do you understand by load balancing? Why is it important in system design?",
        "answer": "Load balancing refers to the concept of distributing incoming traffic efficiently across a group of various backend servers. These servers are called server pools. Modern-day websites are designed to serve millions of requests from clients and return the responses in a fast and reliable manner. In order to serve these requests, the addition of more servers is required. In such a scenario, it is essential to distribute request traffic efficiently across each server so that they do not face undue loads. Load balancer acts as a traffic police cop facing the requests and routes them across the available servers in a way that not a single server is overwhelmed which could possibly degrade the application performance.   When a server goes down, the load balancer redirects traffic to the remaining available servers. When a new server gets added to the configuration, the requests are automatically redirected to it. Following are the benefits of load balancers: They help to prevent requests from going to unhealthy or unavailable servers.\nHelps to prevent resources overloading.\nHelps to eliminate a single point of failure since the requests are routed to available servers whenever a server goes down.\nRequests sent to the servers are encrypted and the responses are decrypted. It aids in SSL termination and removes the need to install X.509 certificates on every server.\nLoad balancing impacts system security and allows continuous software updates for accomodating changes in the system. They help to prevent requests from going to unhealthy or unavailable servers. Helps to prevent resources overloading. Helps to eliminate a single point of failure since the requests are routed to available servers whenever a server goes down. Requests sent to the servers are encrypted and the responses are decrypted. It aids in SSL termination and removes the need to install X.509 certificates on every server. Load balancing impacts system security and allows continuous software updates for accomodating changes in the system.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "4. What do you understand by Latency, throughput, and availability of a system?",
        "answer": "Performance is an important factor in system design as it helps in making our services fast and reliable. Following are the three key metrics for measuring the performance: Latency: This is the time taken in milliseconds for delivering a single message.\nThroughput: This is the amount of data successfully transmitted through a system in a given amount of time. It is measured in bits per second.\nAvailability: This determines the amount of time a system is available to respond to requests. It is calculated: System Uptime / (System Uptime+Downtime). Latency: This is the time taken in milliseconds for delivering a single message. Latency Throughput: This is the amount of data successfully transmitted through a system in a given amount of time. It is measured in bits per second. Throughput Availability: This determines the amount of time a system is available to respond to requests. It is calculated: System Uptime / (System Uptime+Downtime). Availability",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "5. What is Sharding?",
        "answer": "Sharding is a process of splitting the large logical dataset into multiple databases. It also refers to horizontal partitioning of data as it will be stored on multiple machines. By doing so, a sharded database becomes capable of handling more requests than a single large machine. Consider an example - in the following image, assume that we have around 1TB of data present in the database, when we perform sharding, we divide the large 1TB data into smaller chunks of 256GB into partitions called shards.   Sharding helps to scale databases by helping to handle the increased load by providing increased throughput, storage capacity and ensuring high availability.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "6. How is NoSQL database different from SQL databases?",
        "answer": "Category  SQL NoSQL\nModel Follows relational model.  Follows the non-relational model.\nData  Deals with structured data.  Deals with semi-structured data.\nFlexibility  SQL follows a strict schema.  NoSQL deals with dynamic schema and is very flexible.\nTransactions Follows ACID (Atomicity, Consistency, Isolation, Durability) properties. Follows BASE (Basic Availability, Soft-state, Eventual consistency) properties. Category  SQL NoSQL\nModel Follows relational model.  Follows the non-relational model.\nData  Deals with structured data.  Deals with semi-structured data.\nFlexibility  SQL follows a strict schema.  NoSQL deals with dynamic schema and is very flexible.\nTransactions Follows ACID (Atomicity, Consistency, Isolation, Durability) properties. Follows BASE (Basic Availability, Soft-state, Eventual consistency) properties. Category  SQL NoSQL Category  SQL NoSQL Category SQL NoSQL Model Follows relational model.  Follows the non-relational model.\nData  Deals with structured data.  Deals with semi-structured data.\nFlexibility  SQL follows a strict schema.  NoSQL deals with dynamic schema and is very flexible.\nTransactions Follows ACID (Atomicity, Consistency, Isolation, Durability) properties. Follows BASE (Basic Availability, Soft-state, Eventual consistency) properties. Model Follows relational model.  Follows the non-relational model. Model Follows relational model. Follows the non-relational model. Data  Deals with structured data.  Deals with semi-structured data. Data Deals with structured data. Deals with semi-structured data. Flexibility  SQL follows a strict schema.  NoSQL deals with dynamic schema and is very flexible. Flexibility SQL follows a strict schema. NoSQL deals with dynamic schema and is very flexible. Transactions Follows ACID (Atomicity, Consistency, Isolation, Durability) properties. Follows BASE (Basic Availability, Soft-state, Eventual consistency) properties. Transactions Follows ACID (Atomicity, Consistency, Isolation, Durability) properties. Follows BASE (Basic Availability, Soft-state, Eventual consistency) properties. Check out more differences here. here here",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "7. How is sharding different from partitioning?",
        "answer": "Database Sharding - Sharding is a technique for dividing a single dataset among many databases, allowing it to be stored across multiple workstations. Larger datasets can be divided into smaller parts and stored in numerous data nodes, boosting the system’s total storage capacity. A sharded database, similarly, can accommodate more requests than a single system by dividing the data over numerous machines. Sharding, also known as horizontal scaling or scale-out, is a type of scaling in which more nodes are added to distribute the load. Horizontal scaling provides near-limitless scalability for handling large amounts of data and high-volume tasks.\nDatabase Partitioning - Partitioning is the process of separating stored database objects (tables, indexes, and views) into distinct portions. Large database items are partitioned to improve controllability, performance, and availability. Partitioning can enhance performance when accessing partitioned tables in specific instances. Partitioning can act as a leading column in indexes, reducing index size and increasing the likelihood of finding the most desired indexes in memory. When a large portion of one area is used in the resultset, scanning that region is much faster than accessing data scattered throughout the entire table by index. Adding and deleting sections allows for large-scale data uploading and deletion, which improves performance. Data that are rarely used can be uploaded to more affordable data storage devices. Database Sharding - Sharding is a technique for dividing a single dataset among many databases, allowing it to be stored across multiple workstations. Larger datasets can be divided into smaller parts and stored in numerous data nodes, boosting the system’s total storage capacity. A sharded database, similarly, can accommodate more requests than a single system by dividing the data over numerous machines. Sharding, also known as horizontal scaling or scale-out, is a type of scaling in which more nodes are added to distribute the load. Horizontal scaling provides near-limitless scalability for handling large amounts of data and high-volume tasks. Database Sharding Database Partitioning - Partitioning is the process of separating stored database objects (tables, indexes, and views) into distinct portions. Large database items are partitioned to improve controllability, performance, and availability. Partitioning can enhance performance when accessing partitioned tables in specific instances. Partitioning can act as a leading column in indexes, reducing index size and increasing the likelihood of finding the most desired indexes in memory. When a large portion of one area is used in the resultset, scanning that region is much faster than accessing data scattered throughout the entire table by index. Adding and deleting sections allows for large-scale data uploading and deletion, which improves performance. Data that are rarely used can be uploaded to more affordable data storage devices. Database Partitioning The following table lists the differences between sharding and partitioning: Sharding Partitioning \nSharding is a type of partitioning and is also referred to as horizontal partitioning. Sharding can also be defined as replicating the schema and then dividing the data based on a shard key. A partition is a logical database’s split into separate, independent portions. Database partitioning is commonly used for load balancing, manageability, performance, and availability.\nThe advantages of sharding include the following: \nIncreased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. \nIncreased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. \nHigh Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema.\nThe advantages of partitioning include all that of sharding since sharding is a type of partitioning. Besides this, partitioning includes the benefits of vertical partitioning as well which involves dividing the schema of the database. Sharding Partitioning \nSharding is a type of partitioning and is also referred to as horizontal partitioning. Sharding can also be defined as replicating the schema and then dividing the data based on a shard key. A partition is a logical database’s split into separate, independent portions. Database partitioning is commonly used for load balancing, manageability, performance, and availability.\nThe advantages of sharding include the following: \nIncreased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. \nIncreased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. \nHigh Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema.\nThe advantages of partitioning include all that of sharding since sharding is a type of partitioning. Besides this, partitioning includes the benefits of vertical partitioning as well which involves dividing the schema of the database. Sharding Partitioning Sharding Partitioning Sharding Partitioning Sharding is a type of partitioning and is also referred to as horizontal partitioning. Sharding can also be defined as replicating the schema and then dividing the data based on a shard key. A partition is a logical database’s split into separate, independent portions. Database partitioning is commonly used for load balancing, manageability, performance, and availability.\nThe advantages of sharding include the following: \nIncreased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. \nIncreased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. \nHigh Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema.\nThe advantages of partitioning include all that of sharding since sharding is a type of partitioning. Besides this, partitioning includes the benefits of vertical partitioning as well which involves dividing the schema of the database. Sharding is a type of partitioning and is also referred to as horizontal partitioning. Sharding can also be defined as replicating the schema and then dividing the data based on a shard key. A partition is a logical database’s split into separate, independent portions. Database partitioning is commonly used for load balancing, manageability, performance, and availability. Sharding is a type of partitioning and is also referred to as horizontal partitioning. Sharding can also be defined as replicating the schema and then dividing the data based on a shard key. A partition is a logical database’s split into separate, independent portions. Database partitioning is commonly used for load balancing, manageability, performance, and availability. The advantages of sharding include the following: \nIncreased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. \nIncreased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. \nHigh Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema.\nThe advantages of partitioning include all that of sharding since sharding is a type of partitioning. Besides this, partitioning includes the benefits of vertical partitioning as well which involves dividing the schema of the database. The advantages of sharding include the following: \nIncreased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. \nIncreased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. \nHigh Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema. The advantages of sharding include the following: Increased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. \nIncreased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. \nHigh Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema. Increased Read/Write Throughput: Distributing the dataset across several shards increases both read and write operation capacity, as long as the read and write operations are limited to a single shard. Increased Read/Write Throughput: Increased Storage Capacity: Boosting the number of shards allows for near-infinite scalability by increasing overall total storage capacity. Increased Storage Capacity: High Availability: Every piece of data is copied since each shard is a replica set. Moreover, because the data is dispersed, even if an entire shard goes down, the database as a whole remains partially functional, with separate shards hosting different parts of the schema. High Availability The advantages of partitioning include all that of sharding since sharding is a type of partitioning. Besides this, partitioning includes the benefits of vertical partitioning as well which involves dividing the schema of the database.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "8. How is performance and scalability related to each other?",
        "answer": "A system is said to be scalable if there is increased performance is proportional to the resources added. Generally, performance increase in terms of scalability refers to serving more work units. But this can also mean being able to handle larger work units when datasets grow. If there is a performance problem in the application, then the system will be slow only for a single user. But if there is a scalability problem, then the system may be fast for a single user but it can get slow under heavy user load on the application.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "9. What is Caching? What are the various cache update strategies available in caching?",
        "answer": "Caching refers to the process of storing file copies in a temporary storage location called cache which helps in accessing data more quickly thereby reducing site latency. The cache can only store a limited amount of data. Due to this, it is important to determine cache update strategies that are best suited for the business requirements. Following are the various caching strategies available: Cache-aside: In this strategy, our application is responsible to write and read data from the storage. Cache interaction with the storage is not direct. Here, the application looks for an entry in the cache, if the result is not found, then the entry is fetched from the database and is added to the cache for further use. Memcached is an example of using this update strategy. Cache-aside: In this strategy, our application is responsible to write and read data from the storage. Cache interaction with the storage is not direct. Here, the application looks for an entry in the cache, if the result is not found, then the entry is fetched from the database and is added to the cache for further use. Memcached is an example of using this update strategy. Cache-aside   Cache-aside strategy is also known as lazy loading because only the requested entry will be cached thereby avoiding unnecessary caching of the data. Some of the disadvantages of this strategy are: In cases of a cache miss, there would be a noticeable delay as it results in fetching data from the database and then caching it.\nThe chances of data being stale are more if it is updated in the database. This can be reduced by defining the time-to-live parameter which forces an update of the cache entry.\nWhen a cache node fails, it will be replaced by a new, empty node which results in increased latency.\nWrite-through: In this strategy, the cache will be considered as the main data store by the system and the system reads and writes data into it. The cache then updates the database accordingly as shown in the database. In cases of a cache miss, there would be a noticeable delay as it results in fetching data from the database and then caching it. The chances of data being stale are more if it is updated in the database. This can be reduced by defining the time-to-live parameter which forces an update of the cache entry. When a cache node fails, it will be replaced by a new, empty node which results in increased latency. Write-through: In this strategy, the cache will be considered as the main data store by the system and the system reads and writes data into it. The cache then updates the database accordingly as shown in the database. Write-through   The system adds or updates the entry in the cache.\nThe cache synchronously writes entries to the database. This strategy is overall a slow operation because of the synchronous write operation. However, the subsequent reads of the recently written data will be very fast. This strategy also ensures that the cache is not stale. But, there are chances that the data written in the cache might never be read. This issue can be reduced by providing appropriate TTL.\nWrite-behind (write-back): In this strategy, the application does the following steps:\nAdd or update an entry in the cache\nWrite the entry into the data store asynchronously for improving the write performance. This is demonstrated in the image below: The system adds or updates the entry in the cache. The cache synchronously writes entries to the database. This strategy is overall a slow operation because of the synchronous write operation. However, the subsequent reads of the recently written data will be very fast. This strategy also ensures that the cache is not stale. But, there are chances that the data written in the cache might never be read. This issue can be reduced by providing appropriate TTL. Write-behind (write-back): In this strategy, the application does the following steps:\nAdd or update an entry in the cache\nWrite the entry into the data store asynchronously for improving the write performance. This is demonstrated in the image below: Write-behind (write-back) Add or update an entry in the cache\nWrite the entry into the data store asynchronously for improving the write performance. This is demonstrated in the image below: Add or update an entry in the cache Write the entry into the data store asynchronously for improving the write performance. This is demonstrated in the image below:   The main disadvantage of this method is that there are chances of data loss if the cache goes down before the contents of the cache are written into the database. Refresh-ahead: Using this strategy, we can configure the cache to refresh the cache entry automatically before its expiration. Refresh-ahead: Using this strategy, we can configure the cache to refresh the cache entry automatically before its expiration. Refresh-ahead   This cache strategy results in reduced latency if it can predict accurately what items are needed in future.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "10. What are the various Consistency patterns available in system design?",
        "answer": "Consistency from the CAP theorem states that every read request should get the most recently written data. When there are multiple data copies available, there arises a problem of synchronizing them so that the clients get fresh data consistently. Following are the consistency patterns available: Weak consistency: After a data write, the read request may or may not be able to get the new data. This type of consistency works well in real-time use cases like VoIP, video chat, real-time multiplayer games etc. For example, when we are on a phone call, if we lose network for a few seconds, then we lose information about what was spoken during that time.\nEventual consistency: Post data write, the reads will eventually see the latest data within milliseconds. Here, the data is replicated asynchronously. These are seen in DNS and email systems. This works well in highly available systems.\nStrong consistency: After a data write, the subsequent reads will see the latest data. Here, the data is replicated synchronously. This is seen in RDBMS and file systems and are suitable in systems requiring transactions of data. Weak consistency: After a data write, the read request may or may not be able to get the new data. This type of consistency works well in real-time use cases like VoIP, video chat, real-time multiplayer games etc. For example, when we are on a phone call, if we lose network for a few seconds, then we lose information about what was spoken during that time. Weak consistency Eventual consistency: Post data write, the reads will eventually see the latest data within milliseconds. Here, the data is replicated asynchronously. These are seen in DNS and email systems. This works well in highly available systems. Eventual consistency Strong consistency: After a data write, the subsequent reads will see the latest data. Here, the data is replicated synchronously. This is seen in RDBMS and file systems and are suitable in systems requiring transactions of data. Strong consistency",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "11. What do you understand by Content delivery network?",
        "answer": "Content delivery network or in short CDN is a globally distributed proxy server network that serves content from locations close by to the end-users. Usually, in websites, static files like HTML, CSS, JS files, images and videos are served from CDN. Using CDN in delivering content helps to improve performance: Since users receive data from centres close to them as shown in the image below, they don't have to wait for long. Since users receive data from centres close to them as shown in the image below, they don't have to wait for long.   Load on the servers is reduced significantly as some of the responsibility is shared by CDNs. Load on the servers is reduced significantly as some of the responsibility is shared by CDNs. There are two types of CDNs, they are: Push CDNs: Here, the content is received by the CDNs whenever changes occur on the server. The responsibility lies in us for uploading the content to CDNs. Content gets updated to the CDN only when it is modified or added which in turn maximises storage by minimising the traffic. Generally, sites with lesser traffic or content work well using push CDNs.\nPull CDNs: Here new content is grabbed from the server when the first user requests the content from the site. This leads to slower requests for the first time till the content gets stored/cached on the CDN. These CDNs minimizes space utilized on CDN but can lead to redundant traffic when expired files are pulled before they are changed. Websites having heavy traffic work well when used with pull CDNs. Push CDNs: Here, the content is received by the CDNs whenever changes occur on the server. The responsibility lies in us for uploading the content to CDNs. Content gets updated to the CDN only when it is modified or added which in turn maximises storage by minimising the traffic. Generally, sites with lesser traffic or content work well using push CDNs. Push CDNs Pull CDNs: Here new content is grabbed from the server when the first user requests the content from the site. This leads to slower requests for the first time till the content gets stored/cached on the CDN. These CDNs minimizes space utilized on CDN but can lead to redundant traffic when expired files are pulled before they are changed. Websites having heavy traffic work well when used with pull CDNs. Pull CDNs",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "12. What do you understand by Leader Election?",
        "answer": "In a distributed environment where there are multiple servers contributing to the availability of the application, there can be situations where only one server has to take lead for updating third party APIs as different servers could cause problems while using the third party APIs. This server is called the primary server and the process of choosing this server is called leader election. The servers in the distributed environment have to detect when the leader server has failed and appoint another one to become a leader. This process is most suitable in high availability and strong consistency based applications by using a consensus algorithm.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "13. How do you answer system design interview questions?",
        "answer": "Ask questions to the interviewer for clarification: Since the questions are purposefully vague, it is advised to ask relevant questions to the interviewer to ensure that both you and the interviewer are on the same page. Asking questions also shows that you care about the customer requirements.\nGather the requirements: List all the features that are required, what are the common problems and system performance parameters that are expected by the system to handle. This step helps the interviewer to see how well you plan, expect problems and come up with solutions to each of them. Every choice matters while designing a system. For every choice, at least one pros and cons of the system needs to be listed.\nCome up with a design: Come up with a high-level design and low-level design solutions for each of the requirements decided. Discuss the pros and cons of the design. Also, discuss how they are beneficial to the business. Ask questions to the interviewer for clarification: Since the questions are purposefully vague, it is advised to ask relevant questions to the interviewer to ensure that both you and the interviewer are on the same page. Asking questions also shows that you care about the customer requirements. Ask questions to the interviewer for clarification Gather the requirements: List all the features that are required, what are the common problems and system performance parameters that are expected by the system to handle. This step helps the interviewer to see how well you plan, expect problems and come up with solutions to each of them. Every choice matters while designing a system. For every choice, at least one pros and cons of the system needs to be listed. Gather the requirements Come up with a design: Come up with a high-level design and low-level design solutions for each of the requirements decided. Discuss the pros and cons of the design. Also, discuss how they are beneficial to the business. Come up with a design The primary objective of system design interviews is to evaluate how well a developer can plan, prioritize, evaluate various options to choose the best possible solution for a given problem.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "14. What are some of the design issues in distributed systems?",
        "answer": "Following are some of the issues found in distributed systems: Heterogeneity: The Internet allows applications to run over a heterogeneous collection of computers and networks. There would be different types of networks and the differences are masked by the usage of standard Internet protocols for communicating with each other. This becomes an issue while designing distributed applications\nOpenness: Openness represents the measure by which a system can be extended and re-implemented in different ways. In distributed systems, it specifies the degree to which new sharing services can be added and made available for client usage.\nSecurity: The information maintained in distributed systems need to be secure as they are valuable to the users. The confidentiality, availability and integrity of the distributed systems have to be maintained and this sometimes becomes a challenge.\nScalability: A system is scalable if it remains effective when there is a significant increase in the request traffic and resources. Designing a distributed system involves planning well in advance how well the system can be made scalable under varying user loads.\nFailure Handling: In a distributed environment, the failures are partial, meaning if some components fail, others would still function. It becomes challenging to handle these failures as it involves identifying right components where the failures occur. Heterogeneity: The Internet allows applications to run over a heterogeneous collection of computers and networks. There would be different types of networks and the differences are masked by the usage of standard Internet protocols for communicating with each other. This becomes an issue while designing distributed applications Heterogeneity Openness: Openness represents the measure by which a system can be extended and re-implemented in different ways. In distributed systems, it specifies the degree to which new sharing services can be added and made available for client usage. Openness Security: The information maintained in distributed systems need to be secure as they are valuable to the users. The confidentiality, availability and integrity of the distributed systems have to be maintained and this sometimes becomes a challenge. Security Scalability: A system is scalable if it remains effective when there is a significant increase in the request traffic and resources. Designing a distributed system involves planning well in advance how well the system can be made scalable under varying user loads. Scalability Failure Handling: In a distributed environment, the failures are partial, meaning if some components fail, others would still function. It becomes challenging to handle these failures as it involves identifying right components where the failures occur. Failure Handling",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "1. Design Uber, Ola or Lyft type of systems.",
        "answer": "These platforms help user request rides and the driver picks them up from the location and drop them at the destination selected by the user. What are some of the required features?\nReal-time service for booking rides\nShould have the capability of assigning rides that lets the user reach the destination fast.\nShow the ETA (Estimated Time of Arrival) of the driver after booking the ride and once the ride has been started, show the ETA of the vehicle arriving at the destination.\nWhat are some of the common problems encountered?\nHow to store geographical locations for drivers always on move?\nHow to assign drivers to the customers efficiently?\nHow do you calculate the ETA of the driver arrival or the destination arrival?\nPossible tips for consideration:\nMake use of the microservices concept with fast databases for booking rides faster.\nEvaluate Dispatch System for assigning drivers to the users. What are some of the required features?\nReal-time service for booking rides\nShould have the capability of assigning rides that lets the user reach the destination fast.\nShow the ETA (Estimated Time of Arrival) of the driver after booking the ride and once the ride has been started, show the ETA of the vehicle arriving at the destination. What are some of the required features? Real-time service for booking rides\nShould have the capability of assigning rides that lets the user reach the destination fast.\nShow the ETA (Estimated Time of Arrival) of the driver after booking the ride and once the ride has been started, show the ETA of the vehicle arriving at the destination. Real-time service for booking rides Should have the capability of assigning rides that lets the user reach the destination fast. Show the ETA (Estimated Time of Arrival) of the driver after booking the ride and once the ride has been started, show the ETA of the vehicle arriving at the destination. What are some of the common problems encountered?\nHow to store geographical locations for drivers always on move?\nHow to assign drivers to the customers efficiently?\nHow do you calculate the ETA of the driver arrival or the destination arrival? What are some of the common problems encountered? How to store geographical locations for drivers always on move?\nHow to assign drivers to the customers efficiently?\nHow do you calculate the ETA of the driver arrival or the destination arrival? How to store geographical locations for drivers always on move? How to assign drivers to the customers efficiently? How do you calculate the ETA of the driver arrival or the destination arrival? Possible tips for consideration:\nMake use of the microservices concept with fast databases for booking rides faster.\nEvaluate Dispatch System for assigning drivers to the users. Possible tips for consideration: Make use of the microservices concept with fast databases for booking rides faster.\nEvaluate Dispatch System for assigning drivers to the users. Make use of the microservices concept with fast databases for booking rides faster. Evaluate Dispatch System for assigning drivers to the users. Conclusion: In this article, we have covered the most frequently asked interview questions on System Design. The key element to clear a System Design interview is that you should have a clear understanding of the approach that you are taking while designing a particular system. For instance, in a system, if you choose to store the data in a No SQL database, you should be clear with the reason that made you choose a No SQL database over a SQL database. You should be clear with the differences between SQL and No SQL databases. In other words, every proposition of yours must be backed by some logical reasoning. This will give you an edge in your interviews. Useful Resources: Useful Resources: Data Modelling\nSystem Design Books\nBest System Design Courses\nSoftware Engineering MCQ\nTechnical Interview Questions\nCoding Interview Questions Data Modelling Data Modelling System Design Books System Design Books Best System Design Courses Best System Design Courses Software Engineering MCQ Software Engineering MCQ Technical Interview Questions Technical Interview Questions Coding Interview Questions Coding Interview Questions",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "2. Design ATM system.",
        "answer": "ATMs are used for depositing and withdrawing money from customers. It is also useful for checking the account balance. What are some of the required features?\nEach user should have at least one bank account that is linked to the card for performing transactions.\nATM to authenticate the user based on 4 digit PIN associated with the card.\nUser to perform only one transaction at a given time.\nWhat are some of the common problems encountered?\nWhat happens during transaction timeout?\nWhat happens if the money is deducted from the bank account but the user hasn't received it from the machine?\nPossible tips for consideration:\nDivide the problem into different entities like Card, Card Reader etc and establish a relationship between each of the entities. What are some of the required features?\nEach user should have at least one bank account that is linked to the card for performing transactions.\nATM to authenticate the user based on 4 digit PIN associated with the card.\nUser to perform only one transaction at a given time. What are some of the required features? Each user should have at least one bank account that is linked to the card for performing transactions.\nATM to authenticate the user based on 4 digit PIN associated with the card.\nUser to perform only one transaction at a given time. Each user should have at least one bank account that is linked to the card for performing transactions. ATM to authenticate the user based on 4 digit PIN associated with the card. User to perform only one transaction at a given time. What are some of the common problems encountered?\nWhat happens during transaction timeout?\nWhat happens if the money is deducted from the bank account but the user hasn't received it from the machine? What are some of the common problems encountered? What happens during transaction timeout?\nWhat happens if the money is deducted from the bank account but the user hasn't received it from the machine? What happens during transaction timeout? What happens if the money is deducted from the bank account but the user hasn't received it from the machine? Possible tips for consideration:\nDivide the problem into different entities like Card, Card Reader etc and establish a relationship between each of the entities. Possible tips for consideration: Divide the problem into different entities like Card, Card Reader etc and establish a relationship between each of the entities. Divide the problem into different entities like Card, Card Reader etc and establish a relationship between each of the entities.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "3. Design Web Crawler.",
        "answer": "The Web crawler is a search engine-related service like Google, DuckDuckGo and is used for indexing website contents over the Internet for making them available for every result. What are some of the Required Features?\nDesign and develop a Scalable service for collecting information from the entire web and fetching millions of web documents.\nFresh data has to be fetched for every search query.\nWhat are some of the common problems encountered?\nHow to handle the updates when users are typing very fast?\nHow to prioritize dynamically changing web pages?\nPossible tips for consideration:\nLook into URL Frontier Architecture for implementing this system.\nKnow how crawling is different from scraping. What are some of the Required Features?\nDesign and develop a Scalable service for collecting information from the entire web and fetching millions of web documents.\nFresh data has to be fetched for every search query. What are some of the Required Features? Design and develop a Scalable service for collecting information from the entire web and fetching millions of web documents.\nFresh data has to be fetched for every search query. Design and develop a Scalable service for collecting information from the entire web and fetching millions of web documents. Fresh data has to be fetched for every search query. What are some of the common problems encountered?\nHow to handle the updates when users are typing very fast?\nHow to prioritize dynamically changing web pages? What are some of the common problems encountered? How to handle the updates when users are typing very fast?\nHow to prioritize dynamically changing web pages? How to handle the updates when users are typing very fast? How to prioritize dynamically changing web pages? Possible tips for consideration:\nLook into URL Frontier Architecture for implementing this system.\nKnow how crawling is different from scraping. Possible tips for consideration: Look into URL Frontier Architecture for implementing this system.\nKnow how crawling is different from scraping. Look into URL Frontier Architecture for implementing this system. Know how crawling is different from scraping.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "4. Design a traffic control system.",
        "answer": "Generally, in a traffic control system, we see that the lights transition from RED To GREEN, GREEN to ORANGE and then to RED. What are some of the Required Features?\nTransition traffic lights based on the conventions.\nWhat are some of the common problems encountered?\nDetermine the time interval for which the state of the traffic lights has to change.\nWhat happens in worst-case scenarios where the state is wrongly shown?\nPossible tips for consideration:\nMake use of state design patterns and scheduling algorithms for the transition of the state from one colour to another. What are some of the Required Features?\nTransition traffic lights based on the conventions. What are some of the Required Features? Transition traffic lights based on the conventions. Transition traffic lights based on the conventions. What are some of the common problems encountered?\nDetermine the time interval for which the state of the traffic lights has to change.\nWhat happens in worst-case scenarios where the state is wrongly shown? What are some of the common problems encountered? Determine the time interval for which the state of the traffic lights has to change.\nWhat happens in worst-case scenarios where the state is wrongly shown? Determine the time interval for which the state of the traffic lights has to change. What happens in worst-case scenarios where the state is wrongly shown? Possible tips for consideration:\nMake use of state design patterns and scheduling algorithms for the transition of the state from one colour to another. Possible tips for consideration: Make use of state design patterns and scheduling algorithms for the transition of the state from one colour to another. Make use of state design patterns and scheduling algorithms for the transition of the state from one colour to another.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "5. Design Tic-Tac-Toe game.",
        "answer": "Tic-tac-toe game involves two players where one player chooses 0 and the other player chooses X for marking the cells. The player who fills a row/column/diagonal with their selected character wins.   What are some of the Required Features?\nSupport 2 player game where one player can be a computer.\nDesign algorithm to calculate the win and loss results.\nWhat are some of the common problems encountered?\nWhat happens if both players play optimally?\nHow to decide the winning strategy?\nPossible tips for consideration:\nIf one player is a computer, then make use of the rand() method for ensuring moves are completely random. What are some of the Required Features?\nSupport 2 player game where one player can be a computer.\nDesign algorithm to calculate the win and loss results. What are some of the Required Features? Support 2 player game where one player can be a computer.\nDesign algorithm to calculate the win and loss results. Support 2 player game where one player can be a computer. Design algorithm to calculate the win and loss results. What are some of the common problems encountered?\nWhat happens if both players play optimally?\nHow to decide the winning strategy? What are some of the common problems encountered? What happens if both players play optimally?\nHow to decide the winning strategy? What happens if both players play optimally? How to decide the winning strategy? Possible tips for consideration:\nIf one player is a computer, then make use of the rand() method for ensuring moves are completely random. Possible tips for consideration: If one player is a computer, then make use of the rand() method for ensuring moves are completely random. If one player is a computer, then make use of the rand() method for ensuring moves are completely random.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "6. Design Netflix.",
        "answer": "Netflix is a video streaming service. What are some of the Required Features?\nUninterrupted video streaming to be made available for the users.\nLikes and reviews of videos.\nRecommend new videos.\nSupport high traffic of users.\nWhat are some of the common problems encountered?\nIs it acceptable to have lags while uploading videos?\nWhat happens if many users are accessing the same video concurrently?\nPossible tips for consideration:\nMake use of cloud technology to store and transmit video data\nThere are three components of Netflix: OC (Content Delivery Network), Backend database, Client device for accessing the application. What are some of the Required Features?\nUninterrupted video streaming to be made available for the users.\nLikes and reviews of videos.\nRecommend new videos.\nSupport high traffic of users. What are some of the Required Features? Uninterrupted video streaming to be made available for the users.\nLikes and reviews of videos.\nRecommend new videos.\nSupport high traffic of users. Uninterrupted video streaming to be made available for the users. Likes and reviews of videos. Recommend new videos. Support high traffic of users. What are some of the common problems encountered?\nIs it acceptable to have lags while uploading videos?\nWhat happens if many users are accessing the same video concurrently? What are some of the common problems encountered? Is it acceptable to have lags while uploading videos?\nWhat happens if many users are accessing the same video concurrently? Is it acceptable to have lags while uploading videos? What happens if many users are accessing the same video concurrently? Possible tips for consideration:\nMake use of cloud technology to store and transmit video data\nThere are three components of Netflix: OC (Content Delivery Network), Backend database, Client device for accessing the application. Possible tips for consideration: Make use of cloud technology to store and transmit video data\nThere are three components of Netflix: OC (Content Delivery Network), Backend database, Client device for accessing the application. Make use of cloud technology to store and transmit video data There are three components of Netflix: OC (Content Delivery Network), Backend database, Client device for accessing the application.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "7. Design a type-ahead search engine service.",
        "answer": "This service partially completes the search queries by displaying n number of suggestions for completing the query that the user intended to search. What are some of the Required Features?\nService has to match partial queries with popularly searched queries.\nThe system has to display n number of suggestions (say 5, for example) based on the written query.\nThe suggestions have to be updated based on the query updation.\nWhat are some of the common problems encountered?\nHow to update the suggestions without much latency?\nHow to determine the most likely suggestion?\nAre the suggestions adapting to the user’s search results?\nWhen do the suggestions appear? Is it updated on the fly or once the user stops writing?\nPossible tips for consideration:\nEvaluate the usage of natural language processing for anticipating the next characters.\nMarkov chain rule for ranking the probabilities of top queries. What are some of the Required Features?\nService has to match partial queries with popularly searched queries.\nThe system has to display n number of suggestions (say 5, for example) based on the written query.\nThe suggestions have to be updated based on the query updation. What are some of the Required Features? Service has to match partial queries with popularly searched queries.\nThe system has to display n number of suggestions (say 5, for example) based on the written query.\nThe suggestions have to be updated based on the query updation. Service has to match partial queries with popularly searched queries. The system has to display n number of suggestions (say 5, for example) based on the written query. The suggestions have to be updated based on the query updation. What are some of the common problems encountered?\nHow to update the suggestions without much latency?\nHow to determine the most likely suggestion?\nAre the suggestions adapting to the user’s search results?\nWhen do the suggestions appear? Is it updated on the fly or once the user stops writing? What are some of the common problems encountered? How to update the suggestions without much latency?\nHow to determine the most likely suggestion?\nAre the suggestions adapting to the user’s search results?\nWhen do the suggestions appear? Is it updated on the fly or once the user stops writing? How to update the suggestions without much latency? How to determine the most likely suggestion? Are the suggestions adapting to the user’s search results? When do the suggestions appear? Is it updated on the fly or once the user stops writing? Possible tips for consideration:\nEvaluate the usage of natural language processing for anticipating the next characters.\nMarkov chain rule for ranking the probabilities of top queries. Possible tips for consideration: Evaluate the usage of natural language processing for anticipating the next characters.\nMarkov chain rule for ranking the probabilities of top queries. Evaluate the usage of natural language processing for anticipating the next characters. Markov chain rule for ranking the probabilities of top queries.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "8. How do you design global file storage and file sharing services like Google Drive, Dropbox etc?",
        "answer": "What are some of the Required Features?\nUsers should be able to upload, delete, share and download files over the web.\nFile updates should be synced across multiple devices.\nWhat are some of the common problems encountered?\nWhere to store the files?\nHow can you handle updates? Should the files be re-uploaded or does just the modified version has to be updated?\nHow to handle updation of two documents at the same time?\nPossible tips for consideration:\nConsider using chunking for splitting files into multiple sections for supporting re-uploads of a particular section rather than the whole file.\nMake use of cloud storage for storing the files. What are some of the Required Features?\nUsers should be able to upload, delete, share and download files over the web.\nFile updates should be synced across multiple devices. What are some of the Required Features? Users should be able to upload, delete, share and download files over the web.\nFile updates should be synced across multiple devices. Users should be able to upload, delete, share and download files over the web. File updates should be synced across multiple devices. What are some of the common problems encountered?\nWhere to store the files?\nHow can you handle updates? Should the files be re-uploaded or does just the modified version has to be updated?\nHow to handle updation of two documents at the same time? What are some of the common problems encountered? Where to store the files?\nHow can you handle updates? Should the files be re-uploaded or does just the modified version has to be updated?\nHow to handle updation of two documents at the same time? Where to store the files? How can you handle updates? Should the files be re-uploaded or does just the modified version has to be updated? How to handle updation of two documents at the same time? Possible tips for consideration:\nConsider using chunking for splitting files into multiple sections for supporting re-uploads of a particular section rather than the whole file.\nMake use of cloud storage for storing the files. Possible tips for consideration: Consider using chunking for splitting files into multiple sections for supporting re-uploads of a particular section rather than the whole file.\nMake use of cloud storage for storing the files. Consider using chunking for splitting files into multiple sections for supporting re-uploads of a particular section rather than the whole file. Make use of cloud storage for storing the files.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "9. Design an API Rate Limiter system for GitHub or Firebase sites.",
        "answer": "API Rate Limiters limit the API calls that a service receives in a given time period for avoiding request overload. This question can start with the coding algorithm on a single machine to the distributed network. What are some of the Required Features?\nWhat is the required request count per hour or second? Let us assume that the requirement can be 10 requests per second.\nShould the limiter notify the user if the requests are blocked?\nThe limiter should handle traffic suitable according to the scale.\nWhat are some of the common problems encountered?\nHow to measure the requests per given time?\nHow to design the rate limiter for the distributed systems when compared to a local system?\nPossible tips for consideration:\nEvaluate the usage of sliding time windows for avoiding hourly resets.\nTry using a counter integer instead of a request for saving space. What are some of the Required Features?\nWhat is the required request count per hour or second? Let us assume that the requirement can be 10 requests per second.\nShould the limiter notify the user if the requests are blocked?\nThe limiter should handle traffic suitable according to the scale. What are some of the Required Features? What is the required request count per hour or second? Let us assume that the requirement can be 10 requests per second.\nShould the limiter notify the user if the requests are blocked?\nThe limiter should handle traffic suitable according to the scale. What is the required request count per hour or second? Let us assume that the requirement can be 10 requests per second. Should the limiter notify the user if the requests are blocked? The limiter should handle traffic suitable according to the scale. What are some of the common problems encountered?\nHow to measure the requests per given time?\nHow to design the rate limiter for the distributed systems when compared to a local system? What are some of the common problems encountered? How to measure the requests per given time?\nHow to design the rate limiter for the distributed systems when compared to a local system? How to measure the requests per given time? How to design the rate limiter for the distributed systems when compared to a local system? Possible tips for consideration:\nEvaluate the usage of sliding time windows for avoiding hourly resets.\nTry using a counter integer instead of a request for saving space. Possible tips for consideration: Evaluate the usage of sliding time windows for avoiding hourly resets.\nTry using a counter integer instead of a request for saving space. Evaluate the usage of sliding time windows for avoiding hourly resets. Try using a counter integer instead of a request for saving space.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "10. How do you design a recommendation system?",
        "answer": "Recommendation systems are used for helping users identify what they want efficiently by assisting them by offering various choices and alternatives based on their history or interests. What are some of the Required Features?\nDiscuss what kind of recommendation system is required - whether it is for movies, e-commerce websites, songs etc.\nWhat are some of the common problems encountered?\nFigure out how to recommend fresh and relevant content in real-time.\nPossible tips for consideration:\nDiscuss how to use the Eval component for understanding the working of the system.\nDiscuss how to train a collaborative filtering approach. What are some of the Required Features?\nDiscuss what kind of recommendation system is required - whether it is for movies, e-commerce websites, songs etc. What are some of the Required Features? Discuss what kind of recommendation system is required - whether it is for movies, e-commerce websites, songs etc. Discuss what kind of recommendation system is required - whether it is for movies, e-commerce websites, songs etc. What are some of the common problems encountered?\nFigure out how to recommend fresh and relevant content in real-time. What are some of the common problems encountered? Figure out how to recommend fresh and relevant content in real-time. Figure out how to recommend fresh and relevant content in real-time. Possible tips for consideration:\nDiscuss how to use the Eval component for understanding the working of the system.\nDiscuss how to train a collaborative filtering approach. Possible tips for consideration: Discuss how to use the Eval component for understanding the working of the system.\nDiscuss how to train a collaborative filtering approach. Discuss how to use the Eval component for understanding the working of the system. Discuss how to train a collaborative filtering approach.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "11. Design a parking lot system?",
        "answer": "What are some of the Required Features?\nThe parking lot can have multiple levels where each level has multiple rows for parking spots.\nThe parking lot can support parking for cars, buses, motorcycles hence spots can be of multiple sizes.\nConsider the parking lot capacity at the time of designing the system.\nDesign appropriate pricing for each parking spot.\nWhat are some of the Common Problems encountered?\nWhat should happen to the parking lot system if every spot is occupied?\nAssigning parking lot spots of smaller size to vehicles of a bigger size.\nPossible tips for consideration:\nThink of an algorithm for assigning an appropriate parking spot to a vehicle.\nThink of different entities required for designing the system. What are some of the Required Features?\nThe parking lot can have multiple levels where each level has multiple rows for parking spots.\nThe parking lot can support parking for cars, buses, motorcycles hence spots can be of multiple sizes.\nConsider the parking lot capacity at the time of designing the system.\nDesign appropriate pricing for each parking spot. What are some of the Required Features? The parking lot can have multiple levels where each level has multiple rows for parking spots.\nThe parking lot can support parking for cars, buses, motorcycles hence spots can be of multiple sizes.\nConsider the parking lot capacity at the time of designing the system.\nDesign appropriate pricing for each parking spot. The parking lot can have multiple levels where each level has multiple rows for parking spots. The parking lot can support parking for cars, buses, motorcycles hence spots can be of multiple sizes. Consider the parking lot capacity at the time of designing the system. Design appropriate pricing for each parking spot. What are some of the Common Problems encountered?\nWhat should happen to the parking lot system if every spot is occupied?\nAssigning parking lot spots of smaller size to vehicles of a bigger size. What are some of the Common Problems encountered? What should happen to the parking lot system if every spot is occupied?\nAssigning parking lot spots of smaller size to vehicles of a bigger size. What should happen to the parking lot system if every spot is occupied? Assigning parking lot spots of smaller size to vehicles of a bigger size. Possible tips for consideration:\nThink of an algorithm for assigning an appropriate parking spot to a vehicle.\nThink of different entities required for designing the system. Possible tips for consideration: Think of an algorithm for assigning an appropriate parking spot to a vehicle.\nThink of different entities required for designing the system. Think of an algorithm for assigning an appropriate parking spot to a vehicle. Think of different entities required for designing the system.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "12. Design Facebook’s newsfeed system.",
        "answer": "Facebook’s newsfeed allows users to see what is happening in their friend's circle, liked pages and groups followed. What are some of the Required Features?\nGenerate newsfeed using posts from other system entities that the user follows.\nNewsfeed posts can be of text, image, audio or video format.\nAppend new posts to the user’s newsfeed in close to real-time.\nWhat are some of the Common Problems encountered?\nWhat happens if the new post sees a lot of latency to get appended to the news feed?\nCan the algorithm handle sudden user load?\nWhat posts should take priority for displaying in the news feed?\nPossible tips for consideration:\nEvaluate the process of fanout for publishing posts to the followers\nCheck how sharding can be achieved efficiently for handling heavy user load. The feed data of a user shouldn't be put into multiple servers. Instead, sharding can be done on user ids. What are some of the Required Features?\nGenerate newsfeed using posts from other system entities that the user follows.\nNewsfeed posts can be of text, image, audio or video format.\nAppend new posts to the user’s newsfeed in close to real-time. What are some of the Required Features? Generate newsfeed using posts from other system entities that the user follows.\nNewsfeed posts can be of text, image, audio or video format.\nAppend new posts to the user’s newsfeed in close to real-time. Generate newsfeed using posts from other system entities that the user follows. Newsfeed posts can be of text, image, audio or video format. Append new posts to the user’s newsfeed in close to real-time. What are some of the Common Problems encountered?\nWhat happens if the new post sees a lot of latency to get appended to the news feed?\nCan the algorithm handle sudden user load?\nWhat posts should take priority for displaying in the news feed? What are some of the Common Problems encountered? What happens if the new post sees a lot of latency to get appended to the news feed?\nCan the algorithm handle sudden user load?\nWhat posts should take priority for displaying in the news feed? What happens if the new post sees a lot of latency to get appended to the news feed? Can the algorithm handle sudden user load? What posts should take priority for displaying in the news feed? Possible tips for consideration:\nEvaluate the process of fanout for publishing posts to the followers\nCheck how sharding can be achieved efficiently for handling heavy user load. The feed data of a user shouldn't be put into multiple servers. Instead, sharding can be done on user ids. Possible tips for consideration: Evaluate the process of fanout for publishing posts to the followers\nCheck how sharding can be achieved efficiently for handling heavy user load. The feed data of a user shouldn't be put into multiple servers. Instead, sharding can be done on user ids. Evaluate the process of fanout for publishing posts to the followers Check how sharding can be achieved efficiently for handling heavy user load. The feed data of a user shouldn't be put into multiple servers. Instead, sharding can be done on user ids.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "13. Design a forum-like systems like Quora, Reddit or HackerNews.",
        "answer": "These sites are meant for posting questions and answering them, showing newsfeed highlighting popular questions based on tags and related topics. What are some of the Required Features?\nUsers should be able to create public posts and apply tags to them.\nPosts should be sortable based on tags.\nPost comments in real-time by users.\nDisplay posts on newsfeed based on followed tags.\nWhat are some of the Common Problems encountered?\nShould it be just a web application?\nWhere to store the uploaded images and links?\nHow can you determine the related tags?\nHow can you distribute posts across a server network?\nPossible tips for consideration:\nCheck on using SQL database for mapping relational data between users, posts, comments, likes, tags, posts etc.\nIncorporate multithreading and load balancer for supporting high traffic.\nMake use of sharding for distributing the data across different systems.\nIncorporate machine learning algorithms for finding correlations between the tags. What are some of the Required Features?\nUsers should be able to create public posts and apply tags to them.\nPosts should be sortable based on tags.\nPost comments in real-time by users.\nDisplay posts on newsfeed based on followed tags. What are some of the Required Features? Users should be able to create public posts and apply tags to them.\nPosts should be sortable based on tags.\nPost comments in real-time by users.\nDisplay posts on newsfeed based on followed tags. Users should be able to create public posts and apply tags to them. Posts should be sortable based on tags. Post comments in real-time by users. Display posts on newsfeed based on followed tags. What are some of the Common Problems encountered?\nShould it be just a web application?\nWhere to store the uploaded images and links?\nHow can you determine the related tags?\nHow can you distribute posts across a server network? What are some of the Common Problems encountered? Should it be just a web application?\nWhere to store the uploaded images and links?\nHow can you determine the related tags?\nHow can you distribute posts across a server network? Should it be just a web application? Where to store the uploaded images and links? How can you determine the related tags? How can you distribute posts across a server network? Possible tips for consideration:\nCheck on using SQL database for mapping relational data between users, posts, comments, likes, tags, posts etc.\nIncorporate multithreading and load balancer for supporting high traffic.\nMake use of sharding for distributing the data across different systems.\nIncorporate machine learning algorithms for finding correlations between the tags. Possible tips for consideration: Check on using SQL database for mapping relational data between users, posts, comments, likes, tags, posts etc.\nIncorporate multithreading and load balancer for supporting high traffic.\nMake use of sharding for distributing the data across different systems.\nIncorporate machine learning algorithms for finding correlations between the tags. Check on using SQL database for mapping relational data between users, posts, comments, likes, tags, posts etc. Incorporate multithreading and load balancer for supporting high traffic. Make use of sharding for distributing the data across different systems. Incorporate machine learning algorithms for finding correlations between the tags.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "14. How do you design a URL shortening service like TinyURL or bit.ly?",
        "answer": "TinyURL or bit.ly takes a long URL and generates a new unique short URL. These systems are also capable of taking the shortened URL and returning the original full URL. What are some of the Required Features?\nGenerate a short URL having a length shorter than the original URL.\nStore the original URL and map it to the shortened one.\nAllow redirects in the shortened URLs.\nSupport custom names for short URLs.\nHandle multiple requests at the same time.\nWhat are some of the Common Problems encountered?\nWhat if two users input the same custom URL?\nWhat happens if there are more user load than expected?\nHow do you regulate the database storage space?\nPossible tips for consideration:\nThe concept of hashing can be used for linking original and new URLs.\nREST API can be used for balancing high traffic and handling front-end communication.\nMultithreading concept for handling multiple requests at the same time.\nNoSQL databases for storing original URLs. What are some of the Required Features?\nGenerate a short URL having a length shorter than the original URL.\nStore the original URL and map it to the shortened one.\nAllow redirects in the shortened URLs.\nSupport custom names for short URLs.\nHandle multiple requests at the same time. What are some of the Required Features? Generate a short URL having a length shorter than the original URL.\nStore the original URL and map it to the shortened one.\nAllow redirects in the shortened URLs.\nSupport custom names for short URLs.\nHandle multiple requests at the same time. Generate a short URL having a length shorter than the original URL. Store the original URL and map it to the shortened one. Allow redirects in the shortened URLs. Support custom names for short URLs. Handle multiple requests at the same time. What are some of the Common Problems encountered?\nWhat if two users input the same custom URL?\nWhat happens if there are more user load than expected?\nHow do you regulate the database storage space? What are some of the Common Problems encountered? What if two users input the same custom URL?\nWhat happens if there are more user load than expected?\nHow do you regulate the database storage space? What if two users input the same custom URL? What happens if there are more user load than expected? How do you regulate the database storage space? Possible tips for consideration:\nThe concept of hashing can be used for linking original and new URLs.\nREST API can be used for balancing high traffic and handling front-end communication.\nMultithreading concept for handling multiple requests at the same time.\nNoSQL databases for storing original URLs. Possible tips for consideration: The concept of hashing can be used for linking original and new URLs.\nREST API can be used for balancing high traffic and handling front-end communication.\nMultithreading concept for handling multiple requests at the same time.\nNoSQL databases for storing original URLs. The concept of hashing can be used for linking original and new URLs. REST API can be used for balancing high traffic and handling front-end communication. Multithreading concept for handling multiple requests at the same time. NoSQL databases for storing original URLs.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "15. Design a global chat service like Whatsapp or a facebook messenger.",
        "answer": "What are some of the required features?\nAllow users to chat over the internet.\nProvide support for one-on-one and group chats.\nMessages need to be stored for better viewing.\nMessages need to be encrypted for security purposes.\nWhat are some of the common problems that can be encountered?\nWhat would happen to a message if it is sent without an internet connection?\nWill encrypting and decrypting increase the latency?\nHow are the messages sent and notified to the device?\nPossible Tips for consideration:\nSplit database schema into multiple tables such as user table, chat table, massage table etc.\nMake use of web sockets for bi-directional communication between the device and the server.\nMake use of push notifications for notifying the members even if they are online. What are some of the required features?\nAllow users to chat over the internet.\nProvide support for one-on-one and group chats.\nMessages need to be stored for better viewing.\nMessages need to be encrypted for security purposes. What are some of the required features? Allow users to chat over the internet.\nProvide support for one-on-one and group chats.\nMessages need to be stored for better viewing.\nMessages need to be encrypted for security purposes. Allow users to chat over the internet. Provide support for one-on-one and group chats. Messages need to be stored for better viewing. Messages need to be encrypted for security purposes. What are some of the common problems that can be encountered?\nWhat would happen to a message if it is sent without an internet connection?\nWill encrypting and decrypting increase the latency?\nHow are the messages sent and notified to the device? What are some of the common problems that can be encountered? What would happen to a message if it is sent without an internet connection?\nWill encrypting and decrypting increase the latency?\nHow are the messages sent and notified to the device? What would happen to a message if it is sent without an internet connection? Will encrypting and decrypting increase the latency? How are the messages sent and notified to the device? Possible Tips for consideration:\nSplit database schema into multiple tables such as user table, chat table, massage table etc.\nMake use of web sockets for bi-directional communication between the device and the server.\nMake use of push notifications for notifying the members even if they are online. Possible Tips for consideration: Split database schema into multiple tables such as user table, chat table, massage table etc.\nMake use of web sockets for bi-directional communication between the device and the server.\nMake use of push notifications for notifying the members even if they are online. Split database schema into multiple tables such as user table, chat table, massage table etc. Make use of web sockets for bi-directional communication between the device and the server. Make use of push notifications for notifying the members even if they are online.",
        "reference": "interviewbit.com",
        "role": "system-design"
    },
    {
        "question": "1) What is System Design?/ What do you understand by System Design?",
        "answer": "System design is the process of defining elements of a system such as modules, architecture, components, interfaces, and data for a system according to some specified requirements. In this process, the companies define, develop, and design systems that satisfy a business or an organization's specific needs and requirements.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "2) What types of questions are asked in System Design Interview?",
        "answer": "In a system design interview, the candidates are asked many questions from the part of a system such as modules, architecture, components, interfaces, communication, data storage, chat services, etc., as well as the real-life problems that a company might be facing. After that, the candidates are categorized according to their field of expertization, such as programmers, designers, developers, and software engineers.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "3) What are the essential skills of system designers? / What skills are needed to be a designer?",
        "answer": "The System Designers must have the following qualities:\nADVERTISEMENT\nThey must be able to understand and solve complex problems.\nThey have a logical and analytical approach to solve problems and customer's requirements.\nThey must have good communication skills.\nThey must be able to work independently as well as part of a team.\nThey must have a good knowledge of IT and the ability to apply it in their project.\nA system designer should be capable of directing the work of others.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "4) What is Pastebin? What are the benefits of designing such a system as Pastebin?",
        "answer": "Pastebin is a website that allows us to paste text or code to it. The biggest advantage of designing such a system is that we can share a link to that code or text (which we have earlier paste here) anywhere we want. It is not an online code editor, but we can use this system or website as a tool to store any text or code.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "5) As a system designer, can you design universal file sharing and storage apps like Google Drive or Dropbox?",
        "answer": "Both apps Google Drive and Dropbox, are used to store and share files, photos, and other media services. We can design things that will allow users to upload/search/view files or photos etc. It will check permissions for file sharing and enables multiple users to make changes in the same document.\nBy asking this question, the interviewers are interested in knowing how you would handle the following things:\nHow would users be able to upload/view/search/share files or photos?\nHow would you track permissions for file sharing?\nHow would you allow multiple users to edit the same document?",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "6) How can you design the websites or apps like Facebook, Twitter, or Instagram (the social media services which handle hundreds of millions of users)?",
        "answer": "The interviewers ask this question to see how you can deal with a huge quantity of users because it will require many storage systems and other complications. When we design social media services that have to handle millions or billions of users, we must focus on the following components:\nHuge and efficient storage and search for posts or tweets.\nNewsfeed generation and maintenance\nSocial Graph (who befriends whom or who follows whom,?especially when millions of users are following a celebrity)\nMany times, interviewers spend the whole interview discussing the design and your creative idea of the newsfeed.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "7) How can you design a social network and message board service like Quora or Reddit, or HackerNews?",
        "answer": "The websites like Quora or Reddit, or HackerNews facilitate users to post questions or share links, and other users can answer these questions or comment on the shared links. The interviewer asks this question to check that if you can provide the following services in your application:\nMaintain and record the stats for each answer, e.g., the total number of views, upvotes/downvotes, etc.\nMake users follow other users or topics.\nThe users' timeline must consist of the top questions from all the users and topics they follow (similar to newsfeed generation).",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "8) What is the use of traffic control software? How can you design such an app?",
        "answer": "The traffic control software is used to make traffic control easy, hassle-free, and automatic. To design traffic control software, we must know how to transition from one state to other works. For example, how the signal goes red to green and from green to orange to red.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "?",
        "answer": "The interviewer asks this question to check how you can handle such a huge database and provide the user an uninterrupted stream over the internet. Video streaming services or websites/applications such as YouTube, Netflix, or Twitch store and transmit hundreds of petabytes of video data. They also store statistics such as views, likes, number of views, etc.) and allow users to post comments. So the solution you are going to provide must be scalable to support millions of concurrent users.\nYou should keep the following features in your mind:\nYour application must support all types of video formats to upload over the web.\nUsers should receive an uninterrupted stream over the internet.\nYou have to provide all video statistics such as total numbers of views, up-votes/down-votes, etc., that should be stored and accessible for every video.\nThe comments on the video must be saved and displayed with the video to be visible to other users. The reply feature also available for every comment.\nThe application should support high traffic of several thousand users.\nWhat type of questions the interviewer can discuss while you answer this question:\nHow would you ensure that your service will provide smooth video streaming on various internet qualities?\nHow do you deal with the problem if your service faces a sudden drop in streaming speed (buffering, reduced quality, etc.)?\nHow would you store the videos?\nThe developer should use the following technologies:\nCloud technology to store and transmit video data.\nMachine learning for new videos suggestion.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "?",
        "answer": "The interviewer asks this question to check if you can create a program that can shorten long URLs like TinyURL or bit.ly. These programs take a long URL and generate a new and unique short URL. You can also put shortened URL here and get the original full-length URL.\nHere, you have to show your solid foundation in design. You can also specify things that are not listed in the example response, such as creating a unique ID for each URL, handling redirects and how you delete expired URLs, etc.?\nYou should keep the following features in your mind:\nYour application must return a URL shorter than the original URL.\nYou have to store the original URL for future purposes.\nThe newly generated URL must be able to link to the stored original URL.\nShortened URL should allow redirects to the original.\nIt must support custom short URLs.\nIt should also be capable of supporting many requests at once.\nWhat type of questions the interviewer can discuss while you answer this question:\nHow can you deal with the issues such as if two users input the same custom URL or get more users than expected?\nHow would you regulate your database storage space?\nWhat technologies would be best to use to develop such applications?\nHashing to link original and new URLs.\nREST API to load high balance traffic and handle front-end client communication.\nUse multithreading to handle multiple requests simultaneously.\nUse NoSQL database to store original URLs (no relation between stored URLs).",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "11) How can you design a limit order book?",
        "answer": "The limit order books are used in stock exchanges to match a buy order with a sell order according to the price and time priority. By asking this question, the interviewer wants to know how you would do that. Which data structure will you use? You should always remember that matching speed should be fast, and the reliability should be good.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "12) How can you design a vending machine in any of the programming languages?",
        "answer": "Here, you have to write code to implement a vending machine that must contain many products, e.g., chocolates, candy, cold drinks, and accepts different types of coins, e.g., rupees, cent, nickles, dimes, quarters, etc. You should also ensure that when you insert a coin, get a product back and get your change back.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "?",
        "answer": "When the interviewer asks this question to the candidates, he/she wants you to design a service where the users can request a ride from the app, and a driver arrives to take them to their destination.\nYou should keep the following features in your mind while designing this service:\nThis is a real-time service, so its architecture should be monolithic/microservices and should have a fast database.\nThis application's backend primarily serves mobile phone traffic, so the service must be compatible to talk to the backend over mobile data.\nYou have to provide an efficient approach to store millions of geographical locations for drivers/riders who are always on the move.\nWhat type of questions the interviewer can discuss while you answer this question:\nHow would you handle the most critical use case when a customer requests a ride, and you have to match them with the nearby drivers?\nHow would you store the millions of geographical locations for drivers and riders who are always moving?\nHow would you handle the driver/rider locations periodically where millions of updates required every second?\nHow would you map and set routes, and how will you calculate ETAs?\nHow would you efficiently match the user request with the nearby drivers?\nThe developer should use the following technologies:\nUse the best approach to handle millions of updates to driver locations.\nFor backend and dispatching, Node.js is most preferred to use.\nIt is best to write business logic services in Python.\nIt would be best if you use PostgreSQL, Redis, or MySQL for the database.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "14) What do you understand by Search Typeahead, and how can you design it?",
        "answer": "Search Typeahead is a service that facilitates users to type some queries, and according to the query, it suggests top searched items starting with whatever the user has typed.\nWhat type of questions the interviewer can discuss while you answer this question:\nWhat approach will you use to store previous search queries?\nWhat would be the real-time requirement of the system?\nWhat approach will you use to keep the data fresh?\nWhat approach will you use to find the best matches to the already typed string?\nWhat would you do to handle the queries per second by the system?\nWhat criteria will you set for choosing the suggestions?\nHow would you store the total number of data queries?\nWhat approach would you use to find the best matches to the already typed string?",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "15) What do you understand by a Web Crawler, and how does it work?",
        "answer": "A Web Crawler is a computer program that automatically searches documents on the Web and crawls them easily. It is operated by search engines such as Google and Bing. Crawlers are programmed in a way that they can do repetitive actions and make the browsing automated. Every search engine uses crawlers most frequently to browse the InternetInternet and build an index. Crawlers are also called spiders or search engine bots.\nThe main purpose of crawlers is to index websites worldwide to make them available for every search engine result.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "16) How would you design a Web Crawler?",
        "answer": "The Web crawler is a search engine-related service used to index the content of websites over the Internet to make them available for every search engine result. In other words, we can say that it is a scalable service that collects information from the entire Web and fetches hundreds of millions of web documents to the users.\nWhat type of questions the interviewer can discuss while you answer this question:\nHow could you store previous search queries?\nWhat technique would you use to keep the data fresh?\nHow would you find the best matches to the already typed string?\nHow can you handle updates if the user is typing too fast?\nWhat approach would you use to find new web pages?\nWhat approach would you use to prioritize web pages that change dynamically?\nHow can you ensure that the crawler is not unbounded on the same domain?",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "17) How can you design an API Rate Limiter like Github?",
        "answer": "When the interviewer asks this question to the candidates, he/she wants you to design a service or tool that monitors the number of requests per window time a service agrees to allow. If the number of the request exceeds, the rate limiter blocks the entire excess request.\nYou should keep the following features in your mind while designing this service:\nYou have to limit the number of requests an entity can send to an API within the time window. For example, ten requests per second.\nThe rate-limiting should work for a distributed setup, as the APIs are available through a group of servers.\nYou have to handle soft and hard throttling very well.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "18) What is the role of a search engine? How would you design a search engine like Google, Bing, or Baidu?",
        "answer": "A search engine is a program or a software system designed to carry out web searches which mean to search the World Wide Web in a systematic way for particular information specified in a textual web search query. When we search for something on the search engines, the results are generally presented in a line of results. These search results are referred to as search engine results pages (SERP). A customized search engine can be used within an organization's specific department to locate an item or important employee information systematically. The interviewer asks this question to check if you can make such designs to fulfill the company's needs. You can detail some of the overall architecture and explain it using the foundation below. You can also consider discussing any other relevant issues such as website front-end performance, testing search engine improvements, and integrating previous search data and trends in indexing.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "19) How can you design an ATM system?",
        "answer": "In banking systems, an ATM is used to deposit and withdraw money from their customers. It also facilitates users to see their account balance. It would be best if you made a design plan to create this system.\nYou should keep the following features in your mind while designing this service:\nEach user has at least one bank account at the bank.\nThe user should be able to insert a card and perform transactions.\nATM should authenticate the user based on the PIN entered.\nOnce authenticated user should be able to transactions, namely view account balance, deposit cash, and withdraw cash.\nUsers can only perform one transaction at any given time.\nAt the end of a transaction, appropriate messages should be displayed to the user to communicate the success/failure of the transaction.\nAt the end of a transaction, the user should be able to start another transaction.\nThe machine should return the card when the user exits.\nArchitecture of ATM\nFollowing is the list of possible states in the ATM:\nREADY: This is the first state which is ready to accept ATM cards.\nENTER PIN: This state waits for the user to enter the PIN once they have inserted the card.\nSELECT TRANSACTION: This state waits for the user to select a transaction.\nDEPOSIT: This state waits for the user to insert cash once they have selected the deposit cash option.\nWITHDRAW: This state waits for the user to input the required amount once they have selected the withdraw cash option.\nDISPLAY BALANCE: This state displays the account balance once the transaction is over and waits for the user to decide the next transaction or exit.\nCASH DISPENSED: This state is used to dispense cash once the transaction is over and wait for the user to collect it.\nERROR MESSAGE DISPLAYED: This state is used to display an error message if the ATM has insufficient cash or the user's account has insufficient balance and wait for the user to decide the next transaction or exit.\nINVALID CASH RETURNED: This state is used to return invalid currency, if any found once the transaction is over, and wait for the user to collect it.\nEXIT MESSAGE DISPLAYED: This state is used to display exit messages once they exit and return the card.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "Architecture of ATM",
        "answer": "Following is the list of possible states in the ATM:\nREADY: This is the first state which is ready to accept ATM cards.\nENTER PIN: This state waits for the user to enter the PIN once they have inserted the card.\nSELECT TRANSACTION: This state waits for the user to select a transaction.\nDEPOSIT: This state waits for the user to insert cash once they have selected the deposit cash option.\nWITHDRAW: This state waits for the user to input the required amount once they have selected the withdraw cash option.\nDISPLAY BALANCE: This state displays the account balance once the transaction is over and waits for the user to decide the next transaction or exit.\nCASH DISPENSED: This state is used to dispense cash once the transaction is over and wait for the user to collect it.\nERROR MESSAGE DISPLAYED: This state is used to display an error message if the ATM has insufficient cash or the user's account has insufficient balance and wait for the user to decide the next transaction or exit.\nINVALID CASH RETURNED: This state is used to return invalid currency, if any found once the transaction is over, and wait for the user to collect it.\nEXIT MESSAGE DISPLAYED: This state is used to display exit messages once they exit and return the card.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "20) What are the different types of documentation in System Design?",
        "answer": "There are mainly four types of documentation used in System Design:\nProgram documentation\nSystem documentation\nOperations documentation\nUser documentation",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "21) What should we keep in mind while preparing documentation?",
        "answer": "We should keep in mind that we have to prepare documentation at every system design stage.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "22) Where is problem analysis done in the system design process?",
        "answer": "In System design, problem analysis is done at the systems analysis phase.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "23) Can the size of the organization be a factor in the failure of the system?",
        "answer": "No, the organization's size cannot be considered a factor for system development and designing projects.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "24) What do you understand by the term controller?",
        "answer": "A controller is a program component used to make decisions. It is also used to direct other components.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "25) What is an algorithm? What is the usage of the algorithm?",
        "answer": "An algorithm is a finite sequence of well-defined, computer-implementable instructions used to solve a class of problems or perform computation. It is generally used in Mathematics and Computer Science.\nAn algorithm should always be unambiguous and is used as specifications for performing calculations, data processing, automated reasoning, and other tasks.\nFeatures of an algorithm\nAn algorithm is a very effective method to solve complicated computational problems.\nAn algorithm can be expressed within a finite amount of space and time.\nAn algorithm should be in a well-defined formal language for calculating a function.\nAn algorithm starts with an initial state, and after some instructions to describe a computation, it proceeds through a finite number of well-defined successive states, eventually producing output.\nThe output is the last and is terminated at a final ending state.\nIn an algorithm, the transition from one state to the next is not necessarily deterministic; some algorithms, known as randomized algorithms, incorporate random input.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "26) What is the top-down approach in system analysis and design?",
        "answer": "The top-down approach is a strategy of information processing and knowledge ordering, used in various fields such as software, humanistic and scientific theories, and management. It is also used in companies and organizations. It is also known as stepwise design and stepwise refinement.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "27) What we have to do in a top-down approach?",
        "answer": "In the top-down approach, we have to identify a top-level function and then create a hierarchy of lower-level modules and components.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "28) What do you understand by the System Study?",
        "answer": "System Study is a detailed study process used to determine whether, to what extent, and how we should use the automatic data-processing equipment. This process includes an analysis of the existing system and the design of the new system, along with the development of system specifications that provide a basis for selecting equipment.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "29) What are the important aspects of the System Study?",
        "answer": "System study is the main requirement to design any system. Following is the list of most important aspects of System Study:\nFirst, we have to identify the current issues and then establish new goals.\nDetail study of the existing system.\nDocumentation of the existing system.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "30) What is the autocomplete functionality, and how can you design this?",
        "answer": "Autocomplete is a feature used to predict the upcoming words or rest of a word a user is typing. The autocomplete feature is used to speed up human-computer interactions. It correctly predicts the word a user intends to enter after only a few characters have been typed into a text input field. It is also called the word completion feature.\nWe should keep the following features in our mind while designing the autocomplete functionality:\nEnsure that the typeahead suggestion is on.\nThe system should handle the queries per second.\nWe have to provide support personalization with the suggestions.\nEnsure that the amount of data is stored.",
        "reference": "javatpoint.com",
        "role": "system-design"
    },
    {
        "question": "31) What are the most important structure tools used in system analysis and design?",
        "answer": "Following are the most important structure tools used in system analysis and design:\nData Flow Diagrams\nData Dictionary\nDecision Trees\nStructure English\nPseudocode",
        "reference": "javatpoint.com",
        "role": "system-design"
    }
]