[
    {
        "question": "1. Difference between procedural and object-oriented programming",
        "answer": "In procedural programming, we need to work with functions and data separately, as functions manipulate data that is stored in variables or data structures, whereas in an object-oriented programming language, the code is treated as entities and objects.",
        "reference": "intellipaat.com",
        "role": "accenture"
    },
    {
        "question": "2. What is the importance of self-keywords in Python?",
        "answer": "The ‘self’ keyword is used as the first parameter while defining the instance methods of a class. In other words, we can say it represents the instance of the class itself. Although the name self is a convention, we can technically use any name as the first parameter, but using self is considered standard and is used in Python.",
        "reference": "intellipaat.com",
        "role": "accenture"
    },
    {
        "question": "3. What is the difference between static and non-static keywords?",
        "answer": "In static, you do not need an instance to use a static method. It is independent of any specific object but related to the entire class. It is stored in a single memory location and can be modified by any instance of the class. A non-static method is an instance method that is not independent but belongs to each object that is generated from the class.",
        "reference": "intellipaat.com",
        "role": "accenture"
    },
    {
        "question": "4. Why is Python known as a high-level language?",
        "answer": "Python is a high-level language because it is an easy and user-friendly way to write and read code. It doesn’t have that much critical syntax. It hides complexity, making programming more accessible and less focused on low-level operations.",
        "reference": "intellipaat.com",
        "role": "accenture"
    },
    {
        "question": "5. Define the adapter class.",
        "answer": "An adapter class is defined as a class that helps two incompatible classes combine by providing a single interface. It acts as a mediator, which allows objects with different interfaces to communicate.",
        "reference": "intellipaat.com",
        "role": "accenture"
    },
    {
        "question": "6. What is run-time polymorphism?",
        "answer": "Run-time polymorphism helps us to allow different objects to be treated as objects of a common super-class while executing different implementations of a method based on the actual type of the object at runtime. It also allows us to use the same method with different signature names.",
        "reference": "intellipaat.com",
        "role": "accenture"
    },
    {
        "question": "7. What is the difference between Python and Java?",
        "answer": "Java and Python are both programming languages, but they are different from each other. In Python, we can simply use “print” to print something, whereas in Java, we use System.out.println.",
        "reference": "intellipaat.com",
        "role": "accenture"
    }
]