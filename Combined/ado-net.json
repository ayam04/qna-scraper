[
    {
        "question": "1. What is ADO.NET?",
        "answer": "ADO.NET, which stands for ActiveX Data Object, is a component of Microsoft’s.NET Framework. The.NET Framework’s ADO.NET data access technology offers a set of classes and components to interface consistently and effectively with data sources like databases.\nData access, data processing, and communication can all be handled separately via ADO.NET. Data can be saved in a data set using the newly proposed unconnected architecture. The database connection, command execution, and result retrieval providers in ADO.NET are all available.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "2. What are the main components of ADO.NET?",
        "answer": "Data providers, connection objects, command objects, data readers, data sets, data tables, data adapters, and data binding make up the bulk of ADO.NET.\nData Providers: In ADO.NET, data providers are parts that allow an application to communicate with a particular data source, like a database.\nConnection Object: In ADO.NET, a connection object symbolizes a connection to a database or other data source. The functionality required to set up and maintain the connection between the application and the data source is provided. Command Objects: In ADO.NET, a command object represents a query or a stored procedure that is executed against a data source.\nData readers: An ADO.NET command object represents a stored procedure or query that is run against a data source.\nDataSet: In ADO.NET, a data representation known as a dataset is an in-memory container for numerous tables, relationships, and constraints.\nData tables: An individual table of data within a data set is represented by a data table in ADO.NET. It is an in-memory illustration of tabular data, much like a database table.\nData Adapters: A DataAdapter in ADO.NET acts as a link between a DataSet and a data source, such as a database.\nData binding: In ADO.NET, data binding refers to the act of fusing information from a user interface (UI) control, such as a grid, list, or text box, to data from a data source, such as a data table or data set.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "3. What is the role of a data provider in ADO.NET?",
        "answer": "A data provider serves as an intermediary between an application and a data source. For connecting to and dealing with a specific kind of database, like SQL Server or Oracle, it offers particular capabilities.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "4. What is a connection object in ADO.NET?",
        "answer": "A connection to a data source is represented by a connection object. It is in charge of setting up and overseeing the database and application connections.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "5. How do you execute a SQL query using ADO.NET?",
        "answer": "You would use a command object (like SqlCommand) and specify the SQL query or stored procedure to be run in order to execute a SQL query. The ExecuteNonQuery, ExecuteScalar, or ExecuteReader methods are then used to carry out the command object.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "6. What is data binding in ADO.NET?",
        "answer": "Data binding is a technique for connecting UI controls and data from a data source, such as a database. By automatically synchronizing the data between the controls and the underlying data source, it makes it simpler to display and manipulate data in user interfaces.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "7. How does ADO.NET support disconnected data access?",
        "answer": "Through the use of data sets and tables, ADO.NET provides disconnected data access. A dataset, which can be updated and modified without needing to maintain a connection to the database, can be created by retrieving data from the database and storing it there.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "8. How do you handle exceptions in ADO.NET?",
        "answer": "Try-catch blocks can be used to handle exceptions in ADO.NET. The most frequent exceptions in ADO.NET are those relating to connections, command execution, and data readers.\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "9. What is the purpose of a data adapter in ADO.NET?",
        "answer": "As a link between a dataset and a data source, a data adapter serves this purpose. It makes it easier for data to be transferred between the dataset and the database, making it possible to do actions like updating changes made to the dataset back to the database and adding data from the database to the dataset.\nPrepare for your .NET Interview with our .NET Interview Questions.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "10. What is the SQLCommand object used for?",
        "answer": "The SqlCommand object is used to run stored procedures or SQL commands against databases. For various query types, it offers methods like ExecuteNonQuery, ExecuteScalar, and ExecuteReader.\n\n Intermediate Level ADO.NET Interview Questions",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "11. How can you retrieve a single value from a database using ADO.NET?",
        "answer": "A single value from a database can be obtained by using the ExecuteScalar method of the SqlCommand object. The first column of the result set’s first row is returned by this method.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "12. What is the purpose of the SqlDataAdapter class in ADO.NET?",
        "answer": "The SqlDataAdapter class is used to update changes made to the dataset back to the database as well as populate a dataset with data from a data source. Between the dataset and the database, it serves as a link.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "13. How do you handle transactions in ADO.NET?",
        "answer": "With the help of the Transaction object that ADO.NET offers, you may carry out several database actions in a single transaction. You may guarantee that linked database activities succeed or fail simultaneously by encapsulating them in a transaction.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "14. What is the difference between SQLCommand.ExecuteReader and SqlCommand.ExecuteScalar?",
        "answer": "The ExecuteReader method is used to retrieve a forward-only and read-only data stream, usually for retrieving numerous rows of data. The ExecuteScalar method, on the other hand, is used to get a single value, like an aggregate result or a computed value.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "15. How can you pass parameters to a SQL query in ADO.NET?",
        "answer": "The SQLCommand object supports parameterized queries. The Parameters collection can be used to add parameters to commands, giving users a mechanism to pass values to queries while preventing SQL injection attacks.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "16. Explain the purpose of the DataAdapter.Fill method.",
        "answer": "A dataset can be filled with data from a data source using the DataAdapter.Fill function. It gets information from the database and populates the necessary tables in the dataset.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "17. How can you update changes made in a dataset back to the database?",
        "answer": "It is possible to update changes made to a dataset back to the database using the DataAdapter’s Update method. INSERT, UPDATE, and DELETE SQL queries are automatically generated based on changes to the dataset.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "18. What is the role of the DataReader in ADO.NET?",
        "answer": "A database’s data can be quickly and read-only accessed using the DataReader. As it minimizes memory utilization and offers effective data retrieval, it is particularly helpful when working with huge result sets.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "19. How can you handle concurrency issues in ADO.NET?",
        "answer": "ADO.NET has optimistic concurrency control, which compares the data’s initial values with the current values when an update is made. An exception is raised if a conflict is found and the application can handle it properly.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "20. What is the purpose of the SQLCommandBuilder class?",
        "answer": "Based on the modifications made to a dataset, the SqlCommandBuilder class is used to produce SQL commands (INSERT, UPDATE, DELETE) for a Data adapter automatically. The method of returning updated dataset modifications to the database has been simplified.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "21. Can you use ADO.NET to work with non-relational databases or other data sources?",
        "answer": "No, ADO.NET is primarily designed for working with relational databases, such as SQL Server, MySQL, and Oracle. It utilizes data providers specific to these databases, making it unsuitable for non-relational databases like MongoDB or data sources that don’t follow the relational model. To work with non-relational databases, one would need to use other technologies or frameworks that support their respective data models, like MongoDB’s .NET driver or APIs for other NoSQL databases.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "22. What is object pooling?",
        "answer": "In order to reuse objects later without having to create them, object pooling stores them in memory. By using object pooling, the burden of constructing objects as needed is reduced.\nThe object pool manager processes requests for objects whenever they are needed and provides services in accordance with those requests. It is created to make the best use possible of scarce resources in order to satisfy client requests.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "23. What is Connection pooling?",
        "answer": "Making them accessible anytime a connection is needed is the purpose of grouping database connections in the cache memory. It takes time to constantly establish new connections to databases.\nApplication speed is improved by connection pooling because it enables you to reuse active and already established database connections whenever necessary.\nApplication connection pooling can be enabled or disabled by changing the pooling property to true or false in the connection string. In every application, it is by default enabled.\n\nAdvanced Level ADO.NET Interview Questions",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "24. Name some of the properties and methods provided by the DataReader in ADO.NET.",
        "answer": "Some of the properties provided by the dataReader are as follows:\nDepth: It represents the depth of nesting in a row.\nFieldCount: It gives the total column count in a row.\nItem: It obtains the column value in a native format.\nRecordsAffected: It gives the number of transaction-affected rows.\nIsClosed: It represents whether a data reader is closed.\nVisibleFieldCount: It is used to obtain the number of unhidden fields in the SQLDataReader. Some of the methods provided by the DataReader are as follows:\nRead(): This method reads a record from the SQL Server database.\nClose(): It closes a SQLDataReader object.\nNextResult(): It moves the data reader to the next result during batch transactions.\nGetxxx(): Various types of Getxxx() methods, such as GetBoolean(Int32), GetChar(Int32), GetFloat(Int32), GetDouble(Int32), etc., are provided by the DataReader. These methods will read a value of a particular data type from a column. For example, GetFloat() will return a column value as a Float and GetChar as a character.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "25. What are the conditions for connection pooling?",
        "answer": "The prerequisites for connection pooling are that there must be multiple processes that share the same security settings and parameter values. The connection string needs to match exactly.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "26. Why is the Stored Procedure used in ADO.NET?",
        "answer": "Stored procedures are used in ADO.NET for several reasons. They enhance database performance by reducing network traffic and improving execution speed.\nThey provide a secure way to interact with the database, as access permissions can be granted only to the procedures, not the underlying tables. Additionally, stored procedures promote code reusability, simplifying application maintenance and updates.\nMoreover, they help in separating business logic from database logic, ensuring a more organized and maintainable architecture in ADO.NET applications.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "27. Explain the ADO.NET Architecture.",
        "answer": "ADO.NET is based on an Object Model where data residing in the database is accessed using a data provider. It is a technology of data access given by the Microso.Net Framework, which helps to communicate between relational and non-relational systems using a common group of components. The components of the ADO.NET architecture are: \nData Provider: It offers data to all apps that update databases. The DataSet or DataReader object can be used by the application to access data. A set of objects called Command, Connection, DataReader, and DataAdapter make up a data provider. Regardless of operations like Insert, delete, Select, and Update, Command and Connection objects are essential parts.\nConnection: To connect to a database like SQL Server, MySQL, Oracle, etc., you need a connection object. You need to be aware of the location of the database (such as its IP address or machine name) as well as the security credentials (such as Windows authentication or user name and password-based authentication).\nCommand: The component where you will write the SQL queries is the command object. Execute the queries over the connection after that by utilizing the command object. You may retrieve the data or submit the data to the database by utilizing the command object and SQL queries.\nDataReader: A DataReader is a connected read-only RecordSet that is helpful in reading the records in forward-only mode.\nDataAdapter: Between the dataset and command object, the DataAdapter serves as a conduit. The data is obtained from the command object and added to the data collection.\nDataSet: The DataSet is an unconnected RecordSet that may be browsed forward and backward. Also, using the dataset, we may update the data. The use of a data adapter fills the data set.\nDataView Class: We can construct several views of data from a DataTable using a DataView, which is useful for data-binding applications. Using this, you may filter the data based on a filter expression, the row state, etc., or display the table with alternative sorting.\nXML: The representation of a dataset in XML is possible. The database structure and data are both represented in XML structure Definition (XSD) language in the dataset’s XML representation.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "28. Briefly explain the connected and disconnected architecture of ADO.NET.",
        "answer": "Connected Architecture: In a connected architecture, the connection needs to be kept active in order to access the database-retrieved data. The Connection, DataReader, Command, and Transaction classes provide the foundation of connected architecture.For any CRUD (Create, Read, Update, and Delete) activity you need to perform, you frequently visit the database. The database will experience heavy traffic, but since you are only making short transactions, this normally happens faster.Since DataReader keeps the connection open while retrieving each row individually, it can be said to have a connected architecture.\nDisconnected Architecture: In a disconnected architecture, data retrieved from the database can still be accessed even if the database connection is closed. Connection, CommandBuilder, DataAdapter, DataSet, and DataView are the classes on which the disconnected architecture is based.\nHere, we extract a recordset from the database and store it so that you may do a variety of CRUD (Create, Read, Update, and Delete) actions on the data while it is still in memory; the data will be re-synchronized once you reconnect to the database. \nDue to the fact that all records are brought at once and maintaining the database connection is unnecessary, DataSet is a Disconnected Architecture.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "29. Explain the role of a data reader in ADO.NET. How is it different from a data set?",
        "answer": "A data source’s rapid, forward-only, read-only stream of data is provided by a data reader. When it is necessary to quickly obtain vast amounts of data and analyze it sequentially, it is utilized.\nA data reader, as opposed to a data set, is a small, connected object that calls for an active connection to the data source during data retrieval. Although it lacks the capacity to alter data, it improves performance by reducing memory utilization and network round trips.\nA data set, on the other hand, is an in-memory data cache that may store numerous tables, relationships, and constraints. Once data has been loaded, it is possible to disconnect from the data source, enabling offline data processing such as filtering, sorting, and updating. It is appropriate for situations in which data must be accessed and modified locally.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "30. Discuss the security considerations in ADO.NET.",
        "answer": "The confidentiality, integrity, and availability of data must all be guaranteed by ADO.NET security  concerns. Here are some important things to remember: \nParameterized Queries: To defend against SQL injection attacks, always utilize parameterized  queries or stored procedures. The chance of harmful SQL statements being executed is reduced by  parameterized queries, which segregate the SQL code from the user input. \nInput Validation: Validate and clean up user input to guard against any security flaws. To ensure  that only expected and correct data is processed, perform input validation on both the client side and the server side. \nAuthentication and Authorization: Implement reliable authentication methods to confirm the  users’ identities when they access the data source. To safeguard important user credentials,  employ strong passwords, password hashing, and encryption methods. In addition, make sure  users have the necessary levels of access to the data by enforcing adequate authorization  requirements. \nSecure Connection: Use secure connection protocols such as SSL/TLS to encrypt  communication between the application and the database server. This prevents eavesdropping and  data tampering during transmission. \nLeast Privilege Principle: Use the least privilege principle when configuring database access.  Make sure that the database accounts used by the application only have the permissions necessary  for them to carry out their duties. When possible, refrain from using elevated privileges. \nSecure Configuration: Make sure configuration files are secure when storing sensitive data, such  as database connection strings. Restrict access to certain files and encrypt or store them in secure  locations.\nAuditing and Logging: Implement auditing and logging tools to keep track of and document data  access-related actions. This assists in spotting any unauthorized or questionable activity and  creates a paper trail for forensic investigation, if necessary. \nSecure Coding Practices: To reduce the chance of vulnerabilities, use secure coding techniques.  This entails doing routine ADO.NET framework updates and patches, adhering to security best practices, adopting secure coding patterns, and not hard-coding sensitive information or credentials. \nRegular Security Updates: Follow the ADO.NET framework’s and the underlying database technology’s updates for the most recent security patches. By doing this, you can ensure that the application is secure and assist address any found security flaws. \nRegular Security Testing: Conduct routine security testing, such as penetration testing, and vulnerability assessments, to find and fix any security flaws or gaps in the application and database layer. \nBy incorporating these security considerations into your ADO.NET applications, you can help protect  the data from unauthorized access, maintain data integrity, and safeguard the overall system against  potential security threats.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "31. What distinguishes the ExecuteNonQuery(), ExecuteScalar(), and ExecuteReader() methods of SqlCommand?",
        "answer": "The SqlCommand class in ADO.NET provides three commonly used methods for executing SQL  commands: ExecuteNonQuery(), ExecuteScalar(), and ExecuteReader(). Here’s how they differ:\nExecuteNonQuery():This method is typically used for executing SQL statements that do not  return any data, such as INSERT, UPDATE, DELETE, or DDL (Data Definition Language)  statements. It returns the number of rows affected by the executed command. \nExecuteNonQuery(): This method does not return any result sets or data. It is useful when you  need to perform database modifications or execute commands that don’t require a result set.\nExample usage: SqlCommand command = new SqlCommand(“UPDATE Employees SET  Salary = Salary + 500 WHERE Department = ‘Sales'”, connection); int rowsAffected = command.ExecuteNonQuery();\nExecuteScalar(): This method is used when you expect a single value to be returned from the  database, such as a single aggregate result or a single column value from a SELECT statement. It  returns the first column of the first row from the result set as an object. You need to cast it to the  appropriate type. \nExecuteScalar(): This method is commonly used when you need to retrieve a single value  efficiently without the need for a full result set.\nExample usage: SqlCommand command = new SqlCommand(“SELECT COUNT(*) FROM  Customers”, connection); int customerCount = (int)command.ExecuteScalar();\nExecuteReader(): This method is used for executing SQL queries that return a result set. It  returns a SqlDataReader object that provides a forward-only, read-only stream of rows from the  result set. ExecuteReader() is typically used when you need to retrieve and process multiple rows  of data sequentially.\nExample usage:\nSqlCommand command = new SqlCommand(\"SELECT * FROM Products\", connection); SqlDataReader reader = command.ExecuteReader();  while (reader.Read())  {   // Process each row of the result set   string productName = reader[\"ProductName\"].ToString();  decimal unitPrice = (decimal)reader[\"UnitPrice\"];   // ... } \nreader.Close(): In conclusion, ExecuteReader() is used to retrieve and analyze many rows of data  sequentially, while ExecuteNonQuery() is used to execute non-query commands. ExecuteScalar()  is used to retrieve a single value. The right technique to employ relies on the particular SQL  command being used and the intended result of the execution.\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "32. What different kinds of authentication methods are there for connecting to MS SQL Server? SQL Server will authenticate before starting any database operation.",
        "answer": "Two different kinds of authentication methods are:\nWindows Authentication:Only Windows domain accounts can use this default authentication. Since this SQL Server security paradigm tightly integrates with Windows, it is also known as integrated security. The ability to log into SQL Server is limited to specific Windows users and group accounts.\nWindows users who have already been authenticated or logged in do not need to submit additional credentials. SqlConnection, which is provided below. Without the user having to provide a username or password, ConnectionString defines Windows authentication.\nSQL Server and Windows Authentication Mode(Mixed-mode):The combination of Windows  and SQL Server Authentication will be used to give authentication.\nWithin SQL Server, a username and password pair will be kept. You need to construct SQL Server logins that are saved in  SQL Server in order to use this mixed-mode authentication.\nAfter that, you can give SQL Server  the user name and password during runtime. The ConnectionString specified below designates  Mixed mode authentication:",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "33. What does the term LINQ mean?",
        "answer": "LINQ (Language Integrated Query) is a structured query syntax that enables programmers and testers to access data from a variety of data sources, including collections, xml documents, ado.net datasets, web services, MS SQL Server, and others.\nIt integrates with C# or VB.NET and gets rid of the incompatibility between various programming languages and databases. For diverse data source types, it offers a solitary querying interface. LINQ query execution will result in an object being returned. You will be able to apply an object-oriented approach on the result set and won’t have to bother about converting various result formats into objects.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "34. What is the best way to tell if the DataSet object has changed since it was last loaded?",
        "answer": "There are two ways to find the changes using the DataSet object: \nGetChanges(): The DataSet object that has changed after it was loaded or since the  AcceptChanges() method was called is returned. \nHasChanges(): If any changes have been made since the DataSet object was loaded or after a  method call to the AcceptChanges() was made, it will be indicated. Use the RejectChanges() method, if you want to reverse the entire changes from the time the  DataSet object was loaded.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "35. What are the best methods for enhancing the speed of ADO.NET data access?",
        "answer": "Optimizing ADO.NET data access performance is crucial for efficient and responsive application performance. Here are some best practices to consider: \nUse Connection Pooling: Enable connection pooling in your ADO.NET application. Connection pooling allows you to reuse database connections, reducing the overhead of establishing and tearing down connections for each request.\nBy default, connection pooling is enabled in  ADO.NET, but it’s important to ensure that you close and dispose of connections properly to release them back to the pool.\nMinimize Round Trips: Minimize the number of round trips to the database by batching multiple operations into a single request. For example, if you need to perform multiple INSERT or UPDATE  statements, consider using a transaction or a bulk insert operation to minimize the number of database round trips. \nUse Parameterized Queries: Always use parameterized queries or stored procedures to prevent  SQL injection attacks and improve performance. Parameterized queries allow database engines to optimize query execution plans and reuse query plans for similar queries, resulting in better performance. \nUse Stored Procedures: Utilize stored procedures for complex or frequently executed queries. Stored procedures are pre-compiled and can offer performance benefits over dynamically  generated SQL statements. They can also provide an added layer of security by separating the SQL code from the application logic.\nUse Proper Indexing: Ensure that the database tables are properly indexed based on the query patterns and usage patterns of your application. Proper indexing can significantly improve query performance by allowing the database engine to efficiently locate and retrieve the required data. \nUse DataReader Instead of DataSet: When reading large result sets, consider using a  DataReader instead of a DataSet. The DataReader provides a forward-only, read-only stream of data, reducing memory consumption and improving performance for scenarios where you only need to read data sequentially. \nMinimize Data Transfer: Only retrieve the necessary data from the database. Avoid selecting unnecessary columns or loading excessive rows of data. Retrieve and manipulate only the data required by your application to minimize network bandwidth usage and processing overhead. \nProperly Dispose Objects: Ensure that you properly dispose of ADO.NET objects like  SqlConnection, SqlCommand, SqlDataReader, and DataAdapter. Proper disposal helps release system resources promptly, preventing memory leaks and improving overall performance. \nEnable Asynchronous Operations: Take advantage of asynchronous operations available in  ADO.NET to improve scalability and responsiveness. Asynchronous methods allow your  application to perform other tasks while waiting for database operations to complete, avoiding  blocking and utilizing system resources more efficiently.\nMonitor and Analyze Performance: Monitor and analyze the performance of your ADO.NET data access operations using performance profiling and monitoring tools. Identify and address any bottlenecks or performance issues, such as long-running queries or database design problems. \nBy implementing these best practices, you can optimize the performance of your ADO.NET data access operations, enhance application responsiveness, and improve overall scalability. It’s important to consider the specific requirements and characteristics of your application and database to determine the most effective optimizations.",
        "reference": "intellipaat.com",
        "role": "ado-net"
    },
    {
        "question": "1. What is ADO.NET?",
        "answer": "ADO.NET stands for ActiveX Data Object, it is a part of the .NET Framework by Microsoft. ADO.NET framework provides a set of classes that are used to handle data communication with data sources such as XML files and databases (such as SQL, Oracle, MySQL, MS Access, etc.).\nADO.NET can separate mechanisms for data connectivity, data access, and data manipulation.\nIt has introduced the disconnected architecture, in which data can be stored in a DataSet. ADO.NET has providers for database connection, commands for execution, and result retrieval.\nThe ADO.NET classes are stored in the DLL named System.Data.dll.\nVarious applications like ASP.NET applications, console applications, windows applications, etc., will use ADO.NET for database connection, command execution, and retrieval of data. ADO.NET stands for ActiveX Data Object, it is a part of the .NET Framework by Microsoft. ADO.NET framework provides a set of classes that are used to handle data communication with data sources such as XML files and databases (such as SQL, Oracle, MySQL, MS Access, etc.). ADO.NET can separate mechanisms for data connectivity, data access, and data manipulation. It has introduced the disconnected architecture, in which data can be stored in a DataSet. ADO.NET has providers for database connection, commands for execution, and result retrieval. The ADO.NET classes are stored in the DLL named System.Data.dll. System.Data.dll Various applications like ASP.NET applications, console applications, windows applications, etc., will use ADO.NET for database connection, command execution, and retrieval of data.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "2. What is DataSet in ADO.NET?",
        "answer": "The DataSet is a collection of database tables(row and column format) that contain the data. It is helpful for fetching the data without any need for Data Source interaction, that is why it is called a disconnected data access method.\nIt is an in-memory data store that can contain multiple tables at the same time. DataRelation objects can be used to relate these tables.\nFor creating a DataSet object, ADO.NET provides a DataSet class that consists of constructors and methods to carry out data-related operations.\nIt can be used with various data sources, with XML data, or to manage the application’s local data. The DataSet will include related tables, data constraints, and relationships among the tables. The DataSet is a collection of database tables(row and column format) that contain the data. It is helpful for fetching the data without any need for Data Source interaction, that is why it is called a disconnected data access method. It is an in-memory data store that can contain multiple tables at the same time. DataRelation objects can be used to relate these tables. For creating a DataSet object, ADO.NET provides a DataSet class that consists of constructors and methods to carry out data-related operations. It can be used with various data sources, with XML data, or to manage the application’s local data. The DataSet will include related tables, data constraints, and relationships among the tables.  ",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "3. Give the differences between ADO and ADO.NET.",
        "answer": "ADO ADO.NET\nIt is Component Object Modelling(COM) based. It is Common Language Runtime(CLR) based.\nIt works in connected mode to access the data store. It does require an active connection, works in disconnected mode to access the data store.\nIt uses the RecordSet object to access and store data from the data sources. It uses a DataSet object to access and store data from the data sources.\nIt provides a feature of locking. It does not provide a feature of locking.\nData is stored in binary form. Data is stored in XML.\nIt does not support XML integration. It supports XML integration.\nUsing a single connection instance, it is not possible to send multiple transactions. Using a single connection instance you can send multiple transactions.\nWe can create only client-side cursors. Both client-side and server-side cursors can be created.\nIt supports sequential row access in a RecordSet. Non-sequential data access is supported in DataSet by using a collection-based hierarchy.\nIt will make use of SQL JOINs and UNIONs for combining data from multiple tables. It is not possible to fetch records from multiple tables independently. It will make use of DataRelational objects to combine data from multiple tables without the help of JOINs and UNIONs. Therefore records from multiple tables are maintained independently. ADO ADO.NET\nIt is Component Object Modelling(COM) based. It is Common Language Runtime(CLR) based.\nIt works in connected mode to access the data store. It does require an active connection, works in disconnected mode to access the data store.\nIt uses the RecordSet object to access and store data from the data sources. It uses a DataSet object to access and store data from the data sources.\nIt provides a feature of locking. It does not provide a feature of locking.\nData is stored in binary form. Data is stored in XML.\nIt does not support XML integration. It supports XML integration.\nUsing a single connection instance, it is not possible to send multiple transactions. Using a single connection instance you can send multiple transactions.\nWe can create only client-side cursors. Both client-side and server-side cursors can be created.\nIt supports sequential row access in a RecordSet. Non-sequential data access is supported in DataSet by using a collection-based hierarchy.\nIt will make use of SQL JOINs and UNIONs for combining data from multiple tables. It is not possible to fetch records from multiple tables independently. It will make use of DataRelational objects to combine data from multiple tables without the help of JOINs and UNIONs. Therefore records from multiple tables are maintained independently. ADO ADO.NET ADO ADO.NET ADO ADO.NET It is Component Object Modelling(COM) based. It is Common Language Runtime(CLR) based.\nIt works in connected mode to access the data store. It does require an active connection, works in disconnected mode to access the data store.\nIt uses the RecordSet object to access and store data from the data sources. It uses a DataSet object to access and store data from the data sources.\nIt provides a feature of locking. It does not provide a feature of locking.\nData is stored in binary form. Data is stored in XML.\nIt does not support XML integration. It supports XML integration.\nUsing a single connection instance, it is not possible to send multiple transactions. Using a single connection instance you can send multiple transactions.\nWe can create only client-side cursors. Both client-side and server-side cursors can be created.\nIt supports sequential row access in a RecordSet. Non-sequential data access is supported in DataSet by using a collection-based hierarchy.\nIt will make use of SQL JOINs and UNIONs for combining data from multiple tables. It is not possible to fetch records from multiple tables independently. It will make use of DataRelational objects to combine data from multiple tables without the help of JOINs and UNIONs. Therefore records from multiple tables are maintained independently. It is Component Object Modelling(COM) based. It is Common Language Runtime(CLR) based. It is Component Object Modelling(COM) based. It is Common Language Runtime(CLR) based. It works in connected mode to access the data store. It does require an active connection, works in disconnected mode to access the data store. It works in connected mode to access the data store. It does require an active connection, works in disconnected mode to access the data store. It uses the RecordSet object to access and store data from the data sources. It uses a DataSet object to access and store data from the data sources. It uses the RecordSet object to access and store data from the data sources. It uses a DataSet object to access and store data from the data sources. It provides a feature of locking. It does not provide a feature of locking. It provides a feature of locking. It does not provide a feature of locking. Data is stored in binary form. Data is stored in XML. Data is stored in binary form. Data is stored in XML. It does not support XML integration. It supports XML integration. It does not support XML integration. It supports XML integration. Using a single connection instance, it is not possible to send multiple transactions. Using a single connection instance you can send multiple transactions. Using a single connection instance, it is not possible to send multiple transactions. Using a single connection instance you can send multiple transactions. We can create only client-side cursors. Both client-side and server-side cursors can be created. We can create only client-side cursors. Both client-side and server-side cursors can be created. It supports sequential row access in a RecordSet. Non-sequential data access is supported in DataSet by using a collection-based hierarchy. It supports sequential row access in a RecordSet. Non-sequential data access is supported in DataSet by using a collection-based hierarchy. It will make use of SQL JOINs and UNIONs for combining data from multiple tables. It is not possible to fetch records from multiple tables independently. It will make use of DataRelational objects to combine data from multiple tables without the help of JOINs and UNIONs. Therefore records from multiple tables are maintained independently. It will make use of SQL JOINs and UNIONs for combining data from multiple tables. It is not possible to fetch records from multiple tables independently. It will make use of DataRelational objects to combine data from multiple tables without the help of JOINs and UNIONs. Therefore records from multiple tables are maintained independently.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "4. What is a DataAdapter in ADO.NET?",
        "answer": "A DataAdapter is used to access data from a data source by functioning as a bridge between DataSet and a data source. DataAdapter class includes an SQL command set and a database connection. It is helpful to fill the DataSet and resolve changes to the data source.\nThe DataAdapter will make use of the Connection object that belongs to the .NET Framework data provider for connecting with a data source. Along with that, it will also use Command objects to retrieve data from the data source as well as to resolve changes to the data source.\nDataAdapter properties that permit the user to control the database are the Select command, Update command, Insert command, and Delete command.\nExample code for the usage of DataAdapter: A DataAdapter is used to access data from a data source by functioning as a bridge between DataSet and a data source. DataAdapter class includes an SQL command set and a database connection. It is helpful to fill the DataSet and resolve changes to the data source. The DataAdapter will make use of the Connection object that belongs to the .NET Framework data provider for connecting with a data source. Along with that, it will also use Command objects to retrieve data from the data source as well as to resolve changes to the data source. DataAdapter properties that permit the user to control the database are the Select command, Update command, Insert command, and Delete command. Example code for the usage of DataAdapter: using System;  \nusing System.Data.SqlClient;  \nusing System.Data;  \nnamespace DataAdapterExample  \n{  \n    public partial class DataAdapterDemo : System.Web.UI.Page  \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {  \n            using (SqlConnection conn = new SqlConnection(\"data source=.; database=items; integrated security=SSPI\"))  \n            {  \n                SqlDataAdapter da = new SqlDataAdapter(\"Select * from items\", conn);  \n                DataSet s = new DataSet();  \n                da.Fill(s);  \n                GridView1.DataSource = s;  \n                GridView1.DataBind();  \n            }  \n        }  \n    }  \n} using System;  \nusing System.Data.SqlClient;  \nusing System.Data;  \nnamespace DataAdapterExample  \n{  \n    public partial class DataAdapterDemo : System.Web.UI.Page  \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {  \n            using (SqlConnection conn = new SqlConnection(\"data source=.; database=items; integrated security=SSPI\"))  \n            {  \n                SqlDataAdapter da = new SqlDataAdapter(\"Select * from items\", conn);  \n                DataSet s = new DataSet();  \n                da.Fill(s);  \n                GridView1.DataSource = s;  \n                GridView1.DataBind();  \n            }  \n        }  \n    }  \n} Here, DataAdapter will receive the data from the items table and fill the DataSet, which will be later used to display the information retrieved from the items database.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "5. Explain the difference between ADO.NET and ASP.NET.",
        "answer": "ADO.NET(ActiveX Data Objects) ASP.NET(Active Server Pages)\nADO.NET is a Library within the .NET framework. ASP.NET is a Framework.\nIt is a technology useful for accessing data from databases. It is a technology useful for the creation of dynamic web pages.\nHere, data can be converted into XML format. Here, We can write our code into VB.Net, C#, ASP.Net, etc.\nIt is used to develop reliable and scalable database applications with high performance for client-server applications. It is used to create dynamic web pages, web applications, websites, and web services. ADO.NET(ActiveX Data Objects) ASP.NET(Active Server Pages)\nADO.NET is a Library within the .NET framework. ASP.NET is a Framework.\nIt is a technology useful for accessing data from databases. It is a technology useful for the creation of dynamic web pages.\nHere, data can be converted into XML format. Here, We can write our code into VB.Net, C#, ASP.Net, etc.\nIt is used to develop reliable and scalable database applications with high performance for client-server applications. It is used to create dynamic web pages, web applications, websites, and web services. ADO.NET(ActiveX Data Objects) ASP.NET(Active Server Pages) ADO.NET(ActiveX Data Objects) ASP.NET(Active Server Pages) ADO.NET(ActiveX Data Objects) ASP.NET(Active Server Pages) ADO.NET is a Library within the .NET framework. ASP.NET is a Framework.\nIt is a technology useful for accessing data from databases. It is a technology useful for the creation of dynamic web pages.\nHere, data can be converted into XML format. Here, We can write our code into VB.Net, C#, ASP.Net, etc.\nIt is used to develop reliable and scalable database applications with high performance for client-server applications. It is used to create dynamic web pages, web applications, websites, and web services. ADO.NET is a Library within the .NET framework. ASP.NET is a Framework. ADO.NET is a Library within the .NET framework. ASP.NET is a Framework. ASP.NET It is a technology useful for accessing data from databases. It is a technology useful for the creation of dynamic web pages. It is a technology useful for accessing data from databases. It is a technology useful for the creation of dynamic web pages. Here, data can be converted into XML format. Here, We can write our code into VB.Net, C#, ASP.Net, etc. Here, data can be converted into XML format. Here, We can write our code into VB.Net, C#, ASP.Net, etc. It is used to develop reliable and scalable database applications with high performance for client-server applications. It is used to create dynamic web pages, web applications, websites, and web services. It is used to develop reliable and scalable database applications with high performance for client-server applications. It is used to create dynamic web pages, web applications, websites, and web services.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "6. Explain about DataSet types in ADO.NET.",
        "answer": "DataSet can be said as a collection of database tables(row and column format) that holds the data. There are two types of DataSet in ADO.NET. They are: Typed DataSet: A typed DataSet is derived from the DataSet base class and can be created by selecting the DataSet option provided by Visual Studio. It will be created as an XML schema(.xsd file) that contains DataSet structure information such as rows, columns, and tables. Data from the database is moved into a dataset and from the dataset to another component in the XML format.\nUntyped DataSet: Untyped DataSet does not have an associated XML schema with it. Users are supposed to add columns, tables, and other elements to it. Properties can be set during design time or can add them during run time. Typed DataSet: A typed DataSet is derived from the DataSet base class and can be created by selecting the DataSet option provided by Visual Studio. It will be created as an XML schema(.xsd file) that contains DataSet structure information such as rows, columns, and tables. Data from the database is moved into a dataset and from the dataset to another component in the XML format. Typed DataSet: Untyped DataSet: Untyped DataSet does not have an associated XML schema with it. Users are supposed to add columns, tables, and other elements to it. Properties can be set during design time or can add them during run time. Untyped DataSet: Example program for the usage of DataSet: using System;  \nusing System.Data.SqlClient;  \nusing System.Data;  \nnamespace DataSetDemo  \n{  \n    public partial class DataSetExample : System.Web.UI.Page  \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {  \n            using (SqlConnection conn = new SqlConnection(\"data source=.; database=employee; integrated security=SSPI\"))  \n            {  \n                SqlDataAdapter da = new SqlDataAdapter(\"Select * from employee\", conn);  \n                DataSet d = new DataSet();  \n                da.Fill(d);  \n                GridView1.DataSource = d;  \n                GridView1.DataBind();  \n            }  \n        }  \n    }  \n} using System;  \nusing System.Data.SqlClient;  \nusing System.Data;  \nnamespace DataSetDemo  \n{  \n    public partial class DataSetExample : System.Web.UI.Page  \n    {  \n        protected void Page_Load(object sender, EventArgs e)  \n        {  \n            using (SqlConnection conn = new SqlConnection(\"data source=.; database=employee; integrated security=SSPI\"))  \n            {  \n                SqlDataAdapter da = new SqlDataAdapter(\"Select * from employee\", conn);  \n                DataSet d = new DataSet();  \n                da.Fill(d);  \n                GridView1.DataSource = d;  \n                GridView1.DataBind();  \n            }  \n        }  \n    }  \n} Here, DataSet will be filled by DataAdapter that receives data from the employee table. This DataSet will be used to display the information received from the employee database.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "7. Explain the difference between DataTable and DataSet.",
        "answer": "DataTable DataSet\nDataTable consists of a single database table that is placed within a memory. DataSet consists of a collection of multiple database tables which is placed within a memory.\nIt has a row and column collection. It has a database table collection.\nIt allows fetching only a single TableRow at a time. It allows fetching multiple TableRows at a time.\nIt is a single database table, so there will not be any relation with other tables. It represents a collection of DataTable objects, so there might be a relation between them to obtain a particular result.\nIn this, DataSource objects are not serialized. In this, DataSource objects are serialized.\nUniqueConstraint and ForeignKeyConstraint objects are not available enforcing data integrity. UniqueConstraint and ForeignKeyConstraint objects are available for enforcing data integrity. DataTable DataSet\nDataTable consists of a single database table that is placed within a memory. DataSet consists of a collection of multiple database tables which is placed within a memory.\nIt has a row and column collection. It has a database table collection.\nIt allows fetching only a single TableRow at a time. It allows fetching multiple TableRows at a time.\nIt is a single database table, so there will not be any relation with other tables. It represents a collection of DataTable objects, so there might be a relation between them to obtain a particular result.\nIn this, DataSource objects are not serialized. In this, DataSource objects are serialized.\nUniqueConstraint and ForeignKeyConstraint objects are not available enforcing data integrity. UniqueConstraint and ForeignKeyConstraint objects are available for enforcing data integrity. DataTable DataSet DataTable DataSet DataTable DataSet DataTable consists of a single database table that is placed within a memory. DataSet consists of a collection of multiple database tables which is placed within a memory.\nIt has a row and column collection. It has a database table collection.\nIt allows fetching only a single TableRow at a time. It allows fetching multiple TableRows at a time.\nIt is a single database table, so there will not be any relation with other tables. It represents a collection of DataTable objects, so there might be a relation between them to obtain a particular result.\nIn this, DataSource objects are not serialized. In this, DataSource objects are serialized.\nUniqueConstraint and ForeignKeyConstraint objects are not available enforcing data integrity. UniqueConstraint and ForeignKeyConstraint objects are available for enforcing data integrity. DataTable consists of a single database table that is placed within a memory. DataSet consists of a collection of multiple database tables which is placed within a memory. DataTable consists of a single database table that is placed within a memory. DataSet consists of a collection of multiple database tables which is placed within a memory. It has a row and column collection. It has a database table collection. It has a row and column collection. It has a database table collection. It allows fetching only a single TableRow at a time. It allows fetching multiple TableRows at a time. It allows fetching only a single TableRow at a time. It allows fetching multiple TableRows at a time. It is a single database table, so there will not be any relation with other tables. It represents a collection of DataTable objects, so there might be a relation between them to obtain a particular result. It is a single database table, so there will not be any relation with other tables. It represents a collection of DataTable objects, so there might be a relation between them to obtain a particular result. In this, DataSource objects are not serialized. In this, DataSource objects are serialized. In this, DataSource objects are not serialized. In this, DataSource objects are serialized. UniqueConstraint and ForeignKeyConstraint objects are not available enforcing data integrity. UniqueConstraint and ForeignKeyConstraint objects are available for enforcing data integrity. UniqueConstraint and ForeignKeyConstraint objects are not available enforcing data integrity. UniqueConstraint and ForeignKeyConstraint objects are available for enforcing data integrity.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "8. What are the different namespaces available in ADO.NET?",
        "answer": "Various namespaces available under ADO.NET is given below: System.Data: It contains the definition for rows, columns, relations, views, tables, constraints, and databases.\nSystem.Data.SqlClient: It is a collection of classes that are helpful in connecting to a Microsoft SQL Server database such as SqlConnection, SqlCommand, SqlDataAdapter, etc.\nSystem.Data.Odbc: It consists of classes that are required for connecting with most Odbc Drivers. These classes include OdbcConnection, OdbcCommand.\nSystem.Data.OracleClient: It has classes required for connection with an Oracle database, OracleConnection, OracleCommand. System.Data: It contains the definition for rows, columns, relations, views, tables, constraints, and databases. System.Data System.Data : System.Data.SqlClient: It is a collection of classes that are helpful in connecting to a Microsoft SQL Server database such as SqlConnection, SqlCommand, SqlDataAdapter, etc. System.Data.SqlClient System.Data.SqlClient : System.Data.Odbc: It consists of classes that are required for connecting with most Odbc Drivers. These classes include OdbcConnection, OdbcCommand. System.Data.Odbc System.Data.Odbc : System.Data.OracleClient: It has classes required for connection with an Oracle database, OracleConnection, OracleCommand. System.Data.OracleClient System.Data.OracleClient :",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "9. What is object pooling?",
        "answer": "Object pooling is a repository of the objects in memory that can be reused later without creating them. This object pooling reduces the burden of creating objects when it is required. Whenever there is a requirement of an object, the object pool manager will process the request and serve accordingly. It is designed for optimizing the use of limited resources so that the demands of client requests will be fulfilled.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "10. Differentiate DataSet and DataReader.",
        "answer": "DataSet DataReader\nDataSet provides read/write access to data, so we can update the data. DataReader provides read-only access to data, so we can’t update the data.\nIt has a disconnected architecture, which means the data obtained from the database can be accessed even after the database connection was closed. It has a connected architecture, which means to access the data retrieved from the database, the connection must be opened.\nIt supports various database tables from different databases. It supports only a single table from a single database.\nIt provides slower access to data due to overhead. It provides faster access to data.\nBoth forward and backward scanning of data is possible. Only forward scanning of data is possible. DataSet DataReader\nDataSet provides read/write access to data, so we can update the data. DataReader provides read-only access to data, so we can’t update the data.\nIt has a disconnected architecture, which means the data obtained from the database can be accessed even after the database connection was closed. It has a connected architecture, which means to access the data retrieved from the database, the connection must be opened.\nIt supports various database tables from different databases. It supports only a single table from a single database.\nIt provides slower access to data due to overhead. It provides faster access to data.\nBoth forward and backward scanning of data is possible. Only forward scanning of data is possible. DataSet DataReader DataSet DataReader DataSet DataReader DataSet provides read/write access to data, so we can update the data. DataReader provides read-only access to data, so we can’t update the data.\nIt has a disconnected architecture, which means the data obtained from the database can be accessed even after the database connection was closed. It has a connected architecture, which means to access the data retrieved from the database, the connection must be opened.\nIt supports various database tables from different databases. It supports only a single table from a single database.\nIt provides slower access to data due to overhead. It provides faster access to data.\nBoth forward and backward scanning of data is possible. Only forward scanning of data is possible. DataSet provides read/write access to data, so we can update the data. DataReader provides read-only access to data, so we can’t update the data. DataSet provides read/write access to data, so we can update the data. DataReader provides read-only access to data, so we can’t update the data. It has a disconnected architecture, which means the data obtained from the database can be accessed even after the database connection was closed. It has a connected architecture, which means to access the data retrieved from the database, the connection must be opened. It has a disconnected architecture, which means the data obtained from the database can be accessed even after the database connection was closed. It has a connected architecture, which means to access the data retrieved from the database, the connection must be opened. It supports various database tables from different databases. It supports only a single table from a single database. It supports various database tables from different databases. It supports only a single table from a single database. It provides slower access to data due to overhead. It provides faster access to data. It provides slower access to data due to overhead. It provides faster access to data. Both forward and backward scanning of data is possible. Only forward scanning of data is possible. Both forward and backward scanning of data is possible. Only forward scanning of data is possible.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "11. What are the different execute() methods available in ADO.NET?",
        "answer": "Different execute() methods supported by SqlCommandObject in ADO.NET is given below: ExecuteScalar(): This method returns only a single value from the first row and first column of the ResultSet after the execution of the query. Even if ResultSet is having more than one row or column, all those rows and columns will be ignored. If the ResultSet is empty, it will return NULL.\nExecuteNonQuery(): This method returns the number of rows affected by the execution of a query. This method is not useful to return the ResultSet.\nExecuteReader(): This method returns an object of DataReader which is a read-only and forward-only ResultSet. It needs a live connection with the Data Source. We cannot directly instantiate the DataReader object. A valid DataReader object can be created with the help of the ExecuteReader() method.\nExecuteXmlReader(): This method builds an object of the XmlReader class and will return the ResultSet in the form of an XML document. This method is made available in SQL Server 2000 or later. ExecuteScalar(): This method returns only a single value from the first row and first column of the ResultSet after the execution of the query. Even if ResultSet is having more than one row or column, all those rows and columns will be ignored. If the ResultSet is empty, it will return NULL. ExecuteScalar() ExecuteScalar() : ExecuteNonQuery(): This method returns the number of rows affected by the execution of a query. This method is not useful to return the ResultSet. ExecuteNonQuery() ExecuteNonQuery() ExecuteReader(): This method returns an object of DataReader which is a read-only and forward-only ResultSet. It needs a live connection with the Data Source. We cannot directly instantiate the DataReader object. A valid DataReader object can be created with the help of the ExecuteReader() method. ExecuteReader() ExecuteReader() ExecuteXmlReader(): This method builds an object of the XmlReader class and will return the ResultSet in the form of an XML document. This method is made available in SQL Server 2000 or later. ExecuteXmlReader() ExecuteXmlReader()",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "12. What is a transaction in ADO.NET? Explain the types of transactions available in ADO.NET.",
        "answer": "In ADO.NET, transactions are used when you want to bind several tasks together and execute them in the form of a single unit. The transaction provides data consistency by ensuring either all of the database operations will be succeeded or all of them will be failed. For example, consider an application that performs two tasks. First, it updates an item_order table with order information. Second, it updates an item_inventory table that holds inventory information, where a number of items ordered will be debited. If any one of the tasks fails, then both updates must be rolled back. Two types of transactions supported by ADO.NET are as follows: Local Transaction:\nA local transaction is a single-phase transaction that is directly handled by the database. Every .NET Framework data provider has its own Transaction object for bringing out local transactions.\nFor example, if we want to perform a transaction using SQL Server database, we import a System.Data.SqlClient namespace. Similarly, to perform an Oracle transaction, import the System.Data.OracleClient namespace. A DbTransaction class will be used for writing code that is independent of the provider and that requires transactions.\nDistributed Transaction:\nA distributed transaction is coordinated by a transaction monitor and will make use of fail-safe mechanisms like two-phase commit for transaction resolution. This transaction will affect multiple resources.\nIf the user can make use of a distributed transaction, if he wants to do a transaction across multiple data servers such as Oracle, SQL Server, etc.\nIf you want a distributed transaction to commit, all participants must guarantee that data modification made will be permanent. Changes must remain unchanged even if the system crash or other unforeseen events occur. Even if a single participant will make this guarantee fail, then the entire transaction will fail, and updates made to data within the transaction scope are rolled back. Local Transaction:\nA local transaction is a single-phase transaction that is directly handled by the database. Every .NET Framework data provider has its own Transaction object for bringing out local transactions.\nFor example, if we want to perform a transaction using SQL Server database, we import a System.Data.SqlClient namespace. Similarly, to perform an Oracle transaction, import the System.Data.OracleClient namespace. A DbTransaction class will be used for writing code that is independent of the provider and that requires transactions. Local Transaction: A local transaction is a single-phase transaction that is directly handled by the database. Every .NET Framework data provider has its own Transaction object for bringing out local transactions.\nFor example, if we want to perform a transaction using SQL Server database, we import a System.Data.SqlClient namespace. Similarly, to perform an Oracle transaction, import the System.Data.OracleClient namespace. A DbTransaction class will be used for writing code that is independent of the provider and that requires transactions. A local transaction is a single-phase transaction that is directly handled by the database. Every .NET Framework data provider has its own Transaction object for bringing out local transactions. For example, if we want to perform a transaction using SQL Server database, we import a System.Data.SqlClient namespace. Similarly, to perform an Oracle transaction, import the System.Data.OracleClient namespace. A DbTransaction class will be used for writing code that is independent of the provider and that requires transactions. System.Data.SqlClient System.Data.OracleClient DbTransaction Distributed Transaction:\nA distributed transaction is coordinated by a transaction monitor and will make use of fail-safe mechanisms like two-phase commit for transaction resolution. This transaction will affect multiple resources.\nIf the user can make use of a distributed transaction, if he wants to do a transaction across multiple data servers such as Oracle, SQL Server, etc.\nIf you want a distributed transaction to commit, all participants must guarantee that data modification made will be permanent. Changes must remain unchanged even if the system crash or other unforeseen events occur. Even if a single participant will make this guarantee fail, then the entire transaction will fail, and updates made to data within the transaction scope are rolled back. Distributed Transaction: A distributed transaction is coordinated by a transaction monitor and will make use of fail-safe mechanisms like two-phase commit for transaction resolution. This transaction will affect multiple resources.\nIf the user can make use of a distributed transaction, if he wants to do a transaction across multiple data servers such as Oracle, SQL Server, etc.\nIf you want a distributed transaction to commit, all participants must guarantee that data modification made will be permanent. Changes must remain unchanged even if the system crash or other unforeseen events occur. Even if a single participant will make this guarantee fail, then the entire transaction will fail, and updates made to data within the transaction scope are rolled back. A distributed transaction is coordinated by a transaction monitor and will make use of fail-safe mechanisms like two-phase commit for transaction resolution. This transaction will affect multiple resources. If the user can make use of a distributed transaction, if he wants to do a transaction across multiple data servers such as Oracle, SQL Server, etc. If you want a distributed transaction to commit, all participants must guarantee that data modification made will be permanent. Changes must remain unchanged even if the system crash or other unforeseen events occur. Even if a single participant will make this guarantee fail, then the entire transaction will fail, and updates made to data within the transaction scope are rolled back.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "13. Explain the difference between OLEDB (Object Linking and Embedding DataBase) and ODBC (Open DataBase Connectivity).",
        "answer": "OLEDB ODBC\nAn API(Application Programming Interface) that allows accessing data from different sources in a uniform manner. It is an API for accessing DBMS (DataBase Management System).\nIt supports both relational and non-relational databases. It supports only relational databases.\nIt is procedural-based. It is component-based.\nIt is easier to deploy. It is difficult to deploy.\nIt gives a higher performance on loading and extracting the data. It performs less compared to OLE DB on loading and extraction of data.\nOleDbConnection = New OleDbConnection(connetionString) is used to make connection with OLE DB data source. resource odbc_connect(string datasource , string username , string password , [int cursor_type ]) is used to make a connection to an ODBC data source. On success, this function will return a connection resource handle that is helpful in accessing the database using subsequent commands. OLEDB ODBC\nAn API(Application Programming Interface) that allows accessing data from different sources in a uniform manner. It is an API for accessing DBMS (DataBase Management System).\nIt supports both relational and non-relational databases. It supports only relational databases.\nIt is procedural-based. It is component-based.\nIt is easier to deploy. It is difficult to deploy.\nIt gives a higher performance on loading and extracting the data. It performs less compared to OLE DB on loading and extraction of data.\nOleDbConnection = New OleDbConnection(connetionString) is used to make connection with OLE DB data source. resource odbc_connect(string datasource , string username , string password , [int cursor_type ]) is used to make a connection to an ODBC data source. On success, this function will return a connection resource handle that is helpful in accessing the database using subsequent commands. OLEDB ODBC OLEDB ODBC OLEDB ODBC An API(Application Programming Interface) that allows accessing data from different sources in a uniform manner. It is an API for accessing DBMS (DataBase Management System).\nIt supports both relational and non-relational databases. It supports only relational databases.\nIt is procedural-based. It is component-based.\nIt is easier to deploy. It is difficult to deploy.\nIt gives a higher performance on loading and extracting the data. It performs less compared to OLE DB on loading and extraction of data.\nOleDbConnection = New OleDbConnection(connetionString) is used to make connection with OLE DB data source. resource odbc_connect(string datasource , string username , string password , [int cursor_type ]) is used to make a connection to an ODBC data source. On success, this function will return a connection resource handle that is helpful in accessing the database using subsequent commands. An API(Application Programming Interface) that allows accessing data from different sources in a uniform manner. It is an API for accessing DBMS (DataBase Management System). An API(Application Programming Interface) that allows accessing data from different sources in a uniform manner. It is an API for accessing DBMS (DataBase Management System). It supports both relational and non-relational databases. It supports only relational databases. It supports both relational and non-relational databases. It supports only relational databases. It is procedural-based. It is component-based. It is procedural-based. It is component-based. It is easier to deploy. It is difficult to deploy. It is easier to deploy. It is difficult to deploy. It gives a higher performance on loading and extracting the data. It performs less compared to OLE DB on loading and extraction of data. It gives a higher performance on loading and extracting the data. It performs less compared to OLE DB on loading and extraction of data. OleDbConnection = New OleDbConnection(connetionString) is used to make connection with OLE DB data source. resource odbc_connect(string datasource , string username , string password , [int cursor_type ]) is used to make a connection to an ODBC data source. On success, this function will return a connection resource handle that is helpful in accessing the database using subsequent commands. OleDbConnection = New OleDbConnection(connetionString) is used to make connection with OLE DB data source. OleDbConnection = New OleDbConnection(connetionString) resource odbc_connect(string datasource , string username , string password , [int cursor_type ]) is used to make a connection to an ODBC data source. On success, this function will return a connection resource handle that is helpful in accessing the database using subsequent commands. resource odbc_connect(string datasource , string username , string password , [int cursor_type ])",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "14. What is data binding in ADO.NET?",
        "answer": "Data binding in ADO.NET is the process through which user interface (UI) controls of a client application are configured to update or fetch data from data sources like a database or XML document. Using data binding, the user will be able to bind values to the particular control.\nThere are two types of data binding based on the type of binding offered:\nSimple data binding: It is the process of binding the control with only one value in the dataset. The controls such as label, text box will be made bound to the control using the control properties.\nComplex data binding: It is the method of binding the component with the Database. The controls can be a Dropdown list, GridView, or combo box. One or more than one value can be displayed from the dataset using the complex data binding. Data binding in ADO.NET is the process through which user interface (UI) controls of a client application are configured to update or fetch data from data sources like a database or XML document. Using data binding, the user will be able to bind values to the particular control. There are two types of data binding based on the type of binding offered:\nSimple data binding: It is the process of binding the control with only one value in the dataset. The controls such as label, text box will be made bound to the control using the control properties.\nComplex data binding: It is the method of binding the component with the Database. The controls can be a Dropdown list, GridView, or combo box. One or more than one value can be displayed from the dataset using the complex data binding. Simple data binding: It is the process of binding the control with only one value in the dataset. The controls such as label, text box will be made bound to the control using the control properties.\nComplex data binding: It is the method of binding the component with the Database. The controls can be a Dropdown list, GridView, or combo box. One or more than one value can be displayed from the dataset using the complex data binding. Simple data binding: It is the process of binding the control with only one value in the dataset. The controls such as label, text box will be made bound to the control using the control properties. Simple data binding: Complex data binding: It is the method of binding the component with the Database. The controls can be a Dropdown list, GridView, or combo box. One or more than one value can be displayed from the dataset using the complex data binding. Complex data binding:",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "15. What is Connection pooling?",
        "answer": "The task of grouping database connections in the cache memory is to make them available whenever there is a requirement of connection. Opening a new database connection every time is a time-consuming process. Connection pooling allows you to reuse existing and active database connections, whenever there is a need, and thus increases the application performance.\nBy setting the pooling property into true or false in the connection string, we can enable or disable the connection pooling in the application. It is enabled by default in every application. ",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "16. What is DataTable in ADO.NET?",
        "answer": "DataTable in ADO.NET represents a single table in a DataSet that has in-memory relational data. The data within DataTable is local to the .NET framework-based application to which it belongs but can be populated using a DataAdapter from different data sources such as Microsoft SQL Server. The DataTable class belongs to the System.Data namespace within the library of .NET Framework. System.Data DataTable can be represented in .aspx.cs code as given below: .aspx.cs protected void DataTableExample()  \n{  \n    SqlConnection conn = new SqlConnection(\"Write the database connection string\");  \n    conn.Open();  \n    SqlCommand cd = new SqlCommand(\"Write the query or procedure\", conn);  \n    SqlDataAdapter d = new SqlDataAdapter(cd);  \n    DataTable dt = new DataTable();  \n    d.Fill(dt);  \n    grid.DataSource = dt;  \n    grid.DataBind();  \n} protected void DataTableExample()  \n{  \n    SqlConnection conn = new SqlConnection(\"Write the database connection string\");  \n    conn.Open();  \n    SqlCommand cd = new SqlCommand(\"Write the query or procedure\", conn);  \n    SqlDataAdapter d = new SqlDataAdapter(cd);  \n    DataTable dt = new DataTable();  \n    d.Fill(dt);  \n    grid.DataSource = dt;  \n    grid.DataBind();  \n} The SQL connection and SQL command object will be created. We pass the SQL query to the object of the SQL command class. A new data table object will be created by using the DataTable class and it is filled with data using a data adapter.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "17. Name some of the properties and methods provided by the DataReader in ADO.NET?",
        "answer": "Some of the properties provided by the DataReader are as follows: Depth: It represents the depth of nesting for a row.\nFieldCount: It gives the total column count in a row.\nItem: It obtains the column value in a native format.\nRecordsAffected: It gives the number of transaction affected rows.\nIsClosed: It represents whether a data reader is closed.\nVisibleFieldCount: It is used to obtain the number of unhidden fields in the SqlDataReader. Depth: It represents the depth of nesting for a row. Depth: FieldCount: It gives the total column count in a row. FieldCount: Item: It obtains the column value in a native format. Item: RecordsAffected: It gives the number of transaction affected rows. RecordsAffected: IsClosed: It represents whether a data reader is closed. IsClosed: VisibleFieldCount: It is used to obtain the number of unhidden fields in the SqlDataReader. VisibleFieldCount: Some of the methods provided by the DataReader are as follows: Read(): This method reads a record from the SQL Server database.\nClose(): It closes a SqlDataReader object.\nNextResult(): It moves the data reader to the next result during the time of batch transactions.\nGetxxx(): Various types of Getxxx() methods such as GetBoolean(Int32), GetChar(Int32), GetFloat(Int32), GetDouble(Int32), etc., are provided by the DataReader. These methods will read a value of a particular data type from a column. For example, GetFloat() will return a column value as a Float and GetChar as a character. Read(): This method reads a record from the SQL Server database. Read(): Close(): It closes a SqlDataReader object. Close(): NextResult(): It moves the data reader to the next result during the time of batch transactions. NextResult(): Getxxx(): Various types of Getxxx() methods such as GetBoolean(Int32), GetChar(Int32), GetFloat(Int32), GetDouble(Int32), etc., are provided by the DataReader. These methods will read a value of a particular data type from a column. For example, GetFloat() will return a column value as a Float and GetChar as a character. Getxxx():",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "18. What are the conditions for connection pooling?",
        "answer": "The conditions for connection pooling are: There must be several processes with the same parameters and security settings so that they can share the same connection.\nThe connection string should be identical. There must be several processes with the same parameters and security settings so that they can share the same connection. The connection string should be identical.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "19. What are the data providers in ADO.NET?",
        "answer": "Data providers are used to transferring the data between the client application and the data store. It encapsulates the database-specific details. Data providers are helpful for database connection, data retrieval, storing the data in a dataset, reading the retrieved data, and updating the database. The data providers that comes along with the ADO.NET Framework are: OLE DB: The OLEDB provider is available under System.Data.OleDb namespace. This provider can be used to access Microsoft Access, DB2/400, SyBase, and SQL Server 6.5 and earlier.\nODBC: The ODBC provider is available under System.Data.Odbc namespace. This provider is used when there will not be any newer provider is available.\nSQL Server: The Microsoft SQL Server provider is available under System.Data.SqlClient namespace. Classes available under this provider will provide the same functionality as the generic OLEDB provider. OLE DB: The OLEDB provider is available under System.Data.OleDb namespace. This provider can be used to access Microsoft Access, DB2/400, SyBase, and SQL Server 6.5 and earlier. OLE DB: System.Data.OleDb ODBC: The ODBC provider is available under System.Data.Odbc namespace. This provider is used when there will not be any newer provider is available. ODBC: System.Data.Odbc SQL Server: The Microsoft SQL Server provider is available under System.Data.SqlClient namespace. Classes available under this provider will provide the same functionality as the generic OLEDB provider. SQL Server: System.Data.SqlClient  ",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "20. Why Stored Procedure is used in ADO.NET?",
        "answer": "The reasons for using Stored Procedures in ADO.NET are given below: For improved performance\nFor security reasons\nEasier to use and maintain\nLesser Network Traffic\nExecution time is less For improved performance For security reasons Easier to use and maintain Lesser Network Traffic Execution time is less",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "1. Explain ADO.NET Architecture.",
        "answer": "ADO.NET is based on an Object Model where data residing in the database is accessed using a data provider. It is a technology of data access given by the Microsoft .Net Framework, which helps to communicate between relational and non-relational systems using a common group of components. The components of ADO.NET architecture are: Data Provider: It provides data to all the applications that perform the database updates. The application can access data through the DataSet or DataReader object. A data provider is a having group of components such as Command, Connection, DataReader, and DataAdapter objects. Command and Connection objects are the necessary components irrespective of the operations like Insert, Delete, Select, and Update.\nConnection: The connection object is needed to connect with the database such as SQL Server, MySQL, Oracle, etc. To create a connection object, you must know about where the database is located(Ex: IP address or machine name, etc.) and the security credentials(Ex: user name and password-based authentication or windows authentication).\nCommand: The command object is the component where you will write the SQL queries. Then by using the command object, execute the queries over the connection. By using the command object and SQL queries, you will be able to fetch the data or send the data to the database.\nDataReader: DataReader is a connected read-only RecordSet that is helpful in reading the records in the forward-only mode.\nDataAdapter: The DataAdapter acts as a bridge between the dataset and command object. It receives the data from the command object and puts it into the data set.\nDataSet: The DataSet is a disconnected RecordSet that can be browsed in both forward and backward directions. We can also update the data using the dataset. DataSet is filled by using DataAdapter.\nDataView Class: A DataView allows you to create various views of data from DataTable, which can be used for data-binding applications. Using this, you can display the table with different order of sorting or you can filter the data based on a filter expression or by row state, etc.\nXML: It is possible to create an XML representation of a dataset. In the dataset’s XML representation, data is represented in XML format and the database schema is represented in XML Schema Definition(XSD) language. Data Provider: It provides data to all the applications that perform the database updates. The application can access data through the DataSet or DataReader object. A data provider is a having group of components such as Command, Connection, DataReader, and DataAdapter objects. Command and Connection objects are the necessary components irrespective of the operations like Insert, Delete, Select, and Update. Data Provider: Connection: The connection object is needed to connect with the database such as SQL Server, MySQL, Oracle, etc. To create a connection object, you must know about where the database is located(Ex: IP address or machine name, etc.) and the security credentials(Ex: user name and password-based authentication or windows authentication). Connection: Command: The command object is the component where you will write the SQL queries. Then by using the command object, execute the queries over the connection. By using the command object and SQL queries, you will be able to fetch the data or send the data to the database. Command: DataReader: DataReader is a connected read-only RecordSet that is helpful in reading the records in the forward-only mode. DataReader: DataAdapter: The DataAdapter acts as a bridge between the dataset and command object. It receives the data from the command object and puts it into the data set. DataAdapter: DataSet: The DataSet is a disconnected RecordSet that can be browsed in both forward and backward directions. We can also update the data using the dataset. DataSet is filled by using DataAdapter. DataSet: DataView Class: A DataView allows you to create various views of data from DataTable, which can be used for data-binding applications. Using this, you can display the table with different order of sorting or you can filter the data based on a filter expression or by row state, etc. DataView Class: XML: It is possible to create an XML representation of a dataset. In the dataset’s XML representation, data is represented in XML format and the database schema is represented in XML Schema Definition(XSD) language. XML:  ",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "2. Briefly explain connected and disconnected architecture of ADO.NET.",
        "answer": "Connected Architecture: Connected Architecture: In connected architecture, the connection must be kept open for accessing the data retrieved from the database. Connected architecture is based on Connection, DataReader, Command, and Transaction classes.\nYou constantly visit the database for any CRUD (Create, Read, Update, and Delete) operation you want to do. This will create high traffic to the database, but this is usually faster as you are doing only smaller transactions.\nDataReader can be said as a Connected Architecture as it holds the connection open until it fetches all the rows one by one. In connected architecture, the connection must be kept open for accessing the data retrieved from the database. Connected architecture is based on Connection, DataReader, Command, and Transaction classes. You constantly visit the database for any CRUD (Create, Read, Update, and Delete) operation you want to do. This will create high traffic to the database, but this is usually faster as you are doing only smaller transactions. DataReader can be said as a Connected Architecture as it holds the connection open until it fetches all the rows one by one.   Disconnected Architecture: Disconnected Architecture: In disconnected architecture, even if the database connection is closed, data retrieved from the database can be accessed. Disconnected architecture is based on classes connection, CommandBuilder, DataAdapter, DataSet, and DataView.\nHere, we retrieve and store a recordset from the database so that you can perform many CRUD (Create, Read, Update, and Delete) operations on the data within memory, it will be re-synchronized when you reconnect with the database.\nDataSet is a Disconnected Architecture because all records are brought at once and holding the database connection alive is not necessary. In disconnected architecture, even if the database connection is closed, data retrieved from the database can be accessed. Disconnected architecture is based on classes connection, CommandBuilder, DataAdapter, DataSet, and DataView. Here, we retrieve and store a recordset from the database so that you can perform many CRUD (Create, Read, Update, and Delete) operations on the data within memory, it will be re-synchronized when you reconnect with the database. DataSet is a Disconnected Architecture because all records are brought at once and holding the database connection alive is not necessary.  ",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "3. Explain about ExecuteScalar() in ADO.NET.",
        "answer": "A single value from the first row and first column of the ResultSet will be returned by ExecuteScalar() method on query execution.\nIf the ResultSet is having multiple rows or columns, all those rows and columns will be ignored except the first row and first column. If the ResultSet is empty, this function will return NULL.\nThe best situation to use ExecuteScalar() method is when we are using functions such as COUNT(), SUM(), etc., as it uses only a few resources compared to the ExecuteReader() method.\nExample: A single value from the first row and first column of the ResultSet will be returned by ExecuteScalar() method on query execution. If the ResultSet is having multiple rows or columns, all those rows and columns will be ignored except the first row and first column. If the ResultSet is empty, this function will return NULL. The best situation to use ExecuteScalar() method is when we are using functions such as COUNT(), SUM(), etc., as it uses only a few resources compared to the ExecuteReader() method. Example: public void ExecuteScalarExample()  \n{  \n    SqlConnection con = new SqlConnection();  \n    con.ConnectionString = ConfigurationManager.ConnectionStrings[\"conString\"].ConnectionString;  \n    try  \n    {  \n        SqlCommand cd = new SqlCommand();  \n        cd.Connection = con;  \n        cd.CommandText = \"SELECT SUM(SALARY) FROM EMPLOYEE\";  \n        cd.CommandType = CommandType.Text;  \n        con.Open();  \n        Int32 SalaryTotal = Convert.ToInt32(cd.ExecuteScalar());  \n        MessageBox.Show(\"Total Salary of the employee is : \" + SalaryTotal.ToString());  \n        cd.Dispose();  \n        con.Dispose();  \n    }  \n    catch (Exception ex)  \n    {  \n        MessageBox.Show(ex.Message);  \n    }  \n} public void ExecuteScalarExample()  \n{  \n    SqlConnection con = new SqlConnection();  \n    con.ConnectionString = ConfigurationManager.ConnectionStrings[\"conString\"].ConnectionString;  \n    try  \n    {  \n        SqlCommand cd = new SqlCommand();  \n        cd.Connection = con;  \n        cd.CommandText = \"SELECT SUM(SALARY) FROM EMPLOYEE\";  \n        cd.CommandType = CommandType.Text;  \n        con.Open();  \n        Int32 SalaryTotal = Convert.ToInt32(cd.ExecuteScalar());  \n        MessageBox.Show(\"Total Salary of the employee is : \" + SalaryTotal.ToString());  \n        cd.Dispose();  \n        con.Dispose();  \n    }  \n    catch (Exception ex)  \n    {  \n        MessageBox.Show(ex.Message);  \n    }  \n} Here, we create an object of the class SqlConnection and SqlCommand. We pass SQL Statement to the object of SqlCommand class, which returns a single value. When ExecuteScalar() function gets executed, a single value will be returned, i.e, the total salary of employees. This value will be displayed using a message box.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "4. Explain about ADO.NET objects.",
        "answer": "There are seven main objects in ADO.NET. They are: DataSet: It is available under both System.Data.ADO and the System.Data.SQL namespaces. DataSet is a database cache built-in memory for using it in disconnected operations. It holds the complete collection of tables, constraints, and relationships.\nSQLDataSetCommand: It represents a stored procedure or a database query that can be used to populate the DataSet object. It corresponds to the ADO’s Command object-provided functionalities.\nSQLCommand: It represents a stored procedure or a T-SQL statement that will be executed by SQL Server. It corresponds to another set of functionalities provided by the ADO’s Command object.\nSQLParameter: It can be used to pass parameters to the object of SQLCommand or SQLDataSetCommand class. When you are passing a parameter for SQLCommand using SQLParameter, SQLParameter will represent a parameter that can be used by T-SQL statement or stored procedure. Whenever a parameter has been passed for SQLDataSetCommand using SQLParameter, SQLParameter will represent a column from a result set.\nSQLConnection: It represents an open connection to the data source like SQL Server. This object is similar to the standard Connection object in ADO.\nSQLDataReader: It reads a forward-only stream of data from a SQL Server database. It works with an open database connection.\nSQLError: It collects runtime warnings and error conditions related information that will be encountered by an ADO.NET application. It corresponds to ADO’s Error object. DataSet: It is available under both System.Data.ADO and the System.Data.SQL namespaces. DataSet is a database cache built-in memory for using it in disconnected operations. It holds the complete collection of tables, constraints, and relationships. DataSet: System.Data.ADO System.Data.SQL SQLDataSetCommand: It represents a stored procedure or a database query that can be used to populate the DataSet object. It corresponds to the ADO’s Command object-provided functionalities. SQLDataSetCommand: SQLCommand: It represents a stored procedure or a T-SQL statement that will be executed by SQL Server. It corresponds to another set of functionalities provided by the ADO’s Command object. SQLCommand: SQLParameter: It can be used to pass parameters to the object of SQLCommand or SQLDataSetCommand class. When you are passing a parameter for SQLCommand using SQLParameter, SQLParameter will represent a parameter that can be used by T-SQL statement or stored procedure. Whenever a parameter has been passed for SQLDataSetCommand using SQLParameter, SQLParameter will represent a column from a result set. SQLParameter: SQLConnection: It represents an open connection to the data source like SQL Server. This object is similar to the standard Connection object in ADO. SQLConnection: SQLDataReader: It reads a forward-only stream of data from a SQL Server database. It works with an open database connection. SQLDataReader: SQLError: It collects runtime warnings and error conditions related information that will be encountered by an ADO.NET application. It corresponds to ADO’s Error object. SQLError:",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "5. What are the different authentication techniques used to connect with MS SQL Server?",
        "answer": "Before performing any task in the database, SQL Server will authenticate. Two types of authentication techniques are: Windows Authentication: This default authentication is provided only through Windows domain accounts. This SQL Server security model is strongly integrated with Windows, so it is also referred to as integrated security. Particular Windows users and group accounts are allowed to login into SQL Server. Windows users who are already been authenticated or logged onto Windows do not have to provide additional credentials.\nThe below-given SqlConnection.ConnectionString specifies Windows authentication without any need of providing a user name or password by the user. Windows Authentication: This default authentication is provided only through Windows domain accounts. This SQL Server security model is strongly integrated with Windows, so it is also referred to as integrated security. Particular Windows users and group accounts are allowed to login into SQL Server. Windows users who are already been authenticated or logged onto Windows do not have to provide additional credentials.\nThe below-given SqlConnection.ConnectionString specifies Windows authentication without any need of providing a user name or password by the user. Windows Authentication:  SqlConnection.ConnectionString C#\n\"Server=MSSQL1;Database=Institute;Integrated Security=true; C#\n\"Server=MSSQL1;Database=Institute;Integrated Security=true; SQL Server and Windows Authentication Mode(Mixed-mode): Authentication will be provided with the help of the Windows and SQL Server Authentication combination. User name and password pair will be maintained within SQL Server. In order to use this mixed-mode authentication, you need to create SQL Server logins that are stored in SQL Server. After that, you can supply the user name and password to SQL Server at run time. SQL Server and Windows Authentication Mode(Mixed-mode): Authentication will be provided with the help of the Windows and SQL Server Authentication combination. User name and password pair will be maintained within SQL Server. In order to use this mixed-mode authentication, you need to create SQL Server logins that are stored in SQL Server. After that, you can supply the user name and password to SQL Server at run time. SQL Server and Windows Authentication Mode(Mixed-mode): The below-given ConnectionString specifies Mixed mode authentication: C#\n\"Persist Security Info=False;User ID=Harsh;Password=xyz@123;Initial Catalog=Institute;Server=MySqlServer\" C#\n\"Persist Security Info=False;User ID=Harsh;Password=xyz@123;Initial Catalog=Institute;Server=MySqlServer\"",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "6. What is Response.Expires and Response.ExpiresAbsolute property?",
        "answer": "Response.Expires property is specific to the minutes that a particular page stays in the cache for the specific time from the time it has been requested. For example, if Response.Expires value is set to 5 minutes, then the page is instructed to be in cache for 5 minutes from the time it has been requested.\nResponse.ExpiresAbsolute property helps to provide the proper time at which a specific page cache has been expired. For example, Response.ExpiresAbsolute provides information like 14 March 15:40:15. This time tells about when the page was in cache. Response.Expires property is specific to the minutes that a particular page stays in the cache for the specific time from the time it has been requested. For example, if Response.Expires value is set to 5 minutes, then the page is instructed to be in cache for 5 minutes from the time it has been requested. Response.Expires Response.Expires Response.ExpiresAbsolute property helps to provide the proper time at which a specific page cache has been expired. For example, Response.ExpiresAbsolute provides information like 14 March 15:40:15. This time tells about when the page was in cache. Response.ExpiresAbsolute Response.ExpiresAbsolute",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "7. How to load multiple tables into a dataset?",
        "answer": "DataSet ds=new DataSet();\nSqlConnection con=new SqlConnection(\"connection_string\");\nSqlDataAdapter da=new SqlDataAdapter(\"select * from Employee1\",con);\nda.Fill(ds.Tables.Add()); \nda=new SqlDataAdapter(\"select * from Employee2\",con);\nda.Fill(ds.Tables.Add()); DataSet ds=new DataSet();\nSqlConnection con=new SqlConnection(\"connection_string\");\nSqlDataAdapter da=new SqlDataAdapter(\"select * from Employee1\",con);\nda.Fill(ds.Tables.Add()); \nda=new SqlDataAdapter(\"select * from Employee2\",con);\nda.Fill(ds.Tables.Add()); After tables have been added into a DataSet, the below-given code tells about how to make use of the DataSet tables. If you decide to use the first table in a dataset or to copy the table data into a data table, then follow the below-given code: DataTable dt=new DataTable();\ndt=ds.Tables[0]; DataTable dt=new DataTable();\ndt=ds.Tables[0]; The above code can be used to add the required number of tables in a dataset. This ensures connection-less access to data. As the dataset is filled with multiple tables, every time we want to query the data the database connection is not required. It also makes sure about the reusability of data.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "8. What is the difference between connected and disconnected architecture in ADO.NET?",
        "answer": "Connected architecture Disconnected architecture\nIt is connection-oriented. It is not connection-oriented.\nDataReader is a connected architecture. DataSet is a disconnected architecture.\nHigh speed and performance are given by connected methods. Disconnected methods are low in speed and performance.\nData persistence is not possible using DataReader. Data persistence is possible using DataSet.\nIt carries the single table data. It carries data from multiple tables.\nWe can’t update the data as it is read-only. Here we can update the data. Connected architecture Disconnected architecture\nIt is connection-oriented. It is not connection-oriented.\nDataReader is a connected architecture. DataSet is a disconnected architecture.\nHigh speed and performance are given by connected methods. Disconnected methods are low in speed and performance.\nData persistence is not possible using DataReader. Data persistence is possible using DataSet.\nIt carries the single table data. It carries data from multiple tables.\nWe can’t update the data as it is read-only. Here we can update the data. Connected architecture Disconnected architecture Connected architecture Disconnected architecture Connected architecture Disconnected architecture It is connection-oriented. It is not connection-oriented.\nDataReader is a connected architecture. DataSet is a disconnected architecture.\nHigh speed and performance are given by connected methods. Disconnected methods are low in speed and performance.\nData persistence is not possible using DataReader. Data persistence is possible using DataSet.\nIt carries the single table data. It carries data from multiple tables.\nWe can’t update the data as it is read-only. Here we can update the data. It is connection-oriented. It is not connection-oriented. It is connection-oriented. It is not connection-oriented. DataReader is a connected architecture. DataSet is a disconnected architecture. DataReader is a connected architecture. DataSet is a disconnected architecture. High speed and performance are given by connected methods. Disconnected methods are low in speed and performance. High speed and performance are given by connected methods. Disconnected methods are low in speed and performance. Data persistence is not possible using DataReader. Data persistence is possible using DataSet. Data persistence is not possible using DataReader. Data persistence is possible using DataSet. It carries the single table data. It carries data from multiple tables. It carries the single table data. It carries data from multiple tables. We can’t update the data as it is read-only. Here we can update the data. We can’t update the data as it is read-only. Here we can update the data.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "9. What is LINQ?",
        "answer": "LINQ(Language Integrated Query) is a structured query syntax that helps the programmers and testers to retrieve data from various data sources such as Collections, XML Docs, ADO.NET DataSet, web service, MS SQL Server, etc.\nIt is integrated with C# or VB.NET and it eliminates the mismatch between different programming languages and databases. It provides a single querying interface for various data source types.\nAn object will be returned as a result of LINQ query execution. It will allow you to use an object-oriented approach on the result set and there is no need to worry about the transformation of different result formats into objects. LINQ(Language Integrated Query) is a structured query syntax that helps the programmers and testers to retrieve data from various data sources such as Collections, XML Docs, ADO.NET DataSet, web service, MS SQL Server, etc. It is integrated with C# or VB.NET and it eliminates the mismatch between different programming languages and databases. It provides a single querying interface for various data source types. An object will be returned as a result of LINQ query execution. It will allow you to use an object-oriented approach on the result set and there is no need to worry about the transformation of different result formats into objects.  ",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "10. How can you identify whether any changes are made to the DataSet object since the time it was last loaded?",
        "answer": "The DataSet object has two methods to track down the changes: GetChanges(): It returns the DataSet object that has been changed since it was loaded or since the execution of the AcceptChanges() method.\nHasChanges(): It indicates if any modifications were made since from the time the DataSet object was loaded or after a method call to the AcceptChanges() was made. GetChanges(): It returns the DataSet object that has been changed since it was loaded or since the execution of the AcceptChanges() method. GetChanges(): HasChanges(): It indicates if any modifications were made since from the time the DataSet object was loaded or after a method call to the AcceptChanges() was made. HasChanges(): Use the RejectChanges() method, if you want to reverse the entire changes since from the time the DataSet object was loaded.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "11. What is the difference between Dataset.Clone() and DataSet.Copy() methods?",
        "answer": "The method Clone() copies only the DataSet structure. The copied structure will have all the constraints, relations, as well as DataTable schemas used by the DataSet. It does not copy the data stored in the DataSet.\nThe Copy() method copies the DataSet structure along with the data in the DataSet. The original data will not be affected. The method Clone() copies only the DataSet structure. The copied structure will have all the constraints, relations, as well as DataTable schemas used by the DataSet. It does not copy the data stored in the DataSet. Clone() The Copy() method copies the DataSet structure along with the data in the DataSet. The original data will not be affected. Copy()",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "12. Which methods are provided to add or remove rows from the DataTable object?",
        "answer": "The collection of rows for the DataTable object has been defined by the DataRowCollection class. DataRowCollection class has the method NewRow() for adding a new DataRow to DataTable. This method creates a new row that implements the similar schema that is applied to the DataTable. The methods provided by the DataRowCollection object are given below: Add()- It adds a newly created row into DataRowCollection.\nRemove()- It deletes the object DataRow from DataRowCollection.\nRemoveAt()- It deletes a row for which location is marked by an index number. Add()- It adds a newly created row into DataRowCollection. Add() Remove()- It deletes the object DataRow from DataRowCollection. Remove() RemoveAt()- It deletes a row for which location is marked by an index number. RemoveAt()",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "13. How to make SQL Server connection in ADO.NET?",
        "answer": "Consider the below example where a connection to the SQL Server has been established. An employee database will be used to connect. The C# code will be: using (SqlConnection con = new SqlConnection(connectionString))    \n{    \n  con.Open();         \n} using (SqlConnection con = new SqlConnection(connectionString))    \n{    \n  con.Open();         \n} Using block will be useful in closing the connection automatically. It is not required to explicitly call the close() method, because using block will do this implicitly when the code exits the block. // ConnectionExample.cs\n\nusing System;  \nusing System.Data.SqlClient;  \nnamespace ConsoleApplicationExample  \n{  \n    class ConnectionExample  \n    {  \n        static void Main(string[] args)  \n        {  \n            new Program().ConnectingMethod();  \n        }  \n        public void ConnectingMethod()  \n        {  \n            using (  \n                     // Creating Connection  \n                     SqlConnection conn = new SqlConnection(\"data source=.; database=employee; integrated security=SSPI\")  \n                 )  \n            {  \n                conn.Open();  \n                Console.WriteLine(\"Connection Has Been Successfully Established.\");  \n            }  \n        }  \n    }  \n} // ConnectionExample.cs\n\nusing System;  \nusing System.Data.SqlClient;  \nnamespace ConsoleApplicationExample  \n{  \n    class ConnectionExample  \n    {  \n        static void Main(string[] args)  \n        {  \n            new Program().ConnectingMethod();  \n        }  \n        public void ConnectingMethod()  \n        {  \n            using (  \n                     // Creating Connection  \n                     SqlConnection conn = new SqlConnection(\"data source=.; database=employee; integrated security=SSPI\")  \n                 )  \n            {  \n                conn.Open();  \n                Console.WriteLine(\"Connection Has Been Successfully Established.\");  \n            }  \n        }  \n    }  \n} Output: Output: Connection Has Been Successfully Established.\nPress any key to continue... Connection Has Been Successfully Established.\nPress any key to continue... On execution, if the connection has been established, a message will be displayed on an output window. If the connection is not created with the help of using a block, a connection must be closed explicitly.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "14. What is serialization? Write an example program to serialize a DataSet.",
        "answer": "Serialization is the method of converting an object into a byte stream which can be stored as well as transmitted over the network. The advantage of serialization is that data can be transmitted in a cross-platform environment across the network and also it can be saved in a storage medium like persistent or non-persistent. The code for serializing a DataSet is: using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Xml.Serialization;\nusing System.IO;\npublic partial class Default : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        SqlConnection conn = new SqlConnection(\"Data Source=data_source_name;Initial Catalog=employee;Integrated Security=True\");  //Create connection object\n        SqlDataAdapter da = new SqlDataAdapter(\"select * from emp\", conn);  //DataAdapter creation\n        DataSet s = new DataSet();\n        da.Fill(s);  \n        FileStream fObj = new FileStream(\"C:\\\\demo.xml\", FileMode.Create);   // Create a XML file\n        XmlSerializer sObj = new XmlSerializer(typeof(DataSet));\n        sObj.Serialize(fObj, s);  //Serialization of a DataSet\n        fObj.Close();\n    }\n} using System;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Xml.Serialization;\nusing System.IO;\npublic partial class Default : System.Web.UI.Page\n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        SqlConnection conn = new SqlConnection(\"Data Source=data_source_name;Initial Catalog=employee;Integrated Security=True\");  //Create connection object\n        SqlDataAdapter da = new SqlDataAdapter(\"select * from emp\", conn);  //DataAdapter creation\n        DataSet s = new DataSet();\n        da.Fill(s);  \n        FileStream fObj = new FileStream(\"C:\\\\demo.xml\", FileMode.Create);   // Create a XML file\n        XmlSerializer sObj = new XmlSerializer(typeof(DataSet));\n        sObj.Serialize(fObj, s);  //Serialization of a DataSet\n        fObj.Close();\n    }\n} In the above given example, the database name is employee and, the table name is emp. The data in a DataSet will be serialized and stored in a demo.xml file by using Serialize() method.",
        "reference": "interviewbit.com",
        "role": "ado-net"
    },
    {
        "question": "15. Give an example code to fill the GridView by using the object of DataTable during runtime.",
        "answer": "using System;\nusing System.Data;\n\npublic partial class Default : System.Web.UI.Page\n{\n     protected void Page_Load(object sender, EventArgs e)\n     {\n          GridView gridView1=new GridView();       //Create GridView object\n          DataTable t = new DataTable(\"Employee\"); // Create the table object\n          DataColumn c = new DataColumn();        //Creating table column\n          DataRow r;                             //Instance of row\n          c.ColumnName = \"EmpID\";                //Heading of the coloumn\n          c.DataType = Type.GetType(\"System.Int32\"); //Set the data type of EmpID as an Integer\n          t.Columns.Add(c);                     //Adding a column to data table\n          c = new DataColumn();\n          c.ColumnName = \"EmpName\";\n          c.DataType = Type.GetType(\"System.String\"); //Set the type of EmpName as String\n          t.Columns.Add(c);\n          for (int i = 0; i < 5; i++)         //This code will create 5 rows\n          {\n               r = t.NewRow(); \n               //Add Column values\n               r[\"EmpID\"] = i;\n               r[\"EmpName\"] = \"Employee \" + i;\n               t.Rows.Add(r);\n          }\n          gridView1.DataSource = t;  //Set gridView1 Datasource as DataTable t\n          gridView1.DataBind();         //Bind Datasource to gridview\n     }\n} using System;\nusing System.Data;\n\npublic partial class Default : System.Web.UI.Page\n{\n     protected void Page_Load(object sender, EventArgs e)\n     {\n          GridView gridView1=new GridView();       //Create GridView object\n          DataTable t = new DataTable(\"Employee\"); // Create the table object\n          DataColumn c = new DataColumn();        //Creating table column\n          DataRow r;                             //Instance of row\n          c.ColumnName = \"EmpID\";                //Heading of the coloumn\n          c.DataType = Type.GetType(\"System.Int32\"); //Set the data type of EmpID as an Integer\n          t.Columns.Add(c);                     //Adding a column to data table\n          c = new DataColumn();\n          c.ColumnName = \"EmpName\";\n          c.DataType = Type.GetType(\"System.String\"); //Set the type of EmpName as String\n          t.Columns.Add(c);\n          for (int i = 0; i < 5; i++)         //This code will create 5 rows\n          {\n               r = t.NewRow(); \n               //Add Column values\n               r[\"EmpID\"] = i;\n               r[\"EmpName\"] = \"Employee \" + i;\n               t.Rows.Add(r);\n          }\n          gridView1.DataSource = t;  //Set gridView1 Datasource as DataTable t\n          gridView1.DataBind();         //Bind Datasource to gridview\n     }\n} Output: Output:   Conclusion ADO.NET is a brilliant technology that was developed by Microsoft on the framework of .NET. The primary role and responsibility of ADO.NET technology is to setup a bridge between backend language and your database. A good experience of this technology will be of great use from a development point of view. ADO.NET technology will definitely help in your career growth as it has quite a good scope. Also learning this interesting technology will always be great fun. ADO.NET along with the knowledge of databases will definitely be exceptional from a growth perspective. References References “Microsoft® ADO.NET 4 Step by Step” by Tim Patrick\n“ADO.NET in a nutshell” by Bill Hamilton\nADO.NET Documentation “Microsoft® ADO.NET 4 Step by Step” by Tim Patrick “ADO.NET in a nutshell” by Bill Hamilton ADO.NET Documentation ADO.NET Documentation Useful Resources Useful Resources C# Interview\nASP.NET Interview\nMicrosoft Interview\nSQL Interview\nMVC Interview C# Interview C# Interview ASP.NET Interview ASP.NET Interview Microsoft Interview Microsoft Interview SQL Interview SQL Interview MVC Interview MVC Interview",
        "reference": "interviewbit.com",
        "role": "ado-net"
    }
]