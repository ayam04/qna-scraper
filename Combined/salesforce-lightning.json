[
    {
        "question": "1. What is Salesforce Lightning?",
        "answer": "Salesforce Lightning is an app development framework developed by salesforce.com that simplifies business processes for users.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "2. What is Lightning Framework?",
        "answer": "The Lightning Component Framework is a UI Framework by Salesforce that is used to develop single-page applications for desktop and mobile devices. Lightning Components can be built using two programming models – the Aura Components Model, and the Lightning Web Components Model.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "3. What are the components of Salesforce Lightning?",
        "answer": "Salesforce Lightning includes the following components:\nLightning Component Framework – It is a javascript framework and a collection of general components that allow the development of recyclable components for personalizing the Salesforce1 mobile app and Lightning Experience.\nLightning Experience – It is the new and modern user experience and interface for Salesforce.\nLightning Exchange – It relates to a part of AppExchange, which has over 70 partner components to start the development process.\nLightning Design System – It helps build applications with the look and feel of Lightning Experience but without having to write a single line of CSS.\nVisual Building tools – These relates to drag-and-drop features that enable easy and quick customization and app building.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "4. What is Lightning Experience?",
        "answer": "Lightning Experience is the name for the latest Salesforce desktop application. It has the latest features with advanced UI and speed optimization.\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "5. How are Lightning components built?",
        "answer": "Lightning components are built using two programming models:\nNative Aura Components Model\nAura is a freeware technology that powers the Lightning components. It is a UI framework used for the development of dynamic web apps for mobile and desktop devices. Aura bridges the client and server through partitioned multi-tier component development and uses JavaScript on the client side as well as on the server side. It has a scalable long-lived lifecycle to allow the development of growth-oriented apps.\nAura allows the creation of apps that are not dependent on Salesforce data. Because of this, there is minimal disruption to the daily users. As the programs don’t have to be optimized for each device, Aura allows for more efficiency in development.\nLightning Web Components Model\nThe aspects of Web Components that work well in browsers are supported by Lightning Web Components. It only adds what is necessary to work in all Salesforce-supported browsers. It is a W3C Web Components standard implementation.\nLightning Web Components Framework is a set of advanced lightweight frameworks that are based on the most recent web standards. It’s a reusable code-based document object model element. It can help create sophisticated interfaces without using JS or the creation of a library making it simple and fast to use thus, saving a lot of time and work on the web stack.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "6. What is the use of aura: namespace?",
        "answer": "Aura: namespace comprises all the main building blocks to define applications and components.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "7. What are the different types of events of Salesforce Lightning components?",
        "answer": "Following are the three events of Salesforce Lightning components:\nSystem Events: Salesforce fires the system events during the Lightning app lifecycle.\nApplication Event: It follows a traditional publish-subscribe model and is fired from an instance of a component. All the components that provide a handler for the event are notified.\nComponent Event: It is fired from an instance of a component and handled by the component that fired the event or a component in the containment hierarchy that receives the event.\nEnhance your knowledge after going through this blog on Aggregate Query in Salesforce!",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "8. What is Lightning Data Service?",
        "answer": "Lightning data service is used for carrying out basic tasks, such as creating, editing, loading, or deleting a record in a component without Apex code. It handles sharing rules and field-level security. Lightning data service enhances the performance consistency and UI.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "9. What are the component bundles of the Lightning components?",
        "answer": "Following are the component bundles of the Lightning components:\nController: It handles the client-side events\nDocumentation: This component bundle is used for recording the component’s use\nStyle: It includes component style\nRenderer: It contains a component default rendering behavior\nHelper: General logic can be written in this component bundle used by different controller methods to avoid repetition\n\nWatch this Salesforce Lightning tutorial by Intellipaat.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "10. How can we use Lightning components with Salesforce1 Mobile App?",
        "answer": "Lightning Components can be used with the Salesforce1 mobile app by creating a traditional Lightning tab that refers to the component. That tab can be added to the Salesforce1 mobile navigation.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "11. What are the different types of Lightning Record pages, and how are they built?",
        "answer": "Record page, App page, and Homepage are the different types of Lightning record pages and they can be built using Lightning App Builder.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "12. What is Lightning Out?",
        "answer": "Lightning out is used if a component has to be used on the external site. The advantage is that Lightning components can be utilized in a visual force page. It acts as a bridge to surface Lightning components in any remote web container.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "13. How can we utilize a Lightning component on the VisualForce Page?",
        "answer": "Using Lightning Out can help embed the Lightning component on the VisualForce page. It can be achieved in three steps:\nThe Lightning components for the javascript library of visual force must be first inserted into the intended visual force page through the tag.\nA Lightning app that is used for the component dependencies is then generated and pointed.\nFinally, a javascript function needs to be written that creates the component over the page through $Lightning.createComponent().",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "14. What are attributes, and what are the required parameters in the attribute definition?",
        "answer": "Attributes are variables used for storing values. Their definition must include their default, type, name, access, and description values as well as required parameters such as Name and Type for their purpose.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "15. What is the difference between a component event and an application event?",
        "answer": "Component event is used for interaction between the parent and child. The change in the child component can be communicated to the parent component through the component event.\nApplication events are used to send modifications in the component to a wide audience. The components that have registered for this event will get an alert.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "16. Where can we display lightning components?",
        "answer": "You can display lightning components at the following:\nTool Description\nLightning Experience You can display lightning components by using the App Builder in Lightning Experience.\nSalesforce1 Mobile App You can display the lightning in the Salesforce1 Mobile App. You’ll need to create a custom Lightning tab to reference the component. Then you can add the tab in the Mobile Navigation.\nStandalone Lightning App You can create a standalone Lightning app and include the lightning component in it.\nAdd Apps to the Lightning Experience App Launcher Lightning Components apps are available in the App Launcher.\nAdd Apps to Lightning Experience and Salesforce App Navigation Lightning Components tabs can be added to the apps. These will then be displayed in the app’s navigation bar as items.\nLightning App Builder and Community Builder You can display the Lightning Components in template-based communities by using the Community Builder.\nCheck out our Salesforce Interview Questions guide.\n\nIntermediate Salesforce Lightning Interview Questions",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "17. Explain Namespace in the Salesforce Lightning components?",
        "answer": "The Namespace is used to group components together and can be created through an organization. The Lightning components are a part of a namespace. C is the default namespace.\nIf the namespace is created for an organization, then that namespace can be used for the Lightning components.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "18. Where can the Lightning components be used?",
        "answer": "Lightning components can be used in the following places:\nDragging and dropping them in the community builder and Lightning App Builder\nAdding it to the Lightning pages\nStarting it as a quick action\nCreating stand-alone applications",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "19. Differentiate between component events and application events in the context of Salesforce Lightning.",
        "answer": "Component events act as a means of communication between a parent and a child. A change in the child component can be communicated to the parent component using Component Events.\nApplication Events communicate changes in the component to a much bigger audience. All the components that have registered for the event get notified about the change.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "20. Differentiate between Salesforce Classic and Salesforce Lightning.",
        "answer": "Salesforce Lightning provides an enhanced user interface.\nYou need to hire a Salesforce Developer to operate Salesforce Classic, while Salesforce Lightning is much easier to work with.\nWith Lightning, you don’t need Visualforce for every task. \nSalesforce Lightning has more advanced security features than Salesforce Classic.\nLightning provides Einstein (Wave) Analytics Reporting to its users. A feature that is missing from Classic.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "21. What are Component events?",
        "answer": "Components events are the events that child components dismiss, and parent components handle. Component events are used when a value from the child component needs to be sent to the parent component.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "22 What are Application events?",
        "answer": "The application events can be dismissed and handled by any component. It does not require any type of relationship among the components. These components should be a part of one application.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "23. What are the different phases in the application events propagation?",
        "answer": "Capture Phase\nDefault Phase\nBubble Phase",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "24. What is Lightning App Builder?",
        "answer": "The Lightning App Builder is a click-and-point tool used for creating Lightning pages for mobile applications and the Salesforce Lightning Experience. The Lightning pages are built through the Lightning components that are configurable, reusable, and compact. The Lightning App Builder can help build a home page, app page, and record page.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "25. What are bound and unbound expressions?",
        "answer": "Unbound and bound expressions are used to perform data binding. When a child component is called from the parent component, the value can be sent from the attribute of a parent component to a child component attribute.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "26. What are the different types of attributes that can be used for storing the values?",
        "answer": "The following attributes are used for storing values:\nBoolean\nInteger\nString\nDatetime\nDate\nDecimal\nMap\nSet",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "27. What is the importance of the aura: method tag in the Salesforce Lightning?",
        "answer": "The aura: method is used for defining the method within the API of the component. This allows a method to be directly called in the client-side controller of a component instead of handling or dismissing an event.\nThe <aura: method> can help simplify the code that the parent component requires to call a method on the child component.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "28. Explain force: record data.",
        "answer": "The force: record data is a conventional controller of the Lightning component. Operations like deleting, creating, and editing a record can be accomplished through force: record data. It removes and recognizes the replicate request passing to the server if the same record data is requested.\nGo through our Salesforce Lightning Tutorial and prepare for your next interview.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "29. Explain Lightning: navigation.",
        "answer": "Lightning: navigation is used to navigate to a page reference or create a URL from the given page reference. For navigating, the page reference object must be defined. Navigation is possible for the following supported features:\nLightning Component\nRecord Page\nObject Page\nNamed Page\nWeb Page\nKnowledge Article\nRecord Relationship Page\nNavigation Item Page",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "30. What is FlexiPage?",
        "answer": "The metadata related to a Lightning page is portrayed by FlexiPage. The Lightning page portrays an adaptive screen that is made up of regions that include the Lightning components. The Lightning page includes 25 components.\nThe Flexi page is stored as an XML file, and deployed through a deployment tool or Salesforce metadata API. The Lightning pages are referred to as Flexipages in the API.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "31. What is Lightning Locker in Salesforce Lightning?",
        "answer": "The Lightning Locker service is a robust and powerful security architecture for the Lightning components. It enhances security by isolating Lightning components that belong to one namespace from those in a different namespace. It promotes best practices thus, enhancing the supportability of the code by only allowing access to supported APIs and removing access from non-published framework internals.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "32. What is the importance of the implements in the Lightning component?",
        "answer": "Implements are used for referring to the platform interfaces that allow usage of the components in various contexts or grant access to additional context data. A component can use multiple interfaces with the help of implements.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "33. What is the difference between ui:input and lightning:input?",
        "answer": "<ui:input> does not contain Lightning Design System styling, while <Lightning:input> contains",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "34. What is the use of Lightning:recordEditForm?",
        "answer": "In the Lightning:recordEditForm, the Lightning:inputField is used to create the editable fields. Using the Lightning: output field, the read-only information can be displayed.\nLightning:recordEditForm has the following features:\nIt displays the record edit layout to edit a particular record\nIt displays the record to create the layout to create a particular record\nGet your Salesforce Certification from Intellipaat. Enroll now!\n\nAdvanced Salesforce Lightning Interview Questions",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "35. What are an action provider and a value provider?",
        "answer": "Action Provider enables management of actions, events, and handlers related to a component. Value Provider allows usage of component attribute’s values in JavaScript controller and markup controller of the component.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "36. What are Lightning Web Components(LWC)?",
        "answer": "Lightning Web Components make creating Lightning components easy. These traditional HTML elements developed using advanced JavaScript can easily fit together on an array of models that make up any Lightning page, with components being located as desired on its surface.\nDevelopment of LWC requires Salesforce Extensions for Visual Studio Code, and salesforce CLI is used for deploying it from the desired organization.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "37. What is Scratch org?",
        "answer": "Scratch org is an expandable Salesforce org that is used for the purpose of testing and development. It is a source-driven and disposable deployment of Salesforce code and metadata.\nA scratch org is completely configurable, enabling developers to imitate different Salesforce editions that include different features and preferences. The scratch org configuration file can be shared with other team members to carry out development.\nAdditionally, packages can be installed and synthetic or dummy data can be deployed for testing. While its default duration is for seven days, the Scratch org can be created for 30 days after which it is deactivated.\nAlso, Check out our blog on Record Types in Salesforce!",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "38. What is the use of the meta configuration file in the LWC?",
        "answer": "The meta configuration file specifies the metadata values to the components. It will result in an error when changes are pushed if there is no configuration file for the component.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "39. What is the use of Javascript in the LWC?",
        "answer": "Javascript establishes HTML properties behavior.\nIf a function, class, and variable defined in the module needs to be imported, the import statement has to be used\nJavascript files in the LWCs are the ES6 modules and everything declared in the module is local.\nlwc is the core module in Lightning Web Components. The import statement imports LightningElement from the lwc module.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "40. What is the purpose of the force:appHostable interface in the Salesforce Lightning component?",
        "answer": "Within Salesforce mobile app or Lightning component, the force:appHostable interface may be utilized as a custom tab.\nExplore your options for a job with Salesforce by reviewing these top Salesforce Admin Interview Questions and Answers!",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "41. What is the purpose of the Lightning: action override in the Salesforce Lightning Component?",
        "answer": "The Lightning: action override allows a component to be implemented as an override for a standard action. It is possible to override the New, Tab, Edit, and View standard actions on most standard and custom components. It has no effect except when used within Lightning Experience, the Salesforce mobile app, and Experience Builder sites.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "42. What are the tools present in Salesforce Lightning?",
        "answer": "Lightning schema builder: It is a UI tool that is used to create and view fields, objects, and relationships\nLightning Connect: This integration tool makes it simpler for the Force.com app to consume the data from the external source, which compiles to OData spec\nLightning Process Builder: It is a UI tool used for the visualization and creation of automated business processes\nLightning Component Framework: It comprises extensions and components that allow the building of recyclable components, personalization of the Salesforce1 mobile app,  and development of independent apps\nLightning App Builder: It is the latest UI tool that enables the quick building of Lightning apps through components given by the Salesforce platform developers\nCheck out our blog to learn about map class in salesforce!",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "43. How do the capture phase and bubble phase propagate?",
        "answer": "The capture phase propagates from top to bottom while the bubble phase propagates from bottom to top.",
        "reference": "intellipaat.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "1. What are our options for debugging our components?",
        "answer": "There are numerous approaches to component debugging. The simplest and quickest is to use console logging statements to log variables throughout code execution. However, this is a rather limiting technique, and there are far better ways to debug our components. To remove minification and provide clearer error messages, the first step is to enable \"Lightning Debug Mode.\" Additionally, we can utilise our browser's debugging tools to set breakpoints to inspect the precise execution of code within our components, evaluate variables at runtime, and walk through our code to better understand what's going on and figure out what's wrong.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "2. What do you understand about lightning:navigation in the context of Salesforce Lightning?",
        "answer": "For navigating to a page reference or constructing a URL from the given page Reference, we use lightning: navigation. The page reference object must be defined in order to navigate. page Reference is a javascript object that refers to a page and provides a defined structure that specifies the page's type and values.\nWe can access the following features that are supported:  Lightning Component\nNamed Page\nKnowledge Article\nRecord Page\nObject Page\nNavigation Item Page\nWeb Page\nRecord Relationship Page. Lightning Component Named Page Knowledge Article Record Page Object Page Navigation Item Page Web Page Record Relationship Page.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "3. Which interface should you use to retrieve the record's id from the record Detail page?",
        "answer": "We should use the force:hasRecordId interface to retrieve the record’s id from the record detail page. force:hasRecordId",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "4. What are attributes in the context of Salesforce Lightning? What are the parameters that must necessarily be provided?",
        "answer": "Attributes are variables that are used to store values. The name, type, default, description, and access of the attribute are all defined. The aura:attribute> tag is used, which requires the name and type attributes to be filled in. aura:attribute> However, only the parameters name and types are necessarily required.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "5. What are the core principles of the Salesforce Lightning UI?",
        "answer": "Four essential design ideas were used to create the Lightning Experience UI, which SLDS embodies. They are as follows : Clarity: Eliminate ambiguity with clarity. Allow individuals to confidently perceive, comprehend, and act.\nEfficiency: Make workflows more efficient by streamlining and optimising them. Anticipate needs intelligently to help individuals perform better, smarter, and faster.\nConsistency: Applying the same solution to the same situation creates familiarity and strengthens intuition.\nBeauty: Through deliberate and elegant craftsmanship, show respect for people's time and attention. Clarity: Eliminate ambiguity with clarity. Allow individuals to confidently perceive, comprehend, and act. Clarity: Efficiency: Make workflows more efficient by streamlining and optimising them. Anticipate needs intelligently to help individuals perform better, smarter, and faster. Efficiency: Consistency: Applying the same solution to the same situation creates familiarity and strengthens intuition. Consistency: Beauty: Through deliberate and elegant craftsmanship, show respect for people's time and attention. Beauty:",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "6. What are the benefits of using the Aura components programming model?",
        "answer": "Following are the benefits of using the Aura components programming model : Components that come pre-assembled: Comes with a pre-installed collection of components to get you started designing apps right away. You won't have to waste time optimising your apps for various devices because the components will do it for you.\nAn ecosystem with a Variety of Components: Make business-ready components available through the Salesforce app, Lightning Experience, and Communities. Users of the Salesforce app can access your components through the navigation menu. Drag-and-drop components on a Lightning Page in the Lightning App Builder or use Experience Builder to customise Lightning Experiences or Communities. The AppExchange has more components for your organisation. You can also publish and share your components with other users.\nFast Development: It enables teams to work more quickly by providing out-of-the-box components that work on both desktop and mobile platforms. Using components to build an app allows for parallel design, which improves overall development efficiency. Components are encapsulated, and their internals are kept private, but their public shape is visible to component users. This strong separation allows component authors to modify core implementation details while shielding component users from them.\nCross-browser compatibility and device awareness: Apps are responsive and support the most recent browser technology, including HTML5, CSS3, and touch events. Components that come pre-assembled: Comes with a pre-installed collection of components to get you started designing apps right away. You won't have to waste time optimising your apps for various devices because the components will do it for you. Components that come pre-assembled: An ecosystem with a Variety of Components: Make business-ready components available through the Salesforce app, Lightning Experience, and Communities. Users of the Salesforce app can access your components through the navigation menu. Drag-and-drop components on a Lightning Page in the Lightning App Builder or use Experience Builder to customise Lightning Experiences or Communities. The AppExchange has more components for your organisation. You can also publish and share your components with other users. An ecosystem with a Variety of Components: Fast Development: It enables teams to work more quickly by providing out-of-the-box components that work on both desktop and mobile platforms. Using components to build an app allows for parallel design, which improves overall development efficiency. Components are encapsulated, and their internals are kept private, but their public shape is visible to component users. This strong separation allows component authors to modify core implementation details while shielding component users from them. Fast Development: Cross-browser compatibility and device awareness: Apps are responsive and support the most recent browser technology, including HTML5, CSS3, and touch events. Cross-browser compatibility and device awareness:",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "7. What are the benefits of using the Lightning Web Components (LWC) over the Aura components?",
        "answer": "The distinction between the Lightning Web Components and the Aura Components is only visible to those working behind the scenes. However, Salesforce and the community recommend that developers use LWCs when building SPAs for the following reasons: Easy to Learn: LWC takes the form and fills it up using the browser's native web standards. This means that no additional distraction layer, such as Aura Framework or another framework, is required; all we need to build is regular JavaScript.\nHigher Performance: Because performance is vital to deliverability, LWC is likely to render faster than the aura components in the absence of an abstraction layer.\nSites Load Faster: LWC is a lightweight framework that loads built components quickly.\nLess Proprietary, More Standards: Because LWC has built-in browser security features from Web Components Standards, out-of-the-box modification is becoming less common.\nComponents with no/little UI can be written in LWC, and those components can be reused in other components, making them more efficient than static resources.\nEasy to Learn for Developers: There is no need to learn any additional framework in order to construct LWC. As a result, the developers have an easier time.\nSecurity, Testing, and Browser Compatibility are all Improved: Script, CSS, and DOM isolation are better with LWC, and event scope is limited. We have more uniformity in the design of the components with each of these. In addition, LWC provides two-way data binding, which allows us to coordinate how data moves between different components. Easy to Learn: LWC takes the form and fills it up using the browser's native web standards. This means that no additional distraction layer, such as Aura Framework or another framework, is required; all we need to build is regular JavaScript. Easy to Learn: Higher Performance: Because performance is vital to deliverability, LWC is likely to render faster than the aura components in the absence of an abstraction layer. Higher Performance: Sites Load Faster: LWC is a lightweight framework that loads built components quickly. Sites Load Faster: Less Proprietary, More Standards: Because LWC has built-in browser security features from Web Components Standards, out-of-the-box modification is becoming less common. Less Proprietary, More Standards: Components with no/little UI can be written in LWC, and those components can be reused in other components, making them more efficient than static resources. Easy to Learn for Developers: There is no need to learn any additional framework in order to construct LWC. As a result, the developers have an easier time. Easy to Learn for Developers: Security, Testing, and Browser Compatibility are all Improved: Script, CSS, and DOM isolation are better with LWC, and event scope is limited. We have more uniformity in the design of the components with each of these. In addition, LWC provides two-way data binding, which allows us to coordinate how data moves between different components. Security, Testing, and Browser Compatibility are all Improved:",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "8. Explain how the two programming models, the Aura and the Lightning Web Framework coexist together?",
        "answer": "We can mix up the Aura and LWC components. The ultimate parent component is Aura. Auras contain both LWC and Aura components, whereas Lightning Web Components only have their own component.\nIf Aura and LWC components are enclosed within a parent, they can interact in a variety of ways:  Using application and component events to interact directly with the child component.\nReceive data and interact with child component methods and attributes provided through public APIs using JS CustomEvent objects.\nLightning Data Service (LDS) allows both the Aura components and LWC to receive and transfer data. There is currently no communication mechanism between Aura and Lightning web components that are not in the same hierarchy. Using application and component events to interact directly with the child component. Receive data and interact with child component methods and attributes provided through public APIs using JS CustomEvent objects. Lightning Data Service (LDS) allows both the Aura components and LWC to receive and transfer data. There is currently no communication mechanism between Aura and Lightning web components that are not in the same hierarchy.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "9. What are the different sorts of Salesforce Lightning Events?",
        "answer": "There are four types of Salesforce Lightning Events. They are as follows: Salesforce Lightning Events   System Events: The lightning framework fires system events when a component is initialised, rendered, or an attribute value is changed, among other things. The following are the various sorts of Lightning-supported system events:\naura:valueInit: When the component markup is started or loaded but the component page is not yet rendered, this event runs a logic. This is the first time a system event is triggered.\naura:valueRender: When the component page is fully drawn or re-rendered, it runs a logic.\naura:noAccess: When the requested resource has no access authorization, this event runs a logic.\naura:locationChange: When the URL hash part of the URL has been updated, this event runs a logic.\naura:systemError: When an error occurs during the execution of a server-side (apex controller) activity, this event runs a logic.\naura:valueChange: When the value of an aura property is updated, this event runs a logic.\naura:valueDestroy: Runs a logic when a component is destroyed and we want to do some custom cleanup at the same time.\nLightning Application Events from Library: These events are offered by Salesforce Library and can be utilised frequently depending on your needs. However, some of these library events may not be supported simultaneously in a Salesforce app, Lightning Experience, or standalone app. As a result, it's best to use $A.get() to figure out where your component is running, whether it's a Salesforce app with Lightning Experience or a standalone app.\nApplication Events: Application Events assist in the exchange of values between two separate events (without a parent-child relationship). It works in the same way as a broadcast message, in that any device with the receiver turned on can receive the broadcast message transmitted by a single device. It means that any component having an event handler statement can receive the fired event in the case of Application Events.\nComponent Events: To send values from a child component to its parent, component events are required. The event fired by the child components (sender) will be handled by the parent component (receiver). System Events: The lightning framework fires system events when a component is initialised, rendered, or an attribute value is changed, among other things. The following are the various sorts of Lightning-supported system events:\naura:valueInit: When the component markup is started or loaded but the component page is not yet rendered, this event runs a logic. This is the first time a system event is triggered.\naura:valueRender: When the component page is fully drawn or re-rendered, it runs a logic.\naura:noAccess: When the requested resource has no access authorization, this event runs a logic.\naura:locationChange: When the URL hash part of the URL has been updated, this event runs a logic.\naura:systemError: When an error occurs during the execution of a server-side (apex controller) activity, this event runs a logic.\naura:valueChange: When the value of an aura property is updated, this event runs a logic.\naura:valueDestroy: Runs a logic when a component is destroyed and we want to do some custom cleanup at the same time. System Events: aura:valueInit: When the component markup is started or loaded but the component page is not yet rendered, this event runs a logic. This is the first time a system event is triggered.\naura:valueRender: When the component page is fully drawn or re-rendered, it runs a logic.\naura:noAccess: When the requested resource has no access authorization, this event runs a logic.\naura:locationChange: When the URL hash part of the URL has been updated, this event runs a logic.\naura:systemError: When an error occurs during the execution of a server-side (apex controller) activity, this event runs a logic.\naura:valueChange: When the value of an aura property is updated, this event runs a logic.\naura:valueDestroy: Runs a logic when a component is destroyed and we want to do some custom cleanup at the same time. aura:valueInit: When the component markup is started or loaded but the component page is not yet rendered, this event runs a logic. This is the first time a system event is triggered. aura:valueInit: aura:valueRender: When the component page is fully drawn or re-rendered, it runs a logic. aura:valueRender: aura:noAccess: When the requested resource has no access authorization, this event runs a logic. aura:noAccess: aura:locationChange: When the URL hash part of the URL has been updated, this event runs a logic. aura:locationChange: aura:systemError: When an error occurs during the execution of a server-side (apex controller) activity, this event runs a logic. aura:systemError: aura:valueChange: When the value of an aura property is updated, this event runs a logic. aura:valueChange: aura:valueDestroy: Runs a logic when a component is destroyed and we want to do some custom cleanup at the same time. aura:valueDestroy: Lightning Application Events from Library: These events are offered by Salesforce Library and can be utilised frequently depending on your needs. However, some of these library events may not be supported simultaneously in a Salesforce app, Lightning Experience, or standalone app. As a result, it's best to use $A.get() to figure out where your component is running, whether it's a Salesforce app with Lightning Experience or a standalone app. Lightning Application Events from Library: Application Events: Application Events assist in the exchange of values between two separate events (without a parent-child relationship). It works in the same way as a broadcast message, in that any device with the receiver turned on can receive the broadcast message transmitted by a single device. It means that any component having an event handler statement can receive the fired event in the case of Application Events. Application Events: Component Events: To send values from a child component to its parent, component events are required. The event fired by the child components (sender) will be handled by the parent component (receiver). Component Events:",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "10. What do you understand about Lightning Data Service (LDS) in the context of Salesforce Lightning?",
        "answer": "Lightning Data Service (LDS) is used to create, delete, update, and load records in our component without using Apex code. Lightning Data Service is in charge of field-level security and sharing regulations. Lightning Data Service enhances efficiency and user interface consistency while simplifying access to Salesforce data. At its most basic level, Lightning Data Service can be thought of as the Lightning components' version of the Visualforce standard controller. While this statement is exaggerated, it serves to highlight a point. Use Lightning Data Service to access and alter Salesforce data in your components wherever possible. Lightning Data Service   The Lightning Data Service makes data access easier than utilising a server-side Apex controller. Read-only access can be declared explicitly in the markup of your component. Your component's JavaScript controller has nearly the same amount of code for data modification, and you can get rid of the Apex entirely. All of your data access code is condensed inside your component, reducing complexity dramatically. Aside from the coding, Lightning Data Service has other advantages. It is based on highly efficient local storage that is shared by all components that make use of it. Lightning Data Service records are cached and shared between components.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "11. What do you understand about the Salesforce Lightning Design System (SLDS)?",
        "answer": "The Salesforce Lightning Design System (SLDS) allows you to create Lightning Experience-style applications without writing a single line of CSS. SLDS is a CSS framework that allows you to use the icons, colour palettes, and fonts that our designers use to create Lightning Experience.  ",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "12. What are the benefits of using Salesforce Lightning Design System (SLDS)?",
        "answer": "Salesforce Lightning Design System (SLDS) gives you the tools to construct apps that follow Lightning Experience's concepts, design language, and best practices. Salesforce Lightning Design System The following are some of the advantages that make SLDS so beneficial: advantages When enhancing existing functionality or integrating with external systems, gives a unified experience and streamlined workflows.\nPadding and margins are not over-enforced by default.\nIt is updated on a regular basis. As long as you're using the most recent version of SLDS, your pages will be Lightning Experience compliant.\nThe CSS framework includes accessibility.\nIt is compatible with various CSS frameworks, such as Bootstrap.\nVisualforce pages that match the look and feel of the Salesforce mobile app can be created with the Lightning Design System (SLDS). To use SLDS, you'll need to make a few changes to your code and remember a few things. Visualforce programming that uses SLDS, for the most part, works without a hitch.\nOur action, custom, doctype, standard, and utility icons are available in PNG and SVG (individual and sprite map) formats in the Lightning Design System (SLDS). When enhancing existing functionality or integrating with external systems, gives a unified experience and streamlined workflows. Padding and margins are not over-enforced by default. It is updated on a regular basis. As long as you're using the most recent version of SLDS, your pages will be Lightning Experience compliant. The CSS framework includes accessibility. It is compatible with various CSS frameworks, such as Bootstrap. Visualforce pages that match the look and feel of the Salesforce mobile app can be created with the Lightning Design System (SLDS). To use SLDS, you'll need to make a few changes to your code and remember a few things. Visualforce programming that uses SLDS, for the most part, works without a hitch. Our action, custom, doctype, standard, and utility icons are available in PNG and SVG (individual and sprite map) formats in the Lightning Design System (SLDS).",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "13. What is the Salesforce Lightning Experience?",
        "answer": "Salesforce Lightning Experience is a user interface that is modern, fast, and intelligent, and it is built on established Salesforce1 Mobile App technology. To construct modern corporate applications, it integrates the Lightning Designing System (LDS), Lightning App Builder, and Lightning Components. Salesforce Lightning Experience is a next-generation productive user interface for Salesforce.com's sales and supports staff. Salesforce.com has introduced Salesforce1 for mobile applications, as well as two user interfaces for desktop versions of Salesforce traditional and lightning Salesforce. Salesforce Lightning Experience Lightning Experience (or LEX for short) introduces a completely new client-side architecture, departing from the server-side rendering given by its predecessors (Salesforce Classic) and Visualforce. Visualforce UIs can still be used with Lightning Experience for backwards compatibility, but they won't have the same amount of extensibility or visual appeal as custom UIs designed with the Lightning framework.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "14. What are the different programming models that can be used to develop lightning components? Explain them.",
        "answer": "For Lightning components, there are two different programming models. The first is to build out Aura components using the Aura framework, and the second is to use the newer Lightning Web Components (LWC) framework.   Aura Framework: Aura is a user interface framework for creating dynamic web apps for mobile and desktop devices, with a scalable long-lived lifecycle to allow the development of growth-oriented apps. It allows for the creation of partitioned multi-tier components that connect the client and server. Aura, which has been around since 2013, allows developers to create apps that are not dependent on Salesforce data, allowing for minimal disruption to day-to-day customers. Because programs don't have to be optimised for each device, Aura allows for more efficient development.\nLightning Web Components Framework: Lightning Web Components is a W3C Web Components standard implementation. It supports the aspects of Web Components that work well in browsers and only adds what's required to work in all Salesforce-supported browsers. It is a collection of advanced lightweight frameworks based on the most recent web standards. It's a reusable code-based document object model element. It's used to create sophisticated interfaces without the need for JS or the creation of a library. This functionality makes it simple to use and faster, saving developers a lot of time and work on the web stack. Aura Framework: Aura is a user interface framework for creating dynamic web apps for mobile and desktop devices, with a scalable long-lived lifecycle to allow the development of growth-oriented apps. It allows for the creation of partitioned multi-tier components that connect the client and server. Aura, which has been around since 2013, allows developers to create apps that are not dependent on Salesforce data, allowing for minimal disruption to day-to-day customers. Because programs don't have to be optimised for each device, Aura allows for more efficient development. Aura Framework Lightning Web Components Framework: Lightning Web Components is a W3C Web Components standard implementation. It supports the aspects of Web Components that work well in browsers and only adds what's required to work in all Salesforce-supported browsers. It is a collection of advanced lightweight frameworks based on the most recent web standards. It's a reusable code-based document object model element. It's used to create sophisticated interfaces without the need for JS or the creation of a library. This functionality makes it simple to use and faster, saving developers a lot of time and work on the web stack. Lightning Web Components Framework",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "15. What are the different types of component bundles for lightning components?",
        "answer": "A Mark-ups, JavaScript controller, a Helper, a Renderer, and other components make up each Lightning Component (Component Bundle). A screenshot of components in the developer console view is shown below.   The Types of Lightning Component Bundles are as follows: Types Component: Components are required while creating a Lightning app. Using Lightning Components, it holds the mark-up for the app design.\nController: This is a controller that runs on the client's side. A component's events are handled by a client-side controller. Following are the uses of the Controller :\nControllers are required to listen to user events as well as other events such as Component Events and Application Events.\nAllows business logic to be delegated to helper methods.\nDML operations should not be triggered during component initialization. When we do DML in init(), we risk a CSRF (Cross-Site Request Forgery) attack.\nIn the Controller, the DOM is not changed. If we change the DOM in the controller, it will call the renderer method, which will return an error.\nHelper: The server-side controller is known as a Helper. It's typically utilised for server-side activities and data or task processing. A client-side controller or renderer can invoke Helper's java-script function. It's also included in the component set. Because Helper is shared across all components, it allows us to centralise and share functionality between Controllers and Renderers. It also makes it easier to keep the logic in Controllers and Renderers minimal. We must relocate this logic to Helper whenever we need to invoke one controller function from another controller function. Any other JavaScript in the component bundle can call helper functions. When a component runs, Lightning Framework creates a Controller and a Renderer instance for each component, but only creates one copy of the Helper and sends the reference to the Helper into every Controller and Renderer instance.\nRenderer: The client-side controller is the renderer. It's a JavaScript resource that defines all of the component's actions and functions. When an event occurs, it may cause actions to be taken, such as changing data or calling rerender() on impacted components. The rerender() function allows components to update themselves based on other components' updates since they were last rendered. Before adding custom rerendering logic, we usually wish to expand default rerendering by invoking superRerender() from the renderer() function. The rerendering is chained to the components in the body attribute when superRerender() is called.\nStyle: The component's styles are stored in CSS Styles. Click the STYLE button in the Developer Console sidebar to add CSS to a component bundle. Component: Components are required while creating a Lightning app. Using Lightning Components, it holds the mark-up for the app design. Component Controller: This is a controller that runs on the client's side. A component's events are handled by a client-side controller. Following are the uses of the Controller :\nControllers are required to listen to user events as well as other events such as Component Events and Application Events.\nAllows business logic to be delegated to helper methods.\nDML operations should not be triggered during component initialization. When we do DML in init(), we risk a CSRF (Cross-Site Request Forgery) attack.\nIn the Controller, the DOM is not changed. If we change the DOM in the controller, it will call the renderer method, which will return an error. Controller uses Controllers are required to listen to user events as well as other events such as Component Events and Application Events.\nAllows business logic to be delegated to helper methods.\nDML operations should not be triggered during component initialization. When we do DML in init(), we risk a CSRF (Cross-Site Request Forgery) attack.\nIn the Controller, the DOM is not changed. If we change the DOM in the controller, it will call the renderer method, which will return an error. Controllers are required to listen to user events as well as other events such as Component Events and Application Events. Allows business logic to be delegated to helper methods. DML operations should not be triggered during component initialization. When we do DML in init(), we risk a CSRF (Cross-Site Request Forgery) attack. In the Controller, the DOM is not changed. If we change the DOM in the controller, it will call the renderer method, which will return an error. Helper: The server-side controller is known as a Helper. It's typically utilised for server-side activities and data or task processing. A client-side controller or renderer can invoke Helper's java-script function. It's also included in the component set. Because Helper is shared across all components, it allows us to centralise and share functionality between Controllers and Renderers. It also makes it easier to keep the logic in Controllers and Renderers minimal. We must relocate this logic to Helper whenever we need to invoke one controller function from another controller function. Any other JavaScript in the component bundle can call helper functions. When a component runs, Lightning Framework creates a Controller and a Renderer instance for each component, but only creates one copy of the Helper and sends the reference to the Helper into every Controller and Renderer instance. Helper Renderer: The client-side controller is the renderer. It's a JavaScript resource that defines all of the component's actions and functions. When an event occurs, it may cause actions to be taken, such as changing data or calling rerender() on impacted components. The rerender() function allows components to update themselves based on other components' updates since they were last rendered. Before adding custom rerendering logic, we usually wish to expand default rerendering by invoking superRerender() from the renderer() function. The rerendering is chained to the components in the body attribute when superRerender() is called. Renderer Style: The component's styles are stored in CSS Styles. Click the STYLE button in the Developer Console sidebar to add CSS to a component bundle. Style",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "16. Is it possible to link one Lightning component to another?",
        "answer": "Yes, one Lightning component can be included within another Lightning.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "17. What do you understand by bound and unbound expressions in the context of Salesforce Lightning?",
        "answer": "Bound Expression: {!v.str} is the symbol for bound expression. This expression will reflect any changes in the string's value and will also influence the components where it is used, thus we can say the value changes dynamically through this expression.\nUnbound Expression: {#v.str} is the symbol for unbound expression. This expression will not reflect any changes in the string's value; we can argue that the value remains static as a result of this expression. Bound Expression: {!v.str} is the symbol for bound expression. This expression will reflect any changes in the string's value and will also influence the components where it is used, thus we can say the value changes dynamically through this expression. Bound Expression: {!v.str} Unbound Expression: {#v.str} is the symbol for unbound expression. This expression will not reflect any changes in the string's value; we can argue that the value remains static as a result of this expression. Unbound Expression: {#v.str}",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "18. What are the Salesforce constraints on the maximum number of components per app?",
        "answer": "No, there is no restriction to the number of components that can be used in an application.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "19. Is it possible to integrate Lightning with a third-party framework?",
        "answer": "Yes, Lightning may be used in conjunction with other frameworks, such as Angular. Aura components can also be used with a third-party framework. However, a third-party framework cannot be used directly within Lightning Web Components.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "20. Is it possible to use Aura Components with Lightning Web Components and vice versa?",
        "answer": "As it's not feasible to add generic elements to custom components, Aura components can't be used in Lightning Web components (in other words, a parent Lightning Web component can only be made up of Lightning Web components). You can, however, incorporate Lightning Web components into Aura components (i.e. parent Aura components can contain both Aura Components and LWC). They can also deal with one other's events.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "21. What is the purpose of using Lightning's Aura: method Tag?",
        "answer": "The Aura: method tag can be used to specify a component API function. As a result, there's no need to fire and handle a component event, and we may call the method in the component's controller directly from the client. It also makes the code required for a parent component to invoke a method on a child component that is a part of the parent component easier to understand.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "22. Is it possible to use a Lightning component that works with both mobile and desktop interfaces?",
        "answer": "Lightning components, Salesforce1 mobile app, custom standalone apps, and template-based communities may all be used directly in Lightning Experience. The Visualforce page uses Lightning components for use in Salesforce Visualforce communities as well as the conventional environment. So, yes it is possible to use a lightning component that works with both mobile and desktop interfaces.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "1. What do you understand about lightning pages in the context of Salesforce Lightning?",
        "answer": "A Lightning page is a custom layout that you may use to create pages for the Salesforce mobile app or Lightning Experience. Lightning pages are a cross between Visualforce pages and page layouts. Lightning pages, like page layouts, allow you to add custom items to a page. Instead of being fields or Visualforce components, these elements are Lightning components, which provide far more freedom. A Lightning page's structure changes depending on the device it's being viewed on. When you create a page, the template you choose determines how it appears on different devices. The template for the Lightning page divides the page into regions. Lightning pages are made up of Lightning components, which are small, reusable, and adjustable pieces that you can drag and drop into page regions in the Lightning App Builder. A Lightning page can be used to construct an app page that you can add to the navigation bar of a Lightning app, making it visible in both Lightning Experience and the Salesforce mobile apps. An app page allows users to quickly access the most important objects and items in the app.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "2. Explain what is Lightning Out in the context of Salesforce Lightning.",
        "answer": "Lightning Out is a feature that allows Lightning Apps to be extended. It operates as a connector, allowing Lightning Components to be accessed from any external web container. This means you may utilise your Lightning Components on an external site (such as SharePoint or SAP), in a hybrid app built with the Mobile SDK, or even on Heroku or in a Visualforce Page. You may embed Lightning Components in an app across domains and manage interactions between the component and the app directly in the DOM using the Lightning Out JavaScript libraries. Your Lightning Components become substantially more effective with Lightning Out. You can utilise Lightning Components not only in other Lightning Components or Lightning Apps, but you can also expose them in almost any web container, on or off the App Cloud.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "3. Explain how a component event propagates in the context of Salesforce Lightning.",
        "answer": "For component event propagation, the framework offers capture and bubble phases. These phases are similar to DOM handling patterns in that they allow interested components to engage with an event and maybe impact how future handlers behave. The source component is the component that fires an event. The framework enables you to manage the event in stages. These phases provide you with the freedom to decide how to handle the event in your application. The phases are as follows: Capture: The event is caught and passed down to the source component from the application root. A component in the containment hierarchy that receives the captured event can handle the event. From the application root down to the source component that triggered the event, event handlers are called in succession. Any registered handler in this stage can prevent the event from propagating, at which point neither this phase nor the bubble phase will call any additional handlers.\nBubble: The event can be handled by the component that triggered it. The event then propagates up to the application root from the source component. A component in the containment hierarchy that gets the bubbled event can handle the event.\nThe event handlers are called in the order that they were triggered, starting with the source component that fired the event and ending with the application root.\nIn this phase, any registered handler can stop the event from propagating, at which point no more handlers are called. Capture: The event is caught and passed down to the source component from the application root. A component in the containment hierarchy that receives the captured event can handle the event. From the application root down to the source component that triggered the event, event handlers are called in succession. Any registered handler in this stage can prevent the event from propagating, at which point neither this phase nor the bubble phase will call any additional handlers. Capture: Bubble: The event can be handled by the component that triggered it. The event then propagates up to the application root from the source component. A component in the containment hierarchy that gets the bubbled event can handle the event.\nThe event handlers are called in the order that they were triggered, starting with the source component that fired the event and ending with the application root.\nIn this phase, any registered handler can stop the event from propagating, at which point no more handlers are called. Bubble:  ",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "4. Explain how an application event propagates in the context of Salesforce Lighting.",
        "answer": "For the propagation of application events, the framework offers the capture, bubble, and default phases. The capture and bubble phases are similar to DOM handling patterns in that they allow interested components to engage with an event and perhaps impact later handler behaviour. The framework's initial handling behaviour is preserved in the default phase. The source component is the component that fires an event. The framework enables you to manage the event in stages. These phases provide you with the freedom to decide how to handle the event in your application. The phases are as follows: Capture: This phase is the same as that of the component event.\nBubble: This phase is the same as that of the component event.\nDefault: From the root node through its subtree, event handlers are called in a non-deterministic order. The default phase does not follow the same component hierarchy propagation principles as the capture and bubble phases. Application events that affect components in separate sub-trees of your app can be handled using the default phase.\nThe root node defaults to the application root if the event propagation was not stopped in a prior phase. The root node is set to the component whose handler invoked the event.stopPropagation() if it was halted in a previous phase. Capture: This phase is the same as that of the component event. Capture: Bubble: This phase is the same as that of the component event. Bubble: Default: From the root node through its subtree, event handlers are called in a non-deterministic order. The default phase does not follow the same component hierarchy propagation principles as the capture and bubble phases. Application events that affect components in separate sub-trees of your app can be handled using the default phase.\nThe root node defaults to the application root if the event propagation was not stopped in a prior phase. The root node is set to the component whose handler invoked the event.stopPropagation() if it was halted in a previous phase. Default:  event.stopPropagation()",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "5. Differentiate between component events and application events in the context of Salesforce Lightning.",
        "answer": "The following table lists the differences between component events and application events : Component Event Application Event\nThe component that instantiates or contains the component can handle component events. Any component with an event handler is able to handle application events. These events follow the usual publish-subscribe format.\nOnly child components can register component events, which are then handled by the parent component. The application event can be utilised anywhere in the app.\nFor a component event, we utilise the aura:event tag's type=\"COMPONENT\" property. For an application event, we utilise the aura:event tag's type=\"APPLICATION\" property.\nWhen processing component events, the name property in aura:handler must be specified. The name attribute in aura:handler must match the name attribute in the aura:registerEvent tag in the event-firing Child Component. There is no need to give the name attribute in aura:handler when handling application events.\nIn JavaScript, we use cmp.getEvent(\"eventName\") to get an instance of the Component type event. In JavaScript, we acquire an instance of the Application type event by calling $A.get(\"e.myNamespace:myAppEvent\"). Component Event Application Event\nThe component that instantiates or contains the component can handle component events. Any component with an event handler is able to handle application events. These events follow the usual publish-subscribe format.\nOnly child components can register component events, which are then handled by the parent component. The application event can be utilised anywhere in the app.\nFor a component event, we utilise the aura:event tag's type=\"COMPONENT\" property. For an application event, we utilise the aura:event tag's type=\"APPLICATION\" property.\nWhen processing component events, the name property in aura:handler must be specified. The name attribute in aura:handler must match the name attribute in the aura:registerEvent tag in the event-firing Child Component. There is no need to give the name attribute in aura:handler when handling application events.\nIn JavaScript, we use cmp.getEvent(\"eventName\") to get an instance of the Component type event. In JavaScript, we acquire an instance of the Application type event by calling $A.get(\"e.myNamespace:myAppEvent\"). Component Event Application Event Component Event Application Event Component Event Application Event The component that instantiates or contains the component can handle component events. Any component with an event handler is able to handle application events. These events follow the usual publish-subscribe format.\nOnly child components can register component events, which are then handled by the parent component. The application event can be utilised anywhere in the app.\nFor a component event, we utilise the aura:event tag's type=\"COMPONENT\" property. For an application event, we utilise the aura:event tag's type=\"APPLICATION\" property.\nWhen processing component events, the name property in aura:handler must be specified. The name attribute in aura:handler must match the name attribute in the aura:registerEvent tag in the event-firing Child Component. There is no need to give the name attribute in aura:handler when handling application events.\nIn JavaScript, we use cmp.getEvent(\"eventName\") to get an instance of the Component type event. In JavaScript, we acquire an instance of the Application type event by calling $A.get(\"e.myNamespace:myAppEvent\"). The component that instantiates or contains the component can handle component events. Any component with an event handler is able to handle application events. These events follow the usual publish-subscribe format. The component that instantiates or contains the component can handle component events. Any component with an event handler is able to handle application events. These events follow the usual publish-subscribe format. Only child components can register component events, which are then handled by the parent component. The application event can be utilised anywhere in the app. Only child components can register component events, which are then handled by the parent component. The application event can be utilised anywhere in the app. For a component event, we utilise the aura:event tag's type=\"COMPONENT\" property. For an application event, we utilise the aura:event tag's type=\"APPLICATION\" property. For a component event, we utilise the aura:event tag's type=\"COMPONENT\" property. aura:event type=\"COMPONENT\" For an application event, we utilise the aura:event tag's type=\"APPLICATION\" property. aura:event type=\"APPLICATION\" When processing component events, the name property in aura:handler must be specified. The name attribute in aura:handler must match the name attribute in the aura:registerEvent tag in the event-firing Child Component. There is no need to give the name attribute in aura:handler when handling application events. When processing component events, the name property in aura:handler must be specified. The name attribute in aura:handler must match the name attribute in the aura:registerEvent tag in the event-firing Child Component. aura:handler aura:handler aura:registerEvent There is no need to give the name attribute in aura:handler when handling application events. aura:handler In JavaScript, we use cmp.getEvent(\"eventName\") to get an instance of the Component type event. In JavaScript, we acquire an instance of the Application type event by calling $A.get(\"e.myNamespace:myAppEvent\"). In JavaScript, we use cmp.getEvent(\"eventName\") to get an instance of the Component type event. cmp.getEvent(\"eventName\") In JavaScript, we acquire an instance of the Application type event by calling $A.get(\"e.myNamespace:myAppEvent\"). $A.get(\"e.myNamespace:myAppEvent\")",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "6. Differentiate between Salesforce Classic and Salesforce Lightning.",
        "answer": "Salesforce Classic: Salesforce Classic is simply a term used to differentiate between the new and old user interfaces. It's essentially the same stage that we've been using for a long time. With the passage of time, the expectation to learn and adapt grows, and we can more easily discern the gaps between the customer's requirements and the services that they are receiving. It is critical to stay up with advancements, enhancements, and customer requirements during this particularly delicate phase of time innovation. It's also critical to update the user interface to make it easier to use and to keep it up to date with the latest technology. Salesforce Classic: Following are the differences between Salesforce Lightning and Salesforce Classic:   User Experience Improvements: The user interface is one of the most significant differences between Salesforce Classic and Salesforce Lightning. The latter provides a far superior user interface to its users, including features such as drag-and-drop functionality that may be accomplished without the use of any coding. Instead of engaging a Salesforce developer to construct or change a Salesforce page, an admin can quickly rearrange the page components to their preference. In addition, Lightning helps to reduce the requirement for Visualforce for each activity. Any code that is produced during development must be tested before being deployed. In the event that a bug is missed, the code is sent back to the developer to be fixed, and the process begins again. These types of time-consuming activities can be avoided with Salesforce Lightning.\nEnhanced Security: Salesforce Lightning provides a higher level of protection. LockerService, for example, is a feature that allows Lightning components to interact with each other by separating them. This contributes to the platform's protection against harmful data. In Classic mode, there is no such feature.\nPermissions work differently in Salesforce Lightning as well. Users cannot change their assurance levels in-session, for example, from standard to high. They'll have to log out of the Lightning platform and log back in user authentication with a higher level of certainty.\nEinstein (Wave) Analytics: While an improved and upgraded user interface and security are compelling arguments, Salesforce Lightning also gives consumers access to Einstein (Wave) Analytics reports, which the Classic does not. Salesforce Classic reports use common reporting types to create graphs, charts, and lists. These dashboards show to be a terrific solution for capturing a view of crucial indicators when the data is refreshed.\nProgressive platform: Lightning was criticized in its early days due to its transition and compatibility concerns with objects, custom code, and apps. But those days are behind, and the platform has developed to accommodate any custom metadata items, making it much easier for businesses to migrate their existing apps and workflows without having to start from scratch. User Experience Improvements: The user interface is one of the most significant differences between Salesforce Classic and Salesforce Lightning. The latter provides a far superior user interface to its users, including features such as drag-and-drop functionality that may be accomplished without the use of any coding. Instead of engaging a Salesforce developer to construct or change a Salesforce page, an admin can quickly rearrange the page components to their preference. In addition, Lightning helps to reduce the requirement for Visualforce for each activity. Any code that is produced during development must be tested before being deployed. In the event that a bug is missed, the code is sent back to the developer to be fixed, and the process begins again. These types of time-consuming activities can be avoided with Salesforce Lightning. User Experience Improvements: Enhanced Security: Salesforce Lightning provides a higher level of protection. LockerService, for example, is a feature that allows Lightning components to interact with each other by separating them. This contributes to the platform's protection against harmful data. In Classic mode, there is no such feature.\nPermissions work differently in Salesforce Lightning as well. Users cannot change their assurance levels in-session, for example, from standard to high. They'll have to log out of the Lightning platform and log back in user authentication with a higher level of certainty. Enhanced Security:  Einstein (Wave) Analytics: While an improved and upgraded user interface and security are compelling arguments, Salesforce Lightning also gives consumers access to Einstein (Wave) Analytics reports, which the Classic does not. Salesforce Classic reports use common reporting types to create graphs, charts, and lists. These dashboards show to be a terrific solution for capturing a view of crucial indicators when the data is refreshed. Einstein (Wave) Analytics: Progressive platform: Lightning was criticized in its early days due to its transition and compatibility concerns with objects, custom code, and apps. But those days are behind, and the platform has developed to accommodate any custom metadata items, making it much easier for businesses to migrate their existing apps and workflows without having to start from scratch. Progressive platform:",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "7. What is Visualforce? How is Salesforce Lightning different from Visualforce?",
        "answer": "Visualforce: Visualforce is a framework that allows developers to create complex, creative user interfaces that run natively on the Lightning platform. The Visualforce framework provides a tag-based markup language, comparable to HTML, as well as a collection of server-side \"common controllers\" that make doing fundamental database operations like queries and saves a breeze. Each Visualforce tag corresponds to a coarse or fine-grained user interface component, such as a segment of a page, a related list, or a field, in the Visualforce markup language. Developers can attach their own logic with an Apex controller class to control the behaviour of Visualforce components, or they can utilise the same logic that is used in regular Salesforce pages to govern the behaviour of Visualforce components.   The majority of the work is done on the server with Visualforce components. Rather than using the concept of a page as its core unit, Lightning is built from the ground up. Client-side centricity makes Lightning Components more dynamic and mobile friendly.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "8. What are the different types of lightning pages available in Salesforce Lightning?",
        "answer": "Following are the different types of lightning pages available in Salesforce Lightning : App Page: The Salesforce mobile app and Lightning Experience both enable app pages. We can create a home page for a third-party app using an app page, which we can integrate straight into the Salesforce mobile app and Lightning Experience navigation menus. Our users will then have access to an app home page where they can access the most important objects and items fast. To improve the functionality of an app page, we can add global actions. A user can enter call data, create and update records, send email, and start a task using global actions from your app page. When a user opens the Salesforce mobile app and navigates to a Lightning page, the page's activities display in the action bar. Actions display in the highlights panel at the top of the page in Lightning Experience.\nHome Page: Home pages are used to create custom pages with features relevant to specific categories of users, and assign the pages to various apps or app-and-user-profile combinations. Only the Lightning Experience supports custom home pages.\nRecord Page: We can construct a customised version of an object's record page with a record page, adapting it to your users' needs. Lightning Experience and the Salesforce mobile app both enable custom record pages. App Page: The Salesforce mobile app and Lightning Experience both enable app pages. We can create a home page for a third-party app using an app page, which we can integrate straight into the Salesforce mobile app and Lightning Experience navigation menus. Our users will then have access to an app home page where they can access the most important objects and items fast. To improve the functionality of an app page, we can add global actions. A user can enter call data, create and update records, send email, and start a task using global actions from your app page. When a user opens the Salesforce mobile app and navigates to a Lightning page, the page's activities display in the action bar. Actions display in the highlights panel at the top of the page in Lightning Experience. App Page: Home Page: Home pages are used to create custom pages with features relevant to specific categories of users, and assign the pages to various apps or app-and-user-profile combinations. Only the Lightning Experience supports custom home pages. Home Page: Record Page: We can construct a customised version of an object's record page with a record page, adapting it to your users' needs. Lightning Experience and the Salesforce mobile app both enable custom record pages. Record Page:",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "9. What exactly is FlexiPage in the context of Salesforce Lightning?",
        "answer": "The metadata associated with a lightning page is represented by FlexiPage. The lightning page depicts an adaptive screen made up of areas that include the lightning components. There are 25 components on the lightning page. The Flexi page is saved as an XML file and deployed using a deployment tool or metadata API. In the API, lightning pages are referred to as Flexipages.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "10. In the Salesforce Lightning component, what is the difference between force:lightningQuickAction and force:lightningQuickActionWithoutHeader?",
        "answer": "Interface force:lightning - QuickAction allows you to use the component in Lightning Experience or the Salesforce mobile app as a custom action. Component interface shows in a panel with typical action controls, such as a Cancel button, when force:lightningQuickAction is used in a component.\nInterface force:lightningQuickActionWithoutHeader - The component can be used as a custom action in Lightning Experience or the Salesforce mobile app thanks to the force:lightningQuickActionWithoutHeader interface. When force:lightningQuickAction is used in a component, the component interface appears in a panel without any normal action controls, such as a cancel button. Interface force:lightning - QuickAction allows you to use the component in Lightning Experience or the Salesforce mobile app as a custom action. Component interface shows in a panel with typical action controls, such as a Cancel button, when force:lightningQuickAction is used in a component. Interface force:lightning Interface force:lightningQuickActionWithoutHeader - The component can be used as a custom action in Lightning Experience or the Salesforce mobile app thanks to the force:lightningQuickActionWithoutHeader interface. When force:lightningQuickAction is used in a component, the component interface appears in a panel without any normal action controls, such as a cancel button. Interface force:lightningQuickActionWithoutHeader",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "1. What would be the most practical solution for keeping an application up and running while deactivating a specific user?",
        "answer": "You can freeze user accounts to prevent them from working in your business while you undertake the steps to deactivate them. So, until you figure out how to remove this user from the Role hierarchy, you can update the owner of the entries he created/from any location where this user is employed. For this, we can use the FREEZE button on the user record.  If we click the FREEZE button, the user will no longer be able to log in to the application. Changing user accounts in the state does not free up existing user licences for use in your organisation. To release the licence, we must deactivate the user.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "2. We have a regular Controller as well as a Controller Extension. All of the logic is written in a Controller Extension, which may or may not be written in a Custom Controller.",
        "answer": "First and foremost, It is impossible for a Controller Extension to exist on its own. It will be applied to either a standard or a custom controller.  So, keeping the end goal in mind, certain techniques, for example, must be dead in User Mode and sure in System Mode. In this case, using a standard controller with a custom extension is a no-brainer. Wherever the victim is, the normal Controller provides all of the Force.com platform's pre-existing options. However, after we use the normal Controller, all of the Sharing rules, as well as a user's permissions, are revered. So, if this is what we frequently require, we should always choose this type of solution.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "3. Can there be two users with a similar profile? Will a user with two profiles be assigned?",
        "answer": "Profiles confirm the scope of a user's access in a Salesforce org. Because the first portion of the question is so important, Yes. A single profile is issued to a large number of users. A comparable profile will be issued to the entire team. The admin will create a single profile called Sales Profile, which will have access to Leads, Opportunities, Campaigns, Contacts, and other corporate items. This signifies that a similar profile has been assigned to a number of people. If the team leader or manager needs access to additional records or objects, distribution permission sets are created specifically for those users.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "4. Consider the following situation: I have two objects, Obj1 and Obj2, that are not linked to each other. I need to create a Master-Detail Relationship (MDR) between these objects at the moment, but am I able to do so?",
        "answer": "First, choose an object that is a parent object (Master) and a child object (Kid) (Detail). Let's pretend that we've decided that Obj1 will be the Master object and Obj2 will be the Detail object for the time being. First, let's define a Master-Detail relationship.Every child should have a parent. This means that each record in Obj2 must be linked to a parent record in Obj1. In addition, one child will have only one parent. One parent, on the other hand, will have several children. Let us consider that there are already existing records in Obj2. According to the Master-Detail relationship, we must ensure that each record in Obj2 is linked to a record in Obj1. And, in our current condition of affairs, Obj1 and Obj2 are not linked. As a result, we must first create a simple search relation between these two things in order to construct a relationship between them. As a result, we have a tendency to follow the instructions outlined below. We usually create a search box within the child Object Obj2 and inform Obj1 as a parent.\nReplace the price from Obj1 in the search field of all records in Obj2 (Related field)\nWe then have a tendency to change the sphere search to a Master-Detail relationship. We usually create a search box within the child Object Obj2 and inform Obj1 as a parent. Replace the price from Obj1 in the search field of all records in Obj2 (Related field) We then have a tendency to change the sphere search to a Master-Detail relationship.",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "5. How do I create a Many-to-Many Relationship in Salesforce?",
        "answer": "In Salesforce, a Many-to-Many Relationship is also known as a Junction object. The steps to make it are as follows. Create each object that has to be linked together.\nCreate one custom object, also known as a Junction object, that should have Associate in Nursing automotive vehicle number as a unique identifier.\nFor each item, create a pair of Master relationships.\nMake this a connected list on each object. Create each object that has to be linked together. Create one custom object, also known as a Junction object, that should have Associate in Nursing automotive vehicle number as a unique identifier. For each item, create a pair of Master relationships. Make this a connected list on each object. Conclusion Top Product Based Companies\nSalesforce Developer Salary\nMulesoft Interview Questions\nTechnical Interview Questions Top Product Based Companies Top Product Based Companies Salesforce Developer Salary Salesforce Developer Salary Mulesoft Interview Questions Mulesoft Interview Questions Technical Interview Questions Technical Interview Questions",
        "reference": "interviewbit.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "1) What is Salesforce Lightning?",
        "answer": "Salesforce Lightning is a component-based framework developed by Salesforce.com to provide app development. It is designed to simplify business users who are not aware of this technology and typically do not have programming experience.\nSalesforce Lightning consists of a set of tools and technologies behind an important upgrade to the Salesforce1 Platform (now known as App Cloud), the company's mobile app development platform.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "2) What are the most important features of Salesforce Lightning? / What are the most important components that Salesforce Lightning contains?",
        "answer": "Salesforce Lightning contains the following important components:\nExperience: It is a set of modern user interfaces optimized for speed. This includes the Lightning Experience, Salesforce1 Mobile App, and template-based communities.\nLightning Component Framework: This is a JavaScript framework and set of standard components that facilitate us to build reusable components to customize the Lightning Experience, Salesforce1 Mobile App, and template-based communities and build your standalone apps.\nLightning Exchange: It specifies a section of the AppExchange where we can find 70+ partner components to start our development.\nLightning Design System: It specifies the best practices and style guides and modern enterprise UX best practices to build pixel-perfect apps that match the look and feel of the Lightning Experience and Salesforce1 Mobile app.\nVisual Building Tools: It specifies the drag-and-drop technologies for fast and easy app building & customizations. We can use the Lightning App Builder to customize the Lightning Experience and Salesforce1 Mobile app. We can also use the Community Builder to customize template-based communities.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "3) How can we develop Salesforce Lightning components?",
        "answer": "We can develop the Salesforce Lightning components by using the following two programming models:\nADVERTISEMENT\nNative Aura Components model\nLightning web components model",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "4) Is Salesforce Lightning an MVC framework?",
        "answer": "No, Salesforce Lightning is not an MVC framework. Instead, it is a component-based framework.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "5) What do you understand by Lightning experience?",
        "answer": "Lightning experience is the latest Salesforce desktop application, which has the latest features. Lightning experience is developed with an advanced User Interface (UI) and provides a lightning-fast optimized speed.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "6) What are the important tools included in Lightning?",
        "answer": "Following is the list of main tools included in Lightning:\nLightning Component Framework: The set of components and extensions facilitates us to build reusable components, customize the Salesforce1 Mobile App, and build standalone apps.\nLightning App Builder: It is a new UI tool that facilitates us to build extremely fast apps using components provided by Salesforce and platform developers.\nLightning Process Builder: This is a UI tool for visualizing and creating automated business processes.\nLightning Schema Builder: This is also a UI tool used for viewing and creating objects, fields, and relationships.\nLightning Connect: This is an integration tool that makes the Force.com app easily consume data from any external source that conforms to the OData spec.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "7) What is Aura? What is the use of aura: namespace?",
        "answer": "Aura is an open-source freeware technology that powers Lightning Components. The aura: namespace consists of all basic building blocks to define applications and components.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "8) What do you understand about the Aura application bundle?",
        "answer": "The Aura application bundle consists of definitions and their associated resources. The aura definition can be defined as an application, interface, component, and event. The Aura definition bundle element is a folder consisting of definition files opposite the other metadata components. On the other hand, the aura definition bundle component is not a single file. Instead, it is a group of files.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "9) What is the difference between Visualforce Components and Lightning Components?",
        "answer": "The Visualforce components are page-centric, and they complete most of the work on the server. On the other hand, Lightning Components are client-side centric, making them more dynamic and mobile-friendly.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "10) How do the two programming models, the Native Aura Components model, and Lightning web components model, coexist?",
        "answer": "The Native Aura Components model and Lightning, web components model, can be coexisted in the following way:\nThe Native Aura Components model can contain and utilize the Lightning web components model, including communicating via events and component methods. But, the opposite is not true. The Lightning web components model cannot be composed of Aura components, and they can only ever be its parent.\nThe code can also be shared between the Aura Components model and Lightning web components model using an ES Module.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "11) What are the different types of events of Salesforce lightning components?",
        "answer": "Following are the main three different types of events of Salesforce lightning components:\nSystem Events: The system events are fired during the lightning app lifecycle.\nApplication Event: The application event is extended across the lightning application, and then any element that has enrolled for this event will get an alert.\nComponent Event: The component event scope is within itself or the parent component of this event. After that, all the parent components will get an alert.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "12) What are the different component bundles of the lightning components?",
        "answer": "Following is the list of the different component bundles of the lightning components:\nComponent: It specifies the UI for the lightning components.\nController: It contains the client-side controller methods to handle components' events. It is also used to handle client-side events.\nStyle: It consists of the styles for the component.\nHelper: A JavaScript function can be called from any JavaScript code in a component's bundle. We can write a general logic in the helper and use it later in various controller methods to avoid repetition.\nDocument / Documentation: It specifies the description, sample code, and one or multiple references to example components. This component bundle is used for recording the component's use.\nRenderer: The renderer component bundle contains a client-side renderer to override default rendering for a component.\nSVG: It is a custom icon resource for components used in the Lightning App Builder or Community Builder.\nDesign: It consists of the file required for components used in Lightning App Builder, Lightning pages, or Community Builder.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "13) What is the use of Lightning Data Service?",
        "answer": "Following are the main usages of Lightning Data Service:\nLightning Data Service is used for creating, deleting, editing, and loading a record in our component without Apex code.\nIt is used to handle field-level security and sharing rules.\nIt is used to enhance the user interface and performance consistency.\nThe biggest advantage of using Lightning Data Service is that it facilitates us to carry out basic tasks without Apex code.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "14) What do you understand about the Lightning Design System?",
        "answer": "The Lightning Design System provides style guides and modern enterprise UX best practices to build pixel-perfect apps that look great and provide a look and feel of the Lightning Experience and Salesforce1 Mobile app.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "15) What are the different events used in the Salesforce Lightning component?",
        "answer": "Following are the different types of events used in the Salesforce Lightning component:\nApplication Event: The scope of the application event is throughout the lightning App. It sends a notification if any component is registered for this event.\nComponent Event: The scope of this event is within itself or the parent component of this event. It sends a notification for all the components declared within the parent component.\n\nSystem Event: This type of event is fired by Salesforce's system during the lifecycle of the lightning app.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "16) What do you understand by aura definition bundle?",
        "answer": "An aura definition bundle is a specific type of bundle that contains an Aura definition and its related resources. This may be a component, application, event, interface, or a tokens collection. The AuraDefinitionBundle component is a folder that contains definition files. This is not a single file like most other metadata components. Instead, it is a collection of files. Each file represents a resource in a bundle, such as a markup, applications, code files (including controllers and helpers), events, documentation, and interfaces.\nAn aura definition bundle does not have a suffix. The definition files can have one of the following suffixes:\nSuffix Component Type\n.app Application\n.cmp Component\n.design Design\n.evt Event\n.intf Interface\n.js Controller, Helper, or Renderer\n.svg SVG Image\n.css Style\n.auradoc Documentation\n.tokens Tokens collection",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "17) What is Lightning out?",
        "answer": "Lightning out is a process that is used when we want to use our component on the external site. The biggest advantage of lightning out is utilizing lightning components in a visual force page.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "18) What are the key differences between Component Event and Application Event?",
        "answer": "Following is the list of key differences between Component Event and Application Event:\nComponent Event Application Event\nComponent events are used for communication between child and parent. Application events are used to communicate any changes in the component to a broader audience.\nComponent events use bubbling and capture same as used in DOM events. If you make any changes in a child component, it will be communicated to the parent component via component event. If a component is registered for this event in application events, it will get notified.\nComponent events can only be handled by components above them in the containment hierarchy. That's why their usage is localized to the components that need to know about them. Application events are best suitable for things that should be handled at the application level, such as navigating to a specific record. Application events also allow communication between components in separate application parts and have no direct containment relationship.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "19) What are the different types of Lightning Record pages, and how can we build them?",
        "answer": "There are mainly three types of Lightning Record pages:\nRecord page\nApp page\nHome page\nWe can create or build Lightning Record pages by using Lightning App Builder.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "20) What is the use of implements in the lightning component? What are the different interfaces implemented in the lightning component?",
        "answer": "Implements are used to refer to platform interfaces that make components able to be used in different contexts or to grant access to extra context data. A component can implement more than one interface.\nFollowing is the list of all interfaces that can be implemented in lightning component:\nINTERFACE NAMESPACE OWNER\nlightning:actionOverride lightning Salesforce\nlightning:appHomeTemplate lightning Salesforce\nlightning:availableForChatterExtensionComposer lightning Salesforce\nlightning:availableForChatterExtensionRenderer lightning Salesforce\nlightning:availableForFlowActions lightning Salesforce\nlightning:availableForFlowScreens lightning Salesforce\nlightning:backgroundUtilityItem lightning Salesforce\nlightning:hasPageReference lightning Salesforce\nlightning:homeTemplate lightning Salesforce\nlightning:isUrlAddressable lightning Salesforce\nlightning:recordHomeTemplate lightning Salesforce\nlightning:utilityItem lightning Salesforce\naura:rootComponent aura Salesforce\nclients:availableForMailAppAppPage clients Salesforce\nclients:hasEventContext clients Salesforce\nclients:hasItemContext clients Salesforce\nflexipage:availableForAllPageTypes flexipage Salesforce\nflexipage:availableForRecordHome flexipage Salesforce\nforce:appHostable force Salesforce\nforce:hasRecordId force Salesforce\nforce:hasSObjectName force Salesforce\nforce:lightningQuickAction force Salesforce\nforce:lightningQuickActionWithoutHeader force Salesforce\nforceCommunity:availableForAllPageTypes forceCommunity Salesforce\nforceCommunity:layout forceCommunity Salesforce\nforceCommunity:profileMenuInterface forceCommunity Salesforce\nforceCommunity:searchInterface forceCommunity Salesforce\nforceCommunity:themeLayout forceCommunity Salesforce\nlightningcommunity:allowInRelaxedCSP lightningcommunity Salesforce\nlightningsnapin:minimizedUI lightningsnapin Salesforce\nlightningsnapin:prechatUI lightningsnapin Salesforce\nltng:allowGuestAccess ltng Salesforce",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "21) What is the difference between Lightning components and Visualforce components?",
        "answer": "Lightning components are client-side-centric and known for their dynamic, mobile-friendly nature. On the other hand, Visualforce components are page-centric and mainly work on server-based.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "22) What are the attributes, and what are the required parameters in the attribute definition?",
        "answer": "Attributes are the variables that are used for storing the values. We should define the Default, Type, Name, Access, and Description in the attribute definition, although; only Name and Type are the required parameters.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "23) What is Locker service in Salesforce lightning?",
        "answer": "In Salesforce lightning, the Locker service is robust security architecture for the lightning components. This service is used to improve and enhance security by isolating the lightning components which belong to the namespace from the components in the distinct namespace. Locker service follows some practices that enhance the code's maintainability by providing access to the supported APIs.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "24) How can we use a lightning component in the VisualForce Page?",
        "answer": "We can embed the lightning component on the VisualForce page by using Lightning out. We should follow the following three steps to add the lightning component to the VisualForce page:\nFirst, we must insert the lightning components for the JavaScript library of visual force to our intent visual force page through the tag.\nNow, we can generate and point a lightning app that we use for the component dependencies.\nAt last, we have to write a JavaScript function that creates the component over the page through $ Lightning.createComponent().",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "25) What is FlexiPage in Salesforce Lightning?",
        "answer": "FlexiPage is the metadata related to a lightning page. The lightning page specifies an adaptive screen that has several lightning components. It contains 25 components. FlexiPages are stored as XML files and deployed through a deployment tool or metadata API. These lightning pages are referred to as Flexipages in the API.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "26) Are Lightning Components only directed towards mobile apps?",
        "answer": "The Lightning Components are mainly designed with a mobile-first approach, but they have a responsive design that allows them to give the same experience even over the desktop without writing any separate lines of code.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "27) What do you understand by Lightning:navigation?",
        "answer": "The Lightning:navigation is used to navigate to a page reference or create a URL from the given page Reference. We have to define the page reference object for navigating. The page reference is the JavaScript object which references a page, offering a defined structure that explains the type of page and its respective values.\nIt facilitates us to navigate to the following supported features:\nLightning Component\nWeb Page\nObject Page\nRecord Page\nNamed Page\nKnowledge Article\nNavigation Item Page\nRecord Relationship Page",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "28) Which Lightning components parts are server-side and which are client-side?",
        "answer": "The component page acting as a JavaScript controller is on the client-side for the Lightning parts. On the other hand, the server-side acts as an Apex Controller.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "29) What are the different types of attributes that can be used for storing the values?",
        "answer": "Following are the different types of attributes that can be used for storing the values:\nBoolean\nDecimal\nString\nInteger\nDate\nDatetime\nMap\nSet",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "30) Can we integrate Lightning components with another framework like Angular?",
        "answer": "Yes, we can integrate Lightning components with any third-party framework like Angular.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "31) What are the different phases in the application events propagation?",
        "answer": "There are mainly three phases in the application events propagation:\nCapture Phase\nDefault Phase\nBubble Phase",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "32) What is the use of Lightning:recordEditForm?",
        "answer": "In the Lightning:recordEditForm, the Lightning:inputField is used for creating the editable fields. Using the Lightning:output field, we can display the read-only information.\nThe Lightning:recordEditForm contains the following features:\nIt displays the record edit layout to edit a particular record.\nIt can also display the record to create the layout to create a particular record.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "33) Can we make a Lightning Component that can be used in the mobile and desktop user interfaces?",
        "answer": "Yes, we can make a Lightning Component that can be used in the mobile and desktop user interfaces. The Lightning Component specifies an extremely fast experience that is responsive and ready by default and has compatibility in Salesforce1 App. Its responsive nature makes it adjust as per the resolution of the screen size. So, we can use it easily on the desktop without any separate code.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "34) How can we add Aura components to our Visualforce page?",
        "answer": "There are the following three ways that a developer can choose to add the Aura components to the Visualforce page:\nA developer can create a reference to a Lightning app for declaring the component dependencies.\nUse the <apex:includeLightning/> component and add the Lightning component for the Visualforce JavaScript library used in your Visualforce page.\nUse the $Lightning.createComponent() to create the component for a page by writing a JavaScript function.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "35) What is the difference between <ui:input> and <lightning:input>?",
        "answer": "The main difference between <ui:input> and <lightning:input>:\n<ui:input>: It does not contain lightning design system styling.\n<lightning:input>: It contains lightning design system styling.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "36) What is the usage of Aura: method Tag in Lightning?",
        "answer": "The Aura: method tag is mainly used to define component API. After using this tag, we don't need to fire and handle a component event, and it allows us to directly invoke the method in the component's controller on the client-side. It simplifies the code required for a parent component to call a method on a child component that forms a part of the parent component.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "37) Is it possible to create one component for inheriting style/CSS from the parent component, or do we always need to define it in the Salesforce component?",
        "answer": "It is completely possible to create one component for inheriting style/CSS from the parent component. We can inherit styles from parents, and it is not necessary to always define them in the Salesforce component.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "38) What do you understand by an Action provider and a Value provider?",
        "answer": "An Action provider facilitates us to manage the events, actions, and handlers for the component. On the other hand, a Value provider facilitates us to use the component attribute's value in the component JavaScript and markup controller.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "39) Is it possible to include external JavaScript/CSS libraries like jQuery, bootstrap in components?",
        "answer": "Yes, it is possible to include multiple external JavaScript/CSS libraries like JQuery, Bootstrap, custom CSS, and custom JavaScript libraries in our lightning component using a static resource.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "40) How can we get the current record id in the lightning component?",
        "answer": "To get the current record id in the lightning component, we have to add the force:hasRecordId interface to a Lightning component. It makes the component able to assign the ID of the current record. The current record ID is useful if the component is used on a Lightning record page as an object-specific custom action or action override in Lightning Experience or the Salesforce app. This interface doesn't show any effect except when used within Lightning Experience, the Salesforce mobile app, and template-based communities.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "41) What do you understand by Scratch org?",
        "answer": "The Scratch org is an expandable Salesforce org used for testing and development. The Scratch org can be created for 30 days, after which we deactivate the Scratch org. The by default duration of Scratch org is seven days.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "42) What is the use of popup in the lightning component?",
        "answer": "Popup or Modals Boxes display content in a layer above the app. This paradigm is mainly used in cases such as creating or editing a record and various types of messaging and wizards.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "43) What is the purpose of the force:appHostable interface in the Salesforce lightning component?",
        "answer": "The force:appHostable interface is used as a custom tab in the Salesforce lightning component or mobile app.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "44) How can we define the field-level security in the Salesforce lightning components?",
        "answer": "We can use the Lightning:recordEditForm, force: record data, and Lightning: record form to define the field level security.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "45) What are the different global value providers in Salesforce lightning?",
        "answer": "Following are the different global value providers in Salesforce lightning:\n$globalID\n$Label\n$Locale\n$Browser\n$Resource",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "46) How can we display the loading spinner in the lightning component?",
        "answer": "Loading spinners are the CSS indicators we can display while retrieving the data or performing slow calculations. We can use Lightning:spinner that shows the animated spinner image indicating that a request is loading.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    },
    {
        "question": "47: How do the capture phase and bubble phase propagate?",
        "answer": "The capture phase propagates from top to bottom while the bubble phase propagates from bottom to top.",
        "reference": "javatpoint.com",
        "role": "salesforce-lightning"
    }
]