[
    {
        "question": "1) Which is the superclass of all classes in Java?",
        "answer": "The Object class.\nThe Object class is the superclass of all Java classes (except Object) in Java. It is stored in java. lang package.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "2) To check whether the entered string is Palindrome or not?",
        "answer": "TestString.java:\nimport java.util.*;  \npublic class TestString  \n{  \npublic static void main(String args[])  \n{  \nString a, b = \"\";  \nScanner s = new Scanner(System.in);  \nSystem.out.print(\"Enter the string : \");  \na = s.nextLine();  \nint n = a.length();  \nfor(int i = n-1; i >= 0; i--)  \n{  \nb = b + a.charAt(i);  \n}  \nif(a.equalsIgnoreCase(b))  \n{  \nSystem.out.println(\"The string is palindrome\");  \n}  \nelse  \n{  \nSystem.out.println(\"The string is not a palindrome\");  \n}  \n}  \n}  \nOutput:\nEnter the string : asddsa\nThe string is palindrome",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "StringArrangements.java:\nimport java.util.Scanner;  \npublic class StringArrangements {    \n    //Creating a Function to swap the characters of the string  \n    public static String swapString(String a, int i, int j) {    \n        char[] b =a.toCharArray();    \n        char ch;    \n        ch = b[i];    \n        b[i] = b[j];    \n        b[j] = ch;    \n        return String.valueOf(b);    \n    }    \n            public static void main(String[] args)    \n    {    \n        Scanner sc= new Scanner(System.in);  \n        System.out.println(\"Enter String\");  \n        String str=sc.nextLine();  \n        int len =str.length();  \n        System.out.println(\"All the permutations of the string are: \");    \n        generatePermutation(str, 0, len);    \n    }    \n            //Generating different permutations of the string    \n    public static void generatePermutation(String str, int start, int end)    \n    {    \n        //Printing the permutations    \n        if (start == end-1)    \n            System.out.println(str);    \n        else    \n        {    \n            for (int i = start; i < end; i++)    \n            {    \n                //Swapping the string by fixing a character    \n                str = swapString(str,start,i);    \n                //Recursively calling function generatePermutation() for rest of the characters     \n                generatePermutation(str,start+1,end);    \n                //Backtracking and swapping the characters again.    \n                str = swapString(str,start,i);    \n            }    \n        }    \n    }    \n}  \nOutput:\nEnter String\nab\nAll the permutations of the string are: \nab\nba",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "Multithreading is one of the fascinating features of Java that allows concurrent execution of two or more parts of a program for maximum utilization of CPU.\nSome real-life examples of multithreading are as follows:\nADVERTISEMENT\nListening the music while working on any other application like ms office, web browser, etc.\nGaming is one of the best examples of multithreading; we can use different types of weapons and vehicles in our game. These weapons and vehicles or other elements of the games are nothing but a thread.\nRailway ticket reservation system where several customers book tickets at the same time",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "5) Explain Immutable classes in Java with some examples?",
        "answer": "Immutable class means once the object is created, we can not modify its content and state. There are several immutable classes in Java, such as String, Boolean, Byte, Short, Integer, Long, Float, Double, etc.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "6) Write a Java program to print a pyramid star pattern?",
        "answer": "PyramidStarPattern.java:\npublic class PyramidStarPattern    \n{      \npublic static void main(String args[])     \n{      \n//i is used for rows and j for columns        \n//This row will specify the number of rows  \nint i, j, row = 6;          \nfor (i=0; i<row; i++)     \n{    \n//This loop will provide space  \nfor (j=row-i; j>1; j--)     \n{    \nSystem.out.print(\" \");     \n}     \nfor (j=0; j<=i; j++ )     \n{     \n//prints star        \nSystem.out.print(\"* \");     \n}     \n//It will throw the cursor in a new line after printing each line    \nSystem.out.println();     \n}     \n}     \n}  \nOutput:",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "7) How to know whether the linked list is circular or not?",
        "answer": "We can check whether the linked list is circular or not. To check it, we will store the header into any other variable, then start traversing the list; if we get the null on the next part of any node, then the linked list is not circular; otherwise we will check the next node is the same as the stored node or not, if so then the link list is circular.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "8) Is Java pass by value or pass by ref?",
        "answer": "Java is strictly passed by value, not pass by reference. See more.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "9) Is Java compiled or interpreted?",
        "answer": "The Java source code first compiled into a binary byte code using Java compiler, then this byte code runs on the JVM (Java Virtual Machine), which is a software-based interpreter. So Java is considered as both interpreted and compiled.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "SELECT * FROM employees;",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "11) Does Java support Pointers?",
        "answer": "Explicitly Java does not support pointers, but it uses them implicitly. Java uses pointers for the manipulation of object references, but we can not use them externally. The pointer's usage may lead to illegal access of data because pointers show the exact address of the data, and using this address, any modifications can be made to stored values. So, to improve Java's security, the concept of the pointer was removed from it.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "12) Does Java support multiple inheritance?",
        "answer": "Java does not support multiple inheritance instead we can use interfaces to achieve the concept of multiple inheritance. It does not allow multiple inheritance to avoid ambiguity. One of the major examples of ambiguity is the diamond problem that occurs in multiple inheritance.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "13) Explain the difference between Path and ClassPath?",
        "answer": "The Path is used to define the executables(.exe) files, where the system can find them, whereas the classpath is used to specify the location.\nIn Java, we define the path variable to set the path for all Java tools like javac.exe, java.exe, javadoc.exe, and so on, and the classpath is used to set the path for Java classes.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "14) How do you set the Java_Home environment variable in Linux?",
        "answer": "To set up the environment variable in Linux, we need to set up the global config in /etc/profile OR /etc/bash.bashrc file for all users:\n# vi /etc/profile  \nNow, follow the below commands:\nexport PATH=$PATH:/usr/java/jdk1.8./bin  \nNow, save and close the file. After this, we need to activate the path settings immediately. We can do so by executing the below command:\n# source /etc/profile",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "15) What is the full form SQL?",
        "answer": "The full form of SQL is Structured Query Language.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "16) How to write an HQL query?",
        "answer": "String hql = \"Your Query Goes Here\";\nread more about the HQL query.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "17) What is Heap Dump in the Java process, how do you take it?",
        "answer": "A heap dump is a snapshot of all the objects available in the memory in the JVM at the moment. The Heap Dumps are useful for troubleshooting the memory-leak problem in Java applications and optimizing the memory. They have usually stored in a binary format hprof files. We can optimize and analyze these files using different tools like JvisualVM, jhat, etc.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "18) What is the Thread Dump of Java process, how do you take it?",
        "answer": "A Thread dump is a state of all the threads presented in a Java process at the moment. Each thread's state is available with a stack trace. It is useful for diagnosing thread activity problems. Usually, they are written in plain text, so we can save the data of a thread data in a file and analyze them later. There are different tools available in Java, such as jstack and JMC( Java Mission Control), to take the Thread dump of a process.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "OutofMemoryError exception is a memory leak problem in Java. It is thrown when there is insufficient space to allocate an object in the Java heap. In such a scenario, the Java garbage collector cannot make space available to accommodate a new object, and we can not extend the heap further.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "InvocationTargetException is a checked exception, which occurs when we invoke a class using the Method.invoke(). It takes place in the java.lang.reflect.InvocationTargetException class.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "Java Garbage Collection is used to reclaim the unused runtime memory automatically. In Java Garbage Collection, the Garbage stands for unused objects. In other programming languages like C and C++, different functions are used, but, in Java it is performed automatically. Thus, Java provides improved memory management.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "22) Explain the difference between JDBC and JNDI",
        "answer": "JDBC stands for Java Database Connectivity used to interact with the database. Whereas JNDI stands for Java Naming and Directory Interface, is an API that provides naming and directory functionality to Java applications. A Java application will lookup the JNDI to get access the connection to interact with the database.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "23) What is JDBC Connection Pooling?",
        "answer": "The JDBC Connection pooling is a technique that is used to create and manage the collection of JDBC connection objects. The main motive of using the Connection pooling is to maintain the connection object and ensure reusability and improve the Java application's performance.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "?",
        "answer": "The TCP/IP stands for Transmission Control Protocol/ Internet Protocol, and the UDP stands for User Datagram Protocol. The TCP/IP is responsible for defining the connection of a system and web connectivity. In comparison, the UDP protocol is a User Datagram Protocol used for broadcasting and multicasting a network transmission.\nSome key differences between TCP/IP and UDP protocol are as following:\nThe Major difference between TCP and UDP is that TCP is a connection-oriented protocol. On the other hand, the UDP is a connectionless protocol.\nThe UDP is faster than the TCP protocol.\nThe handshake protocols like SYN, ACK, SYN-ACK are used in TCP, while there is no use of handshake protocols in UDP.\nThe TCP protocol performs error checking and creates an error recovery; comparatively, the UDP does not perform error checking, and it discards the erroneous packages.\nThe TCP holds acknowledge segments; comprataively the UDP does not have any acknowledgment segment.\nThe UDP is lightweight, while the TCP is a heavy-weight protocol.\nRead more about TCP vs. UDP.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "",
        "answer": "The TCP/IP model was developed to provide efficient and accurate data transmission between devices. It breaks a message into several small packets to avoid transmission failure in a long size file. In case it encounters a problem during the transmission, it will start sending the packets again from where they break and reassembles the packets at the destination port. Every route can take a different route to reach the destination. Thus, it provides a secure and uninterrupted data transmission.\nRead more about the TCP/ IP protocol.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "How do you find if the server is up and running?",
        "answer": "We can use the telnet command to find the server status.\nRead more about telnet command.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "27) What is Deadlock?",
        "answer": "The Deadlock in Java occurs in multithreading. It is a situation when the first thread is waiting for an object lock that is acquired by the second thread, while the second thread is waiting for the object lock that is held by the first thread. Since both threads are at the waiting state for each other thread to release the lock, this condition in Java is known as the Deadlock.\n\nRead more about the Deadlock in Java.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "28) How do you find if your Java Application has a deadlock?",
        "answer": "The Deadlock in Java is a situation in which two threads are waiting for each other to finish the process and release the lock. Deadlock detection is a complicated process. Usually, we need to restart the applications, but sometimes we may lose our work. So to avoid this problem, we can use some Deadlock detector classes in Java. One of the most used classes to detect the Deadlock is ThreadMXBean class.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "29) What is the Collection in Java?",
        "answer": "The Collection Framework in Java is an architecture to store and manipulate a group of objects. The key advantage of using the Collections in Java is that we can perform an operation on a group of objects. It allows different operations such as insert, delete, search, sort, and update.\nAs the term collection reflects its meaning by its name, it is a single unit of objects. Java collection framework provides several classes and interfaces to deal with different data types. The classes it contains are ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, and Treeset, and the interfaces it contains are Set, List, Queue, Deque.",
        "reference": "javatpoint.com",
        "role": "java-support"
    },
    {
        "question": "30) How to remove duplicates from ArrayList?",
        "answer": "We can remove duplicates from an ArrayList by using the following two methods:\n1) Using HashSet Class: By using the HashSet class, we can remove the duplicate elements from an ArrayList, but the disadvantage of this method is that it does not preserve the insertion order.\n2) Using LinkedHashSet Class: There is an alternative way to remove the duplicate elements from an ArrayList is by using the LinkedHashSet class.\nSummary:\nIn this section, we have discussed the top 30 questions of Java that will be useful for your Java Support Interview. As the Java Support engineer is responsible for dealing with the different SDLC sections, it will be a good practice to have command over other interview questions. Some useful interview questions for Java Support interview process are:\nCore Basic Interview Questions\nJava OOPs Interview Questions\nJava Multithreading Interview Questions\nJava String Interview Questions\nJDBC Interview Questions\nSQL Interview Questions\nHibernate Interview Questions",
        "reference": "javatpoint.com",
        "role": "java-support"
    }
]