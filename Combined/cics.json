[
    {
        "question": "1. How Error Handling is done in CICS?",
        "answer": "CICS provides various mechanisms for error handling to ensure that programs can handle any unexpected errors or exceptions that occur during runtime. Here are some ways in which error handling can be achieved in CICS: Return codes: CICS programs can return various return codes depending on the success or failure of an operation. These return codes can be checked and handled appropriately in the calling program to take corrective action.\nCondition handling: CICS programs can use the EXEC CICS HANDLE ABEND command to handle abnormal termination (ABEND) conditions that occur during runtime. This command allows the program to take corrective action when an unexpected exception occurs.\nRecovery routines: CICS programs can define recovery routines that can be executed when an error occurs. These recovery routines can be used to take corrective action and retry the operation or to log the error for analysis.\nException handling: CICS programs can use the EXEC CICS HANDLE CONDITION command to handle specific exceptions that may occur during runtime. This command allows the program to take corrective action when a specific exception occurs.\nLogging and tracing: CICS provides various logging and tracing facilities that can be used to track and diagnose errors that occur during runtime. These facilities can be used to identify the root cause of an error and take corrective action. Return codes: CICS programs can return various return codes depending on the success or failure of an operation. These return codes can be checked and handled appropriately in the calling program to take corrective action. Return codes: Condition handling: CICS programs can use the EXEC CICS HANDLE ABEND command to handle abnormal termination (ABEND) conditions that occur during runtime. This command allows the program to take corrective action when an unexpected exception occurs. Condition handling: Recovery routines: CICS programs can define recovery routines that can be executed when an error occurs. These recovery routines can be used to take corrective action and retry the operation or to log the error for analysis. Recovery routines: Exception handling: CICS programs can use the EXEC CICS HANDLE CONDITION command to handle specific exceptions that may occur during runtime. This command allows the program to take corrective action when a specific exception occurs. Exception handling: EXEC CICS HANDLE CONDITION Logging and tracing: CICS provides various logging and tracing facilities that can be used to track and diagnose errors that occur during runtime. These facilities can be used to identify the root cause of an error and take corrective action. Logging and tracing:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "2. What are the different types of DFHMDF present in the CICS Set?",
        "answer": "DFHMDF stands for CICS Map Definition Facility, which is used to define maps for CICS applications. There are different types of DFHMDF present in the CICS set. Each type serves a specific purpose and is used to define various aspects of CICS applications, such as maps, programs, files, and terminals. Below mentioned some of the DFHMDF sets: BMS: Basic Mapping Support. This is the standard format for defining CICS maps.\nPCT: Program Control Table. This is used to define the properties of the CICS program, such as its name and entry point.\nFCT: File Control Table. This is used to define the properties of CICS files, such as the file name, record format, and key length.\nTCT: Terminal Control Table. This is used to define the properties of CICS terminals, such as the terminal type, model, and keyboard layout.\nXCTL: Transient Program Control. This is used to transfer control from one CICS program to another.\nMDT: Map Destination Table. This is used to define the properties of the output destination for a CICS map.\nMCT: Map Conversion Table. This is used to define the properties of the data conversion process for a CICS map. BMS: Basic Mapping Support. This is the standard format for defining CICS maps. BMS PCT: Program Control Table. This is used to define the properties of the CICS program, such as its name and entry point. PCT FCT: File Control Table. This is used to define the properties of CICS files, such as the file name, record format, and key length. FCT TCT: Terminal Control Table. This is used to define the properties of CICS terminals, such as the terminal type, model, and keyboard layout. TCT XCTL: Transient Program Control. This is used to transfer control from one CICS program to another. XCTL MDT: Map Destination Table. This is used to define the properties of the output destination for a CICS map. MDT MCT: Map Conversion Table. This is used to define the properties of the data conversion process for a CICS map. MCT",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "3. What is COMMAREA and explain its benefits.",
        "answer": "COMMAREA stands for Communication Area, which is a shared data area that is used by CICS programs to exchange information with each other. The COMMAREA can be used to pass data between programs that are executed within the same CICS task or between different CICS tasks. Using COMMAREA has several advantages: Using COMMAREA has several advantages: It helps in efficient and fast data exchange between programs without the overhead of writing data to a file or database.\nIt has a standardized format for data exchange between programs that ensures consistent and reliable communication.\nIt allows Dynamic data sharing without the need for pre-defined data structures or file layouts.\nIt reduces I/O overhead which leads to improved performance of the application.\nIt uses Transaction-based processing within a single atomic operation which leads to consistent and accurate data. It helps in efficient and fast data exchange between programs without the overhead of writing data to a file or database. It has a standardized format for data exchange between programs that ensures consistent and reliable communication. It allows Dynamic data sharing without the need for pre-defined data structures or file layouts. It reduces I/O overhead which leads to improved performance of the application. It uses Transaction-based processing within a single atomic operation which leads to consistent and accurate data.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "4. What is CICS?",
        "answer": "CICS full form is (Customer Information Control System). It is a software system that helps organizations manage their day-to-day business operations. Think of it as a central hub that connects various applications and allows them to interact with each other. For example, if you are using an ATM to withdraw money, CICS would be the software that connects the ATM to your bank account and handles the transaction. For example It is a middleware software system developed by IBM that enables multiple applications to run concurrently and communicate with each other in real time. \nIt is used in the mainframe system. CICS mainframe provides a runtime environment for executing business transactions, managing resources, and providing security, scalability, and reliability for the applications it supports. It is a middleware software system developed by IBM that enables multiple applications to run concurrently and communicate with each other in real time. It is used in the mainframe system. CICS mainframe provides a runtime environment for executing business transactions, managing resources, and providing security, scalability, and reliability for the applications it supports.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "5. What is “TransID”? Why is it used and where is it defined?",
        "answer": "Transaction Identifier (TransID) is a short name or identifier that is used to identify a specific CICS transaction program. It is a unique identifier that is used to invoke a specific CICS transaction program and can be thought of as a program name or entry point. Transaction Identifier (TransID) A “TransID” is typically a 4-character alphanumeric string, and is defined in the CICS system definition (CSD) file. When a user initiates a transaction, they specify the Transid of the program they want to execute, and CICS invokes that program. “TransIDs” is used extensively in CICS to initiate transactions and execute transaction programs. They are also used for program-to-program communication, where a program can pass control to another program using its TransID.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "6. How can we read a CSAM File in CICS?",
        "answer": "To read a VSAM file in a CICS program, we can use the following steps: Define the file in the CICS program using a FILE control entry (FCT) in the program's PCT.\nOpen the file using the CICS OPEN command with the appropriate options. The options will depend on the access method required for the VSAM file (like - random, or sequential).\nRead the data from the file using the CICS READ command with the appropriate options. Again, the options will depend on the access method and type of data to be read from the file.\nAfter reading the required data, close the file using the CICS CLOSE command. Define the file in the CICS program using a FILE control entry (FCT) in the program's PCT. Open the file using the CICS OPEN command with the appropriate options. The options will depend on the access method required for the VSAM file (like - random, or sequential). Read the data from the file using the CICS READ command with the appropriate options. Again, the options will depend on the access method and type of data to be read from the file. After reading the required data, close the file using the CICS CLOSE command. Consider the below command for the same: EXEC CICS\n  OPEN\n  FILE(MYVSAMF)\n  RIDFLD(MYKEY)\n  TYPE(EXCI)\n  END-EXEC\n\nEXEC CICS\n  READ\n  FILE(MYVSAMF)\n  INTO(MYDATA)\n  LENGTH(MYLEN)\n  END-EXEC\n\nEXEC CICS\n  CLOSE\n  FILE(MYVSAMF)\n  END-EXEC EXEC CICS\n  OPEN\n  FILE(MYVSAMF)\n  RIDFLD(MYKEY)\n  TYPE(EXCI)\n  END-EXEC\n\nEXEC CICS\n  READ\n  FILE(MYVSAMF)\n  INTO(MYDATA)\n  LENGTH(MYLEN)\n  END-EXEC\n\nEXEC CICS\n  CLOSE\n  FILE(MYVSAMF)\n  END-EXEC",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "7. What is the purpose of the CICS Resource Definition Online (RDO), and how is it used?",
        "answer": "It is a facility that is used to define and manage CICS system resources. The purpose of RDO is to provide a centralized and consistent way to define and manage system resources, such as files, programs, transactions, and terminals. Resource definition: RDO is used to define system resources and their attributes, such as record layouts for files or transaction codes for programs.\nResource maintenance: RDO is used to maintain system resources, such as changing the attributes of a file or deleting a transaction code.\nSecurity: RDO is used to control access to system resources by defining security profiles for users and groups.\nBackup and recovery: RDO is used to manage the backup and recovery of system resources by defining backup and recovery procedures for each resource.\nPerformance monitoring: RDO is used to monitor the performance of system resources by collecting and analyzing performance statistics. Resource definition: RDO is used to define system resources and their attributes, such as record layouts for files or transaction codes for programs. Resource definition: Resource maintenance: RDO is used to maintain system resources, such as changing the attributes of a file or deleting a transaction code. Resource maintenance: Security: RDO is used to control access to system resources by defining security profiles for users and groups. Security: Backup and recovery: RDO is used to manage the backup and recovery of system resources by defining backup and recovery procedures for each resource. Backup and recovery: Performance monitoring: RDO is used to monitor the performance of system resources by collecting and analyzing performance statistics. Performance monitoring: RDO is used through a set of commands and panels that are accessed through the CICS system console or an interactive terminal session. The RDO commands are used to define, modify, and delete system resources, while the RDO panels provide a graphical interface for resource management and monitoring.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "8. What is the difference between a transient and a permanent dataset in CICS?",
        "answer": "Transient Dataset Permanent Dataset\nPurpose Temporary storage for data processing Permanent storage for data retention\nLocation Stored in main storage Stored in secondary storage (like - disk or tape)\nLifespan Exists only for the duration of the transaction Exists until explicitly deleted or the system is shut down\nSize limitations Limited by the amount of available main storage Limited by the amount of available secondary storage\nAccess Directly accessed by programs Accessed through CICS file control\nRecovery Not recoverable in case of system failure Recoverable through backup and restore procedures Transient Dataset Permanent Dataset\nPurpose Temporary storage for data processing Permanent storage for data retention\nLocation Stored in main storage Stored in secondary storage (like - disk or tape)\nLifespan Exists only for the duration of the transaction Exists until explicitly deleted or the system is shut down\nSize limitations Limited by the amount of available main storage Limited by the amount of available secondary storage\nAccess Directly accessed by programs Accessed through CICS file control\nRecovery Not recoverable in case of system failure Recoverable through backup and restore procedures Transient Dataset Permanent Dataset Transient Dataset Permanent Dataset  Transient Dataset Permanent Dataset Purpose Temporary storage for data processing Permanent storage for data retention\nLocation Stored in main storage Stored in secondary storage (like - disk or tape)\nLifespan Exists only for the duration of the transaction Exists until explicitly deleted or the system is shut down\nSize limitations Limited by the amount of available main storage Limited by the amount of available secondary storage\nAccess Directly accessed by programs Accessed through CICS file control\nRecovery Not recoverable in case of system failure Recoverable through backup and restore procedures Purpose Temporary storage for data processing Permanent storage for data retention Purpose Temporary storage for data processing Permanent storage for data retention Location Stored in main storage Stored in secondary storage (like - disk or tape) Location Stored in main storage Stored in secondary storage (like - disk or tape) Lifespan Exists only for the duration of the transaction Exists until explicitly deleted or the system is shut down Lifespan Exists only for the duration of the transaction Exists until explicitly deleted or the system is shut down Size limitations Limited by the amount of available main storage Limited by the amount of available secondary storage Size limitations Limited by the amount of available main storage Limited by the amount of available secondary storage Access Directly accessed by programs Accessed through CICS file control Access Directly accessed by programs Accessed through CICS file control Recovery Not recoverable in case of system failure Recoverable through backup and restore procedures Recovery Not recoverable in case of system failure Recoverable through backup and restore procedures Let’s understand the use case scenario of both datasets. Transient datasets are typically used to hold intermediate results or temporary data that is not needed beyond the current job or program execution. Transient datasets are automatically deleted when the job or program completes or terminates. One common use case for transient datasets is batch processing. \nFor example - a batch job that processes a large amount of data might create temporary datasets to hold intermediate results, such as sorted or filtered data. These temporary datasets can then be passed as input to subsequent steps in the batch job.\nPermanent datasets can be accessed and updated by multiple jobs or programs and can be used for long-term storage of important data. A common use case for permanent datasets is in storing transactional data, such as customer orders or financial transactions. Transient datasets are typically used to hold intermediate results or temporary data that is not needed beyond the current job or program execution. Transient datasets are automatically deleted when the job or program completes or terminates. One common use case for transient datasets is batch processing. \nFor example - a batch job that processes a large amount of data might create temporary datasets to hold intermediate results, such as sorted or filtered data. These temporary datasets can then be passed as input to subsequent steps in the batch job. Transient datasets For example - a batch job that processes a large amount of data might create temporary datasets to hold intermediate results, such as sorted or filtered data. These temporary datasets can then be passed as input to subsequent steps in the batch job. For example - a batch job that processes a large amount of data might create temporary datasets to hold intermediate results, such as sorted or filtered data. These temporary datasets can then be passed as input to subsequent steps in the batch job. For example Permanent datasets can be accessed and updated by multiple jobs or programs and can be used for long-term storage of important data. A common use case for permanent datasets is in storing transactional data, such as customer orders or financial transactions. Permanent datasets In this scenario, the permanent dataset would be used to store the transactional data for future reference or analysis. Permanent datasets can also be used to store system configuration data, such as application settings or user preferences.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "9. How are transactions processed in CICS?",
        "answer": "There are certain steps followed while the transaction is being processed. The steps are- The user initiates the transaction: A user initiates a transaction by sending a request through a terminal or other input device. The user enters a transaction code, which is associated with a program or set of programs that perform the requested task.\nTransaction identification and routing: The CICS system receives the transaction request and identifies the program or programs that need to be executed. The system also determines the resources, such as files and databases, that the transaction needs to access.\nProgram execution: The CICS system loads and executes the required programs to perform the transaction. The programs perform the requested task, such as updating a file or generating a report.\nResource management: During program execution, the transaction may need to access system resources, such as files or databases. The CICS system manages resource allocation and ensures that the transaction has the necessary permissions to access the resources.\nData storage: If the transaction updates data, the CICS system stores the data in temporary storage until the transaction is complete. If the transaction completes successfully, the updated data is written to permanent storage.\nTransaction completion: Once the transaction is complete, the CICS system returns control to the user, and the user receives a response or output based on the requested task The user initiates the transaction: A user initiates a transaction by sending a request through a terminal or other input device. The user enters a transaction code, which is associated with a program or set of programs that perform the requested task. The user initiates the transaction: Transaction identification and routing: The CICS system receives the transaction request and identifies the program or programs that need to be executed. The system also determines the resources, such as files and databases, that the transaction needs to access. Transaction identification and routing: Program execution: The CICS system loads and executes the required programs to perform the transaction. The programs perform the requested task, such as updating a file or generating a report. Program execution: Resource management: During program execution, the transaction may need to access system resources, such as files or databases. The CICS system manages resource allocation and ensures that the transaction has the necessary permissions to access the resources. Resource management: Data storage: If the transaction updates data, the CICS system stores the data in temporary storage until the transaction is complete. If the transaction completes successfully, the updated data is written to permanent storage. Data storage: Transaction completion: Once the transaction is complete, the CICS system returns control to the user, and the user receives a response or output based on the requested task Transaction completion:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "10. Describe CICS Task.",
        "answer": "A CICS task is a logical unit of work initiated by a CICS transaction. It consists of a sequence of program calls and operations that are performed by CICS on behalf of the transaction. Each task has its environment and resources, including program work areas, communication buffers, and system control blocks. Tasks can run in parallel with other tasks within a CICS region and can communicate with each other and exchange data using a variety of techniques. When the task is complete, CICS frees the resources allocated to it and returns control to the transaction.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "11. What is the difference between a program and a transaction in CICS?",
        "answer": "Program: A program in CICS is a set of instructions written in a high-level language, such as COBOL or PL/I. It is compiled, linked, and executed within the CICS environment. A program can perform a specific task, such as updating a file or generating a report.\nTransaction: A transaction in CICS is a logical unit of work that is processed by the system. It represents a user request, such as a query, an update, or a retrieval of information. A transaction is initiated by a user through a terminal or other input device, and it typically involves a sequence of program executions. Program: A program in CICS is a set of instructions written in a high-level language, such as COBOL or PL/I. It is compiled, linked, and executed within the CICS environment. A program can perform a specific task, such as updating a file or generating a report. Program: Transaction: A transaction in CICS is a logical unit of work that is processed by the system. It represents a user request, such as a query, an update, or a retrieval of information. A transaction is initiated by a user through a terminal or other input device, and it typically involves a sequence of program executions. Transaction:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "12. What are the main components of a CICS system?",
        "answer": "A CICS system is composed of several key components that work together to process transactions and manage system resources. Some of the main components are: CICS Region: A CICS region is a logical grouping of CICS resources, including terminals, programs, and files. It is responsible for managing system resources and processing transactions.\nTerminal Control Program (TCP): The TCP manages communication between the CICS system and user terminals. It handles input and output operations, manages screen displays, and processes user requests.\nProgram Control Table (PCT): The PCT is a table that contains information about programs and transactions in the CICS system. It is used to load and execute programs and to manage program flow.\nFile Control Table (FCT): The FCT is a table that contains information about files and datasets in the CICS system. It is used to manage file access and processing, such as reading, writing, and updating files.\nResource Definition Online (RDO): The RDO is a facility that is used to define and manage CICS resources, such as programs, files, and transactions. It allows authorized users to create, modify, and delete resources in the CICS system.\nData Communication System (DCS): The DCS manages communication between the CICS system and other systems or applications. It provides communication protocols, message formatting, and network connectivity.\nCICS Commands: CICS provides a set of commands that are used to manage system resources and perform transactions. These commands are typically entered by users through terminal screens or batch jobs. CICS Region: A CICS region is a logical grouping of CICS resources, including terminals, programs, and files. It is responsible for managing system resources and processing transactions. CICS Region: Terminal Control Program (TCP): The TCP manages communication between the CICS system and user terminals. It handles input and output operations, manages screen displays, and processes user requests. Terminal Control Program (TCP): Program Control Table (PCT): The PCT is a table that contains information about programs and transactions in the CICS system. It is used to load and execute programs and to manage program flow. Program Control Table (PCT): File Control Table (FCT): The FCT is a table that contains information about files and datasets in the CICS system. It is used to manage file access and processing, such as reading, writing, and updating files. File Control Table (FCT): Resource Definition Online (RDO): The RDO is a facility that is used to define and manage CICS resources, such as programs, files, and transactions. It allows authorized users to create, modify, and delete resources in the CICS system. Resource Definition Online (RDO): Data Communication System (DCS): The DCS manages communication between the CICS system and other systems or applications. It provides communication protocols, message formatting, and network connectivity. Data Communication System (DCS): CICS Commands: CICS provides a set of commands that are used to manage system resources and perform transactions. These commands are typically entered by users through terminal screens or batch jobs. CICS Commands:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "13. Difference between PCT (Program Control Table) and FCT (File Control Table)?",
        "answer": "PCT (Program Control Table) FCT (File Control Table)\nIt manages programs and transactions in a CICS system. It manages files and datasets in a CICS system.\nIt contains information about each program or transaction, such as the program name, transaction ID, and load module name. It contains information about each file or dataset, such as the file name, record format, and physical location.\nIt is used by CICS to load and execute programs and transactions and to manage program flow. It is used by CICS to manage file access and processing, such as reading, writing, and updating files.\nIt allows CICS to dynamically load and execute programs, and to maintain program versions and libraries. It allows CICS to manage file access modes, such as read-only, write-only, or update.\nIt can be updated dynamically by authorized users without requiring a system shutdown. It requires a system shutdown to update the FCT.\nThe PCT is typically stored in the main storage (in memory) to improve program execution speed. The FCT is typically stored in auxiliary storage (on disk) to reduce memory usage.\nSuppose you have a CICS application that processes insurance claims.\nThe PCT for this application might contain entries for various programs, such as a program to search for customer information, a program to calculate claim amounts, and a program to update customer records.\nSuppose your insurance claims application needs to access a database of customer records. The FCT for this application might contain an entry for the customer database file, specifying its name, location, and access method (such as VSAM or DB2). PCT (Program Control Table) FCT (File Control Table)\nIt manages programs and transactions in a CICS system. It manages files and datasets in a CICS system.\nIt contains information about each program or transaction, such as the program name, transaction ID, and load module name. It contains information about each file or dataset, such as the file name, record format, and physical location.\nIt is used by CICS to load and execute programs and transactions and to manage program flow. It is used by CICS to manage file access and processing, such as reading, writing, and updating files.\nIt allows CICS to dynamically load and execute programs, and to maintain program versions and libraries. It allows CICS to manage file access modes, such as read-only, write-only, or update.\nIt can be updated dynamically by authorized users without requiring a system shutdown. It requires a system shutdown to update the FCT.\nThe PCT is typically stored in the main storage (in memory) to improve program execution speed. The FCT is typically stored in auxiliary storage (on disk) to reduce memory usage.\nSuppose you have a CICS application that processes insurance claims.\nThe PCT for this application might contain entries for various programs, such as a program to search for customer information, a program to calculate claim amounts, and a program to update customer records.\nSuppose your insurance claims application needs to access a database of customer records. The FCT for this application might contain an entry for the customer database file, specifying its name, location, and access method (such as VSAM or DB2). PCT (Program Control Table) FCT (File Control Table) PCT (Program Control Table) FCT (File Control Table) PCT (Program Control Table) FCT (File Control Table) It manages programs and transactions in a CICS system. It manages files and datasets in a CICS system.\nIt contains information about each program or transaction, such as the program name, transaction ID, and load module name. It contains information about each file or dataset, such as the file name, record format, and physical location.\nIt is used by CICS to load and execute programs and transactions and to manage program flow. It is used by CICS to manage file access and processing, such as reading, writing, and updating files.\nIt allows CICS to dynamically load and execute programs, and to maintain program versions and libraries. It allows CICS to manage file access modes, such as read-only, write-only, or update.\nIt can be updated dynamically by authorized users without requiring a system shutdown. It requires a system shutdown to update the FCT.\nThe PCT is typically stored in the main storage (in memory) to improve program execution speed. The FCT is typically stored in auxiliary storage (on disk) to reduce memory usage.\nSuppose you have a CICS application that processes insurance claims.\nThe PCT for this application might contain entries for various programs, such as a program to search for customer information, a program to calculate claim amounts, and a program to update customer records.\nSuppose your insurance claims application needs to access a database of customer records. The FCT for this application might contain an entry for the customer database file, specifying its name, location, and access method (such as VSAM or DB2). It manages programs and transactions in a CICS system. It manages files and datasets in a CICS system. It manages programs and transactions in a CICS system. It manages files and datasets in a CICS system. It contains information about each program or transaction, such as the program name, transaction ID, and load module name. It contains information about each file or dataset, such as the file name, record format, and physical location. It contains information about each program or transaction, such as the program name, transaction ID, and load module name. It contains information about each file or dataset, such as the file name, record format, and physical location. It is used by CICS to load and execute programs and transactions and to manage program flow. It is used by CICS to manage file access and processing, such as reading, writing, and updating files. It is used by CICS to load and execute programs and transactions and to manage program flow. It is used by CICS to manage file access and processing, such as reading, writing, and updating files. It allows CICS to dynamically load and execute programs, and to maintain program versions and libraries. It allows CICS to manage file access modes, such as read-only, write-only, or update. It allows CICS to dynamically load and execute programs, and to maintain program versions and libraries. It allows CICS to manage file access modes, such as read-only, write-only, or update. It can be updated dynamically by authorized users without requiring a system shutdown. It requires a system shutdown to update the FCT. It can be updated dynamically by authorized users without requiring a system shutdown. It requires a system shutdown to update the FCT. The PCT is typically stored in the main storage (in memory) to improve program execution speed. The FCT is typically stored in auxiliary storage (on disk) to reduce memory usage. The PCT is typically stored in the main storage (in memory) to improve program execution speed. The FCT is typically stored in auxiliary storage (on disk) to reduce memory usage. Suppose you have a CICS application that processes insurance claims.\nThe PCT for this application might contain entries for various programs, such as a program to search for customer information, a program to calculate claim amounts, and a program to update customer records.\nSuppose your insurance claims application needs to access a database of customer records. The FCT for this application might contain an entry for the customer database file, specifying its name, location, and access method (such as VSAM or DB2). Suppose you have a CICS application that processes insurance claims.\nThe PCT for this application might contain entries for various programs, such as a program to search for customer information, a program to calculate claim amounts, and a program to update customer records. Suppose you have a CICS application that processes insurance claims. The PCT for this application might contain entries for various programs, such as a program to search for customer information, a program to calculate claim amounts, and a program to update customer records. Suppose your insurance claims application needs to access a database of customer records. The FCT for this application might contain an entry for the customer database file, specifying its name, location, and access method (such as VSAM or DB2).",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "14. Explain TCT and RCT.",
        "answer": "TCT (Terminal Control Table): The TCT is a table that stores information about each terminal connected to the CICS system. This information includes the terminal device type, device address, and current status. The TCT is used by CICS to manage terminal activity, such as routing transactions to the correct terminal and managing screen displays. When a user initiates a transaction, CICS uses the TCT to determine which terminal the user is using and to route the transaction to that terminal. The TCT also helps to manage terminal resources and ensures that terminals are being used efficiently.\nRCT (Resource Control Table): The RCT is a table that stores information about various resources in the CICS system, such as files, programs, and transactions. This information includes the resource name, status, location, and other details. The RCT is used by CICS to manage resource activity, such as allocating and deallocating resources and coordinating resource sharing between multiple users. For example, if multiple users need to access the same file, the RCT will ensure that the file is locked and that users can access it without conflicts. The RCT also helps to manage system resources and ensures that they are being used efficiently. TCT (Terminal Control Table): The TCT is a table that stores information about each terminal connected to the CICS system. This information includes the terminal device type, device address, and current status. The TCT is used by CICS to manage terminal activity, such as routing transactions to the correct terminal and managing screen displays. When a user initiates a transaction, CICS uses the TCT to determine which terminal the user is using and to route the transaction to that terminal. The TCT also helps to manage terminal resources and ensures that terminals are being used efficiently. TCT (Terminal Control Table): RCT (Resource Control Table): The RCT is a table that stores information about various resources in the CICS system, such as files, programs, and transactions. This information includes the resource name, status, location, and other details. The RCT is used by CICS to manage resource activity, such as allocating and deallocating resources and coordinating resource sharing between multiple users. For example, if multiple users need to access the same file, the RCT will ensure that the file is locked and that users can access it without conflicts. The RCT also helps to manage system resources and ensures that they are being used efficiently. RCT (Resource Control Table): The TCT and RCT work together to manage CICS resources and control terminals. For example, when a user initiates a transaction, CICS uses the TCT to determine which terminal the user is using and to route the transaction to that terminal. CICS then uses the RCT to allocate the necessary resources, such as programs and files, and to coordinate resource sharing between multiple users. For example",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "15. What are the basic functions of CICS?",
        "answer": "Some of the basic functions of CICS include the following: Transaction management: CICS provides facilities to initiate, monitor, and control the execution of transactions, which are the basic units of work in an OLTP system.\nTask management: CICS creates and manages tasks that execute programs, handle input and output, and communicate with other tasks.\nProgram management: CICS provides facilities to load, link, and execute programs written in a variety of programming languages, including COBOL, PL/I, Assembler, and C.\nData management: CICS provides access to various types of data sources, including databases, files, and message queues. CICS also provides facilities to manage data integrity and concurrency.\nCommunications management: CICS provides facilities to manage communication between applications running in different CICS regions or different systems.\nSecurity management: CICS provides facilities to protect data and resources from unauthorized access and control access to CICS transactions and programs.\nSystem management: CICS provides facilities to manage the CICS system itself, including monitoring system performance, managing system resources, and maintaining system availability. Transaction management: CICS provides facilities to initiate, monitor, and control the execution of transactions, which are the basic units of work in an OLTP system. Transaction management: Task management: CICS creates and manages tasks that execute programs, handle input and output, and communicate with other tasks. Task management: Program management: CICS provides facilities to load, link, and execute programs written in a variety of programming languages, including COBOL, PL/I, Assembler, and C. Program management: Data management: CICS provides access to various types of data sources, including databases, files, and message queues. CICS also provides facilities to manage data integrity and concurrency. Data management: Communications management: CICS provides facilities to manage communication between applications running in different CICS regions or different systems. Communications management: Security management: CICS provides facilities to protect data and resources from unauthorized access and control access to CICS transactions and programs. Security management: System management: CICS provides facilities to manage the CICS system itself, including monitoring system performance, managing system resources, and maintaining system availability. System management:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "1. Can you implement a pseudo-conversational program in CICS? Also, Describe some practical examples of how the techniques are used in real-world scenarios.",
        "answer": "Here is the implementation of a pseudo-conversational program in CICS in the COBOL Programming language. IDENTIFICATION DIVISION.\nPROGRAM-ID. PSEUDOCONV.\nENVIRONMENT DIVISION.\nINPUT-OUTPUT SECTION.\nFILE-CONTROL.\n    SELECT MYFILE ASSIGN TO SYSOUT.\n\nDATA DIVISION.\nFILE SECTION.\nFD MYFILE.\n01 MYREC PIC X(80).\n\nWORKING-STORAGE SECTION.\n01 WS-FIELD PIC X(80).\n01 WS-FIRST-TIME VALUE 'Y'.\n01 WS-CONV-IND PIC X(1) VALUE 'N'.\n\nPROCEDURE DIVISION.\nMAIN-PROCEDURE.\n    PERFORM UNTIL WS-CONV-IND = 'X'\n        IF WS-FIRST-TIME = 'Y'\n            DISPLAY 'Enter input:'\n            ACCEPT WS-FIELD\n            MOVE 'N' TO WS-FIRST-TIME\n        ELSE\n            EXEC CICS SEND TEXT='Enter input:' RESPONSE=(WS-FIELD)\n            EXEC CICS RECEIVE MAPSET('MYMAP') MAP('MYMAP') RESPONSE=(WS-FIELD)\n        END-IF\n        EXEC CICS WRITE FILE('MYFILE') FROM(MYREC)\n        EXEC CICS SEND MAP('MYMAP') MAPSET('MYMAP')\n        EVALUATE TRUE\n            WHEN WS-FIELD = 'END' SET WS-CONV-IND TO 'X'\n        END-EVALUATE\n    END-PERFORM.\n    EXEC CICS RETURN. IDENTIFICATION DIVISION.\nPROGRAM-ID. PSEUDOCONV.\nENVIRONMENT DIVISION.\nINPUT-OUTPUT SECTION.\nFILE-CONTROL.\n    SELECT MYFILE ASSIGN TO SYSOUT.\n\nDATA DIVISION.\nFILE SECTION.\nFD MYFILE.\n01 MYREC PIC X(80).\n\nWORKING-STORAGE SECTION.\n01 WS-FIELD PIC X(80).\n01 WS-FIRST-TIME VALUE 'Y'.\n01 WS-CONV-IND PIC X(1) VALUE 'N'.\n\nPROCEDURE DIVISION.\nMAIN-PROCEDURE.\n    PERFORM UNTIL WS-CONV-IND = 'X'\n        IF WS-FIRST-TIME = 'Y'\n            DISPLAY 'Enter input:'\n            ACCEPT WS-FIELD\n            MOVE 'N' TO WS-FIRST-TIME\n        ELSE\n            EXEC CICS SEND TEXT='Enter input:' RESPONSE=(WS-FIELD)\n            EXEC CICS RECEIVE MAPSET('MYMAP') MAP('MYMAP') RESPONSE=(WS-FIELD)\n        END-IF\n        EXEC CICS WRITE FILE('MYFILE') FROM(MYREC)\n        EXEC CICS SEND MAP('MYMAP') MAPSET('MYMAP')\n        EVALUATE TRUE\n            WHEN WS-FIELD = 'END' SET WS-CONV-IND TO 'X'\n        END-EVALUATE\n    END-PERFORM.\n    EXEC CICS RETURN. In this example, the program uses a loop to repeatedly prompt the user for input until they enter 'END'. The program starts by accepting input from the user and writing it into a file. If this is the first iteration of the loop, the program simply accepts input using the ‘ACCEPT’ statement. However, if it is not the first iteration, the program uses ‘EXEC CICS SEND’ and ‘EXEC CICS RECEIVE’ commands to send and receive input using a CICS map. 'END' ‘ACCEPT’ ‘EXEC CICS SEND’ ‘EXEC CICS RECEIVE’ The ‘EVALUATE’ statement is used to check the user's input. If the user enters 'END', the program sets the ‘WS-CONV-IND’ field to 'X', which causes the loop to exit. ‘EVALUATE’ 'END' ‘WS-CONV-IND’ 'X' Pseudo-conversational programming is used in real-world scenarios. Like - Pseudo-conversational programming is used in real-world scenarios. Like - Online Banking: The user may need to perform multiple transactions like -  balance inquiry, fund transfer, and bill payment. So, using pseudo-conversational programming, the system can ask the user to enter each transaction and then return to the main menu after the completion of the transaction. This approach makes sure that the user doesn’t lose any entered data in case of any errors or the case when the system may fail.\nAirline Reservation System: Suppose the user needs to perform multiple tasks like - searching for flights, selecting a seat, booking a ticket, etc. So, pseudo-conversational programming helps here by asking the user for each task and then returning to the main menu after completing each of the tasks. This makes sure that the user doesn’t need to start again if they face any errors in the process. Online Banking: The user may need to perform multiple transactions like -  balance inquiry, fund transfer, and bill payment. So, using pseudo-conversational programming, the system can ask the user to enter each transaction and then return to the main menu after the completion of the transaction. This approach makes sure that the user doesn’t lose any entered data in case of any errors or the case when the system may fail. Online Banking: Airline Reservation System: Suppose the user needs to perform multiple tasks like - searching for flights, selecting a seat, booking a ticket, etc. So, pseudo-conversational programming helps here by asking the user for each task and then returning to the main menu after completing each of the tasks. This makes sure that the user doesn’t need to start again if they face any errors in the process. Airline Reservation System: In both of the above scenarios, pseudo-conventional programming helps the user in a smooth experience when performing multiple tasks. Conclusion CICS is a powerful system used for processing transactions on mainframe computers. During a job interview, you might be asked questions about your experience with CICS, how it works, and how you develop and maintain applications using CICS. Some of the topics that could be discussed during the interview include the CICS commands, how to handle files, designing programs, and ways to improve performance. To prepare for a CICS interview, it's important to review the concepts and best practices related to CICS development. It's also important to know the programming languages and tools used in the job you're applying for. By showing your expertise and ability to think critically about CICS development challenges, you can increase your chances of getting a job in this field.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "2. What is the difference between a program-controlled task and a system-controlled task in CICS? Explain in Detail.",
        "answer": "Feature Program-Controlled Task System-Controlled Task\nWho initiates task execution? The application program initiates execution. CICS initiates execution.\nHow is the task created? Using the START command in the application program. Using the CICS task control facilities, such as transaction initiation or event processing.\nWhen is the task terminated? When the program calls the EXEC CICS RETURN command. When CICS determines that the task has been completed.\nWho controls task execution? The application program controls task execution. CICS controls task execution.\nCan it be dispatched by CICS? No, the application program is responsible for dispatching the task. Yes, CICS can dispatch the task.\nCan it access system resources directly? Yes, the application program can access system resources directly. No, the system-controlled task must request access to system resources through CICS facilities.\nExamples Batch programs that run under CICS. CICS transactions are initiated by users or by events. Feature Program-Controlled Task System-Controlled Task\nWho initiates task execution? The application program initiates execution. CICS initiates execution.\nHow is the task created? Using the START command in the application program. Using the CICS task control facilities, such as transaction initiation or event processing.\nWhen is the task terminated? When the program calls the EXEC CICS RETURN command. When CICS determines that the task has been completed.\nWho controls task execution? The application program controls task execution. CICS controls task execution.\nCan it be dispatched by CICS? No, the application program is responsible for dispatching the task. Yes, CICS can dispatch the task.\nCan it access system resources directly? Yes, the application program can access system resources directly. No, the system-controlled task must request access to system resources through CICS facilities.\nExamples Batch programs that run under CICS. CICS transactions are initiated by users or by events. Feature Program-Controlled Task System-Controlled Task Feature Program-Controlled Task System-Controlled Task Feature Program-Controlled Task System-Controlled Task Who initiates task execution? The application program initiates execution. CICS initiates execution.\nHow is the task created? Using the START command in the application program. Using the CICS task control facilities, such as transaction initiation or event processing.\nWhen is the task terminated? When the program calls the EXEC CICS RETURN command. When CICS determines that the task has been completed.\nWho controls task execution? The application program controls task execution. CICS controls task execution.\nCan it be dispatched by CICS? No, the application program is responsible for dispatching the task. Yes, CICS can dispatch the task.\nCan it access system resources directly? Yes, the application program can access system resources directly. No, the system-controlled task must request access to system resources through CICS facilities.\nExamples Batch programs that run under CICS. CICS transactions are initiated by users or by events. Who initiates task execution? The application program initiates execution. CICS initiates execution. Who initiates task execution? The application program initiates execution. CICS initiates execution. How is the task created? Using the START command in the application program. Using the CICS task control facilities, such as transaction initiation or event processing. How is the task created? Using the START command in the application program. Using the CICS task control facilities, such as transaction initiation or event processing. When is the task terminated? When the program calls the EXEC CICS RETURN command. When CICS determines that the task has been completed. When is the task terminated? When the program calls the EXEC CICS RETURN command. When CICS determines that the task has been completed. Who controls task execution? The application program controls task execution. CICS controls task execution. Who controls task execution? The application program controls task execution. CICS controls task execution. Can it be dispatched by CICS? No, the application program is responsible for dispatching the task. Yes, CICS can dispatch the task. Can it be dispatched by CICS? No, the application program is responsible for dispatching the task. Yes, CICS can dispatch the task. Can it access system resources directly? Yes, the application program can access system resources directly. No, the system-controlled task must request access to system resources through CICS facilities. Can it access system resources directly? Yes, the application program can access system resources directly. No, the system-controlled task must request access to system resources through CICS facilities. Examples Batch programs that run under CICS. CICS transactions are initiated by users or by events. Examples Batch programs that run under CICS. CICS transactions are initiated by users or by events.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "3. List out some points through which you can optimize the CICS performance.",
        "answer": "We can write efficient code using appropriate algorithms and data structures to optimize performance.\nWe can use caching and buffering techniques to minimize the number of I/O operations.\nExcessive use of dynamic memory allocation can lead to performance problems. So we can allocate memory only when necessary and deallocate it as soon as it's no longer needed.\nWe can use appropriate locking strategies and minimize the number of calls to the database.\nWe can adjust system parameters to optimize performance. This includes tuning CICS transaction and region parameters.\nWe can use CICS connection pooling to reduce the overhead of establishing a new connection for each transaction.\nWe can use CICS thread pooling to improve throughput by reusing threads for subsequent requests.\nWe can minimize the use of system resources, such as CPU and storage, to improve performance.\nWe can use caching techniques to reduce database access and improve response time.\nWe can use asynchronous calls instead of synchronous calls where possible to improve response time.\nWe can optimize the network settings to improve performance.\nWe can use CICS monitoring tools to identify bottlenecks and areas for improvement. We can write efficient code using appropriate algorithms and data structures to optimize performance. We can use caching and buffering techniques to minimize the number of I/O operations. Excessive use of dynamic memory allocation can lead to performance problems. So we can allocate memory only when necessary and deallocate it as soon as it's no longer needed. We can use appropriate locking strategies and minimize the number of calls to the database. We can adjust system parameters to optimize performance. This includes tuning CICS transaction and region parameters. We can use CICS connection pooling to reduce the overhead of establishing a new connection for each transaction. We can use CICS thread pooling to improve throughput by reusing threads for subsequent requests. We can minimize the use of system resources, such as CPU and storage, to improve performance. We can use caching techniques to reduce database access and improve response time. We can use asynchronous calls instead of synchronous calls where possible to improve response time. We can optimize the network settings to improve performance. We can use CICS monitoring tools to identify bottlenecks and areas for improvement.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "4. How Dynamic Memory Allocation is Handled in the CICS Program?",
        "answer": "Dynamic memory allocation in CICS programs is typically handled using the CICS dynamic storage allocation services. These services provide a way for programs to dynamically allocate and deallocate memory at runtime. There are several CICS dynamic storage allocation services available, Some of them are - GETMAIN: This service is used to allocate a block of memory of a specified size. The allocated block can then be used by the program for temporary storage.\nFREEMAIN: This service is used to deallocate a block of memory that was previously allocated using GETMAIN. This releases the memory back into the system for reuse.\nPUT and GET: These services are used to allocate and deallocate storage for the duration of a task. PUT is used to allocate storage, while GET is used to deallocate storage.\nEXEC CICS HANDLE CONDITION: This service is used to handle storage violations that may occur during dynamic storage allocation. If a storage violation occurs, the program can use this service to handle the error and take appropriate action. GETMAIN: This service is used to allocate a block of memory of a specified size. The allocated block can then be used by the program for temporary storage. GETMAIN FREEMAIN: This service is used to deallocate a block of memory that was previously allocated using GETMAIN. This releases the memory back into the system for reuse. FREEMAIN: PUT and GET: These services are used to allocate and deallocate storage for the duration of a task. PUT is used to allocate storage, while GET is used to deallocate storage. PUT GET EXEC CICS HANDLE CONDITION: This service is used to handle storage violations that may occur during dynamic storage allocation. If a storage violation occurs, the program can use this service to handle the error and take appropriate action. EXEC CICS HANDLE CONDITION Programs can use these services to allocate memory for variables, tables, and other data structures needed at runtime. The allocated memory can be used for the duration of the program's execution and is automatically deallocated when the program terminates.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "5. How do you ensure data integrity in a CICS program?",
        "answer": "Ensuring data integrity is an important aspect of any application, and CICS provides various mechanisms to maintain the integrity of data in a transactional environment. Here are some ways through which we can ensure data integrity in a CICS program: Use CICS Syncpoints: A Syncpoint is a checkpoint in the transaction where CICS ensures that all updates made to the resources are either committed or rolled back. By using Syncpoints, we can ensure that updates are committed only if all updates are successful, and rolled back if any update fails. This ensures that data is consistent and reliable.\nUse CICS Restart: CICS Restart is a facility that enables a program to recover from failures. By using CICS Restart, we can ensure that updates made to resources are not lost in the event of a failure, such as a system crash or network outage.\nUse CICS journaling: CICS journaling is a facility that records changes made to resources, such as files or databases. By using journaling, we can ensure that changes made to resources can be replayed in the event of a failure, thereby ensuring that data is consistent and reliable.\nUse CICS program-controlled logging: Program-controlled logging is a technique where the program explicitly logs changes made to resources. By using program-controlled logging, we can ensure that changes made to resources are logged in a controlled manner, thereby ensuring data integrity.\nUse CICS Resource Control Table (RCT): The RCT is a facility that enables you to define rules for accessing resources. By using the RCT, we can ensure that only authorized programs can access resources, thereby ensuring data integrity. Use CICS Syncpoints: A Syncpoint is a checkpoint in the transaction where CICS ensures that all updates made to the resources are either committed or rolled back. By using Syncpoints, we can ensure that updates are committed only if all updates are successful, and rolled back if any update fails. This ensures that data is consistent and reliable. Use CICS Syncpoints: Use CICS Restart: CICS Restart is a facility that enables a program to recover from failures. By using CICS Restart, we can ensure that updates made to resources are not lost in the event of a failure, such as a system crash or network outage. Use CICS Restart: Use CICS journaling: CICS journaling is a facility that records changes made to resources, such as files or databases. By using journaling, we can ensure that changes made to resources can be replayed in the event of a failure, thereby ensuring that data is consistent and reliable. Use CICS journaling: Use CICS program-controlled logging: Program-controlled logging is a technique where the program explicitly logs changes made to resources. By using program-controlled logging, we can ensure that changes made to resources are logged in a controlled manner, thereby ensuring data integrity. Use CICS program-controlled logging: Use CICS Resource Control Table (RCT): The RCT is a facility that enables you to define rules for accessing resources. By using the RCT, we can ensure that only authorized programs can access resources, thereby ensuring data integrity. Use CICS Resource Control Table (RCT): These are just a few examples of how we can ensure data integrity in a CICS program. By using a combination of these techniques, we can create a robust and reliable application that ensures data integrity.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "6. What is EIB? Explain in detail. Also, list the information this contains.",
        "answer": "EIB stands for Execution Interface Block, and it is a data structure used by CICS to communicate information between a CICS task and the CICS system. The EIB is available to all CICS programs and contains information about the current task, the transaction, and the environment in which the task is running. CICS programs can access the EIB using the EXEC CICS GET EIB command to retrieve information about the current task and environment. The EIB can also be updated using the EXEC CICS SET EIB command to set values for certain EIB fields. EXEC CICS GET EIB EXEC CICS SET EIB The EIB contains the following information: Task information: This includes the task number, the task type (batch or online), and the transaction code that initiated the task.\nSecurity information: This includes the user ID and the security level of the task.\nDate and time information: This includes the current date and time.\nTerminal information: This includes the terminal ID and the device type of the terminal.\nProgram information: This includes the program name and the program type.\nLanguage environment information: This includes the language environment ID and the associated data. Task information: This includes the task number, the task type (batch or online), and the transaction code that initiated the task. Task information: Security information: This includes the user ID and the security level of the task. Security information: Date and time information: This includes the current date and time. Date and time information: Terminal information: This includes the terminal ID and the device type of the terminal. Terminal information: Program information: This includes the program name and the program type. Program information: Language environment information: This includes the language environment ID and the associated data. Language environment information:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "7. What is the difference between a VSAM KSDS and a VSAM RRDS file? List in detail.",
        "answer": "VSAM KSDS VSAM RRDS\nFull form Key Sequenced Data Set. Relative Record Data Set.\nAccess Method Keyed access method. Relative byte address access method.\nRecord Retrieval Records are retrieved based on the key value. Records are retrieved based on the relative byte address.\nRecord Insertion Records can be inserted in ascending or descending order based on the key value. Records can be inserted at any available slot in the dataset.\nRecord Deletion Records can be deleted using the key value. Records can be deleted based on the relative byte address.\nRecord update Records can be updated using the key value. Records can be updated using the relative byte address.\nData Organization Data is organized based on the key value and stored in ascending or descending order. Data is organized circularly with fixed-length slots.\nIndex The KSDS file has an index component that contains the key values and their corresponding physical addresses. The RRDS file has a free space map that contains information about the available slots.\nEfficiency KSDS files are efficient for the retrieval of individual records using the key value. RRDS files are efficient for the sequential processing of records or retrieval of a range of records.\nPerformance KSDS files provide faster access to individual records, especially when the dataset is large. RRDS files provide better performance for the sequential processing of records or retrieval of a range of records, especially when the dataset is large.\nUsage KSDS files are commonly used for online transaction processing systems. RRDS files are commonly used for batch processing and report generation. VSAM KSDS VSAM RRDS\nFull form Key Sequenced Data Set. Relative Record Data Set.\nAccess Method Keyed access method. Relative byte address access method.\nRecord Retrieval Records are retrieved based on the key value. Records are retrieved based on the relative byte address.\nRecord Insertion Records can be inserted in ascending or descending order based on the key value. Records can be inserted at any available slot in the dataset.\nRecord Deletion Records can be deleted using the key value. Records can be deleted based on the relative byte address.\nRecord update Records can be updated using the key value. Records can be updated using the relative byte address.\nData Organization Data is organized based on the key value and stored in ascending or descending order. Data is organized circularly with fixed-length slots.\nIndex The KSDS file has an index component that contains the key values and their corresponding physical addresses. The RRDS file has a free space map that contains information about the available slots.\nEfficiency KSDS files are efficient for the retrieval of individual records using the key value. RRDS files are efficient for the sequential processing of records or retrieval of a range of records.\nPerformance KSDS files provide faster access to individual records, especially when the dataset is large. RRDS files provide better performance for the sequential processing of records or retrieval of a range of records, especially when the dataset is large.\nUsage KSDS files are commonly used for online transaction processing systems. RRDS files are commonly used for batch processing and report generation. VSAM KSDS VSAM RRDS VSAM KSDS VSAM RRDS  VSAM KSDS VSAM RRDS Full form Key Sequenced Data Set. Relative Record Data Set.\nAccess Method Keyed access method. Relative byte address access method.\nRecord Retrieval Records are retrieved based on the key value. Records are retrieved based on the relative byte address.\nRecord Insertion Records can be inserted in ascending or descending order based on the key value. Records can be inserted at any available slot in the dataset.\nRecord Deletion Records can be deleted using the key value. Records can be deleted based on the relative byte address.\nRecord update Records can be updated using the key value. Records can be updated using the relative byte address.\nData Organization Data is organized based on the key value and stored in ascending or descending order. Data is organized circularly with fixed-length slots.\nIndex The KSDS file has an index component that contains the key values and their corresponding physical addresses. The RRDS file has a free space map that contains information about the available slots.\nEfficiency KSDS files are efficient for the retrieval of individual records using the key value. RRDS files are efficient for the sequential processing of records or retrieval of a range of records.\nPerformance KSDS files provide faster access to individual records, especially when the dataset is large. RRDS files provide better performance for the sequential processing of records or retrieval of a range of records, especially when the dataset is large.\nUsage KSDS files are commonly used for online transaction processing systems. RRDS files are commonly used for batch processing and report generation. Full form Key Sequenced Data Set. Relative Record Data Set. Full form Key Sequenced Data Set. Relative Record Data Set. Access Method Keyed access method. Relative byte address access method. Access Method Keyed access method. Relative byte address access method. Record Retrieval Records are retrieved based on the key value. Records are retrieved based on the relative byte address. Record Retrieval Records are retrieved based on the key value. Records are retrieved based on the relative byte address. Record Insertion Records can be inserted in ascending or descending order based on the key value. Records can be inserted at any available slot in the dataset. Record Insertion Records can be inserted in ascending or descending order based on the key value. Records can be inserted at any available slot in the dataset. Record Deletion Records can be deleted using the key value. Records can be deleted based on the relative byte address. Record Deletion Records can be deleted using the key value. Records can be deleted based on the relative byte address. Record update Records can be updated using the key value. Records can be updated using the relative byte address. Record update Records can be updated using the key value. Records can be updated using the relative byte address. Data Organization Data is organized based on the key value and stored in ascending or descending order. Data is organized circularly with fixed-length slots. Data Organization Data is organized based on the key value and stored in ascending or descending order. Data is organized circularly with fixed-length slots. Index The KSDS file has an index component that contains the key values and their corresponding physical addresses. The RRDS file has a free space map that contains information about the available slots. Index The KSDS file has an index component that contains the key values and their corresponding physical addresses. The RRDS file has a free space map that contains information about the available slots. Efficiency KSDS files are efficient for the retrieval of individual records using the key value. RRDS files are efficient for the sequential processing of records or retrieval of a range of records. Efficiency KSDS files are efficient for the retrieval of individual records using the key value. RRDS files are efficient for the sequential processing of records or retrieval of a range of records. Performance KSDS files provide faster access to individual records, especially when the dataset is large. RRDS files provide better performance for the sequential processing of records or retrieval of a range of records, especially when the dataset is large. Performance KSDS files provide faster access to individual records, especially when the dataset is large. RRDS files provide better performance for the sequential processing of records or retrieval of a range of records, especially when the dataset is large. Usage KSDS files are commonly used for online transaction processing systems. RRDS files are commonly used for batch processing and report generation. Usage KSDS files are commonly used for online transaction processing systems. RRDS files are commonly used for batch processing and report generation.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "8. Explain some of the most commonly used CICS Commands.",
        "answer": "EXEC CICS LINK - This command is used to invoke a program from within another program in the same CICS region.\nEXEC CICS XCTL - This command is used to transfer control from one program to another within the same task.\nEXEC CICS RETURN - This command is used to return control from a program to the program that has been called.\nEXEC CICS SEND - This command is used to send data to another program or terminal.\nEXEC CICS RECEIVE - This command is used to receive data from another program or terminal.\nEXEC CICS READ - This command is used to read data from a file.\nEXEC CICS WRITE - This command is used to write data to a file.\nEXEC CICS START - This command is used to start a task that will run concurrently with the current task.\nEXEC CICS SYNCPOINT - This command is used to synchronize changes made to a database during a transaction.\nEXEC CICS ENDMULTI - This command is used to end a loop that was started with the EXEC CICS DO command.\nEXEC CICS ASKTIME - This command is used to obtain the current date and time from the CICS system clock.\nEXEC CICS ASSIGN - This command is used to assign a value to a field or variable.\nEXEC CICS SET - This command is used to set the value of a system control block or resource.\nEXEC CICS INQUIRE - This command is used to obtain information about a resource or system control block.\nEXEC CICS GETMAIN - This command is used to allocate main storage (i.e. memory) for use by a program.\nEXEC CICS FREEMAIN - This command is used to release the main storage that was allocated using the GETMAIN command.\nEXEC CICS XCTLTRAN - This command is used to transfer control from one task to another within the same CICS region.\nEXEC CICS LINKPGM - This command is used to invoke a program that resides in a different CICS region.\nEXEC CICS RETURNTRANS - This command is used to terminate a transaction and return control to the terminal or application that initiated it.\nEXEC CICS SEND MAP - This command is used to send a screen or map to a terminal. EXEC CICS LINK - This command is used to invoke a program from within another program in the same CICS region. EXEC CICS LINK EXEC CICS XCTL - This command is used to transfer control from one program to another within the same task. EXEC CICS XCTL EXEC CICS RETURN - This command is used to return control from a program to the program that has been called. EXEC CICS RETURN EXEC CICS SEND - This command is used to send data to another program or terminal. EXEC CICS SEND EXEC CICS RECEIVE - This command is used to receive data from another program or terminal. EXEC CICS RECEIVE EXEC CICS READ - This command is used to read data from a file. EXEC CICS READ EXEC CICS WRITE - This command is used to write data to a file. EXEC CICS WRITE EXEC CICS START - This command is used to start a task that will run concurrently with the current task. EXEC CICS START EXEC CICS SYNCPOINT - This command is used to synchronize changes made to a database during a transaction. EXEC CICS SYNCPOINT EXEC CICS ENDMULTI - This command is used to end a loop that was started with the EXEC CICS DO command. EXEC CICS ENDMULTI EXEC CICS ASKTIME - This command is used to obtain the current date and time from the CICS system clock. EXEC CICS ASKTIME EXEC CICS ASSIGN - This command is used to assign a value to a field or variable. EXEC CICS ASSIGN EXEC CICS SET - This command is used to set the value of a system control block or resource. EXEC CICS SET EXEC CICS INQUIRE - This command is used to obtain information about a resource or system control block. EXEC CICS INQUIRE EXEC CICS GETMAIN - This command is used to allocate main storage (i.e. memory) for use by a program. EXEC CICS GETMAIN EXEC CICS FREEMAIN - This command is used to release the main storage that was allocated using the GETMAIN command. EXEC CICS FREEMAIN EXEC CICS XCTLTRAN - This command is used to transfer control from one task to another within the same CICS region. EXEC CICS XCTLTRAN EXEC CICS LINKPGM - This command is used to invoke a program that resides in a different CICS region. EXEC CICS LINKPGM EXEC CICS RETURNTRANS - This command is used to terminate a transaction and return control to the terminal or application that initiated it. EXEC CICS RETURNTRANS EXEC CICS SEND MAP - This command is used to send a screen or map to a terminal. EXEC CICS SEND MAP",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "9. How does CICS differ from other transaction processing systems?",
        "answer": "Most transaction Processing System offers the same, But here are some ways in which CICS differs from other transaction processing systems: Application flexibility: It provides a high degree of application flexibility and has support for multiple programming languages, like - COBOL, PL/I, C, C++, and Assembler. This flexibility makes it easy for developers to write and maintain complex applications that require a variety of programming languages.\nScalability: It is designed to handle large and complex transaction processing environments and can scale to meet the demands of large organizations. It can support thousands of transactions per second and can handle millions of users.\nReliability: It is a highly reliable transaction processing system that offers features such as automatic restart, recovery, and backup. It can recover from system failures and errors quickly and efficiently.\nSecurity: It provides a wide range of security features, like - user authentication, authorization, and encryption. It can also protect against unauthorized access and attacks from external sources.\nIntegration: It provides a wide range of integration capabilities, including support for various messaging systems, databases, and middleware technologies. This integration allows CICS to interact with other systems and applications seamlessly. Application flexibility: It provides a high degree of application flexibility and has support for multiple programming languages, like - COBOL, PL/I, C, C++, and Assembler. This flexibility makes it easy for developers to write and maintain complex applications that require a variety of programming languages. Application flexibility: COBOL, PL/I, C, C++, Assembler Scalability: It is designed to handle large and complex transaction processing environments and can scale to meet the demands of large organizations. It can support thousands of transactions per second and can handle millions of users. Scalability: Reliability: It is a highly reliable transaction processing system that offers features such as automatic restart, recovery, and backup. It can recover from system failures and errors quickly and efficiently. Reliability: Security: It provides a wide range of security features, like - user authentication, authorization, and encryption. It can also protect against unauthorized access and attacks from external sources. Security: Integration: It provides a wide range of integration capabilities, including support for various messaging systems, databases, and middleware technologies. This integration allows CICS to interact with other systems and applications seamlessly. Integration:",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "1. CICS Interview Preparation",
        "answer": "Some tips and tricks to answer questions during your CICS Interview - Know the basics of CICS: Make sure you have a solid understanding of the fundamentals of CICS, including its architecture, programming languages, and tools used in CICS development. Familiarize yourself with the various CICS commands and their usage.\nBe prepared to give specific examples from your experience: Be ready to provide concrete examples of how you have used CICS in your experience. This could include specific programming tasks you have completed, challenges you faced and how you overcame them, and the impact of your work on the organization.\nPractice problem-solving skills: CICS development often involves problem-solving, so it's important to demonstrate your ability to approach and solve complex problems. Be ready to discuss your thought process and methodology when approaching a problem.\nDemonstrate your communication skills: Communication is critical in CICS development, so be prepared to discuss how you have communicated with team members, stakeholders, and customers. This could include discussing how you have documented your work, how you have provided updates on progress, and how you have collaborated with others on projects.\nBe honest about your abilities and show a willingness to learn: It's important, to be honest about your strengths and weaknesses in CICS development. Don't be afraid to admit when you don't know something, but be prepared to show a willingness to learn and grow in your role. Know the basics of CICS: Make sure you have a solid understanding of the fundamentals of CICS, including its architecture, programming languages, and tools used in CICS development. Familiarize yourself with the various CICS commands and their usage. Know the basics of CICS Be prepared to give specific examples from your experience: Be ready to provide concrete examples of how you have used CICS in your experience. This could include specific programming tasks you have completed, challenges you faced and how you overcame them, and the impact of your work on the organization. Be prepared to give specific examples from your experience Practice problem-solving skills: CICS development often involves problem-solving, so it's important to demonstrate your ability to approach and solve complex problems. Be ready to discuss your thought process and methodology when approaching a problem. Practice problem-solving skills Demonstrate your communication skills: Communication is critical in CICS development, so be prepared to discuss how you have communicated with team members, stakeholders, and customers. This could include discussing how you have documented your work, how you have provided updates on progress, and how you have collaborated with others on projects. Demonstrate your communication skills Be honest about your abilities and show a willingness to learn: It's important, to be honest about your strengths and weaknesses in CICS development. Don't be afraid to admit when you don't know something, but be prepared to show a willingness to learn and grow in your role. Be honest about your abilities and show a willingness to learn By following these tips, you can increase your chances of doing well in a CICS interview and landing a job in this field.",
        "reference": "interviewbit.com",
        "role": "cics"
    },
    {
        "question": "1) What is the full form of the term CICS? Why is it used?",
        "answer": "The term CICS is an acronym that stands for Customer Information Control System. This is a type of system control software that controls all the online transactions of the management of IBM and also monitors telecommunications from IBM. The mainframe operating systems of IBM are time-sharing and batch. CICS is a type of processing mainly initiated by using a single request that can also affect one or more objects. The CICS was founded in the year 1969.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "2) What is PPT in the CICS? What does it contain?",
        "answer": "PPT is an acronym that stands for Processing Programming Table. In the CICS, PPT contains important information like a program's name, Mapset names, task use counter, language, size, the main storage address, map, etc.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "3) What is the primary aspect of CICS?",
        "answer": "CICS is mainly used to deal with the execution and development of online applications. The primary aspect of CICS is to provide great accessibility to the database along with the files within the database. It provides a communication channel through the terminal and makes the sending and receiving of formatted data easy.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "4) What is the requirement of an Integrated CICS translator?",
        "answer": "The Integrated CICS translator is mainly used for the following reasons:\nADVERTISEMENT\nADVERTISEMENT\nIf you have to work with a COBOL compiler, you will need it. It works with the Integrated CICS translator when we use it Fromcompiler option.\nWhen the compiler faces CICS statements in the source program, it interfaces with the integrated CICS translator.\nAfter that, the translator takes action on the CICS statements and goes back to the compiler to show what native language statements to generate.\nIn Integrated Translator, there is no restriction as compared to Separate Translator.\nIt can also handle native COBOL and embedded CICS statements in the Source Program.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "5) What is the priority of CICS jobs in an operating system?",
        "answer": "CICS is called a batch job itself and runs on high priority in the operating system.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "6) Which CICS command is used to access the current date and time?",
        "answer": "The ASKTIME CICS command is used to access the current date and time.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "7) What is the difference between call and link in CICS?",
        "answer": "The main difference between call and link in CICS is that in the case of a call, whenever we make changes to the called program, we also need to compile the calling program. In the case of a link, it is not required.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "8) What do you understand by TCT and RCT in CICS?",
        "answer": "The terms TCT and RCT are both used in CICS. TCT is an acronym that stands for Terminal Control Table. It is a compilation of all the respective terminals. On the other hand, RCT stands for Resource Control Table, and it is a compilation of plan names of DB2 along with the transaction identifiers.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "9) What are the attribute values of Skipper and Stopper fields?",
        "answer": "We can use ASKIP for the attribute value of the Skipper field, and for the stopper field, we can use PROT.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "10) What is the difference between PCT and FCT?",
        "answer": "In CICS, PCT is an acronym that stands for Program Control Table. It consists of a complete list of transaction identifiers paired to respective corresponding programs. On the other hand, FCT is also an acronym for File Control Table. It consists of a complete list of all the files that have been used by CICS, along with their status and record length.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "11) Which command is used to release a record on which exclusive control is gained?",
        "answer": "The EXEC CICS UNLOCK END-EXEC command is used to release a record on which exclusive control is gained.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "12) What is the difference between START and XCTL?",
        "answer": "START is a command used to start a new task. It is an interval control command. On the other hand, XCTL is a command used to pass control to a program within the same task. It is a program control command.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "13) What are the BMS options used in CICS?",
        "answer": "The BMS options used in CICS are: Minimum, Standard, and Full.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "14) How can you set the MDT option to 'ON' status, even if data is not entered?",
        "answer": "We can set the MDT option to 'ON' status, even if data is not entered, by mentioning the FSET option in DFHMDF or set it dynamically in the program using the FIELD+A attribute field.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "15) What do you understand by a CICS task?",
        "answer": "A CICS task is a process of one-time execution of a certain CICS transaction. This process starts when we enter a key into the transaction and press the enter key button. The execution process continues until the program returns the control to CICS.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "16) What is the use of the EXEC CICS HANDLE CONDITION command?",
        "answer": "The EXEC CICS HANDLE CONDITION command specifies the paragraph or program label to which the control is to be passed if the \"handle condition\" occurs.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "17) What are the different important programs used in the CICS?",
        "answer": "Following is a list of some important programs used in the CICS:\nTCP\nKCP\nPCP\nFCP\nSCP",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "18) What do you understand by CEMT?",
        "answer": "CEMT is an acronym that stands for CICS Execute Master Terminal. It is an ID for system transactions and is mainly used to inquire and update the status of CICS environments and other system operations. We can easily manage transactions, tasks, files, programs, etc., and can also change the status of the resources. We can see all possible options by typing CEMT and pressing ENTER.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "19) What do you understand by the term BMS in CICS?",
        "answer": "BMS is an acronym that stands for Basic Mapping Support. CICS provides BMS to define and format the screen. The screen defined by using the BMS is called the MAP. The collections of all the screens are called the Mapset.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "20) What are the most important control programs in CICS?",
        "answer": "They provide unique advantages and make the CICS system highly flexible and maintainable.\nFollowing is the list of most important control programs of CICS:\nTCP\n\nTCP is an acronym that stands for the Terminal Control Program. It is used to receive all the terminals' messages and request the CISC to initiate or start a specific task. It is also used to maintain the hardware communication requirements.\nKCP\nKCP is called Task Control Program. It is used to control the execution of tasks and their related properties simultaneously. It is also used to handle all the issues related to multi-tasking.\nPCP\nPCP is an acronym that stands for Program Control Program. It is used to locate and load programs for execution. It is also used to transfer the control between programs, and in the end, it returns the control to the CICS.\nFCP\n\nFCP is an acronym that stands for File Control Program. It provides application programs with services like reading, inserting, updating, or deleting records in a file. It also keeps exclusive control over the records to maintain data integrity during record updates.\nSCP\nSCP is an acronym that stands for Storage Control Program. It controls the allocation and de-allocation of storage within a CICS region.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "21) What are some important control tables in CICS?",
        "answer": "CICS has some IBM-supplied CICS control tables that need to be updated accordingly with the application information for the successful execution of CICS application programs.\nFollowing is a list of some important control tables:\nTCT\nTCT is an acronym that stands for Terminal Control Table. When we log in to a CICS terminal, we have to enter the TCT table. This table contains the terminal IDs that are connected to the current CICS region. Terminal Control Table, along with Terminal Control Program, recognizes the incoming data from the terminal.\nPCT\nPCT stands for Program Control Table. It contains the Transaction IDs (TRANSID) and the corresponding program names or program IDs. Every PCT table has a unique Transaction ID or TRANSID.\nPPT\nPPT stands for Processing Program Table. It contains the program name or Mapset name, Task Use Counter, Language, Size, the Main storage address, Load library address, etc. Every PPT table has a unique Program or Mapset name.\nFCT\nFCT stands for File Control Table. It includes File names, File type, record length, etc. All the files used in a CICS program have to be declared in FCT, and they are opened and closed by CICS itself.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "22) What is COMMAREA, and what are the benefits of using it?",
        "answer": "COMMAREA is the short and the most commonly used name for communication area. It is the name of the data area in which the data or information is transferred from one program to another program. It is a temporary storage area and is mainly used as a passing medium for data amongst multiple programs loaded by a set of transactions or a particular transaction.\nCOMMAREA is generally used along with the TRANSID option to send data back to the program which executes the Transaction ID so that the user can use it while executing that transid.\nCOMMAREA allows the maximum length of the data to pass through to be 64K.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "23) What is EIB in CICS? How can we use it?",
        "answer": "In CICS, EIB is an acronym that stands for EXEC Interface Block. EIB is a control block that is loaded automatically by the CICS for every program. CICS automatically generates some system-related information and provides it to each task in the form of EIB. Every task has a unique EIB it exists for the duration of the task. It contains a set of system-related information corresponding to the task. Users can use all the fields of EIB in their application programs.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "24) What is a transaction in the CICS? What is the use of transactions in the CICS?",
        "answer": "In CICS, a transaction is a unit of processing initiated by a single request. This request is generally initiated from an end-user at a terminal, but it can also be initiated from a web page, a remote workstation program, or an application in another CICS system. It may also be triggered automatically at a predefined time.\nSome main uses of the transaction in the CICS are:\nA transaction executes or starts a particular task. It acts as a unique identifier.\nWe can trigger a transaction concurrently from the different systems, but it cannot be done from the same systems.\nA transaction is usually interactive processing initiated by a single request, but background transactions are possible.\nA transaction is the type of four characters entry, and it doesn't allow any duplicates in the transaction names.\nA transaction has one to one or many mappings to the program. It is executed when the transaction trigger takes place.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "25) What is the key difference between task and transaction in CICS?",
        "answer": "In CICS, the key difference between task and transaction is that several users can invoke a transaction, but each user has to initiate their task.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "26) What would be the effect of including the TRANSID in the EXEC CICS RETURN command?",
        "answer": "If we include the TRANSID in the EXEC CICS RETURN command, the next time the end-user presses an attention key, the CICS will start the transaction specified in the TRANSID option.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "27) What are some generally used CICS programs?",
        "answer": "Following is a list of some generally used CICS programs:\nFile Control Programs\nTerminal Control Programs\nStorage Control Programs\nTask Control Programs etc.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "28) What information does the EIBRCODE contain in CICS?",
        "answer": "In CICS, EIBRCODE is a field that indicates the application program whether the command was executed successfully or not or whether a CICS condition was raised or not.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "29) What are the types of processes that are used to create a MAP in CICS?",
        "answer": "Following are the three types of processes that are used to create a MAP in CICS:\nDFHMDF: The DFHMDF process designs an individual field on the screen or the page.\nDFHMDI: The DFHMDI process is used to define a single map in the collections of the field.\nDFHMSD: The DFHMSD process helps group a single map into a map set.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "30) What do you understand by a 'Transid'?",
        "answer": "Transid is a short form of a transaction identifier. This character code contains four letters that are used to invoke a task of CICS.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "31) What is the difference between the INTO and the SET option in the EXEC CICS RECEIVE MAP command?",
        "answer": "The key difference between the INTO and the SET option in the EXEC CICS RECEIVE MAP command is that the INTO option moves the TIOA's information into the reserved specified area. In contrast, the SET option returns the address of the TIOA to the specified BLL cell or \"address-of\" a linkage section.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "32) What are the different types of DFHMDF present in the CICS set?",
        "answer": "Following are some types of the DFHMDF present in the CICS set:\nPOS: POS is the short form for the position in the CICS. The POS parameter is used to indicate the row and column position in the field relative to the upper left corner of the map position.\nATTRB: ATTRB is the short form for the field attribute. Generally, the BMS field attribute is not required because the BMS always uses the default value of the auto-skip protection, normal intensity, and the modified tag.\nLength: The length is used to specify the characters present in the field. In the length type, the attribute bytes are not present, so each of the lengths occupies one more column compared to its length value.\nInitial: The initial type is also not required in the BMS. It is only used in the label and the title field that already has a constant value in the BMS.\nPicout: The picout is one of the definitions of the filed CHG and is used to tell the BMS what types of pictures are mainly used to generate the fields. The Picout is also used to edit the facilities of the COBOL or the PL/I when data is moved into the map.\nGRPNAME and OCCURS: GRPNAME and OCCURS options are one of the most complex forms. That's why they do not always appear in simple examples. The GRPNAME is mainly used to subdivide a map field within the program for later processing, and the OCCURS mainly helps us define adjacent.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "33) What is the name of some important fields in the EIB block of CICS?",
        "answer": "Following is a list of some important fields in the EIB block of CICS:\nEIBCALEN\nEIBRESP\nEIBTASK\nEIBRRCDE\nEIBTIME\nEIBDATE",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "34) Is it possible to use dynamic calls in CICS?",
        "answer": "Yes. It is possible to use dynamic calls in CICS. We can use dynamic calls in CICS. According to the procedure, the user has to define the call routine in a PPT, and the calling program uses the CALL identifier.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "35) What would affect RECEIVE MAP when we press PF and PA key?",
        "answer": "When we press the PF key, the data transmission may happen on RECEIVE MAP. On the other hand, the data transmission will not happen when we press the PA key.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "36) How can you set the MDT option to 'ON' status, even if data is not entered?",
        "answer": "We should mention the FSET option in DFHMDF to set the MDT option to 'ON' status, even if data is not entered. Otherwise, we can set it dynamically in the program using the FIELD+A attribute field.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "37) How can we terminate a transaction?",
        "answer": "We can use the command EXEC CICS SYNCPOINT and assume it as LUW. The Xn will not be terminated by using this command, but it will surely terminate the transaction.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "38) What is the difference between SEND MAP MAPONLY and SEND MAP DATAONLY command?",
        "answer": "The SEND MAP MAPONLY command is used to send the map alone, without any data. For example, it is used for sending Menu screens. On the other hand, the SEND MAP DATAONLY command sends data alone without sending the screen layout again. For example, it is used for refreshing the screen data.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "39) Which CICS service transaction is used to gain accessibility to CICS control tables?",
        "answer": "CEDA is a CICS service transaction that is used to gain accessibility to control tables.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "40) What is the difference between XCTL and START?",
        "answer": "XCTL works as a medium through which we can pass the control through the identical task to another program. On the other hand, XCTL is a program control command.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "41) What is the key difference between a PF and a PA key?",
        "answer": "A PF key is used to wake up the task and transmit modified data. On the other hand, a PA key is used only to wake up the task.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "42) What do you understand by a mapset?",
        "answer": "Mapset is a collection of linked and edited maps to form a load module. It must have a PPT entry and can have names from 1 to 7 chars.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "43) What is the use of ENQ and DEQ in CICS?",
        "answer": "In CICS, ENQ and DEQ are the parts of task control commands used to make a resource serially recyclable.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "44) What is the difference between an EXEC CICS XCTL and an EXEC CICS LINK command?",
        "answer": "The EXEC CICS XCTL command transfers the control to an application program at the same logical level without expecting the control back. On the other hand, the EXEC CICS LINK command is used to pass the control to an application program at the next logical level with an expectation of the control back.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "45) What are some situations when NEWCOPY is necessarily required in CICS?",
        "answer": "In CICS, NEWCOPY is necessarily required in certain situations when a particular program has been run at least once or several times in CICS and then recompiled or changed.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "46) Is it possible to use OCCURS in a BMS map? If yes, what are the issues you can face while using it?",
        "answer": "Yes. It is possible to use OCCURS in a BMS map. For doing so, we have to redefine the input and output field of the copybook with wanted index sizes, which can later be referenced in the application program.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "47) In which table the terminal id is registered?",
        "answer": "In CICS, the terminal id is registered in the Terminal Control Table.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "48) Can a CICS code be a part of a copybook? What would be the outcomes after compilation if we do so?",
        "answer": "Yes, a CICS code can easily be a part of a copybook, but we have to do the reprocessing after the compilation process if we want to do so.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "49) In the case of multiple maps, how is the storage determined in the symbolic map?",
        "answer": "If we have multiple maps and want to determine the storage in the symbolic map, then the largest map must be done first.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "50) What is the main usage of the CICS translator?",
        "answer": "The CICS translator is mainly used to convert the EXEC CICS commands into call statements for a specific programming language.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "51) What is the effect of using the TRANSID in the EXEC CICS RETURN command?",
        "answer": "The effect of using the TRANSID in the EXEC CICS RETURN command is that the next time the end-user presses an attention key, the CICS will start the transaction specified in the TRANSID option.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "52) How can you access the VSAM file using an alternate index?",
        "answer": "We can access the VSAM file through the path. We have to declare a path as a form of FCT and then use the File Control Commands on it.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "53) What is the meaning of BMS length of field = 0?",
        "answer": "The BMS length of field = 0 specifies that the data was not entered in the field.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "54) What is the main function of the EXEC CICS HANDLE CONDITION command?",
        "answer": "The EXEC CICS HANDLE CONDITION command specifies the paragraph or program label to which we have to pass the control if the \"handle condition\" occurs.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "55) What do you understand by an AICA ABEND?",
        "answer": "The AICA ABEND is just a Runaway Task that is executed at a later stage.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "56) What can you do if you don't want characters entered by the user to be folded to uppercase?",
        "answer": "If we don't want characters entered by the user to be folded to uppercase, we can use the ASIS option on RECEIVE.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "57) What is the key difference between the INTO and the SET option in the EXEC CICS RECEIVE MAP command?",
        "answer": "In CICS, the INTO option is used to move the information in the TIOA into the reserved specified area. On the other hand, the SET option is used to return the address of the TIOA to the specified BLL cell or \"address-of\" a linkage section.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "58) Can you access the ESDS files from CICS?",
        "answer": "Yes, we can access the ESDS files straight from CICS.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "59) What do you understand by the BUFFER option in RECEIVE?",
        "answer": "The BUFFER option in RECEIVE brings the entire data stream from the terminal buffer.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "60) What is the difference between retrieving the system time with EIBTIME and ASKTIME command?",
        "answer": "In CICS, the ASKTIME command requests the current date and time. On the other hand, the EIBTIME command gets the value at the task initiation time.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "61) What is the main use of DFHMDF BMS macro in CICS?",
        "answer": "In CICS, the DFHMDF BMS macro is mainly used to define fields, literal, and characteristics of a field.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "62) What do you understand by MDT? What is the use of FRSET and FSET in MDT?",
        "answer": "MDT is an acronym that stands for Modified Data Tag. MDT is used during an input operation. If you modify the field on the screen, then MDT acts as a bit of an attribute byte.\nFRSET stands for Flag Reset. It is used to reset MDT and turns off the modified data tag in the attribute bytes for all the fields on the screen. If it once set on, whether by the user or the program, a modified data tag stays on until turned off explicitly, even over several screen transmissions. On the other hand, FSET turns on the modified data tag. On the other hand, FSET turns on the modified data tag. It is used to ensure that MDT transmits the field. FSET is used during an output operation. If you don't specify this, the field is sent only if the user changes it.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "63) How can you classify a CICS program?",
        "answer": "We can classify a CICS program into the following types:\nConversational programs\nNon-conversational\nPseudo Conversational programs",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "64) What do you understand by the term conversational programs?",
        "answer": "The conversational programs are the programs that require user intervention to complete the execution. In other words, we can say that the program that requires input from the user and displays the data on the screen after processing is called a conversational program.\nThe conversational programs are mainly used to send a message to the terminals and receive a response from the active users. For example, online applications always use the conversation between the users and the application program by using the send and receive command.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "65) What do you understand by the term non-conversational programs?",
        "answer": "The non-conversational programs are the programs that don't require any user intervention for execution. All the required inputs are available to the program when we start the execution. In other words, we can say that the programs used for displaying the reports or messages are called non-conversational programs.\nThe non-conventional programs are very similar to the batch program and run in batch mode. These programs are mainly used to display a sequence on the screen at the regular interval of time.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "66) What do you understand by the term pseudo-conversational programs?",
        "answer": "The pseudo-conversational programs respond to user actions or events. It is a subtype of the conversational program which only runs when it is started or called by another program. It also needs certain actions of the users like hit enter etc. It is also called an event-based program.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "67) What are the key differences between TSQ and TDQ in CICS?",
        "answer": "Following is a list of key differences between TSQ and TDQ in CICS:\nTSQ TDQ\nTSQ is an acronym that stands for Temporary Storage Queues. TDQ is an acronym that stands for Transient Data Queues.\nData within the temporary storage queue (TSQ) can be changed. Data within the transient data queues (TDQ) cannot be changed.\nWe can read the data more than once in a temporary storage queue, and the records can be read randomly. We can read the data only once in the transient data queue, and the records can be read only sequentially.\nWe can update an existing record in a TSQ. We cannot update an existing record in a TDQ.\nWe cannot access TSQ in batch. We can easily use TDQ in batch applications.\nThe names of TSQ are dynamically defined in the application program. We have to define the name of TDQ in the DCT (Destination Control Table).\nTSQ cannot start a CICS transaction automatically. TDQ can start a CICS transaction automatically.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "68) How can you solve an ASRA ABEND?",
        "answer": "To solve an ASRA ABEND, we have to start with the CEBR and then call for instructions on offsets.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "69) How is the DSECT parameter used in BMS?",
        "answer": "The DSECT parameter is used in BMS to give shape to a symbolic map.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "70) What is the default size of COMMAREA in CICS?",
        "answer": "The default size of COMMAREA in CICS is 65K.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "71) How can you handle errors in CICS programs?",
        "answer": "To handle errors in CICS programs, we have to check the EIBRESP first after calling the program. After that, an alternative option is used to put the HANDLE condition to use.",
        "reference": "javatpoint.com",
        "role": "cics"
    },
    {
        "question": "72) What do you understand by the error code AEIY?",
        "answer": "AEIY is the error code for length. If the source data length is more than the receiving field, we see this error.",
        "reference": "javatpoint.com",
        "role": "cics"
    }
]