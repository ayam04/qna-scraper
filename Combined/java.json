[
    {
        "question": "1. Compare between Java and Python.",
        "answer": "Criteria Java Python\nEase of use Good Excellent\nSpeed of coding Average Excellent\nData types Static typed Dynamically typed\nData Science and Machine Learning applications Average Excellent",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "2. Distinguish between StringBuffer and StringBuilder in Java programming.",
        "answer": "StringBuffer StringBuilder\nStringBuffer methods are synchronized. StringBuilder is non-synchronized.\nThe storage area is heap and modified easily. Storage is heap-based and can be modified.\nStringBuffer is thread-safe. StringBuilder is fast as it is not thread-safe.\nThe performance is very slow. The performance is very fast.\nGo through this tutorial to get a better understanding of Java String!",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "3. Differentiate between JDK, JRE, and JVM.",
        "answer": "JVM stands for Java Virtual Machine which provides the runtime environment for Java bytecodes to be executed.\nJRE (Java Runtime Environment) includes the sets of files required by JVM during runtime.\nJDK (Java Development Kit) consists of JRE along with the development tools required to write and execute a program.\nGet a clear idea of why to get certified in Java!",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "4. Define inheritance.",
        "answer": "Java includes the feature of inheritance which is an object-oriented programming concept. Inheritance lets a derived class inherit the methods of a base class.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "5. Explain method overloading.",
        "answer": "When a Java program contains more than one method with the same name but with different properties, then it is called method overloading.\nCheck our guide on Spring boot interview questions which is specifically developed for boot frameworks.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "6. Compare overloading with overriding.",
        "answer": "Overloading refers to the case of having two methods of the same name but different properties; whereas, overriding occurs when there are two methods of the same name and properties, but one is in the child class and the other is in the parent class.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "Watch this Java Interview Questions video:",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "7. Explain the creation of a thread-safe singleton in Java using double-checked locking.",
        "answer": "Singleton is created with the double-checked locking as before Java 5 acts as a broker and it’s been possible to have multiple instances of singleton when multiple threads create an instance of the singleton at the same time. Java 5 made it easy to create thread-safe singleton using Enum. Using a volatile variable is essential for the same.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "8. What is a class in Java?",
        "answer": "Java encapsulates codes in various classes that define new data types. These new data types are used to create objects.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "9. Differentiate between an ArrayList and a Vector.",
        "answer": "ArrayList Vector\nAn ArrayList is not synchronized. A vector is synchronized.\nAn ArrayList is fast. A vector is slow as it is thread-safe.\nIf an element is inserted into an ArrayList, it increases its array size by 50 percent. A vector defaults to doubling the size of its array.\nAn ArrayList does not define the increment size. A vector defines the increment size.\nAn ArrayList can only use Iterator for traversing. Except for hashtable, a vector are the only other class that uses both Enumeration and Iterator.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "10. Mention the difference between Iterator and Enumeration.",
        "answer": "Iterator Enumeration\nIterator is an interface found in the java.util package. Enumeration is an object that generates elements one at a time.\nUses three methods to interface:\nhasNext()\nnext()\nremove()\nUses two methods:\nhasMoreElements()\nnextElement()\nIterators allow removing elements from the given collection during the iteration with well-defined semantics. It is used for passing through a collection, usually of unknown size.\nIterator method names have been improved. The traversing of elements can only be done once per creation.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "11. Explain the difference between the inner class and the subclass.",
        "answer": "Inner Class Subclass\nAn inner class is a class that is nested within another class. A subclass is a class that inherits from another class called the superclass.\nIt provides access rights for the class, which is nesting it, which can access all variables and methods defined in the outer class. It provides access to all public and protected methods and fields of its superclass.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "12. Can we execute any code, even before the main method? Explain.",
        "answer": "Yes, we can execute any code, even before the main method. We will be using a static block of code in the class when creating the objects at load time of the class. Any statements within this static block of code will get executed at once while loading the class, even before the creation of objects in the main method.\nPrepare yourself for Java certification with our comprehensive online Java Training!",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "13. How can we restrict inheritance for a class?",
        "answer": "We can restrict inheritance for a class by the following steps:\nBy using the final keyword\nIf we make all methods final, then we cannot override that\nBy using private constructors\nBy using the Javadoc comment (” // “)",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "14. Java doesn't support multiple inheritance. Why?",
        "answer": "Java doesn’t support multiple inheritance because we cannot use different methods in one class; it creates an ambiguity.\nExample:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nclass Intellipaat1\n{\nvoid test()\n{\nsystem.out.println(\"test() method\");\n}\n}class Intellipaat2\n{\nvoid test()\n{\nsystem.out.println(\"test() method\");\n}\n}Multiple inheritance\nclass C extends Intellipaat1, Intellipaat2\n{\n     /* Code */\n}\nIntellipaat1 and Intellipaat2 test() methods are inheriting to class C. So, which test() method class C will take?\nAs Intellipaat1 and Intellipaat2 class test () methods are different, here we would face ambiguity.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "15. Are constructors inherited? Can a subclass call the parent's class constructor?",
        "answer": "We cannot inherit a constructor. We create an instance of a subclass using a constructor of one of its superclasses. Because overriding the superclass constructor is not our wish as if we override a superclass constructor, then we will destroy the encapsulation abilities of the language.\nCheck out this insightful tutorial to learn more about Java Constructors!",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "16. Define JSON.",
        "answer": "The expansion of JSON is ‘JavaScript Object Notation.’ It is a much lighter and readable alternative to XML. It is independent and easily parse-able in all programming languages. It is primarily used for client–server and server–server communication.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "17. What are the advantages of JSON over XML?",
        "answer": "The advantages of JSON over XML are:\n JSON is lighter and faster than XML.\n It is easily understandable.\n It is easy to parse and convert to objects for information consumption.\nJSON supports multiple data types—string, number, array, or Boolean—but XML data are all strings.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "18. What do you understand by Java?",
        "answer": "Java is an object-oriented computer language.\nIt is a high-level programming language developed by James Gosling in Sun Microsystems in the year 1995.\nJava is a fast, secure, and reliable language used for many games, devices, and applications.\nGo through this Java Tutorial to get a better understanding of the concept!",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "19. Outline the major Java features.",
        "answer": "The major features of Java programming language are explained below:\n\nObject-oriented: Java is based on object-oriented programming where the class and methods describe the state and behavior of an object.\nPortable: A Java program gets converted into Java bytecodes that can be executed on any platform without any dependency.\nPlatform independent: Java works on the ‘write once, run anywhere’ principle as it supports multiple platforms like Windows, Linux, Mac, Sun Solaris, etc.\nRobust: Java has strong memory management as there are no pointer allocations. It has an automatic garbage collection that prohibits memory leaks.\nInterpreted: As mentioned, Java compiler converts the codes into Java bytecodes which are then interpreted and executed by Java Interpreter.\nBecome a master of Java by enrolling in this online Java Course!\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "20. What do you mean by an object?",
        "answer": "An object consists of methods and classes that depict its state and perform operations. A Java program contains a lot of objects instructing each other their jobs. This concept is part of core Java.\nCheck out the list of Hibernate Interview Questions to prepare for upcoming interviews.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "21. What is the difference between Java and C++?",
        "answer": "Below are the key differences between Java and C++:\nJava C++\nJava supports both compilers and interpreters Supports only the compiler\nMemory management is system controlled Memory management can be accessed by the programmer\nDoesn’t support multiple inheritances Support multiple inheritances\nOffers limited support for the pointers Fully supports the pointers\nShows heavy dependence on automatic garbage collection, but does not support the destructors The user needs to perform manual management using the new and delete keywords",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "22. What is JIT Compiler?",
        "answer": "The Just-In-Time compiler is an important part of the Java Runtime Environment that optimizes the performance of java based applications at run time. JIT parallelly compiles the bytecodes with similar functionality and reduces the compilation time.\nA method in the java program can be called thousands of times at the startup. Therefore, instead of compiling every method, java OpenJ9 records the number of times a method is initiated. If the initiation count crosses a predefined threshold, the JIT compiler gets triggered.\nEven learn about Queue in Java.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "23. What is Classloader?",
        "answer": "It is a part of the Java Runtime Environment which is used to dynamically load the class files into the Java Virtual Machine(JVM). The classloader triggers whenever a java file is executed.\nThere are three types of classloaders in Java:\nBootstrap Classloader: The bootstrap loader is the superclass of extension classloader which loads the standard JDK files from rt.jar and other core classes. The rt.jar file contains all the package classes of java.net, java.lang, java.util, java.io, java.sql, etc.\nExtension Classloader: The extension classloader is known as the parent of the System classloaders and the child of the Bootstrap classloader. It only loads the files available in the extension classpath, that is ‘ext.dirs/JRE/lib/ext directory. If the file is not available in the mentioned directory the extension classloader will delegate it to the System classloader.\nSystem/Application Classloader: It loads the classes of application type available in the environment variable such as -classpath, or -cp command-line option. The application classloader generates a ClassNotFoundException if the class is not available in the application classpath.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "24. How does the == operator function in Java?",
        "answer": "Java uses the == operator to compare the reference equality of two objects, which means that it determines if the two objects refer to the same memory location.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "25. What is polymorphism in Java?",
        "answer": "Polymorphism refers to the ability of objects of different classes to be regarded as objects of a common superclass when writing object-oriented programs. This makes it possible for methods from different classes to be applied through one general interface, resulting in flexibility and reuse.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "26. What is the purpose of static in Java? Mention an example.",
        "answer": "The static keyword in Java is intended to indicate that a certain variable or method belongs to the class and not its instances. For this reason, even without instantiating an object of the class, such a variable or method can be accessed.\n1\n2\n3\n4\n5\n6\n7\n8\npublic class MathUtils {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n    public static double square(double num) {\n        return num * num;\n    }\n}",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "27. What is exception handling in Java?",
        "answer": "Exception handling is a way of dealing with runtime errors or unusual situations that may occur during execution in the Java programming language. It involves trapping exceptions with try-catch blocks and managing them gracefully so that no program termination happens or unexpected behavior occurs.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "28. What is a try-catch in Java?",
        "answer": "A try-catch block in Java is responsible for this. The code that may throw exceptions has to be written inside the try block, and if any exception occurs, catch it and work on it in the corresponding catch block.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "29. Differentiate between checked and unchecked.",
        "answer": "The compiler checks checked exceptions at compile time, meaning that programmers have to handle such exceptions with try-catch blocks or declare them using the method signature. Unlike checked exceptions, unchecked exceptions are not checked at compile-time, hence they do not require explicit handling by a programmer.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "30. What is the meaning of 'final' in Java? Give example",
        "answer": "Java uses the final keyword to declare constants, prevent method overriding, and create immutable classes. For example, final int MAX_SIZE = 100; declares a constant MAX_SIZE whose value is 100.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "31. Is multithreading part of Java?",
        "answer": "Yes, multithreading is part of Java. It provides built-in support for creating and managing threads, thereby enabling multiple tasks to be executed concurrently within one program.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "32. What is the purpose of the 'super' keyword in Java?",
        "answer": "Super is used in the Java programming language to refer to the superclass of an object being manipulated. It can also be used as a bridge between superclass methods/constructors and subclass methods/constructors. For instance, super.methodName() invokes the method defined by the superclass.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "33. What is an abstraction in Java? Give an example.",
        "answer": "Java Abstraction is the term in Java, which means encapsulating only the function ability and behavior of methods while not exposing their implementation details to the user. The object design used here focuses on what an object does rather than on how it performs that function. For instance, the List interface in Java is an example of abstraction because it describes general operations for lists without defining how they are implemented by specific list classes such as LinkedList and ArrayList.\n\nJava Developer Interview Questions for Experienced",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "34. Is an empty .java file name a valid source file name in java?",
        "answer": "Yes, we can save a java file with an empty .java file name. You can compile it in the command prompt by ‘javac .java’ and run it by typing ‘java classname’. Here is an example of such a program:\n1\n2\n3\n4\n5\n6\n7\n8\nimport java.util.*;\nclass A\n{\npublic static void main(String args[])\n{\nSystem.out.println(\"Hello World\");\n}\n}\nAfter saving the code, you need to open the command prompt and go to the directory where the file is stored. Then, you need to type ‘javac .java’ to compile the program, and ‘java A’ to run the program.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "35. What is the difference between Object-oriented and object-based programming language?",
        "answer": "Following are the key differences between the object-oriented and object-based programming languages:\nObject-oriented programming language Object-based programming language\nObject-oriented programming languages support all the features of OOPS, including polymorphism and inheritance Object-based programming language does not support inheritance or polymorphism\nDoesn’t support built-in objects Support built-in objects like JavaScript has the window object\nExample: C#, C++, Java, Python, etc. JavaScript and Visual Basic are examples of object-based programming language",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "36. Why is the main method static in Java?",
        "answer": "The main method is static in Java because to call the static methods, there is no need for the object. The Java Virtual Machine(JVM) has to create an object to call the non-static main() method, which will result in extra memory allocation.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "37. Can we declare the static variables and methods in an abstract class?",
        "answer": "Yes, we can declare the static variables and methods in an abstract class by inheriting the abstract class. In java, the static variables and methods can be accessed without creating an object. You can simply extend the abstract class and use the static context as mentioned below:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport java.util.*;\nclass A\n{\n    static int x=110;\n    static void method1()\n    {\n        System.out.println(\"Class A static function called\");\n    }\n     }\n public class prog1 extends A\n{\n    public static void main(String args[])\n    {\n        A.method1();\n        System.out.println(\"Value of x=\"+A.x);\n    }\n}\n The output of the above program will be:\nClass A static function called\nValue of x=110",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "38. What is Aggregation?",
        "answer": "Aggregation in Java represents Has-A relationship where one class contains the reference of another class. In other words, it refers to a one-way relationship between two classes where the aggregate class has the instance of another class it owns.\nFor example, in the program below the aggregate class student have a one-way relationship with the class Address. Here each student having an address makes sense, but address having the student doesn’t make any sense. So, instead of inheritance, the aggregation is based on the usage of the classes.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\nimport java.util.*;\nclass Address\n{\n    String street, city, state, country;\n    public Address(String street, String city, String state, String country)\n    {\n        this.street=street;\n        this.city=city;\n        this.state=state;\n        this.country=country;\n    }\n}\npublic class student\n{\n    int reg_no;\n    String name;\n    Address address;\n    public student(int id,String name,Address address)\n    {\n        this.reg_no=id;\n        this.name=name;\n        this.address=address;\n    }\n    public void display()\n    {\n        System.out.println(\"Student details: \");\n        System.out.println(\"Name: \"+name);\n        System.out.println(\"Reg_no: \"+reg_no);\n        System.out.println(\"Address: \"+address.street+\", \"+address.city+\", \"+address.state+\", \"+address.country);\n    }\n    public static void main(String args[])\n    {\n        Address address1=new Address(\"Paper Mill Road\",\"SRE\",\"UP\",\"India\");\n        Address address2=new Address(\"Service Road\",\"BNG\",\"KA\",\"India\");\n        student ob1=new student(111,\"Sam\",address1);\n        student ob2=new student(112,\"Alex\",address2);\n        ob1.display();\n        ob2.display();\n    }\n}\n The output of the above program will be:\n Student details: \nName: Sam\nReg_no: 111\nAddress: Paper Mill Road, SRE, UP, India\n Student details: \nName: Alex\nReg_no: 112\nAddress: Service Road, BNG, KA, India",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "39. What is composition?",
        "answer": "If an object contains another object and the contained can’t exist without the existence of that particular object, then it’s known as the composition. In simple words, the composition is a kind of aggregation used to describe the reference between two classes using the reference variable.\nFor example, a class student contains another class named address. So, if the class address cannot exist without the class student, then there exists a composition between them.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "40. Can we overload the main method in Java?",
        "answer": "Yes, you can overload the main() method in Java using the concept of method overloading.\nBelow is an example of main() method overloading:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nimport java.util.*;\npublic class main_overloading\n{\n   public static void main(String args)\n   {\n       System.out.println(\"Main with String\");\n   }\n   public static void main(String args[])   \n   {\n       System.out.println(\"Main with the String args[]\");\n   }\n   public static void main()\n   {\n       System.out.println(\"main without String\");\n   }\n}\nThe output of the above code will be:\n1\nMain with the String args[]",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "41. Explain public static void main(String argos[]) in Java?",
        "answer": "The main() method is the entry point for any program in java language. In the expression public static void main(String argos[]), each keyword has significance as mentioned below:\nPublic: It’s an access specifier which is used to specify the accessibility of a method in java. Here, Public means anyone can access the method or the class.\nstatic: the static keyword in java identifies the main method as class-based, which means it can be accessed without creating an object/instance. Static methods can b3e directly called by the Java Virtual Machine(JVM), which in turn saves extra memory allocation.\nvoid: void is a return type in java, which means the main method will not return any value back.\nString args[]: String argos[] or String[] args is an array of String objects which stores the command line arguments. Here the argument is an array of types of java. Therefore, it’s passed as the parameter in the main() method.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "42. What is the NullPointerException?",
        "answer": "The NullPointerException occurs when the user attempts to access or modify the fields of a null object. A null object is an instance defined with null values or without any reference.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "43. What is the difference between a constructor and a destructor?",
        "answer": "Below is the difference between a constructor and a destructor based on various parameters:\nBase of Comparison Constructor Destructor\nPurpose A constructor is used to allocate the memory. A destructor is used to deallocate or free up the memory.\nArguments Mayor may not accept the arguments. Destructors don’t accept any arguments.\nDeclaration class_name(arguments){\n}\n~class_name(){\n};\nCalling The constructor is called as soon as the object is created. Called at the time of program termination or when the block is exited.\nOrder of execution Constructors are executed in successive order, meaning from parent to child class. Destructors are called in the reverse order, meaning from child to parent class.\nOverloading Can be overloaded. Cannot be overloaded.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "44. Can a Java interface have static methods?",
        "answer": "Yes, a Java interface can have static methods, but we cannot override them as they’re static. So, we have to define the static methods in the interface and only perform the calling party in the class.\nBelow is an example of a static method in Java interface:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nimport java.util.*;\npublic interface A\n{\n    static void staticmethod()\n    {\n        System.out.println(\"Static method of interface A called\");\n    }\n    default void display()\n    {\n        System.out.println(\"Default function of interface A called\");\n    }\n}\nThe above interface has a static method and a default method that can be executed without affecting the class that implements it. However, there is no use in creating the static methods in the Java interface as we cannot override the function by redefining it in the main() method.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nimport java.util.*;\nthe public class demo implements A\n{\n    public static void main(String args[])\n    {\n        demo obj =new demo();\n        A.staticmethod();\n        obj.display();\n    }\n}\nSo, the output of the above program would be:\nStatic method of interface A called\nDefault function of interface A called",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "45. Differentiate between ‘==’ and equals()?",
        "answer": "The main difference between ‘==’ and equals() is that ‘==’ is an operator, while equal() is a method in java. The == operator is used for reference or addresses comparison, meaning it checks if both the objects or variables are pointing to the same memory location.\nWhereas, equals() method compares the content of two objects or variables. It checks if the value of two objects is the same or not.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nimport java.util.*;\npublic class B\n{\n    public static void main(String args[])\n    {\n           String str1=new String(\"Alex\");\n           String str2=new String(\"Alex\");\n           System.out.println(\"Output given by == operator: \"+(str1==str2));\n           System.out.println(\"Output by equals() method: \"+(str1.equals(str2)));\n    }\n}\nOutput:\nOutput given by == operator: false\nOutput by equals() method: true",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "46. What are JAR files?",
        "answer": "Java Archive(JAR) is a file format that aggregates many files into a single file similar in a format similar to a ZIP file. In other words, the JAR is a zipped file comprised of java lass files, metadata, and resources like text, images, audio files, directories, .class files, and more.\nFollowing is the syntax to create a JAR file:\n1\nJar cf file_name input files",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "47. What is the difference between method overloading and method overriding in Java? Provide examples to illustrate.",
        "answer": "Method overloading is using a single class that has two or more methods with the same name but different parameters. It is solved at compile-time based on the number and types of arguments given. One more instance exists when a subclass provides the specific implementation for some method already defined in its superclass, this is called method overriding, which is used to achieve runtime polymorphism.\nFor example\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass Parent {\n    void display() {\n        System.out.println(\"Parent's display method\");\n    }\n}\n class Child extends Parent {\n    void display() {\n        System.out.println(\"Child's display method\");\n    }\n}\n public class Main {\n    public static void main(String[ ] args) {\n        Parent p = new Parent( );\n        p.display( );  // Output: Parent's display method\n         Child child = new Child();\n        child.display();   // Output: Child's display method\n    }\n}",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "48. Explain the concept of encapsulation in Java. How does it help in achieving data hiding and abstraction?",
        "answer": "Encapsulation in Java is the act of keeping together data and methods that are part of a class to hide the internal state from direct access. The reason behind this approach is to ensure data integrity and promote abstraction by exposing only essential details of the class’s behavior through public methods.\nTo achieve data hiding, encapsulation restricts direct access to an object’s internal state, thus ensuring data integrity. By doing this, it makes abstraction possible as it only exposes some critical behaviors about the object via public methods, thereby enabling simpler interaction and decreased complexity.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "49. What is the purpose of the final keyword in Java? How is it used in variables, methods, and classes?",
        "answer": "The final keyword can be added before a variable declaration, any method header, or preceding the class keyword so as not to allow changing their value, to prevent them from being overridden, or before words like “extends” in order not to let inheritance happen.\n1\n2\n3\n4\n5\n6\n7\n8\npublic final class Circle {\n    private final double PI = 3.14;\n     public final void calculateArea(final double radius) {\n        final double area = PI * radius * radius;\n        System.out.println(\"Area of circle: \" + area);\n    }\n}",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "50. Describe the concept of multithreading in Java. How can you create and manage threads in a Java application?",
        "answer": "Java multithreading refers to the concurrent execution of multiple threads in one Java program. Threads are lightweight processes capable of running independently and sharing common memory space. There are two ways we can create threads in Java: by extending the Thread class or implementing the Runnable interface.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"MyThread is running...\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n}",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "51. What is the difference between ArrayList and LinkedList in Java? When would you choose one over the other for storing data?",
        "answer": "ArrayList is a dynamic array that stores elements and supports fast random access. It is better suited for element traversal and frequent access. Conversely, LinkedList is a linked list that stores its elements in the form of nodes, making it very suitable for high-speed insertion and deletion operations. Therefore, it can be useful where there are many additions or removals.\nIf you want fast access and traversal through elements, then use an ArrayList; otherwise, for fast insertion or deletion of elements, use LinkedList.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "52. How many types of constructors are there in the Java programming language?",
        "answer": "There are two types of constructors in the Java programming language:\nParameterized Constructor: A constructor that accepts arguments or parameters is known as the parameterized constructor. It initializes the instance variables will the values passed while creating an object.\nBelow is an example of the parameterized constructor:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nimport java.util.*;\nclass A\n{\nint roll_no;\nString name;\nA()\n{\nSystem.out.println(\"Constructor called\");\n}\n public void fun()\n{\nSystem.out.println(\"Class A function called\");\n}\n}\npublic class parameterized_constructor\n{\npublic static void main(String args[])\n{\nA obj=new A();\nobj.fun();\nSystem.out.println(\"The value of instance variables are: \");\nSystem.out.println(\"Name: \"+obj.name);\nSystem.out.println(\"Roll No: \" +obj.roll_no);\n}\n}\nThe output of the above program would be:\nConstructor called\nClass A function called\nThe value of instance variables are:\nName: null\nRoll No: 0\nNon-parameterized/Default constructor: The constructors with no parameters or arguments are known and non-parameterized constructors. In case you don’t define a constructor of any type, the compiler itself creates a default constructor which will be called when the object is created.\nBelow is an example of a non-parameterized constructor:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nimport java.util.*;\nclass A\n{\nint roll_no;\nString name;\nA(int x,String y)\n{\nthis.roll_no=x;\nthis.name=y;\nSystem.out.println(\"Constructor called\");\n}\n public void fun()\n{\nSystem.out.println(\"Class A function called\");\n}\n}\n public class non_parameterized_constructor\n{\npublic static void main(String args[])\n{\nA obj=new A(10,\"Harry Williams\");\nSystem.out.println(\"The value of instance variables\");\nSystem.out.println(\"Name: \"+obj.name);\nSystem.out.println(\"Roll No: \"+obj.roll_no);\n}\n}\n The output of the above program will be:\n Constructor called\nThe value of instance variables\nName: Harry Williams\nRoll No: 10",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": ": It stands for Java API for XML Binding. This standard defines a system for a script out of Java objects as XML and for creating Java objects from XML structures.",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com",
        "role": "java"
    },
    {
        "question": "1. Why is Java a platform independent language?",
        "answer": "Java language was developed so that it does not depend on any hardware or software because the compiler compiles the code and then converts it to platform-independent byte code which can be run on multiple systems. compiler The only condition to run that byte code is for the machine to have a runtime environment (JRE) installed in it. The only condition to run that byte code is for the machine to have a runtime environment (JRE) installed in it. Learn More Learn More",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "2. Why is Java not a pure object oriented language?",
        "answer": "Java supports primitive data types - byte, boolean, char, short, int, float, long, and double and hence it is not a pure object oriented language. object oriented language object oriented language",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "3. Difference between Heap and Stack Memory in java. And how java utilizes this.",
        "answer": "Stack memory is the portion of memory that was assigned to every individual program. And it was fixed. On the other hand, Heap memory is the portion that was not allocated to the java program but it will be available for use by the java program when it is required, mostly during the runtime of the program. Java Utilizes this memory as - Java Utilizes this memory as - When we write a java program then all the variables, methods, etc are stored in the stack memory.\nAnd when we create any object in the java program then that object was created in the heap memory. And it was referenced from the stack memory. When we write a java program then all the variables, methods, etc are stored in the stack memory. And when we create any object in the java program then that object was created in the heap memory. And it was referenced from the stack memory. Example- Consider the below java program: Consider the below java program class Main {\n   public void printArray(int[] array){\n       for(int i : array)\n           System.out.println(i);\n   }\n   public static void main(String args[]) {\n       int[] array = new int[10];\n       printArray(array);\n   }\n} class Main {\n   public void printArray(int[] array){\n       for(int i : array)\n           System.out.println(i);\n   }\n   public static void main(String args[]) {\n       int[] array = new int[10];\n       printArray(array);\n   }\n} class Main class Main public void printArray(int[] array) public void printArray (int[] array) int for int public static void main(String args[]) public static void main (String args[]) int new int 10 For this java program. The stack and heap memory occupied by java is -   Main and PrintArray is the method that will be available in the stack area and as well as the variables declared that will also be in the stack area. And the Object (Integer Array of size 10) we have created, will be available in the Heap area because that space will be allocated to the program during runtime.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "4. Can java be said to be the complete object-oriented programming language?",
        "answer": "It is not wrong if we claim that Java is the complete object-oriented programming language because everything in Java is under the classes and we can access them by creating the objects. But we can even say that Java is not a completely object-oriented programming language because it has the support of primitive data types like int, float, char, boolean, double, etc. Now for the question: Is Java a completely object-oriented programming language? We can say that - Java is not a pure object-oriented programming language, because it has direct access to primitive data types. And these primitive data types don't directly belong to the Integer classes. Is Java a completely object-oriented programming language?",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "5. How is Java different from C++?",
        "answer": "C++ is only a  compiled language, whereas Java is compiled as well as an interpreted language.\nJava programs are machine-independent whereas a c++ program can run only in the machine in which it is compiled. \nC++ allows users to use pointers in the program. Whereas java doesn’t allow it. Java internally uses pointers. \nC++ supports the concept of Multiple inheritances whereas Java doesn't support this. And it is due to avoiding the complexity of name ambiguity that causes the diamond problem. C++ is only a  compiled language, whereas Java is compiled as well as an interpreted language. Java programs are machine-independent whereas a c++ program can run only in the machine in which it is compiled. C++ allows users to use pointers in the program. Whereas java doesn’t allow it. Java internally uses pointers. C++ supports the concept of Multiple inheritances whereas Java doesn't support this. And it is due to avoiding the complexity of name ambiguity that causes the diamond problem.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "6. Pointers are used in C/ C++. Why does Java not make use of pointers?",
        "answer": "Pointers are quite complicated and unsafe to use by beginner programmers. Java focuses on code simplicity, and the usage of pointers can make it challenging. Pointer utilization can also cause potential errors. Moreover, security is also compromised if pointers are used because the users can directly access memory with the help of pointers. Thus, a certain level of abstraction is furnished by not including pointers in Java. Moreover, the usage of pointers can make the procedure of garbage collection quite slow and erroneous. Java makes use of references as these cannot be manipulated, unlike pointers.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "7. What do you understand by an instance variable and a local variable?",
        "answer": "Instance variables are those variables that are accessible by all the methods in the class. They are declared outside the methods and inside the class. These variables describe the properties of an object and remain bound to it at any cost. Instance variables All the objects of the class will have their copy of the variables for utilization. If any modification is done on these variables, then only that instance will be impacted by it, and all other class instances continue to remain unaffected. Example: Example: class Athlete {\npublic String athleteName;\npublic double athleteSpeed;\npublic int athleteAge;\n} class Athlete {\npublic String athleteName;\npublic double athleteSpeed;\npublic int athleteAge;\n} class Athlete class Athlete public public double public int Local variables are those variables present within a block, function, or constructor and can be accessed only inside them. The utilization of the variable is restricted to the block scope. Whenever a local variable is declared inside a method, the other class methods don’t have any knowledge about the local variable. Local variables Example: Example: public void athlete() {\nString athleteName;\ndouble athleteSpeed;\nint athleteAge;\n} public void athlete() {\nString athleteName;\ndouble athleteSpeed;\nint athleteAge;\n} public void athlete() public void athlete () double int  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "8. What are the default values assigned to variables and instances in java?",
        "answer": "There are no default values assigned to the variables in java. We need to initialize the value before using it. Otherwise, it will throw a compilation error of (Variable might not be initialized). \nBut for instance, if we create the object, then the default value will be initialized by the default constructor depending on the data type. \nIf it is a reference, then it will be assigned to null. \nIf it is numeric, then it will assign to 0.\nIf it is a boolean, then it will be assigned to false. Etc. There are no default values assigned to the variables in java. We need to initialize the value before using it. Otherwise, it will throw a compilation error of (Variable might not be initialized). Variable might not be initialized But for instance, if we create the object, then the default value will be initialized by the default constructor depending on the data type. If it is a reference, then it will be assigned to null. If it is numeric, then it will assign to 0. If it is a boolean, then it will be assigned to false. Etc.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "9. What do you mean by data encapsulation?",
        "answer": "Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and their behaviours in a single unit.\nIt helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its own methods, attributes, and functionalities.\nIt is used for the security of the private properties of an object and hence serves the purpose of data hiding. Data Encapsulation is an Object-Oriented Programming concept of hiding the data attributes and their behaviours in a single unit. It helps developers to follow modularity while developing software by ensuring that each object is independent of other objects by having its own methods, attributes, and functionalities. It is used for the security of the private properties of an object and hence serves the purpose of data hiding.  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "10. Tell us something about JIT compiler.",
        "answer": "JIT stands for Just-In-Time and it is used for improving the performance during run time. It does the task of compiling parts of byte code having similar functionality at the same time thereby reducing the amount of compilation time for the code to run.\nThe compiler is nothing but a translator of source code to machine-executable code. But what is special about the JIT compiler? Let us see how it works:\nFirst, the Java source code (.java) conversion to byte code (.class) occurs with the help of the javac compiler.\nThen, the .class files are loaded at run time by JVM and with the help of an interpreter, these are converted to machine understandable code.\nJIT compiler is a part of JVM. When the JIT compiler is enabled, the JVM analyzes the method calls in the .class files and compiles them to get more efficient and native code. It also ensures that the prioritized method calls are optimized.\nOnce the above step is done, the JVM executes the optimized code directly instead of interpreting the code again. This increases the performance and speed of the execution. JIT stands for Just-In-Time and it is used for improving the performance during run time. It does the task of compiling parts of byte code having similar functionality at the same time thereby reducing the amount of compilation time for the code to run. The compiler is nothing but a translator of source code to machine-executable code. But what is special about the JIT compiler? Let us see how it works:\nFirst, the Java source code (.java) conversion to byte code (.class) occurs with the help of the javac compiler.\nThen, the .class files are loaded at run time by JVM and with the help of an interpreter, these are converted to machine understandable code.\nJIT compiler is a part of JVM. When the JIT compiler is enabled, the JVM analyzes the method calls in the .class files and compiles them to get more efficient and native code. It also ensures that the prioritized method calls are optimized.\nOnce the above step is done, the JVM executes the optimized code directly instead of interpreting the code again. This increases the performance and speed of the execution. First, the Java source code (.java) conversion to byte code (.class) occurs with the help of the javac compiler.\nThen, the .class files are loaded at run time by JVM and with the help of an interpreter, these are converted to machine understandable code.\nJIT compiler is a part of JVM. When the JIT compiler is enabled, the JVM analyzes the method calls in the .class files and compiles them to get more efficient and native code. It also ensures that the prioritized method calls are optimized.\nOnce the above step is done, the JVM executes the optimized code directly instead of interpreting the code again. This increases the performance and speed of the execution. First, the Java source code (.java) conversion to byte code (.class) occurs with the help of the javac compiler. Then, the .class files are loaded at run time by JVM and with the help of an interpreter, these are converted to machine understandable code. JIT compiler is a part of JVM. When the JIT compiler is enabled, the JVM analyzes the method calls in the .class files and compiles them to get more efficient and native code. It also ensures that the prioritized method calls are optimized. Once the above step is done, the JVM executes the optimized code directly instead of interpreting the code again. This increases the performance and speed of the execution.  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "11. Can you tell the difference between equals() method and equality operator (==) in Java?",
        "answer": "We are already aware of the (==) equals operator. That we have used this to compare the equality of the values. But when we talk about the terms of object-oriented programming, we deal with the values in the form of objects. And this object may contain multiple types of data. So using the (==) operator does not work in this case. So we need to go with the .equals() method. (==) equals (==) operator equals() method. Both [(==) and .equals()] primary functionalities are to compare the values, but the secondary functionality is different. [(==) .equals()] So in order to understand this better, let’s consider this with the example - String str1 = \"InterviewBit\";\nString str2 = \"InterviewBit\";\n \nSystem.out.println(str1 == str2); String str1 = \"InterviewBit\";\nString str2 = \"InterviewBit\";\n \nSystem.out.println(str1 == str2); \"InterviewBit\" \"InterviewBit\" This code will print true. We know that both strings are equals so it will print true. But here (==) Operators don’t compare each character in this case. It compares the memory location. And because the string uses the constant pool for storing the values in the memory, both str1 and str2 are stored at the same memory location. See the detailed Explanation in Question no 73: Link. (==) Operators str1 str2 Link Link   Now, if we modify the program a little bit with - String str1 = new String(\"InterviewBit\");\nString str2 = \"InterviewBit\";\n \nSystem.out.println(str1 == str2); String str1 = new String(\"InterviewBit\");\nString str2 = \"InterviewBit\";\n \nSystem.out.println(str1 == str2); new \"InterviewBit\" \"InterviewBit\"   Then in this case, it will print false. Because here no longer the constant pool concepts are used. Here, new memory is allocated. So here the memory address is different, therefore ( == ) Operator returns false. But the twist is that the values are the same in both strings. So how to compare the values? Here the .equals() method is used. .equals() method compares the values and returns the result accordingly.  If we modify the above code with - .equals() System.out.println(str1.equals(str2)); System.out.println(str1.equals(str2)); Then it returns true. equals()  ==\nThis is a method defined in the Object class.  It is a binary operator in Java.\nThe .equals() Method is present in the Object class, so we can override our custom .equals() method in the custom class, for objects comparison. It cannot be modified. They always compare the HashCode.\nThis method is used for checking the equality of contents between two objects as per the specified business logic. This operator is used for comparing addresses (or references), i.e checks if both the objects are pointing to the same memory location. equals()  ==\nThis is a method defined in the Object class.  It is a binary operator in Java.\nThe .equals() Method is present in the Object class, so we can override our custom .equals() method in the custom class, for objects comparison. It cannot be modified. They always compare the HashCode.\nThis method is used for checking the equality of contents between two objects as per the specified business logic. This operator is used for comparing addresses (or references), i.e checks if both the objects are pointing to the same memory location. equals()  == equals()  == equals() == This is a method defined in the Object class.  It is a binary operator in Java.\nThe .equals() Method is present in the Object class, so we can override our custom .equals() method in the custom class, for objects comparison. It cannot be modified. They always compare the HashCode.\nThis method is used for checking the equality of contents between two objects as per the specified business logic. This operator is used for comparing addresses (or references), i.e checks if both the objects are pointing to the same memory location. This is a method defined in the Object class.  It is a binary operator in Java. This is a method defined in the Object class. It is a binary operator in Java. The .equals() Method is present in the Object class, so we can override our custom .equals() method in the custom class, for objects comparison. It cannot be modified. They always compare the HashCode. The .equals() Method is present in the Object class, so we can override our custom .equals() method in the custom class, for objects comparison. It cannot be modified. They always compare the HashCode. This method is used for checking the equality of contents between two objects as per the specified business logic. This operator is used for comparing addresses (or references), i.e checks if both the objects are pointing to the same memory location. This method is used for checking the equality of contents between two objects as per the specified business logic. This operator is used for comparing addresses (or references), i.e checks if both the objects are pointing to the same memory location. Note: Note: In the cases where the equals method is not overridden in a class, then the class uses the default implementation of the equals method that is closest to the parent class.\nObject class is considered as the parent class of all the java classes. The implementation of the equals method in the Object class uses the == operator to compare two objects. This default implementation can be overridden as per the business logic. In the cases where the equals method is not overridden in a class, then the class uses the default implementation of the equals method that is closest to the parent class. Object class is considered as the parent class of all the java classes. The implementation of the equals method in the Object class uses the == operator to compare two objects. This default implementation can be overridden as per the business logic.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "12. How is an infinite loop declared in Java?",
        "answer": "Infinite loops are those loops that run infinitely without any breaking conditions. Some examples of consciously declaring infinite loop is: Using For Loop: Using For Loop: for (;;)\n{\n   // Business logic\n   // Any break logic\n} for (;;)\n{\n   // Business logic\n   // Any break logic\n} for // Business logic // Any break logic Using while loop: Using while loop: while(true){\n   // Business logic\n   // Any break logic\n} while(true){\n   // Business logic\n   // Any break logic\n} while true // Business logic // Any break logic Using do-while loop: Using do-while loop: do{\n   // Business logic\n   // Any break logic\n}while(true); do{\n   // Business logic\n   // Any break logic\n}while(true); do // Business logic // Any break logic while true",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "13. Briefly explain the concept of constructor overloading",
        "answer": "Constructor overloading is the process of creating multiple constructors in the class consisting of the same name with a difference in the constructor parameters. Depending upon the number of parameters and their corresponding types, distinguishing of the different types of constructors is done by the compiler. class Hospital {\nint variable1, variable2;\ndouble variable3;\npublic Hospital(int doctors, int nurses) {\n variable1 = doctors;\n variable2 = nurses;\n}\npublic Hospital(int doctors) {\n variable1 = doctors;\n}\npublic Hospital(double salaries) {\n variable3 = salaries\n}\n} class Hospital {\nint variable1, variable2;\ndouble variable3;\npublic Hospital(int doctors, int nurses) {\n variable1 = doctors;\n variable2 = nurses;\n}\npublic Hospital(int doctors) {\n variable1 = doctors;\n}\npublic Hospital(double salaries) {\n variable3 = salaries\n}\n} class Hospital class Hospital int double public Hospital(int doctors, int nurses) public Hospital (int doctors, int nurses) int int public Hospital(int doctors) public Hospital (int doctors) int public Hospital(double salaries) public Hospital (double salaries) double   Three constructors are defined here but they differ on the basis of parameter type and their numbers.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "14. Define Copy constructor in java.",
        "answer": "Copy Constructor is the constructor used when we want to initialize the value to the new object from the old object of the same class. class InterviewBit{\n   String department;\n   String service;\n   InterviewBit(InterviewBit ib){\n       this.departments = ib.departments;\n       this.services = ib.services;\n   }\n} class InterviewBit{\n   String department;\n   String service;\n   InterviewBit(InterviewBit ib){\n       this.departments = ib.departments;\n       this.services = ib.services;\n   }\n} class InterviewBit class InterviewBit this this Here we are initializing the new object value from the old object value in the constructor. Although, this can also be achieved with the help of object cloning.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "15. Can the main method be Overloaded?",
        "answer": "Yes, It is possible to overload the main method. We can create as many overloaded main methods we want. However, JVM has a predefined calling method that JVM will only call the main method with the definition of - public static void main(string[] args) public static void main(string[] args) public static void main(string[] args) public static void main (string[] args) Consider the below code snippets: class Main {\n    public static void main(String args[]) {\n        System.out.println(\" Main Method\");\n    }\n    public static void main(int[] args){\n        System.out.println(\"Overloaded Integer array Main Method\");\n    }\n    public static void main(char[] args){\n        System.out.println(\"Overloaded Character array Main Method\");\n    }\n    public static void main(double[] args){\n        System.out.println(\"Overloaded Double array Main Method\");\n    }\n    public static void main(float args){\n        System.out.println(\"Overloaded float Main Method\");\n    }\n} class Main {\n    public static void main(String args[]) {\n        System.out.println(\" Main Method\");\n    }\n    public static void main(int[] args){\n        System.out.println(\"Overloaded Integer array Main Method\");\n    }\n    public static void main(char[] args){\n        System.out.println(\"Overloaded Character array Main Method\");\n    }\n    public static void main(double[] args){\n        System.out.println(\"Overloaded Double array Main Method\");\n    }\n    public static void main(float args){\n        System.out.println(\"Overloaded float Main Method\");\n    }\n} class Main class Main public static void main(String args[]) public static void main (String args[]) \" Main Method\" public static void main(int[] args) public static void main (int[] args) int \"Overloaded Integer array Main Method\" public static void main(char[] args) public static void main (char[] args) char \"Overloaded Character array Main Method\" public static void main(double[] args) public static void main (double[] args) double \"Overloaded Double array Main Method\" public static void main(float args) public static void main (float args) float \"Overloaded float Main Method\"",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "16. Comment on method overloading and overriding by citing relevant examples.",
        "answer": "In Java, method overloading is made possible by introducing different methods in the same class consisting of the same name. Still, all the functions differ in the number or type of parameters. It takes place inside a class and enhances program readability. method overloading The only difference in the return type of the method does not promote method overloading. The following example will furnish you with a clear picture of it. class OverloadingHelp {\n   public int findarea (int l, int b) {\n           int var1;\n           var1 = l * b;\n           return var1;\n   }\n   public int findarea (int l, int b, int h) {\n           int var2;\n           var2 = l * b * h;\n           return var2;\n   }\n} class OverloadingHelp {\n   public int findarea (int l, int b) {\n           int var1;\n           var1 = l * b;\n           return var1;\n   }\n   public int findarea (int l, int b, int h) {\n           int var2;\n           var2 = l * b * h;\n           return var2;\n   }\n} class OverloadingHelp class OverloadingHelp public int findarea (int l, int b) public int findarea (int l, int b) int int int return public int findarea (int l, int b, int h) public int findarea (int l, int b, int h) int int int int return   Both the functions have the same name but differ in the number of arguments. The first method calculates the area of the rectangle, whereas the second method calculates the area of a cuboid. Method overriding is the concept in which two methods having the same method signature are present in two different classes in which an inheritance relationship is present. A particular method implementation (already present in the base class) is possible for the derived class by using method overriding.\nLet’s give a look at this example: Method overriding  class HumanBeing {\n       public int walk (int distance, int time) {\n               int speed = distance / time;\n               return speed;\n       }\n}\nclass Athlete extends HumanBeing {\n       public int walk(int distance, int time) {\n               int speed = distance / time;\n               speed = speed * 2;\n               return speed;\n       }\n} class HumanBeing {\n       public int walk (int distance, int time) {\n               int speed = distance / time;\n               return speed;\n       }\n}\nclass Athlete extends HumanBeing {\n       public int walk(int distance, int time) {\n               int speed = distance / time;\n               speed = speed * 2;\n               return speed;\n       }\n} class HumanBeing class HumanBeing public int walk (int distance, int time) public int walk (int distance, int time) int int int return class Athlete extends HumanBeing class Athlete extends HumanBeing public int walk(int distance, int time) public int walk (int distance, int time) int int int 2 return   Both class methods have the name walk and the same parameters, distance, and time. If the derived class method is called, then the base class method walk gets overridden by that of the derived class.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "17. A single try block and multiple catch blocks can co-exist in a Java Program. Explain.",
        "answer": "Yes, multiple catch blocks can exist but specific approaches should come prior to the general approach because only the first catch block satisfying the catch condition is executed. The given code illustrates the same: public class MultipleCatch {\npublic static void main(String args[]) {\n try {\n  int n = 1000, x = 0;\n  int arr[] = new int[n];\n  for (int i = 0; i <= n; i++) {\n   arr[i] = i / x;\n  }\n }\n catch (ArrayIndexOutOfBoundsException exception) {\n  System.out.println(\"1st block = ArrayIndexOutOfBoundsException\");\n }\n catch (ArithmeticException exception) {\n  System.out.println(\"2nd block = ArithmeticException\");\n }\n catch (Exception exception) {\n  System.out.println(\"3rd block = Exception\");\n }\n}\n} public class MultipleCatch {\npublic static void main(String args[]) {\n try {\n  int n = 1000, x = 0;\n  int arr[] = new int[n];\n  for (int i = 0; i <= n; i++) {\n   arr[i] = i / x;\n  }\n }\n catch (ArrayIndexOutOfBoundsException exception) {\n  System.out.println(\"1st block = ArrayIndexOutOfBoundsException\");\n }\n catch (ArithmeticException exception) {\n  System.out.println(\"2nd block = ArithmeticException\");\n }\n catch (Exception exception) {\n  System.out.println(\"3rd block = Exception\");\n }\n}\n} public class MultipleCatch class MultipleCatch public static void main(String args[]) public static void main (String args[]) try int 1000 0 int new int for int 0 catch \"1st block = ArrayIndexOutOfBoundsException\" catch \"2nd block = ArithmeticException\" catch \"3rd block = Exception\" Here, the second catch block will be executed because of division by 0 (i / x). In case x was greater than 0 then the first catch block will execute because for loop runs till i = n and array index are till n-1.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "18. Explain the use of final keyword in variable, method and class.",
        "answer": "In Java, the final keyword is used as defining something as constant /final and represents the non-access modifier. final variable:\nWhen a variable is declared as final in Java, the value can’t be modified once it has been assigned.\nIf any value has not been assigned to that variable, then it can be assigned only by the constructor of the class.\nfinal method:\nA method declared as final cannot be overridden by its children's classes.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here\nfinal class:\nNo classes can be inherited from the class declared as final. But that final class can extend other classes for its usage. final variable:\nWhen a variable is declared as final in Java, the value can’t be modified once it has been assigned.\nIf any value has not been assigned to that variable, then it can be assigned only by the constructor of the class. final variable: When a variable is declared as final in Java, the value can’t be modified once it has been assigned.\nIf any value has not been assigned to that variable, then it can be assigned only by the constructor of the class. When a variable is declared as final in Java, the value can’t be modified once it has been assigned. If any value has not been assigned to that variable, then it can be assigned only by the constructor of the class. final method:\nA method declared as final cannot be overridden by its children's classes.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here final method: A method declared as final cannot be overridden by its children's classes.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here A method declared as final cannot be overridden by its children's classes. A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here modifier final not allowed here final class:\nNo classes can be inherited from the class declared as final. But that final class can extend other classes for its usage. final class: No classes can be inherited from the class declared as final. But that final class can extend other classes for its usage. No classes can be inherited from the class declared as final. But that final class can extend other classes for its usage.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "19. Do final, finally and finalize keywords have the same function?",
        "answer": "All three keywords have their own utility while programming. Final: If any restriction is required for classes, variables, or methods, the final keyword comes in handy. Inheritance of a final class and overriding of a final method is restricted by the use of the final keyword. The variable value becomes fixed after incorporating the final keyword. Example: Final: final int a=100;\na = 0;  // error final int a=100;\na = 0;  // error final int 100 0 // error The second statement will throw an error. Finally: It is the block present in a program where all the codes written inside it get executed irrespective of handling of exceptions. Example: Finally: try {\nint variable = 5;\n}\ncatch (Exception exception) {\nSystem.out.println(\"Exception occurred\");\n}\nfinally {\nSystem.out.println(\"Execution of finally block\");\n} try {\nint variable = 5;\n}\ncatch (Exception exception) {\nSystem.out.println(\"Exception occurred\");\n}\nfinally {\nSystem.out.println(\"Execution of finally block\");\n} try int 5 catch \"Exception occurred\" finally \"Execution of finally block\" Finalize: Prior to the garbage collection of an object, the finalize method is called so that the clean-up activity is implemented. Example: Finalize: public static void main(String[] args) {\nString example = new String(\"InterviewBit\");\nexample = null;\nSystem.gc(); // Garbage collector called\n}\npublic void finalize() {\n// Finalize called\n} public static void main(String[] args) {\nString example = new String(\"InterviewBit\");\nexample = null;\nSystem.gc(); // Garbage collector called\n}\npublic void finalize() {\n// Finalize called\n} public static void main(String[] args) public static void main (String[] args) new \"InterviewBit\" null // Garbage collector called public void finalize() public void finalize () // Finalize called",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "20. Is it possible that the ‘finally’ block will not be executed? If yes then list the case.",
        "answer": "Yes. It is possible that the ‘finally’ block will not be executed. The cases are- Suppose we use System.exit() in the above statement.\nIf there are fatal errors like Stack overflow, Memory access error, etc. Suppose we use System.exit() in the above statement. System.exit() If there are fatal errors like Stack overflow, Memory access error, etc.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "21. Identify the output of the java program and state the reason.",
        "answer": "1. public class InterviewBit\n2. {\n3.  public static void main(String[] args) {\n4.    final int i;\n5.   i = 20;\n6.   int j = i+20;\n7.   i = j+30;\n8.      System.out.println(i + \" \" + j);\n9.  }\n10. } 1. public class InterviewBit\n2. {\n3.  public static void main(String[] args) {\n4.    final int i;\n5.   i = 20;\n6.   int j = i+20;\n7.   i = j+30;\n8.      System.out.println(i + \" \" + j);\n9.  }\n10. } 1. public class InterviewBit\n2. class InterviewBit 3. public static void main(String[] args) public static void main (String[] args) 4. final int 5. 20 6. int 20 7. 30 8. \" \" 9. 10. The above code will generate a compile-time error at Line 7 saying - [error: variable i might already have been initialized]. It is because variable ‘i’ is the final variable. And final variables are allowed to be initialized only once, and that was already done on line no 5. [error: variable i might already have been initialized]",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "22. When can you use super keyword?",
        "answer": "The super keyword is used to access hidden fields and overridden methods or attributes of the parent class.\nFollowing are the cases when this keyword can be used:\nAccessing data members of parent class when the member names of the class and its child subclasses are same.\nTo call the default and parameterized constructor of the parent class inside the child class.\nAccessing the parent class methods when the child classes have overridden them.\nThe following example demonstrates all 3 cases when a super keyword is used. The super keyword is used to access hidden fields and overridden methods or attributes of the parent class. Following are the cases when this keyword can be used:\nAccessing data members of parent class when the member names of the class and its child subclasses are same.\nTo call the default and parameterized constructor of the parent class inside the child class.\nAccessing the parent class methods when the child classes have overridden them. Accessing data members of parent class when the member names of the class and its child subclasses are same.\nTo call the default and parameterized constructor of the parent class inside the child class.\nAccessing the parent class methods when the child classes have overridden them. Accessing data members of parent class when the member names of the class and its child subclasses are same. To call the default and parameterized constructor of the parent class inside the child class. Accessing the parent class methods when the child classes have overridden them. The following example demonstrates all 3 cases when a super keyword is used. class Parent{\n       protected int num = 1;\n       \n       Parent(){\n           System.out.println(\"Parent class default constructor.\");\n       }\n       \n       Parent(String x){\n           System.out.println(\"Parent class parameterised constructor.\");\n       }\n       \n       public void foo(){\n           System.out.println(\"Parent class foo!\");\n       }\n   }\nclass Child extends Parent{\n       private int num = 2;\n       \n       Child(){\n           //super constructor call should always be in the first line\n           // super();              // Either call default super() to call default parent constructor OR\n           super(\"Call Parent\");    // call parameterised super to call parameterised parent constructor.\n           System.out.println(\"Child class default Constructor\");\n       }\n       \n       void printNum(){\n           System.out.println(num);\n           System.out.println(super.num); //prints the value of num of parent class\n       }\n       \n       @Override\n       public void foo(){\n           System.out.println(\"Child class foo!\");\n           super.foo();    //Calls foo method of Parent class inside the Overriden foo method of Child class.\n       }\n   }\n\npublic class DemoClass {\n    public static void main(String args[]) {\n     Child demoObject=new Child();\n     demoObject.foo();\n     /*\n      This would print - \n      Parent class parameterised constructor.\n      Child class default Constructor\n      Child class foo!\n      Parent class foo!\n     */\n    }\n} class Parent{\n       protected int num = 1;\n       \n       Parent(){\n           System.out.println(\"Parent class default constructor.\");\n       }\n       \n       Parent(String x){\n           System.out.println(\"Parent class parameterised constructor.\");\n       }\n       \n       public void foo(){\n           System.out.println(\"Parent class foo!\");\n       }\n   }\nclass Child extends Parent{\n       private int num = 2;\n       \n       Child(){\n           //super constructor call should always be in the first line\n           // super();              // Either call default super() to call default parent constructor OR\n           super(\"Call Parent\");    // call parameterised super to call parameterised parent constructor.\n           System.out.println(\"Child class default Constructor\");\n       }\n       \n       void printNum(){\n           System.out.println(num);\n           System.out.println(super.num); //prints the value of num of parent class\n       }\n       \n       @Override\n       public void foo(){\n           System.out.println(\"Child class foo!\");\n           super.foo();    //Calls foo method of Parent class inside the Overriden foo method of Child class.\n       }\n   }\n\npublic class DemoClass {\n    public static void main(String args[]) {\n     Child demoObject=new Child();\n     demoObject.foo();\n     /*\n      This would print - \n      Parent class parameterised constructor.\n      Child class default Constructor\n      Child class foo!\n      Parent class foo!\n     */\n    }\n} class Parent class Parent protected int 1 \"Parent class default constructor.\" \"Parent class parameterised constructor.\" public void foo() public void foo () \"Parent class foo!\" class Child extends Parent class Child extends Parent private int 2 //super constructor call should always be in the first line // super();              // Either call default super() to call default parent constructor OR super \"Call Parent\" // call parameterised super to call parameterised parent constructor. \"Child class default Constructor\" void printNum() void printNum () super //prints the value of num of parent class @Override public void foo() public void foo () \"Child class foo!\" super //Calls foo method of Parent class inside the Overriden foo method of Child class. public class DemoClass class DemoClass public static void main(String args[]) public static void main (String args[]) new /*\n      This would print - \n      Parent class parameterised constructor.\n      Child class default Constructor\n      Child class foo!\n      Parent class foo!\n     */",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "23. Can the static methods be overloaded?",
        "answer": "Yes! There can be two or more static methods in a class with the same name but differing input parameters.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "24. Why is the main method static in Java?",
        "answer": "The main method is always static because static members are those methods that belong to the classes, not to an individual object. So if the main method will not be static then for every object, It is available. And that is not acceptable by JVM. JVM calls the main method based on the class name itself. Not by creating the object. Because there must be only 1 main method in the java program as the execution starts from the main method. So for this reason the main method is static.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "25. Can the static methods be overridden?",
        "answer": "No! Declaration of static methods having the same signature can be done in the subclass but run time polymorphism can not take place in such cases.\nOverriding or dynamic polymorphism occurs during the runtime, but the static methods are loaded and looked up at the compile time statically. Hence, these methods cant be overridden. No! Declaration of static methods having the same signature can be done in the subclass but run time polymorphism can not take place in such cases. Overriding or dynamic polymorphism occurs during the runtime, but the static methods are loaded and looked up at the compile time statically. Hence, these methods cant be overridden.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "26. Difference between static methods, static variables, and static classes in java.",
        "answer": "Static Methods and Static variables are those methods and variables that belong to the class of the java program, not to the object of the class. This gets memory where the class is loaded. And these can directly be called with the help of class names.\nFor example - We have used mathematical functions in the java program like - max(), min(), sqrt(), pow(), etc. And if we notice that, then we will find that we call it directly with the class name. Like - Math.max(), Math.min(), etc. So that is a static method.  And Similarly static variables we have used like (length) for the array to get the length. So that is the static method.\nStatic classes - A class in the java program cannot be static except if it is the inner class. If it is an inner static class, then it exactly works like other static members of the class. Static Methods and Static variables are those methods and variables that belong to the class of the java program, not to the object of the class. This gets memory where the class is loaded. And these can directly be called with the help of class names.\nFor example - We have used mathematical functions in the java program like - max(), min(), sqrt(), pow(), etc. And if we notice that, then we will find that we call it directly with the class name. Like - Math.max(), Math.min(), etc. So that is a static method.  And Similarly static variables we have used like (length) for the array to get the length. So that is the static method. Static Methods and Static variables For example - We have used mathematical functions in the java program like - max(), min(), sqrt(), pow(), etc. And if we notice that, then we will find that we call it directly with the class name. Like - Math.max(), Math.min(), etc. So that is a static method.  And Similarly static variables we have used like (length) for the array to get the length. So that is the static method. For example - We have used mathematical functions in the java program like - max(), min(), sqrt(), pow(), etc. And if we notice that, then we will find that we call it directly with the class name. Like - Math.max(), Math.min(), etc. So that is a static method.  And Similarly static variables we have used like (length) for the array to get the length. So that is the static method. Static classes - A class in the java program cannot be static except if it is the inner class. If it is an inner static class, then it exactly works like other static members of the class. Static classes",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "27. What is the main objective of garbage collection?",
        "answer": "The main objective of this process is to free up the memory space occupied by the unnecessary and unreachable objects during the Java program execution by deleting those unreachable objects. This ensures that the memory resource is used efficiently, but it provides no guarantee that there would be sufficient memory for the program execution. This ensures that the memory resource is used efficiently, but it provides no guarantee that there would be sufficient memory for the program execution.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "28. What is a ClassLoader?",
        "answer": "Java Classloader is the program that belongs to JRE (Java Runtime Environment). The task of ClassLoader is to load the required classes and interfaces to the JVM when required. \nExample- To get input from the console, we require the scanner class. And the Scanner class is loaded by the ClassLoader. Java Classloader is the program that belongs to JRE (Java Runtime Environment). The task of ClassLoader is to load the required classes and interfaces to the JVM when required. Example- To get input from the console, we require the scanner class. And the Scanner class is loaded by the ClassLoader. Example-",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "29. What part of memory - Stack or Heap - is cleaned in garbage collection process?",
        "answer": "Heap.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "30. What are shallow copy and deep copy in java?",
        "answer": "To copy the object's data, we have several methods like deep copy and shallow copy. Example - Example - class Rectangle{\nint length = 5;\n     int breadth = 3;\n} class Rectangle{\nint length = 5;\n     int breadth = 3;\n} class Rectangle class Rectangle int 5 int 3 Object for this Rectangle class - Rectangle obj1 = new Rectangle(); Rectangle obj1 = new Rectangle(); Shallow copy - The shallow copy only creates a new reference and points to the same object. Example - For Shallow copy, we can do this by - Shallow copy - The shallow copy only creates a new reference and points to the same object. Example - For Shallow copy, we can do this by - Shallow copy Rectangle obj2 = obj1; Rectangle obj2 = obj1; Now by doing this what will happen is the new reference is created with the name obj2 and that will point to the same memory location. Deep Copy - In a deep copy, we create a new object and copy the old object value to the new object. Example - Deep Copy - In a deep copy, we create a new object and copy the old object value to the new object. Example - Deep Copy Rectangle obj3 = new Rectangle();\nObj3.length = obj1.length;\nObj3.breadth = obj1.breadth; Rectangle obj3 = new Rectangle();\nObj3.length = obj1.length;\nObj3.breadth = obj1.breadth; new Both these objects will point to the memory location as stated below -   Now, if we change the values in shallow copy then they affect the other reference as well. Let's see with the help of an example - class Rectangle\n{\nint length = 5;\n   int breadth = 3;\n}\npublic class Main\n{\npublic static void main(String[] args) {\n Rectangle obj1 = new Rectangle();\n //Shallow Copy\n           Rectangle obj2 = obj1;\n      \n           System.out.println(\" Before Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n           //Changing the values for object1.\n           obj1.length = 10;\n           obj1.breadth = 20;\n       \n           System.out.println(\"\\n After Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n}\n} class Rectangle\n{\nint length = 5;\n   int breadth = 3;\n}\npublic class Main\n{\npublic static void main(String[] args) {\n Rectangle obj1 = new Rectangle();\n //Shallow Copy\n           Rectangle obj2 = obj1;\n      \n           System.out.println(\" Before Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n           //Changing the values for object1.\n           obj1.length = 10;\n           obj1.breadth = 20;\n       \n           System.out.println(\"\\n After Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n}\n} class Rectangle class Rectangle int 5 int 3 public class Main class Main public static void main(String[] args) public static void main (String[] args) new //Shallow Copy \" Before Changing the value of object 1, the object2 will be - \" \" Object2 Length = \" \", Object2 Breadth = \" //Changing the values for object1. 10 20 \"\\n After Changing the value of object 1, the object2 will be - \" \" Object2 Length = \" \", Object2 Breadth = \" Output - Before Changing the value of object 1, the object2 will be - \nObject2 Length = 5, Object2 Breadth = 3\n\nAfter Changing the value of object 1, the object2 will be - \nObject2 Length = 10, Object2 Breadth = 20 Before Changing the value of object 1, the object2 will be - \nObject2 Length = 5, Object2 Breadth = 3\n\nAfter Changing the value of object 1, the object2 will be - \nObject2 Length = 10, Object2 Breadth = 20 1 5 3 1 10 20 We can see that in the above code, if we change the values of object1, then the object2 values also get changed. It is because of the reference. Now, if we change the code to deep copy, then there will be no effect on object2 if it is of type deep copy. Consider some snippets to be added in the above code. class Rectangle\n{\n   int length = 5;\n   int breadth = 3;\n}\npublic class Main\n{\npublic static void main(String[] args) {\n Rectangle obj1 = new Rectangle();\n //Shallow Copy\n           Rectangle obj2 = new Rectangle();\n           obj2.length = obj1.length;\n           obj2.breadth = obj1.breadth;\n      \n           System.out.println(\" Before Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n           //Changing the values for object1.\n           obj1.length = 10;\n           obj1.breadth = 20;\n       \n           System.out.println(\"\\n After Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n}\n} class Rectangle\n{\n   int length = 5;\n   int breadth = 3;\n}\npublic class Main\n{\npublic static void main(String[] args) {\n Rectangle obj1 = new Rectangle();\n //Shallow Copy\n           Rectangle obj2 = new Rectangle();\n           obj2.length = obj1.length;\n           obj2.breadth = obj1.breadth;\n      \n           System.out.println(\" Before Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n           //Changing the values for object1.\n           obj1.length = 10;\n           obj1.breadth = 20;\n       \n           System.out.println(\"\\n After Changing the value of object 1, the object2 will be - \");\n           System.out.println(\" Object2 Length = \"+obj2.length+\", Object2 Breadth = \"+obj2.breadth);\n       \n}\n} class Rectangle class Rectangle int 5 int 3 public class Main class Main public static void main(String[] args) public static void main (String[] args) new //Shallow Copy new \" Before Changing the value of object 1, the object2 will be - \" \" Object2 Length = \" \", Object2 Breadth = \" //Changing the values for object1. 10 20 \"\\n After Changing the value of object 1, the object2 will be - \" \" Object2 Length = \" \", Object2 Breadth = \" The above snippet will not affect the object2 values. It has its separate values. The output will be Before Changing the value of object 1, the object2 will be - \nObject2 Length = 5, Object2 Breadth = 3\n\nAfter Changing the value of object 1, the object2 will be - \nObject2 Length = 5, Object2 Breadth = 3 Before Changing the value of object 1, the object2 will be - \nObject2 Length = 5, Object2 Breadth = 3\n\nAfter Changing the value of object 1, the object2 will be - \nObject2 Length = 5, Object2 Breadth = 3 1 5 3 1 5 3 Now we see that we need to write the number of codes for this deep copy. So to reduce this, In java, there is a method called clone(). clone(). The clone() will do this deep copy internally and return a new object. And to do this we need to write only 1 line of code. That is - Rectangle obj2 = obj1.clone(); clone() Rectangle obj2 = obj1.clone();",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "1. Apart from the security aspect, what are the reasons behind making strings immutable in Java?",
        "answer": "A String is made immutable due to the following reasons: String Pool: Designers of Java were aware of the fact that String data type is going to be majorly used by the programmers and developers. Thus, they wanted optimization from the beginning. They came up with the notion of using the String pool (a storage area in Java heap) to store the String literals. They intended to decrease the temporary String object with the help of sharing. An immutable class is needed to facilitate sharing. The sharing of the mutable structures between two unknown parties is not possible. Thus, immutable Java String helps in executing the concept of String Pool. String Pool: Designers of Java were aware of the fact that String data type is going to be majorly used by the programmers and developers. Thus, they wanted optimization from the beginning. They came up with the notion of using the String pool (a storage area in Java heap) to store the String literals. They intended to decrease the temporary String object with the help of sharing. An immutable class is needed to facilitate sharing. The sharing of the mutable structures between two unknown parties is not possible. Thus, immutable Java String helps in executing the concept of String Pool. String Pool:   Multithreading: The safety of threads regarding the String objects is an important aspect in Java. No external synchronization is required if the String objects are immutable. Thus, a cleaner code can be written for sharing the String objects across different threads. The complex process of concurrency is facilitated by this method.\nCollections: In the case of Hashtables and HashMaps, keys are String objects. If the String objects are not immutable, then it can get modified during the period when it resides in the HashMaps. Consequently, the retrieval of the desired data is not possible. Such changing states pose a lot of risks. Therefore, it is quite safe to make the string immutable. Multithreading: The safety of threads regarding the String objects is an important aspect in Java. No external synchronization is required if the String objects are immutable. Thus, a cleaner code can be written for sharing the String objects across different threads. The complex process of concurrency is facilitated by this method. Multithreading Multithreading : Collections: In the case of Hashtables and HashMaps, keys are String objects. If the String objects are not immutable, then it can get modified during the period when it resides in the HashMaps. Consequently, the retrieval of the desired data is not possible. Such changing states pose a lot of risks. Therefore, it is quite safe to make the string immutable. Collections Collections :",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "2. What is a singleton class in Java? And How to implement a singleton class?",
        "answer": "Singleton classes are those classes, whose objects are created only once. And with only that object the class members can be accessed. Understand this with the help of an example-: Understand this with the help of an example-: Consider the water jug in the office and if every employee wants that water then they will not create a new water jug for drinking water. They will use the existing one with their own reference as a glass. So programmatically it should be implemented as - class WaterJug{\n   private int waterQuantity = 500;\n   private WaterJug(){}\n   private WaterJug object = null;\n   \n   // Method to provide the service of Giving Water.\n   public int getWater(int quantity){\n       waterQuantity -= quantity;\n       return quantity;\n   }\n   // Method to return the object to the user.\n   public static Waterjug getInstance(){\n       // Will Create a new object if the object is not already created and return the object.\n       if(object == null){\n           object = new WaterJug();\n       }\n       return object;\n   }\n} class WaterJug{\n   private int waterQuantity = 500;\n   private WaterJug(){}\n   private WaterJug object = null;\n   \n   // Method to provide the service of Giving Water.\n   public int getWater(int quantity){\n       waterQuantity -= quantity;\n       return quantity;\n   }\n   // Method to return the object to the user.\n   public static Waterjug getInstance(){\n       // Will Create a new object if the object is not already created and return the object.\n       if(object == null){\n           object = new WaterJug();\n       }\n       return object;\n   }\n} class WaterJug class WaterJug private int 500 private WaterJug() private WaterJug () private null // Method to provide the service of Giving Water. public int getWater(int quantity) public int getWater (int quantity) int return // Method to return the object to the user. public static Waterjug getInstance() public static getInstance () // Will Create a new object if the object is not already created and return the object. if null new return In the above class, the Constructor is private so we cannot create the object of the class. But we can get the object by calling the method getInstance(). And the getInstance is static so it can be called without creating the object. And it returns the object. Now with that object, we can call getWater() to get the water. getInstance() getWater() Waterjug glass1 = WaterJug.getInstance();\nglass1.getWater(1); Waterjug glass1 = WaterJug.getInstance();\nglass1.getWater(1); 1 We can get the single object using this getInstance(). And it is static, so it is a thread-safe singleton class. Although there are many ways to create a thread-safe singleton class. So thread-safe classes can also be: When singletons are written with double-checked locking, they can be thread-safe.\nWe can use static singletons that are initialized during class loading. Like we did in the above example.\nBut the most straightforward way to create a thread-safe singleton is to use Java enums. When singletons are written with double-checked locking, they can be thread-safe. We can use static singletons that are initialized during class loading. Like we did in the above example. But the most straightforward way to create a thread-safe singleton is to use Java enums.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "3. Which of the below generates a compile-time error? State the reason.",
        "answer": "int[] n1 = new int[0];\nboolean[] n2 = new boolean[-200];\ndouble[] n3 = new double[2241423798];\nchar[] ch = new char[20]; int[] n1 = new int[0]; int[] n1 = new int[0]; boolean[] n2 = new boolean[-200]; boolean[] n2 = new boolean[-200]; double[] n3 = new double[2241423798]; double[] n3 = new double[2241423798]; char[] ch = new char[20]; char[] ch = new char[20]; We get a compile-time error in line 3. The error we will get in Line 3 is - integer number too large. It is because the array requires size as an integer. And Integer takes 4 Bytes in the memory. And the number (2241423798) is beyond the capacity of the integer. The maximum array size we can declare is - (2147483647). integer number too large 2241423798 2147483647 Because the array requires the size in integer, none of the lines (1, 2, and 4) will give a compile-time error. The program will compile fine. But we get the runtime exception in line 2. The exception is - NegativeArraySizeException. NegativeArraySizeException Here what will happen is - At the time when JVM will allocate the required memory during runtime then it will find that the size is negative. And the array size can’t be negative. So the JVM will throw the exception.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "4. How would you differentiate between a String, StringBuffer, and a StringBuilder?",
        "answer": "Storage area: In string, the String pool serves as the storage area. For StringBuilder and StringBuffer, heap memory is the storage area.\nMutability: A String is immutable, whereas both the StringBuilder and StringBuffer are mutable.\nEfficiency: It is quite slow to work with a String. However, StringBuilder is the fastest in performing operations. The speed of a StringBuffer is more than a String and less than a StringBuilder. (For example appending a character is fastest in StringBuilder and very slow in String because a new memory is required for the new String with appended character.)\nThread-safe: In the case of a threaded environment, StringBuilder and StringBuffer are used whereas a String is not used. However, StringBuilder is suitable for an environment with a single thread, and a StringBuffer is suitable for multiple threads.\nSyntax: Storage area: In string, the String pool serves as the storage area. For StringBuilder and StringBuffer, heap memory is the storage area. Storage area: Mutability: A String is immutable, whereas both the StringBuilder and StringBuffer are mutable. Mutability: Efficiency: It is quite slow to work with a String. However, StringBuilder is the fastest in performing operations. The speed of a StringBuffer is more than a String and less than a StringBuilder. (For example appending a character is fastest in StringBuilder and very slow in String because a new memory is required for the new String with appended character.) Efficiency: Thread-safe: In the case of a threaded environment, StringBuilder and StringBuffer are used whereas a String is not used. However, StringBuilder is suitable for an environment with a single thread, and a StringBuffer is suitable for multiple threads.\nSyntax: Thread-safe:  Syntax: // String\nString first = \"InterviewBit\";\nString second = new String(\"InterviewBit\");\n// StringBuffer\nStringBuffer third = new StringBuffer(\"InterviewBit\");\n// StringBuilder\nStringBuilder fourth = new StringBuilder(\"InterviewBit\"); // String\nString first = \"InterviewBit\";\nString second = new String(\"InterviewBit\");\n// StringBuffer\nStringBuffer third = new StringBuffer(\"InterviewBit\");\n// StringBuilder\nStringBuilder fourth = new StringBuilder(\"InterviewBit\"); // String \"InterviewBit\" new \"InterviewBit\" // StringBuffer new \"InterviewBit\" // StringBuilder new \"InterviewBit\"",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "5. Using relevant properties highlight the differences between interfaces and abstract classes.",
        "answer": "Availability of methods: Only abstract methods are available in interfaces, whereas non-abstract methods can be present along with abstract methods in abstract classes.\nVariable types: Static and final variables can only be declared in the case of interfaces, whereas abstract classes can also have non-static and non-final variables.\nInheritance: Multiple inheritances are facilitated by interfaces, whereas abstract classes do not promote multiple inheritances.\nData member accessibility: By default, the class data members of interfaces are of the public- type. Conversely, the class members for an abstract class can be protected or private also.\nImplementation: With the help of an abstract class, the implementation of an interface is easily possible. However, the converse is not true; Availability of methods: Only abstract methods are available in interfaces, whereas non-abstract methods can be present along with abstract methods in abstract classes. Availability of methods: Variable types: Static and final variables can only be declared in the case of interfaces, whereas abstract classes can also have non-static and non-final variables. Variable types Inheritance: Multiple inheritances are facilitated by interfaces, whereas abstract classes do not promote multiple inheritances. Inheritance: Data member accessibility: By default, the class data members of interfaces are of the public- type. Conversely, the class members for an abstract class can be protected or private also. Data member accessibility: Implementation: With the help of an abstract class, the implementation of an interface is easily possible. However, the converse is not true; Implementation: Abstract class example: Abstract class example: public abstract class Athlete {\npublic abstract void walk();\n} public abstract class Athlete {\npublic abstract void walk();\n} public abstract class Athlete class Athlete public abstract void walk() public abstract void walk () Interface example: Interface example: public interface Walkable {\nvoid walk();\n} public interface Walkable {\nvoid walk();\n} public interface Walkable interface Walkable void walk() void walk ()",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "6. Is this program giving a compile-time error? If Yes then state the reason and number of errors it will give. If not then state the reason.",
        "answer": "abstract final class InterviewBit{\n2.    public abstract void printMessage();\n3. }\n4. class ScalarAcademy extends InterviewBit{\n5.    public void printMessage(){\n6.        System.out.println(\"Welcome to Scalar Academy By InterviewBit\");\n7.    }\n8. }\n9. class ScalarTopics extends ScalarAcademy{\n10.    public void printMessage(){\n11.        System.out.println(\"Welcome to Scalar Topics By Scalar Academy\");\n12.    }\n13. }\npublic class Main{\n public static void main(String[] args) {\n      InterviewBit ib = new ScalarTopics();\n      ib.printMessage();\n }\n} abstract final class InterviewBit{\n2.    public abstract void printMessage();\n3. }\n4. class ScalarAcademy extends InterviewBit{\n5.    public void printMessage(){\n6.        System.out.println(\"Welcome to Scalar Academy By InterviewBit\");\n7.    }\n8. }\n9. class ScalarTopics extends ScalarAcademy{\n10.    public void printMessage(){\n11.        System.out.println(\"Welcome to Scalar Topics By Scalar Academy\");\n12.    }\n13. }\npublic class Main{\n public static void main(String[] args) {\n      InterviewBit ib = new ScalarTopics();\n      ib.printMessage();\n }\n} abstract final class InterviewBit class InterviewBit 2. public abstract void printMessage() public abstract void printMessage () 3. 4. class ScalarAcademy extends InterviewBit class ScalarAcademy extends InterviewBit 5. public void printMessage() public void printMessage () 6. \"Welcome to Scalar Academy By InterviewBit\" 7. 8. 9. class ScalarTopics extends ScalarAcademy class ScalarTopics extends ScalarAcademy 10. public void printMessage() public void printMessage () 11. \"Welcome to Scalar Topics By Scalar Academy\" 12. 13. public class Main class Main public static void main(String[] args) public static void main (String[] args) new The above program will give a compile-time error. The compiler will throw 2 errors in this. [Illegal Combination of modifiers: abstract and final] at line 1.\n[Cannot inherit from final ‘InterviewBit’] at line 4. [Illegal Combination of modifiers: abstract and final] at line 1. [Illegal Combination of modifiers: abstract and final] [Cannot inherit from final ‘InterviewBit’] at line 4. [Cannot inherit from final ‘InterviewBit’] It is because abstract classes are incomplete classes that need to be inherited for making their concrete classes. And on the other hand, the final keywords in class are used for avoiding inheritance. So these combinations are not allowed in java.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "7. What is a Comparator in java?",
        "answer": "Consider the example where we have an ArrayList of employees like( EId, Ename, Salary), etc. Now if we want to sort this list of employees based on the names of employees. Then that is not possible to sort using the Collections.sort() method. We need to provide something to the sort() function depending on what values we have to perform sorting. Then in that case a comparator is used. Comparator is the interface in java that contains the compare method. And by overloading the compare method, we can define that on what basis we need to compare the values.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "8. In Java, static as well as private method overriding is possible. Comment on the statement.",
        "answer": "The statement in the context is completely False. The static methods have no relevance with the objects, and these methods are of the class level. In the case of a child class, a static method with a method signature exactly like that of the parent class can exist without even throwing any compilation error. The phenomenon mentioned here is popularly known as method hiding, and overriding is certainly not possible. Private method overriding is unimaginable because the visibility of the private method is restricted to the parent class only. As a result, only hiding can be facilitated and not overriding.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "9. What makes a HashSet different from a TreeSet?",
        "answer": "Although both HashSet and TreeSet are not synchronized and ensure that duplicates are not present, there are certain properties that distinguish a HashSet from a TreeSet. Implementation: For a HashSet, the hash table is utilized for storing the elements in an unordered manner. However, TreeSet makes use of the red-black tree to store the elements in a sorted manner.\nComplexity/ Performance: For adding, retrieving, and deleting elements, the time amortized complexity is O(1) for a HashSet. The time complexity for performing the same operations is a bit higher for TreeSet and is equal to O(log n). Overall, the performance of HashSet is faster in comparison to TreeSet.\nMethods: hashCode() and equals() are the methods utilized by HashSet for making comparisons between the objects. Conversely, compareTo() and compare() methods are utilized by TreeSet to facilitate object comparisons.\nObjects type: Heterogeneous and null objects can be stored with the help of HashSet. In the case of a TreeSet, runtime exception occurs while inserting heterogeneous objects or null objects. Implementation: For a HashSet, the hash table is utilized for storing the elements in an unordered manner. However, TreeSet makes use of the red-black tree to store the elements in a sorted manner. Implementation: Complexity/ Performance: For adding, retrieving, and deleting elements, the time amortized complexity is O(1) for a HashSet. The time complexity for performing the same operations is a bit higher for TreeSet and is equal to O(log n). Overall, the performance of HashSet is faster in comparison to TreeSet. Complexity/ Performance: Methods: hashCode() and equals() are the methods utilized by HashSet for making comparisons between the objects. Conversely, compareTo() and compare() methods are utilized by TreeSet to facilitate object comparisons. Methods: Objects type: Heterogeneous and null objects can be stored with the help of HashSet. In the case of a TreeSet, runtime exception occurs while inserting heterogeneous objects or null objects. Objects type:",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "10. Why is the character array preferred over string for storing confidential information?",
        "answer": "In Java, a string is basically immutable i.e. it cannot be modified. After its declaration, it continues to stay in the string pool as long as it is not removed in the form of garbage. In other words, a string resides in the heap section of the memory for an unregulated and unspecified time interval after string value processing is executed. As a result, vital information can be stolen for pursuing harmful activities by hackers if a memory dump is illegally accessed by them. Such risks can be eliminated by using mutable objects or structures like character arrays for storing any variable. After the work of the character array variable is done, the variable can be configured to blank at the same instant. Consequently, it helps in saving heap memory and also gives no chance to the hackers to extract vital data.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "11. What do we get in the JDK file?",
        "answer": "JDK- For making java programs, we need some tools that are provided by JDK (Java Development Kit). JDK is the package that contains various tools, Compiler, Java Runtime Environment, etc.\nJRE -  To execute the java program we need an environment. (Java Runtime Environment) JRE contains a library of Java classes +  JVM. What are JAVA Classes?  It contains some predefined methods that help Java programs to use that feature, build and execute. For example - there is a system class in java that contains the print-stream method, and with the help of this, we can print something on the console.\nJVM - (Java Virtual Machine) JVM  is a part of JRE that executes the Java program at the end.  Actually, it is part of JRE, but it is software that converts bytecode into machine-executable code to execute on hardware. JDK- For making java programs, we need some tools that are provided by JDK (Java Development Kit). JDK is the package that contains various tools, Compiler, Java Runtime Environment, etc. JDK JRE -  To execute the java program we need an environment. (Java Runtime Environment) JRE contains a library of Java classes +  JVM. What are JAVA Classes?  It contains some predefined methods that help Java programs to use that feature, build and execute. For example - there is a system class in java that contains the print-stream method, and with the help of this, we can print something on the console. JRE What are JAVA Classes? For example For example JVM - (Java Virtual Machine) JVM  is a part of JRE that executes the Java program at the end.  Actually, it is part of JRE, but it is software that converts bytecode into machine-executable code to execute on hardware. JVM  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "12. What are the differences between JVM, JRE and JDK in Java?",
        "answer": "Criteria JDK  JRE JVM\nAbbreviation Java Development Kit Java Runtime Environment Java Virtual Machine\nDefinition JDK is a complete software development kit for developing Java applications. It comprises JRE, JavaDoc, compiler, debuggers, etc. JRE is a software package providing Java class libraries, JVM and all the required components to run the Java applications. JVM is a platform-dependent, abstract machine comprising of 3 specifications - document describing the JVM implementation requirements, computer program meeting the JVM requirements and instance object for executing the Java byte code and provide the runtime environment for execution.\nMain Purpose JDK is mainly used for code development and execution. JRE is mainly used for environment creation to execute the code. JVM provides specifications for all the implementations to JRE.\nTools provided JDK provides tools like compiler, debuggers, etc for code development JRE provides libraries and classes required by JVM to run the program. JVM does not include any tools, but instead, it provides the specification for implementation.\nSummary JDK = (JRE) + Development tools JRE = (JVM) + Libraries to execute the application JVM = Runtime environment to execute Java byte code. Criteria JDK  JRE JVM\nAbbreviation Java Development Kit Java Runtime Environment Java Virtual Machine\nDefinition JDK is a complete software development kit for developing Java applications. It comprises JRE, JavaDoc, compiler, debuggers, etc. JRE is a software package providing Java class libraries, JVM and all the required components to run the Java applications. JVM is a platform-dependent, abstract machine comprising of 3 specifications - document describing the JVM implementation requirements, computer program meeting the JVM requirements and instance object for executing the Java byte code and provide the runtime environment for execution.\nMain Purpose JDK is mainly used for code development and execution. JRE is mainly used for environment creation to execute the code. JVM provides specifications for all the implementations to JRE.\nTools provided JDK provides tools like compiler, debuggers, etc for code development JRE provides libraries and classes required by JVM to run the program. JVM does not include any tools, but instead, it provides the specification for implementation.\nSummary JDK = (JRE) + Development tools JRE = (JVM) + Libraries to execute the application JVM = Runtime environment to execute Java byte code. Criteria JDK  JRE JVM Criteria JDK  JRE JVM Criteria JDK JRE JVM Abbreviation Java Development Kit Java Runtime Environment Java Virtual Machine\nDefinition JDK is a complete software development kit for developing Java applications. It comprises JRE, JavaDoc, compiler, debuggers, etc. JRE is a software package providing Java class libraries, JVM and all the required components to run the Java applications. JVM is a platform-dependent, abstract machine comprising of 3 specifications - document describing the JVM implementation requirements, computer program meeting the JVM requirements and instance object for executing the Java byte code and provide the runtime environment for execution.\nMain Purpose JDK is mainly used for code development and execution. JRE is mainly used for environment creation to execute the code. JVM provides specifications for all the implementations to JRE.\nTools provided JDK provides tools like compiler, debuggers, etc for code development JRE provides libraries and classes required by JVM to run the program. JVM does not include any tools, but instead, it provides the specification for implementation.\nSummary JDK = (JRE) + Development tools JRE = (JVM) + Libraries to execute the application JVM = Runtime environment to execute Java byte code. Abbreviation Java Development Kit Java Runtime Environment Java Virtual Machine Abbreviation Java Development Kit Java Runtime Environment Java Virtual Machine Definition JDK is a complete software development kit for developing Java applications. It comprises JRE, JavaDoc, compiler, debuggers, etc. JRE is a software package providing Java class libraries, JVM and all the required components to run the Java applications. JVM is a platform-dependent, abstract machine comprising of 3 specifications - document describing the JVM implementation requirements, computer program meeting the JVM requirements and instance object for executing the Java byte code and provide the runtime environment for execution. Definition JDK is a complete software development kit for developing Java applications. It comprises JRE, JavaDoc, compiler, debuggers, etc. JRE is a software package providing Java class libraries, JVM and all the required components to run the Java applications. JVM is a platform-dependent, abstract machine comprising of 3 specifications - document describing the JVM implementation requirements, computer program meeting the JVM requirements and instance object for executing the Java byte code and provide the runtime environment for execution. Main Purpose JDK is mainly used for code development and execution. JRE is mainly used for environment creation to execute the code. JVM provides specifications for all the implementations to JRE. Main Purpose JDK is mainly used for code development and execution. JRE is mainly used for environment creation to execute the code. JVM provides specifications for all the implementations to JRE. Tools provided JDK provides tools like compiler, debuggers, etc for code development JRE provides libraries and classes required by JVM to run the program. JVM does not include any tools, but instead, it provides the specification for implementation. Tools provided JDK provides tools like compiler, debuggers, etc for code development JRE provides libraries and classes required by JVM to run the program. JVM does not include any tools, but instead, it provides the specification for implementation. Summary JDK = (JRE) + Development tools JRE = (JVM) + Libraries to execute the application JVM = Runtime environment to execute Java byte code. Summary JDK = (JRE) + Development tools JRE = (JVM) + Libraries to execute the application JVM = Runtime environment to execute Java byte code.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "13. What are the differences between HashMap and HashTable in Java?",
        "answer": "HashMap HashTable\nHashMap is not synchronized thereby making it better for non-threaded applications. HashTable is synchronized and hence it is suitable for threaded applications.\nAllows only one null key but any number of null in the values. This does not allow null in both keys or values.\nSupports order of insertion by making use of its subclass LinkedHashMap. Order of insertion is not guaranteed in HashTable. HashMap HashTable\nHashMap is not synchronized thereby making it better for non-threaded applications. HashTable is synchronized and hence it is suitable for threaded applications.\nAllows only one null key but any number of null in the values. This does not allow null in both keys or values.\nSupports order of insertion by making use of its subclass LinkedHashMap. Order of insertion is not guaranteed in HashTable. HashMap HashTable HashMap HashTable HashMap HashTable HashMap is not synchronized thereby making it better for non-threaded applications. HashTable is synchronized and hence it is suitable for threaded applications.\nAllows only one null key but any number of null in the values. This does not allow null in both keys or values.\nSupports order of insertion by making use of its subclass LinkedHashMap. Order of insertion is not guaranteed in HashTable. HashMap is not synchronized thereby making it better for non-threaded applications. HashTable is synchronized and hence it is suitable for threaded applications. HashMap is not synchronized thereby making it better for non-threaded applications. HashTable is synchronized and hence it is suitable for threaded applications. Allows only one null key but any number of null in the values. This does not allow null in both keys or values. Allows only one null key but any number of null in the values. This does not allow null in both keys or values. Supports order of insertion by making use of its subclass LinkedHashMap. Order of insertion is not guaranteed in HashTable. Supports order of insertion by making use of its subclass LinkedHashMap. Order of insertion is not guaranteed in HashTable.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "14. What is the importance of reflection in Java?",
        "answer": "The term reflection is used for describing the inspection capability of a code on other code either of itself or of its system and modify it during runtime.\nConsider an example where we have an object of unknown type and we have a method ‘fooBar()’ which we need to call on the object. The static typing system of Java doesn't allow this method invocation unless the type of the object is known beforehand. This can be achieved using reflection which allows the code to scan the object and identify if it has any method called “fooBar()” and only then call the method if needed. The term reflection is used for describing the inspection capability of a code on other code either of itself or of its system and modify it during runtime. reflection Consider an example where we have an object of unknown type and we have a method ‘fooBar()’ which we need to call on the object. The static typing system of Java doesn't allow this method invocation unless the type of the object is known beforehand. This can be achieved using reflection which allows the code to scan the object and identify if it has any method called “fooBar()” and only then call the method if needed. Method methodOfFoo = fooObject.getClass().getMethod(\"fooBar\", null);\nmethodOfFoo.invoke(fooObject, null); Method methodOfFoo = fooObject.getClass().getMethod(\"fooBar\", null);\nmethodOfFoo.invoke(fooObject, null); \"fooBar\" null null Using reflection has its own cons:\nSpeed — Method invocations due to reflection are about three times slower than the direct method calls.\nType safety — When a method is invoked via its reference wrongly using reflection, invocation fails at runtime as it is not detected at compile/load time.\nTraceability — Whenever a reflective method fails, it is very difficult to find the root cause of this failure due to a huge stack trace. One has to deep dive into the invoke() and proxy() method logs to identify the root cause.\nHence, it is advisable to follow solutions that don't involve reflection and use this method as a last resort. Using reflection has its own cons:\nSpeed — Method invocations due to reflection are about three times slower than the direct method calls.\nType safety — When a method is invoked via its reference wrongly using reflection, invocation fails at runtime as it is not detected at compile/load time.\nTraceability — Whenever a reflective method fails, it is very difficult to find the root cause of this failure due to a huge stack trace. One has to deep dive into the invoke() and proxy() method logs to identify the root cause. Speed — Method invocations due to reflection are about three times slower than the direct method calls.\nType safety — When a method is invoked via its reference wrongly using reflection, invocation fails at runtime as it is not detected at compile/load time.\nTraceability — Whenever a reflective method fails, it is very difficult to find the root cause of this failure due to a huge stack trace. One has to deep dive into the invoke() and proxy() method logs to identify the root cause. Speed — Method invocations due to reflection are about three times slower than the direct method calls. Type safety — When a method is invoked via its reference wrongly using reflection, invocation fails at runtime as it is not detected at compile/load time. Traceability — Whenever a reflective method fails, it is very difficult to find the root cause of this failure due to a huge stack trace. One has to deep dive into the invoke() and proxy() method logs to identify the root cause. Hence, it is advisable to follow solutions that don't involve reflection and use this method as a last resort.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "15. What are the different ways of threads usage?",
        "answer": "We can define and implement a thread in java using two ways:\nExtending the Thread class We can define and implement a thread in java using two ways:\nExtending the Thread class Extending the Thread class Extending the Thread class Extending the Thread class class InterviewBitThreadExample extends Thread{  \n   public void run(){  \n       System.out.println(\"Thread runs...\");  \n   }  \n   public static void main(String args[]){  \n       InterviewBitThreadExample ib = new InterviewBitThreadExample();  \n       ib.start();  \n   }  \n} class InterviewBitThreadExample extends Thread{  \n   public void run(){  \n       System.out.println(\"Thread runs...\");  \n   }  \n   public static void main(String args[]){  \n       InterviewBitThreadExample ib = new InterviewBitThreadExample();  \n       ib.start();  \n   }  \n} class InterviewBitThreadExample extends Thread class InterviewBitThreadExample extends Thread public void run() public void run () \"Thread runs...\" public static void main(String args[]) public static void main (String args[]) new Implementing the Runnable interface Implementing the Runnable interface Implementing the Runnable interface class InterviewBitThreadExample implements Runnable{  \n   public void run(){  \n       System.out.println(\"Thread runs...\");  \n   }  \n   public static void main(String args[]){  \n       Thread ib = new Thread(new InterviewBitThreadExample()); \n       ib.start();  \n   }  \n} class InterviewBitThreadExample implements Runnable{  \n   public void run(){  \n       System.out.println(\"Thread runs...\");  \n   }  \n   public static void main(String args[]){  \n       Thread ib = new Thread(new InterviewBitThreadExample()); \n       ib.start();  \n   }  \n} class InterviewBitThreadExample implements Runnable class InterviewBitThreadExample implements Runnable public void run() public void run () \"Thread runs...\" public static void main(String args[]) public static void main (String args[]) new new Implementing a thread using the method of Runnable interface is more preferred and advantageous as Java does not have support for multiple inheritances of classes.\nstart() method is used for creating a separate call stack for the thread execution. Once the call stack is created, JVM calls the run() method for executing the thread in that call stack. Implementing a thread using the method of Runnable interface is more preferred and advantageous as Java does not have support for multiple inheritances of classes. start() method is used for creating a separate call stack for the thread execution. Once the call stack is created, JVM calls the run() method for executing the thread in that call stack. start() run()",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "16. What are the different types of Thread Priorities in Java? And what is the default priority of a thread assigned by JVM?",
        "answer": "There are a total of 3 different types of priority available in Java. MIN_PRIORITY: It has an integer value assigned with 1.\nMAX_PRIORITY: It has an integer value assigned with 10.\nNORM_PRIORITY: It has an integer value assigned with 5. MIN_PRIORITY:  MAX_PRIORITY:  NORM_PRIORITY: In Java, Thread with MAX_PRIORITY gets the first chance to execute. But the default priority for any thread is NORM_PRIORITY assigned by JVM.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "17. What is the difference between the program and the process?",
        "answer": "A program can be defined as a line of code written in order to accomplish a particular task. Whereas the process can be defined as the programs which are under execution. \nA program doesn't execute directly by the CPU. First, the resources are allocated to the program and when it is ready for execution then it is a process. A program can be defined as a line of code written in order to accomplish a particular task. Whereas the process can be defined as the programs which are under execution. A program doesn't execute directly by the CPU. First, the resources are allocated to the program and when it is ready for execution then it is a process.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "18. What is the difference between the ‘throw’ and ‘throws’ keyword in java?",
        "answer": "The ‘throw’ keyword is used to manually throw the exception to the calling method.\nAnd the ‘throws’ keyword is used in the function definition to inform the calling method that this method throws the exception. So if you are calling, then you have to handle the exception. The ‘throw’ keyword is used to manually throw the exception to the calling method. throw And the ‘throws’ keyword is used in the function definition to inform the calling method that this method throws the exception. So if you are calling, then you have to handle the exception. throws Example - Example - class Main {\n   public static int testExceptionDivide(int a, int b) throws ArithmeticException{\n       if(a == 0 || b == 0)\n           throw new ArithmeticException();\n       return a/b;\n   }\n   public static void main(String args[]) {\n       try{\n           testExceptionDivide(10, 0);\n       }\n       catch(ArithmeticException e){\n           //Handle the exception\n       }\n   }\n} class Main {\n   public static int testExceptionDivide(int a, int b) throws ArithmeticException{\n       if(a == 0 || b == 0)\n           throw new ArithmeticException();\n       return a/b;\n   }\n   public static void main(String args[]) {\n       try{\n           testExceptionDivide(10, 0);\n       }\n       catch(ArithmeticException e){\n           //Handle the exception\n       }\n   }\n} class Main class Main public static int testExceptionDivide(int a, int b) throws ArithmeticException public static int testExceptionDivide (int a, int b) int int throws if 0 0 throw new return public static void main(String args[]) public static void main (String args[]) try 10 0 catch //Handle the exception Here in the above snippet, the method testExceptionDivide throws an exception. So if the main method is calling it then it must have handled the exception. Otherwise, the main method can also throw the exception to JVM. And the method testExceptionDivide 'throws’ the exception based on the condition.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "19. What are the differences between constructor and method of a class in Java?",
        "answer": "Constructor Method\nConstructor is used for initializing the object state. Method is used for exposing the object's behavior.\nConstructor has no return type. Method should have a return type. Even if it does not return anything, return type is void.\nConstructor gets invoked implicitly. Method has to be invoked on the object explicitly.\nIf the constructor is not defined, then a default constructor is provided by the java compiler. If a method is not defined, then the compiler does not provide it.\nThe constructor name should be equal to the class name. The name of the method can have any name or have a class name too.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here A method can be defined as final but it cannot be overridden in its subclasses.\nFinal variable instantiations are possible inside a constructor and the scope of this applies to the whole class and its objects. A final variable if initialised inside a method ensures that the variable cant be changed only within the scope of that method. Constructor Method\nConstructor is used for initializing the object state. Method is used for exposing the object's behavior.\nConstructor has no return type. Method should have a return type. Even if it does not return anything, return type is void.\nConstructor gets invoked implicitly. Method has to be invoked on the object explicitly.\nIf the constructor is not defined, then a default constructor is provided by the java compiler. If a method is not defined, then the compiler does not provide it.\nThe constructor name should be equal to the class name. The name of the method can have any name or have a class name too.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here A method can be defined as final but it cannot be overridden in its subclasses.\nFinal variable instantiations are possible inside a constructor and the scope of this applies to the whole class and its objects. A final variable if initialised inside a method ensures that the variable cant be changed only within the scope of that method. Constructor Method Constructor Method Constructor Method Constructor is used for initializing the object state. Method is used for exposing the object's behavior.\nConstructor has no return type. Method should have a return type. Even if it does not return anything, return type is void.\nConstructor gets invoked implicitly. Method has to be invoked on the object explicitly.\nIf the constructor is not defined, then a default constructor is provided by the java compiler. If a method is not defined, then the compiler does not provide it.\nThe constructor name should be equal to the class name. The name of the method can have any name or have a class name too.\nA constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here A method can be defined as final but it cannot be overridden in its subclasses.\nFinal variable instantiations are possible inside a constructor and the scope of this applies to the whole class and its objects. A final variable if initialised inside a method ensures that the variable cant be changed only within the scope of that method. Constructor is used for initializing the object state. Method is used for exposing the object's behavior. Constructor is used for initializing the object state. Method is used for exposing the object's behavior. Constructor has no return type. Method should have a return type. Even if it does not return anything, return type is void. Constructor has no return type. Method should have a return type. Even if it does not return anything, return type is void. Constructor gets invoked implicitly. Method has to be invoked on the object explicitly. Constructor gets invoked implicitly. Method has to be invoked on the object explicitly. If the constructor is not defined, then a default constructor is provided by the java compiler. If a method is not defined, then the compiler does not provide it. If the constructor is not defined, then a default constructor is provided by the java compiler. If a method is not defined, then the compiler does not provide it. The constructor name should be equal to the class name. The name of the method can have any name or have a class name too. The constructor name should be equal to the class name. The name of the method can have any name or have a class name too. A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here A method can be defined as final but it cannot be overridden in its subclasses. A constructor cannot be marked as final because whenever a class is inherited, the constructors are not inherited. Hence, marking it final doesn't make sense. Java throws compilation error saying - modifier final not allowed here modifier final not allowed here A method can be defined as final but it cannot be overridden in its subclasses. Final variable instantiations are possible inside a constructor and the scope of this applies to the whole class and its objects. A final variable if initialised inside a method ensures that the variable cant be changed only within the scope of that method. Final variable instantiations are possible inside a constructor and the scope of this applies to the whole class and its objects. A final variable if initialised inside a method ensures that the variable cant be changed only within the scope of that method.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "20. Identify the output of the below java program and Justify your answer.",
        "answer": "class Main {\n    public static void main(String args[]) {\n        Scaler s = new Scaler(5);\n    }\n}\nclass InterviewBit{\n    InterviewBit(){\n        System.out.println(\" Welcome to InterviewBit \");\n    }\n}\nclass Scaler extends InterviewBit{\n    Scaler(){\n        System.out.println(\" Welcome to Scaler Academy \");\n    }\n    Scaler(int x){\n        this();\n        super();\n        System.out.println(\" Welcome to Scaler Academy 2\");\n    }\n} class Main {\n    public static void main(String args[]) {\n        Scaler s = new Scaler(5);\n    }\n}\nclass InterviewBit{\n    InterviewBit(){\n        System.out.println(\" Welcome to InterviewBit \");\n    }\n}\nclass Scaler extends InterviewBit{\n    Scaler(){\n        System.out.println(\" Welcome to Scaler Academy \");\n    }\n    Scaler(int x){\n        this();\n        super();\n        System.out.println(\" Welcome to Scaler Academy 2\");\n    }\n} class Main class Main public static void main(String args[]) public static void main (String args[]) new 5 class InterviewBit class InterviewBit \" Welcome to InterviewBit \" class Scaler extends InterviewBit class Scaler extends InterviewBit \" Welcome to Scaler Academy \" int this super \" Welcome to Scaler Academy 2\" The above code will throw the compilation error. It is because the super() is used to call the parent class constructor. But there is the condition that super() must be the first statement in the block. Now in this case, if we replace this() with super() then also it will throw the compilation error. Because this() also has to be the first statement in the block. So in conclusion, we can say that we cannot use this() and super() keywords in the same block. super() this() super() this() super()",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "21. Java works as “pass by value” or “pass by reference” phenomenon?",
        "answer": "Java always works as a “pass by value”. There is nothing called a “pass by reference” in Java. However, when the object is passed in any method, the address of the value is passed due to the nature of object handling in Java. When an object is passed, a copy of the reference is created by Java and that is passed to the method. The objects point to the same memory location. 2 cases might happen inside the method: Case 1: When the object is pointed to another location: In this case, the changes made to that object do not get reflected the original object before it was passed to the method as the reference points to another location. Case 1: When the object is pointed to another location: In this case, the changes made to that object do not get reflected the original object before it was passed to the method as the reference points to another location. Case 1: For example: class InterviewBitTest{\n   int num;\n   InterviewBitTest(int x){ \n       num = x; \n   }\n   InterviewBitTest(){ \n       num = 0; \n   }\n}\nclass Driver {\n   public static void main(String[] args)\n   {\n       //create a reference\n       InterviewBitTest ibTestObj = new InterviewBitTest(20);\n       //Pass the reference to updateObject Method\n       updateObject(ibTestObj);\n       //After the updateObject is executed, check for the value of num in the object.\n       System.out.println(ibTestObj.num);\n   }\n   public static void updateObject(InterviewBitTest ibObj)\n   {\n       // Point the object to new reference\n       ibObj = new InterviewBitTest();\n       // Update the value \n       ibObj.num = 50;\n   }\n}\nOutput:\n20 class InterviewBitTest{\n   int num;\n   InterviewBitTest(int x){ \n       num = x; \n   }\n   InterviewBitTest(){ \n       num = 0; \n   }\n}\nclass Driver {\n   public static void main(String[] args)\n   {\n       //create a reference\n       InterviewBitTest ibTestObj = new InterviewBitTest(20);\n       //Pass the reference to updateObject Method\n       updateObject(ibTestObj);\n       //After the updateObject is executed, check for the value of num in the object.\n       System.out.println(ibTestObj.num);\n   }\n   public static void updateObject(InterviewBitTest ibObj)\n   {\n       // Point the object to new reference\n       ibObj = new InterviewBitTest();\n       // Update the value \n       ibObj.num = 50;\n   }\n}\nOutput:\n20 class InterviewBitTest class InterviewBitTest int int 0 class Driver class Driver public static void main(String[] args) public static void main (String[] args) //create a reference new 20 //Pass the reference to updateObject Method //After the updateObject is executed, check for the value of num in the object. public static void updateObject(InterviewBitTest ibObj) public static void updateObject (InterviewBitTest ibObj) // Point the object to new reference new // Update the value 50 20 Case 2: When object references are not modified: In this case, since we have the copy of reference the main object pointing to the same memory location, any changes in the content of the object get reflected in the original object. Case 2: When object references are not modified: In this case, since we have the copy of reference the main object pointing to the same memory location, any changes in the content of the object get reflected in the original object. Case 2: For example: class InterviewBitTest{\n   int num;\n   InterviewBitTest(int x){ \n       num = x; \n   }\n   InterviewBitTest(){ \n       num = 0; \n   }\n}\nclass Driver{\n   public static void main(String[] args)\n   {\n       //create a reference\n       InterviewBitTest ibTestObj = new InterviewBitTest(20);\n       //Pass the reference to updateObject Method\n       updateObject(ibTestObj);\n       //After the updateObject is executed, check for the value of num in the object.\n       System.out.println(ibTestObj.num);\n   }\n   public static void updateObject(InterviewBitTest ibObj)\n   {\n       // no changes are made to point the ibObj to new location\n       // Update the value of num\n       ibObj.num = 50;\n   }\n}\nOutput:\n50 class InterviewBitTest{\n   int num;\n   InterviewBitTest(int x){ \n       num = x; \n   }\n   InterviewBitTest(){ \n       num = 0; \n   }\n}\nclass Driver{\n   public static void main(String[] args)\n   {\n       //create a reference\n       InterviewBitTest ibTestObj = new InterviewBitTest(20);\n       //Pass the reference to updateObject Method\n       updateObject(ibTestObj);\n       //After the updateObject is executed, check for the value of num in the object.\n       System.out.println(ibTestObj.num);\n   }\n   public static void updateObject(InterviewBitTest ibObj)\n   {\n       // no changes are made to point the ibObj to new location\n       // Update the value of num\n       ibObj.num = 50;\n   }\n}\nOutput:\n50 class InterviewBitTest class InterviewBitTest int int 0 class Driver class Driver public static void main(String[] args) public static void main (String[] args) //create a reference new 20 //Pass the reference to updateObject Method //After the updateObject is executed, check for the value of num in the object. public static void updateObject(InterviewBitTest ibObj) public static void updateObject (InterviewBitTest ibObj) // no changes are made to point the ibObj to new location // Update the value of num 50 50",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "22. What is the ‘IS-A ‘ relationship in OOPs java?",
        "answer": "‘IS-A’ relationship is another name for inheritance. When we inherit the base class from the derived class, then it forms a relationship between the classes. So that relationship is termed an ‘IS-A’ Relationship. Example - Consider a Television (Typical CRT TV). Now another Smart TV  that is inherited from television class. So we can say that the Smart iv is also a TV. Because CRT TV things can also be done in the Smart TV. Example   So here ‘IS-A’ Relationship formed. [ SmartTV ‘IS-A’ TV ]. [ SmartTV ‘IS-A’ TV ]",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "23. Which among String or String Buffer should be preferred when there are lot of updates required to be done in the data?",
        "answer": "StringBuffer is mutable and dynamic in nature whereas String is immutable. Every updation / modification of String creates a new String thereby overloading the string pool with unnecessary objects. Hence, in the cases of a lot of updates, it is always preferred to use StringBuffer as it will reduce the overhead of the creation of multiple String objects in the string pool.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "24. How to not allow serialization of attributes of a class in Java?",
        "answer": "In order to achieve this, the attribute can be declared along with the usage of transient keyword as shown below: In order to achieve this, the attribute can be declared along with the usage of transient keyword as shown below: transient public class InterviewBitExample { \n\n   private transient String someInfo; \n   private String name;\n   private int id;\n   // :\n   // Getters setters\n   // :\n} public class InterviewBitExample { \n\n   private transient String someInfo; \n   private String name;\n   private int id;\n   // :\n   // Getters setters\n   // :\n} public class InterviewBitExample class InterviewBitExample private transient private private int // : // Getters setters // : In the above example, all the fields except someInfo can be serialized. In the above example, all the fields except someInfo can be serialized. someInfo",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "25. What happens if the static modifier is not included in the main method signature in Java?",
        "answer": "There wouldn't be any compilation error. But then the program is run, since the JVM cant map the main method signature, the code throws “NoSuchMethodError” error at the runtime.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "26. Consider the below program, identify the output, and also state the reason for that.",
        "answer": "public class Main{\npublic static void main(String[] args) {\n System.out.println(\" Hello. Main Method. \");\n}\npublic static void main(int[] args) {\n System.out.println(\" Hello. Main Method2. \");\n}\n} public class Main{\npublic static void main(String[] args) {\n System.out.println(\" Hello. Main Method. \");\n}\npublic static void main(int[] args) {\n System.out.println(\" Hello. Main Method2. \");\n}\n} public class Main class Main public static void main(String[] args) public static void main (String[] args) \" Hello. Main Method. \" public static void main(int[] args) public static void main (int[] args) int \" Hello. Main Method2. \" The output of the above program will be Hello. Main Method. This is because JVM will always call the main method based on the definition it already has. Doesn't matter how many main methods we overload it will only execute one main method based on its declaration in JVM. Hello. Main Method",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "27. Can we make the main() thread a daemon thread?",
        "answer": "In java multithreading, the main() threads are always non-daemon threads. And there is no way we can change the nature of the non-daemon thread to the daemon thread.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "28. What happens if there are multiple main methods inside one class in Java?",
        "answer": "The program can't compile as the compiler says that the method has been already defined inside the class.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "29. What do you understand by Object Cloning and how do you achieve it in Java?",
        "answer": "It is the process of creating an exact copy of any object. In order to support this, a java class has to implement the Cloneable interface of java.lang package and override the clone() method provided by the Object class the syntax of which is: It is the process of creating an exact copy of any object. In order to support this, a java class has to implement the Cloneable interface of java.lang package and override the clone() method provided by the Object class the syntax of which is: protected Object clone() throws CloneNotSupportedException{\n return (Object)super.clone();\n} protected Object clone() throws CloneNotSupportedException{\n return (Object)super.clone();\n} protected Object clone() throws CloneNotSupportedException protected clone () throws return super In case the Cloneable interface is not implemented and just the method is overridden, it results in CloneNotSupportedException in Java. In case the Cloneable interface is not implemented and just the method is overridden, it results in CloneNotSupportedException in Java.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "30. How does an exception propagate in the code?",
        "answer": "When an exception occurs, first it searches to locate the matching catch block. In case, the matching catch block is located, then that block would be executed. Else, the exception propagates through the method call stack and goes into the caller method where the process of matching the catch block is performed. This propagation happens until the matching catch block is found. If the match is not found, then the program gets terminated in the main method.  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "31. How do exceptions affect the program if it doesn't handle them?",
        "answer": "Exceptions are runtime errors. Suppose we are making an android application with java. And it all works fine but there is an exceptional case when the application tries to get the file from storage and the file doesn’t exist (This is the case of exception in java). And if this case is not handled properly then the application will crash. This will be a bad experience for users.  This is the type of error that cannot be controlled by the programmer. But programmers can take some steps to avoid this so that the application won’t crash. The proper action can be taken at this step.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "32. Is it mandatory for a catch block to be followed after a try block?",
        "answer": "No, it is not necessary for a catch block to be present after a try block. - A try block should be followed either by a catch block or by a finally block. If the exceptions likelihood is more, then they should be declared using the throws clause of the method.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "33. Will the finally block get executed when the return statement is written at the end of try block and catch block as shown below?",
        "answer": "public int someMethod(int i){\n   try{\n       //some statement\n       return 1;\n   }catch(Exception e){\n       //some statement\n       return 999;\n   }finally{\n       //finally block statements\n   }\n} public int someMethod(int i){\n   try{\n       //some statement\n       return 1;\n   }catch(Exception e){\n       //some statement\n       return 999;\n   }finally{\n       //finally block statements\n   }\n} public int someMethod(int i) public int someMethod (int i) int try //some statement return 1 catch //some statement return 999 finally //finally block statements finally block will be executed irrespective of the exception or not. The only case where finally block is not executed is when it encounters ‘System.exit()’ method anywhere in try/catch block.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "34. Can you call a constructor of a class inside the another constructor?",
        "answer": "Yes, the concept can be termed as constructor chaining and can be achieved using this(). this()  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "35. Contiguous memory locations are usually used for storing actual values in an array but not in ArrayList. Explain.",
        "answer": "In the case of ArrayList, data storing in the form of primitive data types (like int, float, etc.) is not possible. The data members/objects present in the ArrayList have references to the objects which are located at various sites in the memory. Thus, storing of actual objects or non-primitive data types (like Integer, Double, etc.) takes place in various memory locations.   However, the same does not apply to the arrays. Object or primitive type values can be stored in arrays in contiguous memory locations, hence every element does not require any reference to the next element.  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "36. Why does the java array index start with 0?",
        "answer": "It is because the 0 index array avoids the extra arithmetic operation to calculate the memory address. Example - Consider the array and assume each element takes 4-byte memory space. Then the address will be like this -   Now if we want to access index 4. Then internally java calculates the address using the formula- [Base Address + (index * no_of_bytes)]. So according to this. The starting address of the index 4 will be - [100 + (4*4)] = 116. And exactly that's what the address is calculated. \nNow consider the same with 1 index Array - [Base Address + (index * no_of_bytes)] [100 + (4*4)] = 116    Now if we apply the same formula here. Then we get - 116 as the starting address of the 4th index. Which is wrong. Then we need to apply formula - [Base Address + ((index-1) * no_of_bytes)]. 116 Base Address + ((index-1) * no_of_bytes)] And for calculating this, an extra arithmetic operation has to be performed. And consider the case where millions of addresses need to be calculated, this causes complexity. So to avoid this, ) the index array is supported by java.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "37. Why is the remove method faster in the linked list than in an array?",
        "answer": "In the linked list, we only need to adjust the references when we want to delete the element from either end or the front of the linked list. But in the array, indexes are used. So to manage proper indexing, we need to adjust the values from the array So this adjustment of value is costlier than the adjustment of references. Example - To Delete from the front of the linked list, internally the references adjustments happened like this. Example   The only thing that will change is that the head pointer will point to the head’s next node. And delete the previous node. That is the constant time operation. Whereas in the ArrayList, internally it should work like this-   For deletion of the first element, all the next element has to move to one place ahead. So this copying value takes time. So that is the reason why removing in ArrayList is slower than LinkedList.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "38. How many overloaded add() and addAll() methods are available in the List interface? Describe the need and uses.",
        "answer": "There are a total of 4 overloaded methods for add() and addAll() methods available in List Interface. The below table states the description of all. Return Type Method Description\nboolean add(Element e): This method is used for adding the element at the end of the List. The Datatype of the element is of any type it has been initially assigned with. It returns the boolean indicating successfully inserted or not.\nvoid add(int index, Element e): This method is the overloaded version of add() method. In this, along with the element, the index is also passed to the method for the specific index the value needs to be inserted. \nboolean addAll(Collection <extends ? Element > c): This method helps to add all elements at the end of collections from the list received in the parameter. It contains an iterator that helps to iterate the list and add the elements to the collection.\nboolean addAll(int index, Collection <extends ? Element > c): This is the overloaded method for addAll() method. In this along with the list, we can pass the specified index from which the list elements need to be added. Return Type Method Description\nboolean add(Element e): This method is used for adding the element at the end of the List. The Datatype of the element is of any type it has been initially assigned with. It returns the boolean indicating successfully inserted or not.\nvoid add(int index, Element e): This method is the overloaded version of add() method. In this, along with the element, the index is also passed to the method for the specific index the value needs to be inserted. \nboolean addAll(Collection <extends ? Element > c): This method helps to add all elements at the end of collections from the list received in the parameter. It contains an iterator that helps to iterate the list and add the elements to the collection.\nboolean addAll(int index, Collection <extends ? Element > c): This is the overloaded method for addAll() method. In this along with the list, we can pass the specified index from which the list elements need to be added. Return Type Method Description Return Type Method Description Return Type Method Description boolean add(Element e): This method is used for adding the element at the end of the List. The Datatype of the element is of any type it has been initially assigned with. It returns the boolean indicating successfully inserted or not.\nvoid add(int index, Element e): This method is the overloaded version of add() method. In this, along with the element, the index is also passed to the method for the specific index the value needs to be inserted. \nboolean addAll(Collection <extends ? Element > c): This method helps to add all elements at the end of collections from the list received in the parameter. It contains an iterator that helps to iterate the list and add the elements to the collection.\nboolean addAll(int index, Collection <extends ? Element > c): This is the overloaded method for addAll() method. In this along with the list, we can pass the specified index from which the list elements need to be added. boolean add(Element e): This method is used for adding the element at the end of the List. The Datatype of the element is of any type it has been initially assigned with. It returns the boolean indicating successfully inserted or not. boolean add(Element e): This method is used for adding the element at the end of the List. The Datatype of the element is of any type it has been initially assigned with. It returns the boolean indicating successfully inserted or not. add(Element e) void add(int index, Element e): This method is the overloaded version of add() method. In this, along with the element, the index is also passed to the method for the specific index the value needs to be inserted. void add(int index, Element e): This method is the overloaded version of add() method. In this, along with the element, the index is also passed to the method for the specific index the value needs to be inserted. add(int index, Element e) boolean addAll(Collection <extends ? Element > c): This method helps to add all elements at the end of collections from the list received in the parameter. It contains an iterator that helps to iterate the list and add the elements to the collection. boolean addAll(Collection <extends ? Element > c): This method helps to add all elements at the end of collections from the list received in the parameter. It contains an iterator that helps to iterate the list and add the elements to the collection. addAll(Collection <extends ? Element > c) boolean addAll(int index, Collection <extends ? Element > c): This is the overloaded method for addAll() method. In this along with the list, we can pass the specified index from which the list elements need to be added. boolean addAll(int index, Collection <extends ? Element > c): This is the overloaded method for addAll() method. In this along with the list, we can pass the specified index from which the list elements need to be added. addAll(int index, Collection <extends ? Element > c)",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "39. How does the size of ArrayList grow dynamically? And also state how it is implemented internally.",
        "answer": "ArrayList is implemented in such a way that it can grow dynamically. We don't need to specify the size of ArrayList. For adding the values in it, the methodology it uses is - 1. Consider initially that there are 2 elements in the ArrayList. [2, 3]. [2, 3]   2. If we need to add the element into this. Then internally what will happen is- ArrayList will allocate the new ArrayList of Size (current size + half of the current size). And add the old elements into the new. Old - [2, 3],    New - [2, 3, null]. ArrayList will allocate the new ArrayList of Size (current size + half of the current size). And add the old elements into the new. Old - [2, 3],    New - [2, 3, null].   Then the new value will be inserted into it. [2, 3, 4, null]. And for the next time, the extra space will be available for the value to be inserted. Then the new value will be inserted into it. [2, 3, 4, null]. And for the next time, the extra space will be available for the value to be inserted.   3. This process continues and the time taken to perform all of these is considered as the amortized constant time. This is how the ArrayList grows dynamically. And when we delete any entry from the ArrayList then the following steps are performed - 1. It searches for the element index in the array. Searching takes some time. Typically it’s O(n) because it needs to search for the element in the entire array.   2. After searching the element, it needs to shift the element from the right side to fill the index.   So this is how the elements are deleted from the ArrayList internally. Similarly, the search operations are also implemented internally as defined in removing elements from the list (searching for elements to delete).",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "1. Although inheritance is a popular OOPs concept, it is less advantageous than composition. Explain.",
        "answer": "Inheritance lags behind composition in the following scenarios: Multiple-inheritance is not possible in Java. Classes can only extend from one superclass. In cases where multiple functionalities are required, for example - to read and write information into the file, the pattern of composition is preferred. The writer, as well as reader functionalities, can be made use of by considering them as the private members.\nComposition assists in attaining high flexibility and prevents breaking of encapsulation.\nUnit testing is possible with composition and not inheritance. When a developer wants to test a class composing a different class, then Mock Object can be created for signifying the composed class to facilitate testing. This technique is not possible with the help of inheritance as the derived class cannot be tested without the help of the superclass in inheritance.\nThe loosely coupled nature of composition is preferable over the tightly coupled nature of inheritance. Multiple-inheritance is not possible in Java. Classes can only extend from one superclass. In cases where multiple functionalities are required, for example - to read and write information into the file, the pattern of composition is preferred. The writer, as well as reader functionalities, can be made use of by considering them as the private members. Composition assists in attaining high flexibility and prevents breaking of encapsulation. Unit testing is possible with composition and not inheritance. When a developer wants to test a class composing a different class, then Mock Object can be created for signifying the composed class to facilitate testing. This technique is not possible with the help of inheritance as the derived class cannot be tested without the help of the superclass in inheritance. The loosely coupled nature of composition is preferable over the tightly coupled nature of inheritance. Let’s take an example: package comparison;\npublic class Top {\npublic int start() {\n  return 0;\n}\n}\nclass Bottom extends Top {\n public int stop() {\n  return 0;\n }\n} package comparison;\npublic class Top {\npublic int start() {\n  return 0;\n}\n}\nclass Bottom extends Top {\n public int stop() {\n  return 0;\n }\n} package public class Top class Top public int start() public int start () return 0 class Bottom extends Top class Bottom extends Top public int stop() public int stop () return 0 In the above example, inheritance is followed. Now, some modifications are done to the Top class like this: public class Top {\n public int start() {\n  return 0;\n }\n public void stop() {\n }\n} public class Top {\n public int start() {\n  return 0;\n }\n public void stop() {\n }\n} public class Top class Top public int start() public int start () return 0 public void stop() public void stop () If the new implementation of the Top class is followed, a compile-time error is bound to occur in the Bottom class. Incompatible return type is there for the Top.stop() function. Changes have to be made to either the Top or the Bottom class to ensure compatibility. However, the composition technique can be utilized to solve the given problem: class Bottom {\n Top par = new Top();\n public int stop() {\n  par.start();\n  par.stop();\n  return 0;\n }\n} class Bottom {\n Top par = new Top();\n public int stop() {\n  par.start();\n  par.stop();\n  return 0;\n }\n} class Bottom class Bottom new public int stop() public int stop () return 0",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "2. What is the difference between ‘>>’ and ‘>>>’ operators in java?",
        "answer": "These 2 are the bitwise right shift operators. Although both operators look similar. But there is a minimal difference between these two right shift operators. ‘>>’ Bitwise Right Shift Operator- This operator shifts each bit to its right position. And this maintains the signed bit.\n‘>>>’ Bitwise Right Shift Operator with trailing zero- This operator also shifts each bit to its right. But this doesn’t maintain the signed bit. This operator makes the Most significant bit to 0. ‘>>’ Bitwise Right Shift Operator- This operator shifts each bit to its right position. And this maintains the signed bit. ‘>>’ Bitwise Right Shift Operator ‘>>>’ Bitwise Right Shift Operator with trailing zero- This operator also shifts each bit to its right. But this doesn’t maintain the signed bit. This operator makes the Most significant bit to 0. ‘>>>’ Bitwise Right Shift Operator with trailing zero Example- Num1 = 8, Num2 = -8. Example- So the binary form of these numbers are - Num1 = 00000000 00000000 00000000 00001000 \nNum2 = 11111111 11111111 11111111  11111000 Num1 = 00000000 00000000 00000000 00001000  Num2 = 11111111 11111111 11111111  11111000 ‘>>’ Operator : 8 >> 1 (Shift by one bit) : ‘>>’ Operator Num1 = 00000000 00000000 00000000 00000100\nNum2 = 11111111 11111111 11111111  11111100 Num1 = 00000000 00000000 00000000 00000100  Num2 = 11111111 11111111 11111111  11111100 ‘>>>’ Operator : 8 >>> 1 (Shift by one bit) = ‘>>>’ Operator Num1 = 00000000 00000000 00000000 00000100\nNum2 = 01111111 11111111 11111111 11111100 Num1 = 00000000 00000000 00000000 00000100  Num2 = 01111111 11111111 11111111 11111100",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "3. What are Composition and Aggregation? State the difference.",
        "answer": "Composition, and Aggregation help to build (Has - A - Relationship) between classes and objects. But both are not the same in the end. Let’s understand with the help of an example. Let’s understand with the help of an example. Consider the University as a class that has some departments in it. So the university will be the container object. And departments in it will contain objects. Now in this case, if the container object destroys then the contained objects will also get destroyed automatically.  So here we can say that there is a strong association between the objects. So this Strong Association is called Composition.\nNow consider one more example. Suppose we have a class department and there are several professors' objects there in the department. Now if the department class is destroyed then the professor's object will become free to bind with other objects. Because container objects (Department) only hold the references of contained objects (Professor’s). So here is the weak association between the objects. And this weak association is called Aggregation. Consider the University as a class that has some departments in it. So the university will be the container object. And departments in it will contain objects. Now in this case, if the container object destroys then the contained objects will also get destroyed automatically.  So here we can say that there is a strong association between the objects. So this Strong Association is called Composition. Composition Now consider one more example. Suppose we have a class department and there are several professors' objects there in the department. Now if the department class is destroyed then the professor's object will become free to bind with other objects. Because container objects (Department) only hold the references of contained objects (Professor’s). So here is the weak association between the objects. And this weak association is called Aggregation. Aggregation",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "4. How is the creation of a String using new() different from that of a literal?",
        "answer": "When a String is formed as a literal with the assistance of an assignment operator, it makes its way into the String constant pool so that String Interning can take place. This same object in the heap will be referenced by a different String if the content is the same for both of them. public bool checking() {\nString first = \"InterviewBit\";\nString second = \"InterviewBit\";\nif (first == second)\n return true;\nelse\n return false;\n} public bool checking() {\nString first = \"InterviewBit\";\nString second = \"InterviewBit\";\nif (first == second)\n return true;\nelse\n return false;\n} public bool checking() public checking () \"InterviewBit\" \"InterviewBit\" if return true else return false The checking() function will return true as the same content is referenced by both the variables.   Conversely, when a String formation takes place with the help of a new() operator, interning does not take place. The object gets created in the heap memory even if the same content object is present. public bool checking() {\nString first = new String(\"InterviewBit\");\nString second = new String(\"InterviewBit\");\nif (first == second)\n return true;\nelse\n return false;\n} public bool checking() {\nString first = new String(\"InterviewBit\");\nString second = new String(\"InterviewBit\");\nif (first == second)\n return true;\nelse\n return false;\n} public bool checking() public checking () new \"InterviewBit\" new \"InterviewBit\" if return true else return false The checking() function will return false as the same content is not referenced by both the variables.  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "5. How is the ‘new’ operator different from the ‘newInstance()’ operator in java?",
        "answer": "Both ‘new’ and ‘newInstance()’ operators are used to creating objects. The difference is- that when we already know the class name for which we have to create the object then we use a new operator. But suppose we don’t know the class name for which we need to create the object, Or we get the class name from the command line argument, or the database, or the file. Then in that case we use the ‘newInstance()’ operator. new newInstance() newInstance() The ‘newInstance()’ keyword throws an exception that we need to handle. It is because there are chances that the class definition doesn’t exist, and we get the class name from runtime. So it will throw an exception. newInstance()",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "6. Is exceeding the memory limit possible in a program despite having a garbage collector?",
        "answer": "Yes, it is possible for the program to go out of memory in spite of the presence of a garbage collector. Garbage collection assists in recognizing and eliminating those objects which are not required in the program anymore, in order to free up the resources used by them. In a program, if an object is unreachable, then the execution of garbage collection takes place with respect to that object. If the amount of memory required for creating a new object is not sufficient, then memory is released for those objects which are no longer in the scope with the help of a garbage collector. The memory limit is exceeded for the program when the memory released is not enough for creating new objects. Moreover, exhaustion of the heap memory takes place if objects are created in such a manner that they remain in the scope and consume memory. The developer should make sure to dereference the object after its work is accomplished. Although the garbage collector endeavors its level best to reclaim memory as much as possible, memory limits can still be exceeded. Let’s take a look at the following example: List<String> example = new LinkedList<String>();\nwhile(true){\nexample.add(new String(\"Memory Limit Exceeded\"));\n} List<String> example = new LinkedList<String>();\nwhile(true){\nexample.add(new String(\"Memory Limit Exceeded\"));\n} new while true new \"Memory Limit Exceeded\"",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "7. Why is synchronization necessary? Explain with the help of a relevant example.",
        "answer": "Concurrent execution of different processes is made possible by synchronization. When a particular resource is shared between many threads, situations may arise in which multiple threads require the same shared resource. Synchronization assists in resolving the issue and the resource is shared by a single thread at a time. Let’s take an example to understand it more clearly. For example, you have a URL and you have to find out the number of requests made to it. Two simultaneous requests can make the count erratic. No synchronization: No synchronization: package anonymous;\npublic class Counting {\n       private int increase_counter;\n       public int increase() {\n               increase_counter = increase_counter + 1;\n               return increase_counter;\n       }\n} package anonymous;\npublic class Counting {\n       private int increase_counter;\n       public int increase() {\n               increase_counter = increase_counter + 1;\n               return increase_counter;\n       }\n} package public class Counting class Counting private int public int increase() public int increase () 1 return   If a thread Thread1 views the count as 10, it will be increased by 1 to 11. Simultaneously, if another thread Thread2 views the count as 10, it will be increased by 1 to 11. Thus, inconsistency in count values takes place because the expected final value is 12 but the actual final value we get will be 11. Now, the function increase() is made synchronized so that simultaneous accessing cannot take place. With synchronization: With synchronization: package anonymous;\npublic class Counting {\n       private int increase_counter;\n       public synchronized int increase() {\n               increase_counter = increase_counter + 1;\n               return increase_counter;\n       }\n} package anonymous;\npublic class Counting {\n       private int increase_counter;\n       public synchronized int increase() {\n               increase_counter = increase_counter + 1;\n               return increase_counter;\n       }\n} package public class Counting class Counting private int public synchronized int increase() public synchronized int increase () 1 return   If a thread Thread1 views the count as 10, it will be increased by 1 to 11, then the thread Thread2 will view the count as 11, it will be increased by 1 to 12. Thus, consistency in count values takes place.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "8. In the given code below, what is the significance of ... ?",
        "answer": "public void fooBarMethod(String... variables){\n   // method code\n} public void fooBarMethod(String... variables){\n   // method code\n} public void fooBarMethod(String... variables) public void fooBarMethod (String... variables) // method code Ability to provide ... is a feature called varargs (variable arguments) which was introduced as part of Java 5.\nThe function having ... in the above example indicates that it can receive multiple arguments of the datatype String.\nFor example, the fooBarMethod can be called in multiple ways and we can still have one method to process the data as shown below: Ability to provide ... is a feature called varargs (variable arguments) which was introduced as part of Java 5. ... The function having ... in the above example indicates that it can receive multiple arguments of the datatype String. ... For example, the fooBarMethod can be called in multiple ways and we can still have one method to process the data as shown below: fooBarMethod(\"foo\", \"bar\");\nfooBarMethod(\"foo\", \"bar\", \"boo\");\nfooBarMethod(new String[]{\"foo\", \"var\", \"boo\"});\npublic void myMethod(String... variables){\n   for(String variable : variables){\n       // business logic\n   }\n} fooBarMethod(\"foo\", \"bar\");\nfooBarMethod(\"foo\", \"bar\", \"boo\");\nfooBarMethod(new String[]{\"foo\", \"var\", \"boo\"});\npublic void myMethod(String... variables){\n   for(String variable : variables){\n       // business logic\n   }\n} \"foo\" \"bar\" \"foo\" \"bar\" \"boo\" new \"foo\" \"var\" \"boo\" public void myMethod(String... variables) public void myMethod (String... variables) for // business logic",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "9. What will be the output of the below java program and define the steps of Execution of the java program with the help of the below code?",
        "answer": "class InterviewBit{\n    int i;\n    static int j;\n    {\n        System.out.println(\" Instance Block 1. Value of i = \"+i);\n    }\n    static{\n        System.out.println(\" Static Block 1. Value of j = \"+j);\n        method_2();\n    }\n    {\n        i = 5;\n    }\n    static{\n        j = 10;\n    }\n    InterviewBit(){\n        System.out.println(\" Welcome to InterviewBit \");\n    }\n    public static void main(String[] args){\n        InterviewBit ib = new InterviewBit();\n    }\n    public void method_1(){\n        System.out.println(\" Instance method. \");\n    }\n    static{\n        System.out.println(\" Static Block 2. Value of j = \"+j);\n    }\n    {\n        System.out.println(\" Instance Block 2. Value of i = \"+i);\n        method_1();\n    }\n    public static void method_2(){\n        System.out.println(\" Static method. \");\n    }\n} class InterviewBit{\n    int i;\n    static int j;\n    {\n        System.out.println(\" Instance Block 1. Value of i = \"+i);\n    }\n    static{\n        System.out.println(\" Static Block 1. Value of j = \"+j);\n        method_2();\n    }\n    {\n        i = 5;\n    }\n    static{\n        j = 10;\n    }\n    InterviewBit(){\n        System.out.println(\" Welcome to InterviewBit \");\n    }\n    public static void main(String[] args){\n        InterviewBit ib = new InterviewBit();\n    }\n    public void method_1(){\n        System.out.println(\" Instance method. \");\n    }\n    static{\n        System.out.println(\" Static Block 2. Value of j = \"+j);\n    }\n    {\n        System.out.println(\" Instance Block 2. Value of i = \"+i);\n        method_1();\n    }\n    public static void method_2(){\n        System.out.println(\" Static method. \");\n    }\n} class InterviewBit class InterviewBit int static int \" Instance Block 1. Value of i = \" static \" Static Block 1. Value of j = \" 5 static 10 \" Welcome to InterviewBit \" public static void main(String[] args) public static void main (String[] args) new public void method_1() public void method_1 () \" Instance method. \" static \" Static Block 2. Value of j = \" \" Instance Block 2. Value of i = \" public static void method_2() public static void method_2 () \" Static method. \" The Output we get by executing this program will be Static Block 1. Value of j = 0\nStatic method. \nStatic Block 2. Value of j = 10\nInstance Block 1. Value of i = 0\nInstance Block 2. Value of i = 5\nInstance method. \nWelcome to InterviewBit Static Block 1. Value of j = 0  Static method.  Static Block 2. Value of j = 10  Instance Block 1. Value of i = 0  Instance Block 2. Value of i = 5  Instance method.  Welcome to InterviewBit This is a java tricky interview question frequently asked in java interviews for the experienced. The output will be like this because, when the java program is compiled and gets executed, then there are various steps followed for execution. And the steps are - Identification of Static Members from top to bottom.\nExecution of Static variable assignment and a Static block from top to bottom.\nExecution of the main method.\nIdentification of Instance Members from top to bottom.\nExecution of Instance variable assignment and Instance block from top to bottom.\nExecution of Constructor. Identification of Static Members from top to bottom. Execution of Static variable assignment and a Static block from top to bottom. Execution of the main method. Identification of Instance Members from top to bottom. Execution of Instance variable assignment and Instance block from top to bottom. Execution of Constructor. In above steps from 4 to 6, will be executed for every object creation. If we create multiple objects then for every object these steps will be performed. Now from the above code, the execution will happen like this - 1. In the step of identification of static members. It is found that - static int j.\nstatic block.\nmain method.\nstatic method_2. static int j. static block. main method. static method_2. During identification, the JVM will assign the default value in the static int j variable. Then it is currently in the state of reading and indirectly writing. Because the original value is not assigned. 2. In the next step, it will execute the static block and assign the value in static variables. First static block it will print and because execution from top to bottom and original value in j is not assigned. So it will print the default value of 0.\nAfter executing static block 1. It will execute the static method_1 because it is called from the static block 1.\nThen it will assign the original value of 5 in the j variable. And executes the remaining static block. First static block it will print and because execution from top to bottom and original value in j is not assigned. So it will print the default value of 0. After executing static block 1. It will execute the static method_1 because it is called from the static block 1. Then it will assign the original value of 5 in the j variable. And executes the remaining static block. 3. Now it will execute the main method. In which it will create an object for the class InterviewBit. And then the execution of instances will happen. 4. Identify the instance variables and blocks from top to bottom. int i.\nInstance block 1.\nInstance method_1. int i. Instance block 1. Instance method_1. Like a static variable, the instance variable also has been initialized with the default value 0 and will be in the state of reading and writing indirectly. 5. It will execute the instance methods and assign the original value to the instance variable. Prints the Instance block 1. And the current value of i is not assigned till now, so it will print 0.\nAssign the original value to i. Then print instance block 2. And after that instance method will be called and printed because it is being called in the instance block. Prints the Instance block 1. And the current value of i is not assigned till now, so it will print 0. Assign the original value to i. Then print instance block 2. And after that instance method will be called and printed because it is being called in the instance block. 6. And at the last step, the constructor will be invoked and the lines will be executed in the constructor. This is how the java program gets executed.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "10. Define System.out.println().",
        "answer": "System.out.println() is used to print the message on the console. System - It is a class present in java.lang package. Out is the static variable of type PrintStream class present in the System class. println() is the method present in the PrintStream class. System.out.println() System java.lang package System class. println() So if we justify the statement, then we can say that if we want to print anything on the console then we need to call the println() method that was present in PrintStream class. And we can call this using the output object that is present in the System class. println()",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "11. Can you explain the Java thread lifecycle?",
        "answer": "Java thread life cycle is as follows: New – When the instance of the thread is created and the start() method has not been invoked, the thread is considered to be alive and hence in the NEW state.\nRunnable – Once the start() method is invoked, before the run() method is called by JVM, the thread is said to be in RUNNABLE (ready to run) state. This state can also be entered from the Waiting or Sleeping state of the thread.\nRunning – When the run() method has been invoked and the thread starts its execution, the thread is said to be in a RUNNING state.\nNon-Runnable (Blocked/Waiting) – When the thread is not able to run despite the fact of its aliveness, the thread is said to be in a NON-RUNNABLE state. Ideally, after some time of its aliveness, the thread should go to a runnable state.\nA thread is said to be in a Blocked state if it wants to enter synchronized code but it is unable to as another thread is operating in that synchronized block on the same object. The first thread has to wait until the other thread exits the synchronized block.\nA thread is said to be in a Waiting state if it is waiting for the signal to execute from another thread, i.e it waits for work until the signal is received.\nTerminated – Once the run() method execution is completed, the thread is said to enter the TERMINATED step and is considered to not be alive. New – When the instance of the thread is created and the start() method has not been invoked, the thread is considered to be alive and hence in the NEW state. New Runnable – Once the start() method is invoked, before the run() method is called by JVM, the thread is said to be in RUNNABLE (ready to run) state. This state can also be entered from the Waiting or Sleeping state of the thread. Runnable Running – When the run() method has been invoked and the thread starts its execution, the thread is said to be in a RUNNING state. Running Non-Runnable (Blocked/Waiting) – When the thread is not able to run despite the fact of its aliveness, the thread is said to be in a NON-RUNNABLE state. Ideally, after some time of its aliveness, the thread should go to a runnable state.\nA thread is said to be in a Blocked state if it wants to enter synchronized code but it is unable to as another thread is operating in that synchronized block on the same object. The first thread has to wait until the other thread exits the synchronized block.\nA thread is said to be in a Waiting state if it is waiting for the signal to execute from another thread, i.e it waits for work until the signal is received. Non-Runnable (Blocked/Waiting) A thread is said to be in a Blocked state if it wants to enter synchronized code but it is unable to as another thread is operating in that synchronized block on the same object. The first thread has to wait until the other thread exits the synchronized block.\nA thread is said to be in a Waiting state if it is waiting for the signal to execute from another thread, i.e it waits for work until the signal is received. A thread is said to be in a Blocked state if it wants to enter synchronized code but it is unable to as another thread is operating in that synchronized block on the same object. The first thread has to wait until the other thread exits the synchronized block. A thread is said to be in a Waiting state if it is waiting for the signal to execute from another thread, i.e it waits for work until the signal is received. Terminated – Once the run() method execution is completed, the thread is said to enter the TERMINATED step and is considered to not be alive. Terminated The following flowchart clearly explains the lifecycle of the thread in Java.  ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "12. What could be the tradeoff between the usage of an unordered array versus the usage of an ordered array?",
        "answer": "The main advantage of having an ordered array is the reduced search time complexity of O(log n) whereas the time complexity in an unordered array is O(n).\nThe main drawback of the ordered array is its increased insertion time which is O(n) due to the fact that its element has to reordered to maintain the order of array during every insertion whereas the time complexity in the unordered array is only O(1).\nConsidering the above 2 key points and depending on what kind of scenario a developer requires, the appropriate data structure can be used for implementation. The main advantage of having an ordered array is the reduced search time complexity of O(log n) whereas the time complexity in an unordered array is O(n). O(log n) O(n) The main drawback of the ordered array is its increased insertion time which is O(n) due to the fact that its element has to reordered to maintain the order of array during every insertion whereas the time complexity in the unordered array is only O(1). Considering the above 2 key points and depending on what kind of scenario a developer requires, the appropriate data structure can be used for implementation.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "13. Is it possible to import the same class or package twice in Java and what happens to it during runtime?",
        "answer": "It is possible to import a class or package more than once, however, it is redundant because the JVM internally loads the package or class only once.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "14. In case a package has sub packages, will it suffice to import only the main package? e.g. Does importing of com.myMainPackage.* also import com.myMainPackage.mySubPackage.*?",
        "answer": "This is a big NO. We need to understand that the importing of the sub-packages of a package needs to be done explicitly. Importing the parent package only results in the import of the classes within it and not the contents of its child/sub-packages.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "15. Will the finally block be executed if the code System.exit(0) is written at the end of try block?",
        "answer": "NO. The control of the program post System.exit(0) is immediately gone and the program gets terminated which is why the finally block never gets executed. System.exit(0)",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "16. What do you understand by marker interfaces in Java?",
        "answer": "Marker interfaces, also known as tagging interfaces are those interfaces that have no methods and constants defined in them. They are there for helping the compiler and JVM to get run time-related information regarding the objects.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "17. Explain the term “Double Brace Initialisation” in Java?",
        "answer": "This is a convenient means of initializing any collections in Java. Consider the below example. import java.util.HashSet;\nimport java.util.Set;\n \npublic class IBDoubleBraceDemo{\n   public static void main(String[] args){\n       Set<String> stringSets = new HashSet<String>()\n       {\n           {\n               add(\"set1\");\n               add(\"set2\");\n               add(\"set3\");\n           }\n       };\n \n       doSomething(stringSets);\n   }\n \n   private static void doSomething(Set<String> stringSets){\n       System.out.println(stringSets);\n   }\n} import java.util.HashSet;\nimport java.util.Set;\n \npublic class IBDoubleBraceDemo{\n   public static void main(String[] args){\n       Set<String> stringSets = new HashSet<String>()\n       {\n           {\n               add(\"set1\");\n               add(\"set2\");\n               add(\"set3\");\n           }\n       };\n \n       doSomething(stringSets);\n   }\n \n   private static void doSomething(Set<String> stringSets){\n       System.out.println(stringSets);\n   }\n} import import public class IBDoubleBraceDemo class IBDoubleBraceDemo public static void main(String[] args) public static void main (String[] args) new \"set1\" \"set2\" \"set3\" private static void doSomething(Set<String> stringSets) private static void doSomething (Set<String> stringSets) In the above example, we see that the stringSets were initialized by using double braces. The first brace does the task of creating an anonymous inner class that has the capability of accessing the parent class’s behavior. In our example, we are creating the subclass of HashSet so that it can use the add() method of HashSet.\nThe second braces do the task of initializing the instances. The first brace does the task of creating an anonymous inner class that has the capability of accessing the parent class’s behavior. In our example, we are creating the subclass of HashSet so that it can use the add() method of HashSet. The second braces do the task of initializing the instances. Care should be taken while initializing through this method as the method involves the creation of anonymous inner classes which can cause problems during the garbage collection or serialization processes and may also result in memory leaks.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "18. Why is it said that the length() method of String class doesn't return accurate results?",
        "answer": "The length method returns the number of Unicode units of the String. Let's understand what Unicode units are and what is the confusion below.\nWe know that Java uses UTF-16 for String representation. With this Unicode, we need to understand the below two Unicode related terms:\nCode Point: This represents an integer denoting a character in the code space.\nCode Unit: This is a bit sequence used for encoding the code points. In order to do this, one or more units might be required for representing a code point.\nUnder the UTF-16 scheme, the code points were divided logically into 17 planes and the first plane was called the Basic Multilingual Plane (BMP). The BMP has classic characters - U+0000 to U+FFFF. The rest of the characters- U+10000 to U+10FFFF were termed as the supplementary characters as they were contained in the remaining planes.\nThe code points from the first plane are encoded using one 16-bit code unit\nThe code points from the remaining planes are encoded using two code units. The length method returns the number of Unicode units of the String. Let's understand what Unicode units are and what is the confusion below. We know that Java uses UTF-16 for String representation. With this Unicode, we need to understand the below two Unicode related terms:\nCode Point: This represents an integer denoting a character in the code space.\nCode Unit: This is a bit sequence used for encoding the code points. In order to do this, one or more units might be required for representing a code point. Code Point: This represents an integer denoting a character in the code space.\nCode Unit: This is a bit sequence used for encoding the code points. In order to do this, one or more units might be required for representing a code point. Code Point: This represents an integer denoting a character in the code space. Code Unit: This is a bit sequence used for encoding the code points. In order to do this, one or more units might be required for representing a code point. Under the UTF-16 scheme, the code points were divided logically into 17 planes and the first plane was called the Basic Multilingual Plane (BMP). The BMP has classic characters - U+0000 to U+FFFF. The rest of the characters- U+10000 to U+10FFFF were termed as the supplementary characters as they were contained in the remaining planes.\nThe code points from the first plane are encoded using one 16-bit code unit\nThe code points from the remaining planes are encoded using two code units. The code points from the first plane are encoded using one 16-bit code unit\nThe code points from the remaining planes are encoded using two code units. The code points from the first plane are encoded using one 16-bit code unit one The code points from the remaining planes are encoded using two code units. two Now if a string contained supplementary characters, the length function would count that as 2 units and the result of the length() function would not be as per what is expected. In other words, if there is 1 supplementary character of 2 units, the length of that SINGLE character is considered to be TWO - Notice the inaccuracy here? As per the java documentation, it is expected, but as per the real logic, it is inaccurate.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "19. What is the output of the below code and why?",
        "answer": "public class InterviewBit{\n   public static void main(String[] args)\n   {\n       System.out.println('b' + 'i' + 't');\n   }\n} public class InterviewBit{\n   public static void main(String[] args)\n   {\n       System.out.println('b' + 'i' + 't');\n   }\n} public class InterviewBit class InterviewBit public static void main(String[] args) public static void main (String[] args) 'b' 'i' 't' “bit” would have been the result printed if the letters were used in double-quotes (or the string literals). But the question has the character literals (single quotes) being used which is why concatenation wouldn't occur. The corresponding ASCII values of each character would be added and the result of that sum would be printed.\nThe ASCII values of ‘b’, ‘i’, ‘t’ are:  ‘b’ = 98\n‘i’ = 105\n‘t’ = 116 ‘b’ = 98 ‘i’ = 105 ‘t’ = 116 98 + 105 + 116 = 319 98 + 105 + 116 = 319 Hence 319 would be printed.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "20. What are the possible ways of making object eligible for garbage collection (GC) in Java?",
        "answer": "First Approach: Set the object references to null once the object creation purpose is served. First Approach: public class IBGarbageCollect {\n  public static void main (String [] args){\n       String s1 = \"Some String\";\n           // s1 referencing String object - not yet eligible for GC\n       s1 = null; // now s1 is eligible for GC\n   }\n } public class IBGarbageCollect {\n  public static void main (String [] args){\n       String s1 = \"Some String\";\n           // s1 referencing String object - not yet eligible for GC\n       s1 = null; // now s1 is eligible for GC\n   }\n } public class IBGarbageCollect class IBGarbageCollect public static void main (String [] args) public static void main (String [] args) \"Some String\" // s1 referencing String object - not yet eligible for GC null // now s1 is eligible for GC Second Approach: Point the reference variable to another object. Doing this, the object which the reference variable was referencing before becomes eligible for GC. Second Approach: public class IBGarbageCollect {\n public static void main(String [] args){\n     String s1 = \"To Garbage Collect\";\n     String s2 = \"Another Object\";\n     System.out.println(s1); // s1 is not yet eligible for GC\n     s1 = s2; // Point s1 to other object pointed by s2\n     /* Here, the string object having the content  \"To Garbage Collect\" is not referred by any reference variable. Therefore, it is eligible for GC */\n }\n} public class IBGarbageCollect {\n public static void main(String [] args){\n     String s1 = \"To Garbage Collect\";\n     String s2 = \"Another Object\";\n     System.out.println(s1); // s1 is not yet eligible for GC\n     s1 = s2; // Point s1 to other object pointed by s2\n     /* Here, the string object having the content  \"To Garbage Collect\" is not referred by any reference variable. Therefore, it is eligible for GC */\n }\n} public class IBGarbageCollect class IBGarbageCollect public static void main(String [] args) public static void main (String [] args) \"To Garbage Collect\" \"Another Object\" // s1 is not yet eligible for GC // Point s1 to other object pointed by s2 /* Here, the string object having the content  \"To Garbage Collect\" is not referred by any reference variable. Therefore, it is eligible for GC */ Third Approach: Island of Isolation Approach: When 2 reference variables pointing to instances of the same class, and these variables refer to only each other and the objects pointed by these 2 variables don't have any other references, then it is said to have formed an “Island of Isolation” and these 2 objects are eligible for GC. Third Approach: public class IBGarbageCollect {\n   IBGarbageCollect ib;    \n   public static void main(String [] str){\n       IBGarbageCollect ibgc1 = new IBGarbageCollect();\n       IBGarbageCollect ibgc2 = new IBGarbageCollect();\n       ibgc1.ib = ibgc2; //ibgc1 points to ibgc2\n       ibgc2.ib = ibgc1; //ibgc2 points to ibgc1\n       ibgc1 = null;\n       ibgc2 = null;\n       /* \n       * We see that ibgc1 and ibgc2 objects refer \n       * to only each other and have no valid \n       * references- these 2 objects for island of isolcation - eligible for GC\n       */\n   }\n} public class IBGarbageCollect {\n   IBGarbageCollect ib;    \n   public static void main(String [] str){\n       IBGarbageCollect ibgc1 = new IBGarbageCollect();\n       IBGarbageCollect ibgc2 = new IBGarbageCollect();\n       ibgc1.ib = ibgc2; //ibgc1 points to ibgc2\n       ibgc2.ib = ibgc1; //ibgc2 points to ibgc1\n       ibgc1 = null;\n       ibgc2 = null;\n       /* \n       * We see that ibgc1 and ibgc2 objects refer \n       * to only each other and have no valid \n       * references- these 2 objects for island of isolcation - eligible for GC\n       */\n   }\n} public class IBGarbageCollect class IBGarbageCollect public static void main(String [] str) public static void main (String [] str) new new //ibgc1 points to ibgc2 //ibgc2 points to ibgc1 null null /* \n       * We see that ibgc1 and ibgc2 objects refer \n       * to only each other and have no valid \n       * references- these 2 objects for island of isolcation - eligible for GC\n       */",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "21. In the below Java Program, how many objects are eligible for garbage collection?",
        "answer": "class Main{\n   public static void main(String[] args){\n       int[][] num = new int[3][];\n       num[0] = new int[5];\n       num[1] = new int[2];\n       num[2] = new int[3];\n       \n       num[2] = new int[5];\n       num[0] = new int[4];\n       num[1] = new int[3];\n       \n       num = new int[2][];\n   }\n} class Main{\n   public static void main(String[] args){\n       int[][] num = new int[3][];\n       num[0] = new int[5];\n       num[1] = new int[2];\n       num[2] = new int[3];\n       \n       num[2] = new int[5];\n       num[0] = new int[4];\n       num[1] = new int[3];\n       \n       num = new int[2][];\n   }\n} class Main class Main public static void main(String[] args) public static void main (String[] args) int new int 3 0 new int 5 1 new int 2 2 new int 3 2 new int 5 0 new int 4 1 new int 3 new int 2 In the above program, a total of 7 objects will be eligible for garbage collection. Let’s visually understand what's happening in the code.     In the above figure on line 3, we can see that on each array index we are declaring a new array so the reference will be of that new array on all the 3 indexes. So the old array will be pointed to by none. So these three are eligible for garbage collection. And on line 4, we are creating a new array object on the older reference. So that will point to a new array and older multidimensional objects will become eligible for garbage collection.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "22. What is the best way to inject dependency? Also, state the reason.",
        "answer": "There is no boundation for using a particular dependency injection. But the recommended approach is - Setters are mostly recommended for optional dependencies injection, and constructor arguments are recommended for mandatory ones. This is because constructor injection enables the injection of values into immutable fields and enables reading them more easily.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "23. How we can set the spring bean scope. And what supported scopes does it have?",
        "answer": "A scope can be set by an annotation such as the @Scope annotation or the \"scope\" attribute in an XML configuration file. Spring Bean supports the following five scopes: Singleton\nPrototype\nRequest\nSession\nGlobal-session Singleton Prototype Request Session Global-session",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "24. What are the different categories of Java Design patterns?",
        "answer": "Java Design patterns are categorized into the following different types. And those are also further categorized as Structural patterns: Structural patterns: Adapter\nBridge\nFilter\nComposite\nDecorator\nFacade\nFlyweight\nProxy Adapter Bridge Filter Composite Decorator Facade Flyweight Proxy Behavioral patterns: Behavioral patterns: Interpreter\nTemplate method/ pattern\nChain of responsibility\nCommand pattern\nIterator pattern\nStrategy pattern\nVisitor pattern Interpreter Template method/ pattern Chain of responsibility Command pattern Iterator pattern Strategy pattern Visitor pattern J2EE patterns: J2EE patterns: MVC Pattern\nData Access Object pattern\nFront controller pattern\nIntercepting filter pattern\nTransfer object pattern MVC Pattern Data Access Object pattern Front controller pattern Intercepting filter pattern Transfer object pattern Creational patterns: Creational patterns: Factory method/Template\nAbstract Factory\nBuilder\nPrototype\nSingleton Factory method/Template Abstract Factory Builder Prototype Singleton",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "25. What is a Memory Leak? Discuss some common causes of it.",
        "answer": "The Java Garbage Collector (GC) typically removes unused objects when they are no longer required, but when they are still referenced, the unused objects cannot be removed. So this causes the memory leak problem. Example - Consider a linked list like the structure below - Example   In the above image, there are unused objects that are not referenced. But then also Garbage collection will not free it. Because it is referencing some existing referenced object. So this can be the situation of memory leak. Some common causes of Memory leaks are - Some common causes of Memory leaks are When there are Unbounded caches.\nExcessive page swapping is done by the operating system.\nImproper written custom data structures.\nInserting into a collection object without first deleting it.\netc. When there are Unbounded caches. Excessive page swapping is done by the operating system. Improper written custom data structures. Inserting into a collection object without first deleting it.\netc. ",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "26. Assume a thread has a lock on it, calling the sleep() method on that thread will release the lock?",
        "answer": "A thread that has a lock won't be released even after it calls sleep(). Despite the thread sleeping for a specified period of time, the lock will not be released.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "1. Check if a given string is palindrome using recursion.",
        "answer": "/*\n* Java program to check if a given inputted string is palindrome or not using recursion.\n*/\nimport java.util.*;\npublic class InterviewBit { \n   public static void main(String args[]) { \n       Scanner s = new Scanner(System.in);\n       String word = s.nextLine();\n       System.out.println(\"Is \"+word+\" palindrome? - \"+isWordPalindrome(word));\n   } \n   \n   \n   public static boolean isWordPalindrome(String word){ \n       String reverseWord = getReverseWord(word); \n       //if word equals its reverse, then it is a palindrome\n       if(word.equals(reverseWord)){ \n           return true; \n       } \n       return false; \n   } \n   \n   public static String getReverseWord(String word){ \n       if(word == null || word.isEmpty()){ \n           return word; \n       } \n       \n       return word.charAt(word.length()- 1) + getReverseWord(word.substring(0, word.length() - 1)); \n   } \n} /*\n* Java program to check if a given inputted string is palindrome or not using recursion.\n*/\nimport java.util.*;\npublic class InterviewBit { \n   public static void main(String args[]) { \n       Scanner s = new Scanner(System.in);\n       String word = s.nextLine();\n       System.out.println(\"Is \"+word+\" palindrome? - \"+isWordPalindrome(word));\n   } \n   \n   \n   public static boolean isWordPalindrome(String word){ \n       String reverseWord = getReverseWord(word); \n       //if word equals its reverse, then it is a palindrome\n       if(word.equals(reverseWord)){ \n           return true; \n       } \n       return false; \n   } \n   \n   public static String getReverseWord(String word){ \n       if(word == null || word.isEmpty()){ \n           return word; \n       } \n       \n       return word.charAt(word.length()- 1) + getReverseWord(word.substring(0, word.length() - 1)); \n   } \n} /*\n* Java program to check if a given inputted string is palindrome or not using recursion.\n*/ import public class InterviewBit class InterviewBit public static void main(String args[]) public static void main (String args[]) new \"Is \" \" palindrome? - \" public static boolean isWordPalindrome(String word) public static boolean isWordPalindrome (String word) //if word equals its reverse, then it is a palindrome if return true return false public static String getReverseWord(String word) public static getReverseWord (String word) if null return return 1 0 1",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "2. Write a Java Program to print Fibonacci Series using Recursion.",
        "answer": "class InterviewBit {\n    public static void printFibonacci(int val_1, int val_2, int num){\n        //Base Case\n        if(num == 0)\n            return;\n\n        //Printing the next Fibonacci number    \n        System.out.print( val_1 + val_2 + \" \");\n\n        //Recursively calling for printing Fibonacci for remaining length\n        printFibonacci(val_2, val_1+val_2, --num);\n    }\n    public static void main(String args[]) {\n        System.out.println(\" *** Fibonacci Series *** \");\n\n        //Printing the first two values\n        System.out.print(\"0 1 \");\n\n        //Calling Method to print the fibonacci for length 10\n        printFibonacci(0, 1, 10);\n    }\n} class InterviewBit {\n    public static void printFibonacci(int val_1, int val_2, int num){\n        //Base Case\n        if(num == 0)\n            return;\n\n        //Printing the next Fibonacci number    \n        System.out.print( val_1 + val_2 + \" \");\n\n        //Recursively calling for printing Fibonacci for remaining length\n        printFibonacci(val_2, val_1+val_2, --num);\n    }\n    public static void main(String args[]) {\n        System.out.println(\" *** Fibonacci Series *** \");\n\n        //Printing the first two values\n        System.out.print(\"0 1 \");\n\n        //Calling Method to print the fibonacci for length 10\n        printFibonacci(0, 1, 10);\n    }\n} class InterviewBit class InterviewBit public static void printFibonacci(int val_1, int val_2, int num) public static void printFibonacci (int val_1, int val_2, int num) int int int //Base Case if 0 return //Printing the next Fibonacci number \" \" //Recursively calling for printing Fibonacci for remaining length public static void main(String args[]) public static void main (String args[]) \" *** Fibonacci Series *** \" //Printing the first two values \"0 1 \" //Calling Method to print the fibonacci for length 10 0 1 10 In the above code, we are printing the base 2 Fibonacci values 0 and 1. And then based on the length of Fibonacci to be printed, we are using the helper function to print that.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "3. Write a Java program to check if the two strings are anagrams.",
        "answer": "The main idea is to validate the length of strings and then if found equal, convert the string to char array and then sort the arrays and check if both are equal. import java.util.Arrays;\nimport java.util.Scanner;\npublic class InterviewBit {\n public static void main(String[] args) {\n   Scanner s = new Scanner(System.in);\n   //Input from two strings\n   System.out.print(\"First String: \");\n   String string1 = s.nextLine();\n   System.out.print(\"Second String: \");\n   String string2 = s.nextLine();\n   // check for the length\n   if(string1.length() == string2.length()) {\n     // convert strings to char array\n     char[] characterArray1 = string1.toCharArray();\n     char[] characterArray2 = string2.toCharArray();\n     // sort the arrays\n     Arrays.sort(characterArray1);\n     Arrays.sort(characterArray2);\n     // check for equality, if found equal then anagram, else not an anagram\n     boolean isAnagram = Arrays.equals(characterArray1, characterArray2);\n     System.out.println(\"Anagram: \"+ isAnagram);\n }\n} import java.util.Arrays;\nimport java.util.Scanner;\npublic class InterviewBit {\n public static void main(String[] args) {\n   Scanner s = new Scanner(System.in);\n   //Input from two strings\n   System.out.print(\"First String: \");\n   String string1 = s.nextLine();\n   System.out.print(\"Second String: \");\n   String string2 = s.nextLine();\n   // check for the length\n   if(string1.length() == string2.length()) {\n     // convert strings to char array\n     char[] characterArray1 = string1.toCharArray();\n     char[] characterArray2 = string2.toCharArray();\n     // sort the arrays\n     Arrays.sort(characterArray1);\n     Arrays.sort(characterArray2);\n     // check for equality, if found equal then anagram, else not an anagram\n     boolean isAnagram = Arrays.equals(characterArray1, characterArray2);\n     System.out.println(\"Anagram: \"+ isAnagram);\n }\n} import import public class InterviewBit class InterviewBit public static void main(String[] args) public static void main (String[] args) new //Input from two strings \"First String: \" \"Second String: \" // check for the length if // convert strings to char array char char // sort the arrays // check for equality, if found equal then anagram, else not an anagram boolean \"Anagram: \"",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "4. Write a Java Program to find the factorial of a given number.",
        "answer": "public class FindFactorial {\n   public static void main(String[] args) {\n       int num = 10;\n       long factorialResult = 1l;\n       for(int i = 1; i <= num; ++i)\n       {\n           factorialResult *= i;\n       }\n       System.out.println(\"Factorial: \"+factorialResult);\n   }\n} public class FindFactorial {\n   public static void main(String[] args) {\n       int num = 10;\n       long factorialResult = 1l;\n       for(int i = 1; i <= num; ++i)\n       {\n           factorialResult *= i;\n       }\n       System.out.println(\"Factorial: \"+factorialResult);\n   }\n} public class FindFactorial class FindFactorial public static void main(String[] args) public static void main (String[] args) int 10 long 1l for int 1 \"Factorial: \"",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "5. Given an array of non-duplicating numbers from 1 to n where one number is missing, write an efficient java program to find that missing number.",
        "answer": "Idea is to find the sum of n natural numbers using the formula and then finding the sum of numbers in the given array. Subtracting these two sums results in the number that is the actual missing number. This results in O(n) time complexity and O(1) space complexity. public class IBMissingNumberProblem {\n\n   public static void main(String[] args) {\n\n       int[] array={4,3,8,7,5,2,6};\n       int missingNumber = findMissingNum(array);\n       System.out.println(\"Missing Number is \"+ missingNumber); \n   }\n\n   public static int findMissingNum(int[] array) {\n       int n=array.length+1;\n       int sumOfFirstNNums=n*(n+1)/2;\n       int actualSumOfArr=0;\n       for (int i = 0; i < array.length; i++) {\n           actualSumOfArr+=array[i];\n       }\n       return sumOfFirstNNums-actualSumOfArr;\n   }\n} public class IBMissingNumberProblem {\n\n   public static void main(String[] args) {\n\n       int[] array={4,3,8,7,5,2,6};\n       int missingNumber = findMissingNum(array);\n       System.out.println(\"Missing Number is \"+ missingNumber); \n   }\n\n   public static int findMissingNum(int[] array) {\n       int n=array.length+1;\n       int sumOfFirstNNums=n*(n+1)/2;\n       int actualSumOfArr=0;\n       for (int i = 0; i < array.length; i++) {\n           actualSumOfArr+=array[i];\n       }\n       return sumOfFirstNNums-actualSumOfArr;\n   }\n} public class IBMissingNumberProblem class IBMissingNumberProblem public static void main(String[] args) public static void main (String[] args) int 4 3 8 7 5 2 6 int \"Missing Number is \" public static int findMissingNum(int[] array) public static int findMissingNum (int[] array) int int 1 int 1 2 int 0 for int 0 return",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "6. Write a Java Program to check if any number is a magic number or not. A number is said to be a magic number if after doing sum of digits in each step and inturn doing sum of digits of that sum, the ultimate result (when there is only one digit left) is 1.",
        "answer": "Example, consider the number: Step 1: 163 => 1+6+3 = 10\nStep 2: 10 => 1+0 = 1 => Hence 163 is a magic number Step 1: 163 => 1+6+3 = 10 Step 2: 10 => 1+0 = 1 => Hence 163 is a magic number public class IBMagicNumber{\n\n   public static void main(String[] args) { \n       int num = 163;  \n       int sumOfDigits = 0;\n       while (num > 0 || sumOfDigits > 9) \n       { \n           if (num == 0) \n           { \n               num = sumOfDigits; \n               sumOfDigits = 0; \n           } \n           sumOfDigits += num % 10; \n           num /= 10; \n       } \n\n       // If sum is 1, original number is magic number \n       if(sumOfDigits == 1) {\n           System.out.println(\"Magic number\");\n       }else {\n           System.out.println(\"Not magic number\");\n       }\n   }\n} public class IBMagicNumber{\n\n   public static void main(String[] args) { \n       int num = 163;  \n       int sumOfDigits = 0;\n       while (num > 0 || sumOfDigits > 9) \n       { \n           if (num == 0) \n           { \n               num = sumOfDigits; \n               sumOfDigits = 0; \n           } \n           sumOfDigits += num % 10; \n           num /= 10; \n       } \n\n       // If sum is 1, original number is magic number \n       if(sumOfDigits == 1) {\n           System.out.println(\"Magic number\");\n       }else {\n           System.out.println(\"Not magic number\");\n       }\n   }\n} public class IBMagicNumber class IBMagicNumber public static void main(String[] args) public static void main (String[] args) int 163 int 0 while 0 9 if 0 0 10 10 // If sum is 1, original number is magic number if 1 \"Magic number\" else \"Not magic number\"",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "7. Write a Java program to create and throw custom exceptions.",
        "answer": "class InterviewBit {\n    public static void main(String args[]) throws CustomException {\n\n        // Throwing the custom exception be passing the message\n        throw new CustomException(\" This is my custom Exception \");\n    }\n}\n//Creating Custom Exception Class\nclass CustomException extends Exception{\n    //Defining Constructor to throw exception message\n    public CustomException(String message){\n        super(message);\n    }\n} class InterviewBit {\n    public static void main(String args[]) throws CustomException {\n\n        // Throwing the custom exception be passing the message\n        throw new CustomException(\" This is my custom Exception \");\n    }\n}\n//Creating Custom Exception Class\nclass CustomException extends Exception{\n    //Defining Constructor to throw exception message\n    public CustomException(String message){\n        super(message);\n    }\n} class InterviewBit class InterviewBit public static void main(String args[]) throws CustomException public static void main (String args[]) throws // Throwing the custom exception be passing the message throw new \" This is my custom Exception \" //Creating Custom Exception Class class CustomException extends Exception class CustomException extends Exception //Defining Constructor to throw exception message public CustomException(String message) public CustomException (String message) super We have created the exception class named with CustomException and called the base exception constructor with the error message that we want to print. And to avoid handling exceptions in the main method, we have used the throws keyword in the method declaration.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "8. Write a Java program to reverse a string.",
        "answer": "class InterviewBit{\n    public static void main(String[] args){\n        //Input String\n        String str = \"Welcome to InterviewBit\";\n        \n        //Pointers.\n        int i = 0, j = str.length()-1;\n        \n        //Result character array to store the reversed string.\n        char[] revString = new char[j+1];\n        \n        //Looping and reversing the string.\n        while(i < j){\n            revString[j] = str.charAt(i);\n            revString[i] = str.charAt(j);\n            i++;\n            j--;\n        }\n        //Printing the reversed String.\n        System.out.println(\"Reversed String = \" + String.valueOf(revString));\n    }\n} class InterviewBit{\n    public static void main(String[] args){\n        //Input String\n        String str = \"Welcome to InterviewBit\";\n        \n        //Pointers.\n        int i = 0, j = str.length()-1;\n        \n        //Result character array to store the reversed string.\n        char[] revString = new char[j+1];\n        \n        //Looping and reversing the string.\n        while(i < j){\n            revString[j] = str.charAt(i);\n            revString[i] = str.charAt(j);\n            i++;\n            j--;\n        }\n        //Printing the reversed String.\n        System.out.println(\"Reversed String = \" + String.valueOf(revString));\n    }\n} class InterviewBit class InterviewBit public static void main(String[] args) public static void main (String[] args) //Input String \"Welcome to InterviewBit\" //Pointers. int 0 1 //Result character array to store the reversed string. char new char 1 //Looping and reversing the string. while //Printing the reversed String. \"Reversed String = \" In the above code, we are storing the last character from the string to the first and the first value to the last in the output character array. And doing the same thing in the loop for the remaining 2nd to n-1 characters. This is how the string will be reversed.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "9. Write a Java program to rotate arrays 90 degree clockwise by taking matrices from user input.",
        "answer": "mport java.util.Scanner;\npublic class InterviewBit\n{\n    public static void main(String[] args) {\n   Scanner sc = new Scanner(System.in);\n   int no;\n        System.out.print(\"Enter size of Array : \");\n        no = sc.nextInt();\n        int[][] a = new int[no][no];\n        System.out.print(\"Enter  \"+ no*no+\" Element Array : \");\n        \n        for(int i = 0; i<no; i++){\n            for(int j = 0; j<no; j++){\n                a[i][j] = sc.nextInt();\n            }\n        }\n        System.out.print(\"\\nArray Before Rotation\\n\\n\");\n        for(int i = 0; i<no; i++){\n            for(int j = 0; j<no; j++){\n                System.out.print(a[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    \n        System.out.println(\"\\n\");\n        //Rotation\n        \n        //Transpose\n        for(int i = 0; i < no; i++){\n            for(int j = i; j < no; j++){\n                int temp = a[i][j];\n                a[i][j] = a[j][i];\n                a[j][i] = temp;\n            }\n        }\n        \n        //Reverse Each row\n        for(int i = 0; i < no; i++){\n            int l, j;\n            for(j = 0, l = no -1; j < l; j++){\n                int temp = a[i][j];\n                a[i][j] = a[i][l];\n                a[i][l] = temp;\n                l--;\n            }\n        }\n        \n        System.out.println(\"Array After Rotation - \\n\");\n    \n        for(int i = 0; i<no; i++){\n            for(int j = 0; j<no; j++){\n                System.out.print(a[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n} mport java.util.Scanner;\npublic class InterviewBit\n{\n    public static void main(String[] args) {\n   Scanner sc = new Scanner(System.in);\n   int no;\n        System.out.print(\"Enter size of Array : \");\n        no = sc.nextInt();\n        int[][] a = new int[no][no];\n        System.out.print(\"Enter  \"+ no*no+\" Element Array : \");\n        \n        for(int i = 0; i<no; i++){\n            for(int j = 0; j<no; j++){\n                a[i][j] = sc.nextInt();\n            }\n        }\n        System.out.print(\"\\nArray Before Rotation\\n\\n\");\n        for(int i = 0; i<no; i++){\n            for(int j = 0; j<no; j++){\n                System.out.print(a[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    \n        System.out.println(\"\\n\");\n        //Rotation\n        \n        //Transpose\n        for(int i = 0; i < no; i++){\n            for(int j = i; j < no; j++){\n                int temp = a[i][j];\n                a[i][j] = a[j][i];\n                a[j][i] = temp;\n            }\n        }\n        \n        //Reverse Each row\n        for(int i = 0; i < no; i++){\n            int l, j;\n            for(j = 0, l = no -1; j < l; j++){\n                int temp = a[i][j];\n                a[i][j] = a[i][l];\n                a[i][l] = temp;\n                l--;\n            }\n        }\n        \n        System.out.println(\"Array After Rotation - \\n\");\n    \n        for(int i = 0; i<no; i++){\n            for(int j = 0; j<no; j++){\n                System.out.print(a[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n} public class InterviewBit class InterviewBit public static void main(String[] args) public static void main (String[] args) new int \"Enter size of Array : \" int new int \"Enter  \" \" Element Array : \" for int 0 for int 0 \"\\nArray Before Rotation\\n\\n\" for int 0 for int 0 \" \" \"\\n\" //Rotation //Transpose for int 0 for int int //Reverse Each row for int 0 int for 0 1 int \"Array After Rotation - \\n\" for int 0 for int 0 \" \" In the above code, for rotating the matrix to  90 degrees we are first transposing the matrix so the row becomes the column. And after that, we are reversing each row in the matrix. So this is how the matrix got rotated.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "10. Write a java program to check if any number given as input is the sum of 2 prime numbers.",
        "answer": "Example : Example : Input - 18 Input - 18 Output - Output - 18 = 13 + 5\n18 = 11 + 7 18 = 13 + 5  18 = 11 + 7 public class InterviewBit\n{\n    // Method to Check Prime Number\n    private static int check_prime(int num){\n        int flag = 0;\n        for(int i = 2; i<=num/2; i++){\n            if(num%i == 0){\n                flag = 1;\n                return 1;\n            }\n        }\n        if(flag == 0)\n            return 0;\n        return 1;\n    }\n    // Method to get print the prime sum\n    private static void find(int num){\n        for(int i = 2; i <= num/2; i++){\n            if(check_prime(i) == 0){\n                if(check_prime(num-i) == 0)\n                    System.out.println(num + \" = \"+ (num-i) + \" \"+ i);\n            }\n        }\n    }\n public static void main(String[] args) {\n  find(18);\n }\n} public class InterviewBit\n{\n    // Method to Check Prime Number\n    private static int check_prime(int num){\n        int flag = 0;\n        for(int i = 2; i<=num/2; i++){\n            if(num%i == 0){\n                flag = 1;\n                return 1;\n            }\n        }\n        if(flag == 0)\n            return 0;\n        return 1;\n    }\n    // Method to get print the prime sum\n    private static void find(int num){\n        for(int i = 2; i <= num/2; i++){\n            if(check_prime(i) == 0){\n                if(check_prime(num-i) == 0)\n                    System.out.println(num + \" = \"+ (num-i) + \" \"+ i);\n            }\n        }\n    }\n public static void main(String[] args) {\n  find(18);\n }\n} public class InterviewBit class InterviewBit // Method to Check Prime Number private static int check_prime(int num) private static int check_prime (int num) int int 0 for int 2 2 if 0 1 return 1 if 0 return 0 return 1 // Method to get print the prime sum private static void find(int num) private static void find (int num) int for int 2 2 if 0 if 0 \" = \" \" \" public static void main(String[] args) public static void main (String[] args) 18 In the above code, for any number n, we find all the 2 pairs of numbers that are added together resulting in n. And each checking number if it is prime. If it is prime then we are printing that. n n",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "11. Write a Java program for solving the Tower of Hanoi Problem.",
        "answer": "public class InterviewBit\n{\n    //Recursive Method for Solving the Tower of hanoi.\n    private static void TOH(char source, char auxiliary, char destination, int numOfDisk){\n     if (numOfDisk > 0){\n      TOH(source, destination, auxiliary, numOfDisk-1);\n      System.out.println(\"Move 1 disk from \"+source+\" to \"+destination+\" using \"+auxiliary+\".\");\n      TOH(auxiliary, source, destination, numOfDisk-1);\n     }\n    }\n public static void main(String[] args) {\n  TOH('A','B','C', 3);\n }\n} public class InterviewBit\n{\n    //Recursive Method for Solving the Tower of hanoi.\n    private static void TOH(char source, char auxiliary, char destination, int numOfDisk){\n     if (numOfDisk > 0){\n      TOH(source, destination, auxiliary, numOfDisk-1);\n      System.out.println(\"Move 1 disk from \"+source+\" to \"+destination+\" using \"+auxiliary+\".\");\n      TOH(auxiliary, source, destination, numOfDisk-1);\n     }\n    }\n public static void main(String[] args) {\n  TOH('A','B','C', 3);\n }\n} public class InterviewBit class InterviewBit //Recursive Method for Solving the Tower of hanoi. private static void TOH(char source, char auxiliary, char destination, int numOfDisk) private static void TOH (char source, char auxiliary, char destination, int numOfDisk) char char char int if 0 1 \"Move 1 disk from \" \" to \" \" using \" \".\" 1 public static void main(String[] args) public static void main (String[] args) 'A' 'B' 'C' 3 In the above code we are first moving the n-1 disk from Tower A to Tower B, then moving that nth disk from Tower A to Tower C, and finally, the remaining n-1 disk from Tower B to Tower C. And we are doing this recursively for the n-1 disk. n-1 A B nth A C n-1 B C n-1",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "12. Implement Binary Search in Java using recursion.",
        "answer": "public class Main\n{\n    //Recursive method for binary search\n    private static boolean binarySearch(int[] arr, int low, int high, int key){\n       \n        //Calculating Mid.\n        int mid = (low + high)/2;\n       \n        //Base Case.\n        if(low > high)\n            return false;\n       \n        //Checking if the key is found in the middle.\n        if(arr[mid] == key)\n            return true;\n       \n        //Searching on the left half if a key exists there.  \n        if(key < arr[mid])\n            return binarySearch(arr, low, mid-1, key);\n       \n        //Searching on the other half otherwise.\n        return binarySearch(arr, mid+1, high, key);\n    }\npublic static void main(String[] args) {\n   \n   int[] arr = {2, 5, 9, 13, 17, 21, 30};\n   if(binarySearch(arr, 0, (arr.length-1), 30))\n       System.out.println(\" Element Found. \");\n   else\n       System.out.println(\" Element not Found.\");\n}\n} public class Main\n{\n    //Recursive method for binary search\n    private static boolean binarySearch(int[] arr, int low, int high, int key){\n       \n        //Calculating Mid.\n        int mid = (low + high)/2;\n       \n        //Base Case.\n        if(low > high)\n            return false;\n       \n        //Checking if the key is found in the middle.\n        if(arr[mid] == key)\n            return true;\n       \n        //Searching on the left half if a key exists there.  \n        if(key < arr[mid])\n            return binarySearch(arr, low, mid-1, key);\n       \n        //Searching on the other half otherwise.\n        return binarySearch(arr, mid+1, high, key);\n    }\npublic static void main(String[] args) {\n   \n   int[] arr = {2, 5, 9, 13, 17, 21, 30};\n   if(binarySearch(arr, 0, (arr.length-1), 30))\n       System.out.println(\" Element Found. \");\n   else\n       System.out.println(\" Element not Found.\");\n}\n} public class Main class Main //Recursive method for binary search private static boolean binarySearch(int[] arr, int low, int high, int key) private static boolean binarySearch (int[] arr, int low, int high, int key) int int int int //Calculating Mid. int 2 //Base Case. if return false //Checking if the key is found in the middle. if return true //Searching on the left half if a key exists there. if return 1 //Searching on the other half otherwise. return 1 public static void main(String[] args) public static void main (String[] args) int 2 5 9 13 17 21 30 if 0 1 30 \" Element Found. \" else \" Element not Found.\" In the above code, we are finding the middle element each time and checking if the element is in the middle or not. If it is not, then we check on which side from the middle it exists. And Recursively searching on the particular subarray. So this way we are reducing the search space by 2 every time. So the search time is very low.",
        "reference": "interviewbit.com",
        "role": "java"
    },
    {
        "question": "1. Conclusion",
        "answer": "Java is one of the simple high-level languages that provides powerful tools and impressive standards required for application development. It was also one of the first languages to provide amazing threading support for tackling concurrency-based problems. The easy-to-use syntax and the built-in features of Java combined with the stability it provides to applications are the main reasons for this language has ever-growing usage in the software community. features of Java Interview Preparation Resources How to Become a Java Developer?\nHow much does a Java Developer earn in India?\nJava Projects\nJava Programming Questions for Interview\nJava 8 Interview Questions\nJava String Interview Questions\nSpring Interview Questions\nHibernate Interview Questions\nJava Collections Interview Questions\nArray Interview Questions\nDesign Patterns Interview Questions\nMultithreading Interview Questions\nJava Tutorial\nJava MCQ\nAdvance Java MCQ\nDifference Between C++ and Java\nDifference Between C and Java\nDifference Between Java and Javascript\nHashmap vs Hashtable in Java\nKotlin Vs Java\nJava Vs Python\nFeatures of Java 9\nJava 8 Features\nJava Frameworks\nJava Developer Skills\nJava IDE\nJava 11 Features\nAdditional Technical Interview Questions\nJAVA SE Download How to Become a Java Developer? How to Become a Java Developer? How much does a Java Developer earn in India? How much does a Java Developer earn in India? Java Projects Java Projects Java Programming Questions for Interview Java Programming Questions for Interview Java 8 Interview Questions Java 8 Interview Questions Java String Interview Questions Java String Interview Questions Spring Interview Questions Spring Interview Questions Hibernate Interview Questions Hibernate Interview Questions Java Collections Interview Questions Java Collections Interview Questions Array Interview Questions Array Interview Questions Design Patterns Interview Questions Design Patterns Interview Questions Multithreading Interview Questions Multithreading Interview Questions Java Tutorial Java Tutorial Java MCQ Java MCQ Advance Java MCQ Advance Java MCQ Difference Between C++ and Java Difference Between C++ and Java Difference Between C and Java Difference Between C and Java Difference Between Java and Javascript Difference Between Java and Javascript Hashmap vs Hashtable in Java Hashmap vs Hashtable in Java Kotlin Vs Java Kotlin Vs Java Java Vs Python Java Vs Python Features of Java 9 Features of Java 9 Java 8 Features Java 8 Features Java Frameworks Java Frameworks Java Developer Skills Java Developer Skills Java IDE Java IDE Java 11 Features Java 11 Features Additional Technical Interview Questions Additional Technical Interview Questions JAVA SE Download JAVA SE Download",
        "reference": "interviewbit.com",
        "role": "java"
    }
]