[
    {
        "question": "1. What is Ansible?",
        "answer": "Ansible is a configuration management system. It is used to set up and manage infrastructure and applications. It allows users to deploy and update applications using SSH without the need to install an agent on a remote system.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "2. What is the use of Ansible?",
        "answer": "Ansible is used for managing IT infrastructure and deploying software apps to remote nodes. Ansible allows you to deploy an application to many nodes with one single command. However, for this, we need some programming knowledge to understand the Ansible scripts.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "3. What are the features of Ansible?",
        "answer": "Ansible has the following features:\nAgentless: Unlike Puppet or Chef, there is no software or agent managing the nodes.\nPython: Ansible is built on top of Python, which is easy to learn and write scripts. It is a robust programming language. Python Programming Course is one of the most in-demand skills in the market right now.\nSSH: Passwordless network authentication makes it more secure and easy to set up.\nPush Architecture: The core concept is to push multiple small codes to configure and run the action on client nodes.\nSet Up: This is very easy to set up, with a very low learning curve. It is open-source, so anyone can access it.\nManage Inventory: Machines’ addresses are stored in a simple text format, and we can add different sources of truth to pull the list using plug-ins such as OpenStack, Rackspace, etc.\nGo through this Ansible Cheat Sheet. This is a very useful handbook.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "4. What are the advantages of Ansible?",
        "answer": "Ansible has many strengths, which include the following:\nIt is agentless and only requires the SSH service running on the target machines.\nPython is the only required dependency, and, fortunately, most systems have Python pre-installed.\nIt requires minimal resources, so there is low overhead.\nIt is easy to learn and understand since Ansible tasks are written in YAML.\nUnlike other tools, most of which are procedural, Ansible is declarative; it defines the desired state and fulfills the requirements needed to achieve it.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "5. What is the Ansible Galaxy?",
        "answer": "Ansible can communicate with configured clients from the command line by using the Ansible command. It also allows you to automate configuration by using the Ansible-playbook command. To create the base directory structure, you can use a tool bundled with Ansible, known as Ansible Galaxy.\nCommand: ansible-galaxy init azavea. Packer\nCheck out this Ansible tutorial and practice for getting a better understanding of Ansible.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "6. What is CI/CD?",
        "answer": "Continuous Integration (CI) is something that is used for streamlining the development and deployment processes. This has led to the rapid development of cohesive software. Each integration is verified by an automated build to detect integration errors as quickly as possible.\nWith Continuous Delivery (CD), your code can be taken to production at any time after being pushed to a remote repository. It is, in simpler words, a process where you build software in such a way that it can be released to production at any time.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "7. What is configuration management?",
        "answer": "Configuration Management (CM) is a practice that we should follow to keep track of all updates that are going into the system over a period of time. This also helps in a situation where a major bug has been introduced to the system due to some new changes that need to be fixed with minimum downtime. CM keeps track of all updates that are needed in a system and ensures that the current design and build state of the system are up-to-date and properly functional.\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "8. What are the requirements for the Ansible server?",
        "answer": "If you are a Windows user, then you need to have a virtual machine on which Linux should be installed. Ansible Server requires Python 2.6 version or higher. If these requirements are fulfilled, then you can proceed with ease.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "9. What are Ansible tasks?",
        "answer": "The task is a unit action in Ansible. It breaks a configuration policy into smaller files or blocks of code. These blocks can be useful in automating a process, for example, to install a package or update software:\nCommand: Install <package_name>\nCommand: update <software_name>",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "10. Explain a few of the basic terminologies or concepts in Ansible",
        "answer": "A few of the basic terms that are commonly used while operating on Ansible are as follows:\nController Machine: The controller machine is responsible for provisioning servers that are being managed. It is the machine where Ansible is installed.\nInventory: An inventory is an initialization file that has details about the different servers that you are managing.\nPlaybook: It is a code file written in the YAML format. A playbook basically contains the tasks that need to be executed or automated.\nTask: Each task represents a single procedure that needs to be executed, e.g., installing a library.\nModule: A module is a set of tasks that can be executed. Ansible has hundreds of built-in modules, but you can also create custom ones.\nRole: An Ansible role is a predefined way of organizing playbooks and other files to facilitate sharing and reusing portions of provisioning.\nPlay: A task executed from start to finish or the execution of a playbook is called a play.\nFacts: Facts are global variables that store details about the system such as network interfaces or operating systems.\nHandlers: Handlers are used to trigger the status of a service such as restarting or stopping a service.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "11. What is a playbook?",
        "answer": "A playbook has a series of YAML-based files that send commands to remote computers via scripts. Developers can configure completely complex environments by passing a script to the required systems rather than using individual commands to configure computers from the command line remotely. Playbooks are one of Ansible’s strongest selling points and are often referred to as Ansible’s building blocks.\nCheck our blog on What is An Ansible Playbook to get an in-depth understanding of Playbooks!",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "12. State the differences between variable names and environment variables.",
        "answer": "Variable Names Environment Variables\nIt can be built by adding strings. To access the environment variable, the existing variables need to be accessed.\n{{ hostvars[inventory_hostname][‘ansible_’ + which_interface][‘ipv4’][‘address’] }} # … vars: local_home: “{{ lookup(‘env’,’HOME’) }}”\nYou can easily create multiple variable names by adding strings. To set environment variables, you need to see the advanced playbooks section.\nIpv4 address type is used for variable names. For remote environment variables, use {{ ansible_env.SOME_VARIABLE }}.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "13. Where are tags used?",
        "answer": "A tag is an attribute that sets the Ansible structure, plays, tasks, and roles. When an extensive playbook is needed, it is more useful to run just a part of it as opposed to the entire thing. That is where tags are used.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "14. Which protocol does Ansible use to communicate with Linux and Windows?",
        "answer": "In Linux systems, the Secure Shell (SSH) protocol is employed, while Windows systems utilize the Windows Remote Management (WinRM) protocol.\nAlso, have a look at our DevOps course in Bengaluru if you are looking for a DevOps certification!",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "15. What are ad hoc commands? Give an example.",
        "answer": "Ad hoc commands are simple, one-line commands used to perform a certain task. You can think of ad hoc commands as an alternative to writing playbooks. An example of an ad hoc command is as follows:\nCommand: ansible host -m netscaler -a \"nsc_host=nsc.example.com user=apiuser password=apipass\"",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "16. Compare Ansible with Chef.",
        "answer": "Ansible Chef\nEasy to set up. Not very easy to set up.\nEasy to manage. Management is not easy.\nThe configuration language is YAML (Python). The configuration language is DSL (Ruby).\nSelf-support package is $5,000 annually.\nPremium version costs $14,000 annually for each 100 nodes\nStandard plan starts at $72 annually per node. The automation version charges $137 per node annually.\nWatch this video from Intellipaat on YouTube to learn more about Ansible:",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "17. What is a YAML file and how do we use it in Ansible?",
        "answer": "YAML files are like any formatted text file, with a few sets of rules similar to those of JSON or XML. Ansible uses this syntax for playbooks as it is more readable than other formats.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "18. Enumerate the code differences between JSON and YAML.JSON:",
        "answer": "{\n \"object\": {\n\"key\": \"value\",\n\"array\": [\n   {\n     \"null_value\": null\n   },\n   {\n     \"boolean\": true\n   },\n   {\n    \"integer\": 1\n   },\n   {\n     \"alias\": \"aliases are like variables\"\n   }\n]\n  }\n}\nYAML:\n---\nobject:\n  key: value\n  array:\n  - null_value:\n  - boolean: true\n  - integer: 1\n  - alias: aliases are like variables",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "19. How is Ansible different from Puppet?",
        "answer": "Ansible Puppet\nEasy to set up. Comparatively harder to set up.\nVery easy to manage. Not very easy to manage.\nThe configuration language is YAML (Python). The configuration language is DSL (Puppet DSL).\nSelf-support package is $5,000 annually. The premium version costs $14,000 annually for each 100 nodes. Enterprise pricing starts at $120 per node annually. The premium version costs $19,900 annually for each 100 nodes.\nMaster the core concepts of Terraform through this Terraform Certification Course and become an expert!\nIntermediate-level Ansible Interview Questions\nStepping up the level, let us now look into some intermediate-level Ansible interview questions and answers for experienced professionals:",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "20. Explain how you can disable cowsay.",
        "answer": "If cowsay is installed, then by executing playbooks inside Ansible, you can disable cowsay by using the two methods given below:\nUninstall cowsay\nSet up a value for the environment variable.\nexport ANSIBLE_NOCOWS = 1",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "21. What is Ansible-doc?",
        "answer": "Ansible-doc displays information on modules installed in Ansible libraries. It displays a listing of plug-ins and their short descriptions, provides a printout of their documentation strings, and creates a short snippet that can be pasted into a playbook.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "22. What is the code you need to write for accessing a variable name?",
        "answer": "The following command will do the job:\n{{ hostvars[inventory_hostname]['ansible_' + which_interface]['ipv4']['address'] }}\nThe method of using hostvars is important because it is a dictionary of the entire namespace of variables. The variable ‘inventory_hostname’ specifies the current host you are looking at in the host loop.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "23. What is the method to check the inventory vars defined for the host?",
        "answer": "This can be done by using the following command:\nansible -m debug -a \"var=hostvars['hostname']\" localhost",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "24. Explain Ansible facts.",
        "answer": "Ansible facts can be thought of as a way for Ansible to get information about a host and store it in variables for easy access. This information, which is stored in predefined variables, is available for use in the playbook. To generate facts, Ansible runs the set-up module.\nLearn from our blog Getting Started With Ansible Tower With A Hands-On",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "25. When should you test playbooks and roles?",
        "answer": "In Ansible, tests can be added to both new and existing playbooks. Therefore, most testing jobs offer clean hosting each time we use them. Using this testing methodology, we only need to make very minimal or zero code changes.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "26. Discuss the method to create an empty file with Ansible",
        "answer": "To create an empty file, you need to follow the steps given below:\nStep 1: Save an empty file into the files directory\nStep 2: Copy it to the remote host",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "27. Explain Ansible modules in detail.",
        "answer": "Ansible modules are small pieces of code that perform a specific task. Modules can be used to automate a wide range of tasks. Ansible modules are like functions or standalone scripts that run specific tasks idempotently. Their return value is JSON strings in stdout and its input depends on the type of module.\nThe two types of modules are discussed below:\nCore Modules: These are modules that the core Ansible team maintains, and they will always ship with Ansible itself. The issues reported are fixed at a higher priority than those in the extras repo. The source of these modules is hosted by Ansible on GitHub in Ansible-modules-core.\nExtras Modules: The Ansible community maintains these modules, so for now, they are being shipped with Ansible, but they might get discontinued in the future. Popular extra modules may be promoted to core modules over time. The source for these modules is hosted by Ansible on GitHub in Ansible-modules-extras.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "28. What are callback plug-ins in Ansible?",
        "answer": "Callback plug-ins mostly control the output we see while running CMD (Command Prompt) programs. Apart from this, it can also be used for adding additional or, even, multiple outputs. For example, the log_plays callback is used to record playbook events into a log file and the mail callback is used to send an email on playbook failures.\nYou can also add custom callback plug-ins by dropping them into a callback_plugins directory adjacent to play, inside a role, or by putting them in one of the callback directory sources configured in ansible.cfg.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "29. Define Ansible inventory and its types.",
        "answer": "An Ansible inventory file is used to define hosts and groups of hosts upon which the tasks, commands, and modules in a playbook will operate.\nIn Ansible, there are two types of inventory files, namely static and dynamic, which are explained below:\nStatic Inventory: Static inventory file is a list of managed hosts declared under a host group using either hostnames or IP addresses in a plain text file. The managed host entries are listed below the group name in each line.\nDynamic Inventory: Dynamic inventory is generated by a script written in Python, any other programming language, or, preferably, using plug-ins. In a cloud setup, static inventory file configuration will fail since IP addresses change once a virtual server is stopped and started again.\nCheck out our DevOps training course especially curated by industry experts!",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "30. What is an Ansible vault?",
        "answer": "Ansible vault is used to keep sensitive data, like passwords, rather than placing it as plain text in playbooks or roles. Any structured data file or single value inside a YAML file can be encrypted by Ansible.\nTo encrypt the data, the following command is given:\nCommand: ansible-vault encrypt foo.yml bar.yml baz.yml\nTo decrypt the data,  the following command is given:\nCommand: ansible-vault decrypt foo.yml bar.yml baz.yml",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "31. How do we write an Ansible handler with multiple tasks?",
        "answer": "Suppose you want to create a handler that restarts a service only if it is already running.\nHandlers can understand generic topics, and tasks can notify those topics as shown below. This functionality makes it much easier to trigger multiple handlers. It also decouples handlers from their names, which makes it easier to share handlers among playbooks and roles.\n- name: Check if restarted\nshell: check_is_started.sh\nregister: result\nlisten: Restart processes\n\n- name: Restart conditionally step 2\nservice: name=service state=restarted\nwhen: result\nlisten: Restart processes\nEven go through DevOps Interview Questions for better preparation.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "32. How to generate encrypted passwords for a user module?",
        "answer": "We can do this by using a small code, which is given below:\nansible all -i localhost, -m debug -a \"msg={{ 'mypassword' | password_hash('sha512', 'mysecretsalt') }}\"\nWe can also use the Passlib library in Python, which is mentioned below:\nCommand: python -c \"from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))\"",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "33. Explain the concept of blocks under Ansible?",
        "answer": "Blocks allow for logical grouping of tasks and in-play error-handling. Most of what you can apply to a single task can be applied at the block level, which also makes it much easier to set data or directives common to the tasks. This does not mean that the directive affects the block itself but is inherited by the tasks enclosed by a block, i.e., it will be applied to the tasks, not the block itself.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "34. Do you know how to turn off the facts in Ansible?",
        "answer": "If you do not need any factual data about the hosts and you know everything about the systems centrally, then you may turn off fact gathering. This is advantageous when scaling Ansible in push mode with very large numbers of systems, mainly, or if we are using Ansible on experimental platforms. The following command can be used  to turn off the facts in Ansible:\nCommand:\n- hosts: whatever\ngather_facts: no",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "35. What are the registered variables under Ansible?",
        "answer": "Registered variables are valid on the host for the remainder of the playbook run, which is the same as the lifetime of facts in Ansible. Effectively registered variables are very similar to facts. While using register with a loop, the data structure placed in the variable during the loop will contain a results attribute, which is a list of all responses from the module.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "36. For how many seconds does the Ansible reboot module wait by default? Is there any way to increase the time.",
        "answer": "By default, the Ansible reboot module waits for 600 seconds. Yes, it is possible to increase the time taken for Ansible reboot to certain values. The syntax given below can be used for the same:\n- name: Reboot a Linux system \nreboot:\nreboot_timeout: 1200\nHave a look at our range of Cloud Computing courses and get certified!",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "37. What do you understand by the term ‘idempotency’?",
        "answer": "Idempotency is an important Ansible feature. It prevents unnecessary changes to managed hosts. With idempotency, we can execute one or more tasks on a server as many times as we need to, but it will not change anything that has already been modified and is working correctly.\nTo put it simply, the only changes added are the ones needed, not the ones already in place.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "38. Can you copy files recursively onto a target host? If yes, how?",
        "answer": "We can copy files recursively onto a target host by using the copy module. It has a recursive parameter that copies files from a directory. There is another module called synchronize, which is specifically made for this. Given below is the command for the same:\n- synchronize:\n    src: /first/absolute/path\n    dest: /second/absolute/path\n    delegate_to: \"{{ inventory_hostname }}\"",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "39. Can you keep data a secret in the playbook?",
        "answer": "The following playbook might come in handy if you want to keep any task a secret in the playbook when using -v (verbose) mode:\n- name: secret task\n  shell: /usr/bin/do_something --value={{ secret_value }}\n  no_log: True\nIt hides sensitive information from others and provides the verbose output.",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "40. Can Docker modules be implemented in Ansible? If so, how can you use it?",
        "answer": "Yes, you can implement Docker modules in Ansible. For this, Ansible requires you to install docker-py on the host. The following command needs to be used for the same:\nCommand: $ pip install 'docker-py>=1.7.0'\nThe docker_service module also requires docker-compose. The command given below needs to be typed in for the same:\nCommand: $ pip install 'docker-compose>=1.7.0'",
        "reference": "intellipaat.com",
        "role": "ansible"
    },
    {
        "question": "1. What is CI/CD?",
        "answer": "Continuous Integration is something that is used for streamlining the development and deployment process. These lead to the more rapid development of cohesive software. \nContinuous Delivery is on the other hand is a process where your code after being pushed to a remote repository can be taken to production at any time.    In the above diagram our integration test and unit test are performed without any manual intervention and after UAT we just needed the approval to ship our tested features to production and to make such a process we need CI/CD.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "2. How to use YAML files in high programming languages such as JAVA, Python, etc?",
        "answer": "YAML is supported in most programming languages and can be easily integrated with user programs.\nIn JAVA we can use the Jackson module which also parses XML and JSON. For e.g  // We need to declare Topic class with necessary attributes such as name, total_score, user_score, sub_topics\nList<Topic> topics = new ArrayList<Topic>();\ntopics.add(new Topic(\"String Manipulation\", 10, 6));\ntopics.add(new Topic(\"Knapsack\", 5, 5));\ntopics.add(new Topic(\"Sorting\", 20, 13));\n// We want to save this Topic in a YAML file\nTopic topic = new Topic(\"DS & Algo\", 35, 24, topics);\n// ObjectMapper is instantiated just like before\nObjectMapper om = new ObjectMapper(new YAMLFactory());\n// We write the `topic` into `topic.yaml`\nom.writeValue(new File(\"/src/main/resources/topics.yaml\"), topic); // We need to declare Topic class with necessary attributes such as name, total_score, user_score, sub_topics\nList<Topic> topics = new ArrayList<Topic>();\ntopics.add(new Topic(\"String Manipulation\", 10, 6));\ntopics.add(new Topic(\"Knapsack\", 5, 5));\ntopics.add(new Topic(\"Sorting\", 20, 13));\n// We want to save this Topic in a YAML file\nTopic topic = new Topic(\"DS & Algo\", 35, 24, topics);\n// ObjectMapper is instantiated just like before\nObjectMapper om = new ObjectMapper(new YAMLFactory());\n// We write the `topic` into `topic.yaml`\nom.writeValue(new File(\"/src/main/resources/topics.yaml\"), topic); // We need to declare Topic class with necessary attributes such as name, total_score, user_score, sub_topics new new \"String Manipulation\" 10 6 new \"Knapsack\" 5 5 new \"Sorting\" 20 13 // We want to save this Topic in a YAML file new \"DS & Algo\" 35 24 // ObjectMapper is instantiated just like before new new // We write the `topic` into `topic.yaml` new \"/src/main/resources/topics.yaml\" ---\nname: \"DS & Algo\"\ntotal_score: 35\nuser_score: 24\nsub_topics:\n- name: \"String Manipulation\"\n total_score: 10\n user_score: 6\n- name: \"Knapsack\"\n total_score: 5\n user_score: 5\n- name: \"Sorting\"\n total_score: 20\n user_score: 13 ---\nname: \"DS & Algo\"\ntotal_score: 35\nuser_score: 24\nsub_topics:\n- name: \"String Manipulation\"\n total_score: 10\n user_score: 6\n- name: \"Knapsack\"\n total_score: 5\n user_score: 5\n- name: \"Sorting\"\n total_score: 20\n user_score: 13 Similarly, we can read from YAML also: // Loading the YAML file from the /resources folder\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nFile file = new File(classLoader.getResource(\"topic.yaml\").getFile());\n// Instantiating a new ObjectMapper as a YAMLFactory\nObjectMapper om = new ObjectMapper(new YAMLFactory());\n// Mapping the employee from the YAML file to the Employee class\nTopic topic = om.readValue(file, Topic.class); // Loading the YAML file from the /resources folder\nClassLoader classLoader = Thread.currentThread().getContextClassLoader();\nFile file = new File(classLoader.getResource(\"topic.yaml\").getFile());\n// Instantiating a new ObjectMapper as a YAMLFactory\nObjectMapper om = new ObjectMapper(new YAMLFactory());\n// Mapping the employee from the YAML file to the Employee class\nTopic topic = om.readValue(file, Topic.class); // Loading the YAML file from the /resources folder new \"topic.yaml\" // Instantiating a new ObjectMapper as a YAMLFactory new new // Mapping the employee from the YAML file to the Employee class In python similarly, we can use the pyyaml library and read and write easily in YAML format.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "3. What are Ansible tasks?",
        "answer": "The task is a unit action of Ansible. It helps by breaking a configuration policy into smaller files or blocks of code. These blocks can be used in automating a process. For example, to install a package or update a software Install <package_name>, update <software_name> Install <package_name>, update <software_name>",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "4. What is a YAML file and how do we use it in Ansible?",
        "answer": "YAML or files are like any formatted text file with few sets of rules just like JSON or XML. Ansible uses this syntax for playbooks as it is more readable than other formats.\nAn example of JSON vs YAML is:  {\n \"object\": {\n\"key\": \"value\",\n\"array\": [\n  {\n    \"null_value\": null\n  },\n  {\n    \"boolean\": true\n  },\n  {\n    \"integer\": 1\n  },\n  {\n    \"alias\": \"aliases are like variables\"\n  }\n]\n }\n} {\n \"object\": {\n\"key\": \"value\",\n\"array\": [\n  {\n    \"null_value\": null\n  },\n  {\n    \"boolean\": true\n  },\n  {\n    \"integer\": 1\n  },\n  {\n    \"alias\": \"aliases are like variables\"\n  }\n]\n }\n} ---\nobject:\n key: value\n array:\n - null_value:\n - boolean: true\n - integer: 1\n - alias: aliases are like variables ---\nobject:\n key: value\n array:\n - null_value:\n - boolean: true\n - integer: 1\n - alias: aliases are like variables",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "5. Explain Ansible modules in detail?",
        "answer": "Ansible modules are like functions or standalone scripts which run specific tasks idempotently. The return value of these are JSON string in stdout and input depends on the type of module. These are used by Ansible playbooks.\nThere are 2 types of modules in Ansible:  Core Modules Core Modules Core Modules The core Ansible team is responsible for maintaining these modules thus these come with Ansible itself. The issues reported are fixed on priority than those in the “extras” repo. Extras Modules Extras Modules Extras Modules The Ansible community maintains these modules so, for now, these are being shipped with Ansible but they might get discontinued in the future. These can be used but if there are any feature requests or issues they will be updated on low priority. Now popular extra modules might enter into the core modules anytime. You may find these separate repos for these modules as ansible-modules-core and ansible-modules-extra respectively.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "6. What is Ansible Galaxy?",
        "answer": "Galaxy is a repository of Ansible roles that can be shared among users and can be directly dropped into playbooks for execution. It is also used for the distribution of packages containing roles, plugins, and modules also known as collection. The ansible-galaxy-collection command implements similar to init, build, install, etc like an ansible-galaxy command.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "7. Explain Infrastructure as Code?",
        "answer": "Infrastructure as Code or IaC is a process that DevOps teams should follow to have a more organized way of managing the infra. Instead of some throwaway scripts or manually configuring any cloud component, there should be a code repo where all of these will lie and any change in configuration should be done through it. It is wise to put it under source control also. This improves speed, consistency, and accountability.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "8. What are the features of Ansible?",
        "answer": "It has the following features: Agentless – Unlike puppet or chef there is no software or agent managing the nodes.\nPython – Built on top of python which is very easy to learn and write scripts and one of the robust programming languages.\nSSH – Passwordless network authentication which makes it more secure and easy to set up.\nPush architecture – The core concept is to push multiple small codes to the configure and run the action on client nodes.\nSetup – This is very easy to set up with a very low learning curve and any open source so that anyone can get hands-on.\nManage Inventory – Machines’ addresses are stored in a simple text format and we can add different sources of truth to pull the list using plugins such as Openstack, Rackspace, etc. Agentless – Unlike puppet or chef there is no software or agent managing the nodes. Agentless Python – Built on top of python which is very easy to learn and write scripts and one of the robust programming languages. Python SSH – Passwordless network authentication which makes it more secure and easy to set up. SSH Push architecture – The core concept is to push multiple small codes to the configure and run the action on client nodes. Push architecture Setup – This is very easy to set up with a very low learning curve and any open source so that anyone can get hands-on. Setup Manage Inventory – Machines’ addresses are stored in a simple text format and we can add different sources of truth to pull the list using plugins such as Openstack, Rackspace, etc. Manage Inventory",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "9. How does Ansible work?",
        "answer": "Ansible is a combination of multiple pieces working together to become an automation tool. Mainly these are modules, playbooks, and plugins. Modules are small codes that will get executed. There are multiple inbuilt modules that serve as a starting point for building tasks.\nPlaybooks contain plays which further is a group of tasks. This is the place to define the workflow or the steps needed to complete a process\nPlugins are special kinds of modules that run on the main control machine for logging purposes. There are other types of plugins also. Modules are small codes that will get executed. There are multiple inbuilt modules that serve as a starting point for building tasks. Playbooks contain plays which further is a group of tasks. This is the place to define the workflow or the steps needed to complete a process Plugins are special kinds of modules that run on the main control machine for logging purposes. There are other types of plugins also.   The playbooks ran via an Ansible automation engine. These playbooks contain modules that are basically actions that run in host machines. The mechanism is followed here is the push mechanism, so ansible pushes small programs to these host machines which are written to be resource models of the desired state of the system.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "10. What is Configuration Management?",
        "answer": "It’s a practice that we should follow in order to keep track of all updates that are going into the system over a period of time. This also helps in a situation where a major bug has been introduced to the system due to some new changes and we need to fix it with minimum downtime. Instead of fixing the bug, we can roll back the new changes(which caused this bug) as we have been tracking those.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "1. Install Nginx using Ansible playbook?",
        "answer": "The playbook file would be: - hosts: stagingwebservers\n gather_facts: False\n vars:\n  - server_port: 8080\n tasks:\n  - name: install nginx\n    apt: pkg=nginx state=installed update_cache=true\n  - name: serve nginx config\n     template: src=../files/flask.conf dest=/etc/nginx/conf.d/\n     notify:\n     - restart nginx\n handlers:\n   - name: restart nginx\n     service: name=nginx state=restarted\n   - name: restart flask app\n     service: name=flask-demo state=restarted\n... - hosts: stagingwebservers\n gather_facts: False\n vars:\n  - server_port: 8080\n tasks:\n  - name: install nginx\n    apt: pkg=nginx state=installed update_cache=true\n  - name: serve nginx config\n     template: src=../files/flask.conf dest=/etc/nginx/conf.d/\n     notify:\n     - restart nginx\n handlers:\n   - name: restart nginx\n     service: name=nginx state=restarted\n   - name: restart flask app\n     service: name=flask-demo state=restarted\n... In the above playbook, we are fetching all hosts of stagingwebservers group for executing these tasks. The first task is to install Nginx and then configure it. We are also taking a flask server for reference. In the end, we also defined handlers so that in case the state changes it will restart Nginx. After executing the above playbook we can verify whether Nginx is installed or not. ps waux | grep nginx ps waux | grep nginx",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "2. What is the ad-hoc command in Ansible?",
        "answer": "Ad-hoc commands are like one-line playbooks to perform a specific task only. The syntax for the ad-hoc command is ansible [pattern] -m [module] -a \"[module options]\" ansible [pattern] -m [module] -a \"[module options]\" For example, we need to reboot all servers in the staging group ansible atlanta -a \"/sbin/reboot\"  -u username --become [--ask-become-pass] ansible atlanta -a \"/sbin/reboot\"  -u username --become [--ask-become-pass]",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "3. How do I access a variable name programmatically?",
        "answer": "Variable names can be built by adding strings together. For example, if we need to get ipv4 address of an arbitrary interface, where the interface to be used may be supplied via a role parameter or other input, we can do it in this way. {{ hostvars[inventory_hostname]['ansible_' + which_interface]['ipv4']['address'] }} {{ hostvars[inventory_hostname]['ansible_' + which_interface]['ipv4']['address'] }}",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "4. What is the difference between Ansible and Puppet?",
        "answer": "Management and Scheduling:  In Ansible, the server pushes the configuration to the nodes on the other hand in puppet, the client pulls the configuration from the server. Also for scheduling, the puppet has an agent who polls every 30mins(default settings) to make sure all nodes are in a desirable state. Ansible doesn’t have that feature in the free version.\nAvailability: Ansible has backup secondary nodes and puppet has more than one master node. So both try to be highly available.\nSetup: Puppet is considered to be harder to set up than ansible as it has a client-server architecture and also there’s a specific language called Puppet DSL which is its own declarative language. Management and Scheduling:  Availability:  Setup:",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "5. What is Ansible Tower and what are its features?",
        "answer": "Ansible Tower is an enterprise-level solution by RedHat. It provides a web-based console and REST API to manage Ansible across teams in an organization. There are many features such as Workflow Editor - We can set up different dependencies among playbooks, or running multiple playbooks maintained by different teams at once\nReal-Time Analysis - The status of any play or tasks can be monitored easily and we can check what’s going to run next\nAudit Trail - Tracking logs are very important so that we can quickly revert back to a functional state if something bad happens.\nExecute Commands Remotely - We can use the tower to run any command to a host or group of hosts in our inventory. Workflow Editor - We can set up different dependencies among playbooks, or running multiple playbooks maintained by different teams at once Real-Time Analysis - The status of any play or tasks can be monitored easily and we can check what’s going to run next Audit Trail - Tracking logs are very important so that we can quickly revert back to a functional state if something bad happens. Execute Commands Remotely - We can use the tower to run any command to a host or group of hosts in our inventory. There are other features also such as Job Scheduling, Notification Integration, CLI, etc.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "6. Explain how you will copy files recursively onto a target host?",
        "answer": "There’s a copy module that has a recursive parameter in it but there’s something called synchronize which is more efficient for large numbers of files. For example: - synchronize:\n   src: /first/absolute/path\n   dest: /second/absolute/path\n   delegate_to: \"{{ inventory_hostname }}\" - synchronize:\n   src: /first/absolute/path\n   dest: /second/absolute/path\n   delegate_to: \"{{ inventory_hostname }}\"",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "7. What is the best way to make Content Reusable/ Redistributable?",
        "answer": "To make content reusable and redistributable Ansible roles can be used. Ansible roles are basically a level of abstraction to organize playbooks. For example, if we need to execute 10 tasks on 5 systems, writing all of them in the playbook might lead to blunders and confusion. Instead we create 10 roles and call them inside the playbook.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "8. What are handlers?",
        "answer": "Handlers are like special tasks which only run if the Task contains a “notify” directive. tasks:\n  - name: install nginx\n    apt: pkg=nginx state=installed update_cache=true\n    notify:\n     - start nginx\n handlers:\n   - name: start nginx\n     service: name=nginx state=started tasks:\n  - name: install nginx\n    apt: pkg=nginx state=installed update_cache=true\n    notify:\n     - start nginx\n handlers:\n   - name: start nginx\n     service: name=nginx state=started In the above example after installing NGINX we are starting the server using a `start nginx` handler.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "9. How to generate encrypted passwords for a user module?",
        "answer": "Ansible has a very simple ad-hoc command for this ansible all -i localhost, -m debug -a \"msg={{ 'mypassword' | password_hash('sha512', 'mysecretsalt') }}\" ansible all -i localhost, -m debug -a \"msg={{ 'mypassword' | password_hash('sha512', 'mysecretsalt') }}\" We can also use the Passlib library of Python, e.g python -c \"from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))\" python -c \"from passlib.hash import sha512_crypt; import getpass; print(sha512_crypt.using(rounds=5000).hash(getpass.getpass()))\" On top of this, we should also avoid storing raw passwords in playbook or host_vars, instead, we should use integrated methods to generate a hash version of a password.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "10. How does dot notation and array notation of variables are different?",
        "answer": "Dot notation works fine unless we stump upon few special cases such as If the variable contains a dot(.), colon(:), starting or ending with an underscore or any known public attribute.\nIf there’s a collision between methods and attributes of python dictionaries.\nArray notation also allows for dynamic variable composition. If the variable contains a dot(.), colon(:), starting or ending with an underscore or any known public attribute. If there’s a collision between methods and attributes of python dictionaries. Array notation also allows for dynamic variable composition.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "11. How can looping be done over a list of hosts in a group, inside of a template?",
        "answer": "This can be done by accessing the “$groups” dictionary in the template, like so: {% for host in groups['db_servers'] %}\n{{ host }}\n{% endfor %} {% for host in groups['db_servers'] %}\n{{ host }}\n{% endfor %} If we need to access facts also we need to make sure that the facts have been populated. For instance, a play that talks to db_servers: - hosts: db_servers\ntasks:\n- debug: msg=\"Something to debug\" - hosts: db_servers\ntasks:\n- debug: msg=\"Something to debug\" Now, this can be used within a template, like so: {% for host in groups['db_servers'] %}\n{{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}\n{% endfor %}. {% for host in groups['db_servers'] %}\n{{ hostvars[host]['ansible_eth0']['ipv4']['address'] }}\n{% endfor %}.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "12. What is Ansible Vault?",
        "answer": "Ansible vault is used to keep sensitive data such as passwords instead of placing it as plaintext in playbooks or roles. Any structured data file or any single value inside the YAML file can be encrypted by Ansible. To encrypt a file ansible-vault encrypt foo.yml bar.yml baz.yml ansible-vault encrypt foo.yml bar.yml baz.yml And similarly to decrypt ansible-vault decrypt foo.yml bar.yml baz.yml ansible-vault decrypt foo.yml bar.yml baz.yml",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "13. What is Ansible Inventory and its types?",
        "answer": "In Ansible, there are two types of inventory files: Static and Dynamic. Static inventory file is a list of managed hosts declared under a host group using either hostnames or IP addresses in a plain text file. The managed host entries are listed below the group name in each line. For example Static inventory file is a list of managed hosts declared under a host group using either hostnames or IP addresses in a plain text file. The managed host entries are listed below the group name in each line. For example Static inventory [gatewayed]\nstaging1 ansible_host=10.0.2.1\nstaging2 ansible_host=10.0.2.2 [gatewayed]\nstaging1 ansible_host=10.0.2.1\nstaging2 ansible_host=10.0.2.2 Dynamic inventory is generated by a script written in Python or any other programming language or by using plugins(preferable). In a cloud setup, static inventory file configuration will fail since IP addresses change once a virtual server is stopped and started again. We create a demo_aws_ec2.yaml file for the config such as Dynamic inventory is generated by a script written in Python or any other programming language or by using plugins(preferable). In a cloud setup, static inventory file configuration will fail since IP addresses change once a virtual server is stopped and started again. We create a demo_aws_ec2.yaml file for the config such as Dynamic inventory plugin: aws_ec2 regions:\nap-south-1 filters:\ntag:tagtype: testing plugin: aws_ec2 regions:\nap-south-1 filters:\ntag:tagtype: testing Now we can fetch using this command ansible-inventory -i demo_aws_ec2.yaml -graph ansible-inventory -i demo_aws_ec2.yaml -graph",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "14. What are callback plugins in Ansible?",
        "answer": "Callback plugins basically control most of the output we see while running cmd programs. But it can also be used to add additional output. For example log_plays callback is used to record playbook events to a log file, and mail callback is used to send email on playbook failures. We can also add custom callback plugins by dropping them into a callback_plugins directory adjacent to play, inside a role, or by putting it in one of the callback directory sources configured in ansible.cfg.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "15. How to automate the password input in playbook using encrypted files?",
        "answer": "To automate password input we can have a password file for all the passwords of encrypted files will be saved and ansible can make a call to fetch those when required. ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -q user@gateway.example.com\"' ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -q user@gateway.example.com\"' This can also be achieved by having a separate script that specifies the passwords. But in this case, we need to print a password to stdout to work without annoying errors. ansible-playbook launch.yml --vault-password-file ~/ .vault_pass.py ansible-playbook launch.yml --vault-password-file ~/ .vault_pass.py",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "16. How to setup a jump host to access servers having no direct access?",
        "answer": "First, we need to set a ProxyCommand in ansible_ssh_common_args inventory variable, since any arguments specified in this variable are added to the sftp/scp/ssh command line when connecting to the relevant host(s). For example [gatewayed]\nstaging1 ansible_host=10.0.2.1\nstaging2 ansible_host=10.0.2.2 [gatewayed]\nstaging1 ansible_host=10.0.2.1\nstaging2 ansible_host=10.0.2.2 To create a jump host for these we need to add a command in ansible_ssh_common_args ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -q user@gateway.example.com\"' ansible_ssh_common_args: '-o ProxyCommand=\"ssh -W %h:%p -q user@gateway.example.com\"' In this way whenever we will try to connect to any host in the gatewayed group ansible will append these arguments to the command line.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "1. How does Ansible synchronize module works?",
        "answer": "Ansible synchronize is a module similar to rsync in Linux machines which we can use in playbooks. The features are similar to rsync such as archive, compress, delete, etc but there are few limitations also such as Rsync must be installed on both source and target systems\nNeed to specify delegate_to to change the source from localhost to some other port\nNeed to handle user permission as files are accessible as per remote user.\nWe should always give the full path of the destination host location in case we use sudo otherwise files will be copied to the remote user home directory.\nLinux rsync limitations related to hard links are also applied here.\nIt forces -delay-updates to avoid the broken state in case of connection failure Rsync must be installed on both source and target systems Need to specify delegate_to to change the source from localhost to some other port Need to handle user permission as files are accessible as per remote user. We should always give the full path of the destination host location in case we use sudo otherwise files will be copied to the remote user home directory. Linux rsync limitations related to hard links are also applied here. It forces -delay-updates to avoid the broken state in case of connection failure An example of synchronize module is ---\n- hosts: host-remote tasks:\n- name: sync from sync_folder\nsynchronize:\nsrc: /var/tmp/sync_folder dest: /var/tmp/ ---\n- hosts: host-remote tasks:\n- name: sync from sync_folder\nsynchronize:\nsrc: /var/tmp/sync_folder dest: /var/tmp/ Here we are transferring files of /var/tmp/sync_folder folder to remote machine’s /var/tmp folder",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "2. How does the Ansible firewalld module work?",
        "answer": "Ansible firewalld is used to manage firewall rules on host machines. This works just as Linux firewalld daemon for allowing/blocking services from the port. It is split into two major concepts Zones: This is the location for which we can control which services are exposed to or a location to which one the local network interface is connected.\nServices: These are typically a series of port/protocol combinations (sockets) that your host may be listening on, which can then be placed in one or more zones Zones: This is the location for which we can control which services are exposed to or a location to which one the local network interface is connected. Zones: Services: These are typically a series of port/protocol combinations (sockets) that your host may be listening on, which can then be placed in one or more zones Services: Few examples of setting up firewalld are - name: permit traffic in default zone for https service\n ansible.posix.firewalld:\n   service: https\n   permanent: yes\n   state: enabled\n   \n- name: do not permit traffic in default zone on port 8081/tcp\n ansible.posix.firewalld:\n   port: 8081/tcp\n   permanent: yes\n   state: disabled - name: permit traffic in default zone for https service\n ansible.posix.firewalld:\n   service: https\n   permanent: yes\n   state: enabled\n   \n- name: do not permit traffic in default zone on port 8081/tcp\n ansible.posix.firewalld:\n   port: 8081/tcp\n   permanent: yes\n   state: disabled",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "3. How is the Ansible set_fact module different from vars, vars_file, or include_var?",
        "answer": "In Ansible, set_fact is used to set new variable values on a host-by-host basis which is just like ansible facts, discovered by the setup module. These variables are available to subsequent plays in a playbook. In the case of vars, vars_file, or include_var we know the value beforehand whereas when using set_fact, we can store the value after preparing it on the fly using certain tasks like using filters or taking subparts of another variable. We can also set a fact cache over it. set_fact variable assignment is done by using key-pair values where the key is the variable name and the value is the assignment to it. A simple example will be like below - set_fact:\none_fact: value1\nsecond_fact:\nvalue2 - set_fact:\none_fact: value1\nsecond_fact:\nvalue2",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "4. When is it unsafe to bulk-set task arguments from a variable?",
        "answer": "All of the task's arguments can be dictionary-typed variables which can be useful in some dynamic execution scenarios also. However, Ansible issues a warning since it introduces a security risk. vars:\n usermod_args:\nname: testuser\nstate: present\nupdate_password: always\ntasks:\n- user: '{{ usermod_args }}' vars:\n usermod_args:\nname: testuser\nstate: present\nupdate_password: always\ntasks:\n- user: '{{ usermod_args }}' In the above example, the values passed to the variable usermod_args could be overwritten by some other malicious values in the host facts on a compromised target machine. To avoid this bulk variable precedence should be greater than host facts.\nneed to disable INJECT_FACTS_AS_VARS configuration to avoid collision of fact values with variables. bulk variable precedence should be greater than host facts. need to disable INJECT_FACTS_AS_VARS configuration to avoid collision of fact values with variables.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "5. Explain Ansible register.",
        "answer": "Ansible register is used to store the output from task execution in a variable. This is useful when we have different outputs from each remote host. The register value is valid throughout the playbook execution so we can make use of set_fact to manipulate the data and provide input to other tasks accordingly. - hosts: all tasks:\nname: find all txt files in /home shell: \"find /home -name *.txt\" register: find_txt_files\ndebug:\nvar: find_txt_files - hosts: all tasks:\nname: find all txt files in /home shell: \"find /home -name *.txt\" register: find_txt_files\ndebug:\nvar: find_txt_files In the above example, we are searching for all .txt files in the remote host’s home folder and then capturing it in find_txt_files and displaying that variable.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "6. How can we delegate tasks in Ansible?",
        "answer": "Task delegation is an important feature of Ansible since there might be use cases where we would want to perform a task on one host with reference to other hosts. We can do this using the delegate_to keyword. For example, if we want to manage nodes in a load balancer pool we can do: - hosts: webservers\n serial: 5\n \n tasks:\n- name: Take machine out of ELB pool\n  ansible.builtin.command: /usr/bin/take_out_of_pool {{ inventory_hostname }}\n  delegate_to: 127.0.0.1\n  \n- name: Actual steps would go here\n  ansible.builtin.yum:\n    name: acme-web-stack\n    state: latest\n    \n- name: Add machine back to ELB pool\n  ansible.builtin.command: /usr/bin/add_back_to_pool {{ inventory_hostname }}\n  delegate_to: 127.0.0.1 - hosts: webservers\n serial: 5\n \n tasks:\n- name: Take machine out of ELB pool\n  ansible.builtin.command: /usr/bin/take_out_of_pool {{ inventory_hostname }}\n  delegate_to: 127.0.0.1\n  \n- name: Actual steps would go here\n  ansible.builtin.yum:\n    name: acme-web-stack\n    state: latest\n    \n- name: Add machine back to ELB pool\n  ansible.builtin.command: /usr/bin/add_back_to_pool {{ inventory_hostname }}\n  delegate_to: 127.0.0.1 We are also defining serial to control the number of hosts executing at one time. There is another shorthand syntax called local_action which can be used instead of delegate_to. ...\ntasks:\n   - name: Take machine out of ELB pool\n     local_action: ansible.builtin.command /usr/bin/take_out_of_pool {{ inventory_hostname }}\n... ...\ntasks:\n   - name: Take machine out of ELB pool\n     local_action: ansible.builtin.command /usr/bin/take_out_of_pool {{ inventory_hostname }}\n... But there are few exceptions also such as include, add_host, and debug tasks that cannot be delegated.",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "7. Conclusion",
        "answer": "Ansible is a great tool for automating IT tasks and it is widely used in industries, thus every software developer or someone in the DevOps team should know the basics. Also, it is very easy to set up so we can start right away. These questions cover the most important concepts related to Ansible which will help in both interview and understanding Ansible in depth. software developer References & Resources: References & Resources: Getting Started — Ansible Documentation\nGetting started with Ansible | Tutorial for Beginners @RisingStack\nAnsible Whitepaper\nExtensive cheatsheet for Ansible - Ansible — Dan's Cheat Sheets 1 documentation\nTerraform Interview Questions\nTechnical Interview Questions Getting Started — Ansible Documentation Getting Started — Ansible Documentation Getting started with Ansible | Tutorial for Beginners @RisingStack Getting started with Ansible | Tutorial for Beginners @RisingStack Ansible Whitepaper Ansible Whitepaper Extensive cheatsheet for Ansible - Ansible — Dan's Cheat Sheets 1 documentation Dan's Cheat Sheets 1 documentation Terraform Interview Questions Terraform Interview Questions Technical Interview Questions Technical Interview Questions",
        "reference": "interviewbit.com",
        "role": "ansible"
    },
    {
        "question": "1) What is Ansible?",
        "answer": "Ansible is an open-source IT engine that automates application deployment, cloud provisioning, intra service orchestration, and other IT tools.\nAnsible is very easy to deploy because it does not use any agents or custom security infrastructure on the client-side, and by pushing modules to the clients. These modules are executed locally on the client-side, and the output is pushed back to the Ansible server. It can easily connect to clients using SSH-Keys.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "2) What are the uses of Ansible?",
        "answer": "ADVERTISEMENT\nAnsible is free to use by everyone.\nAnsible is very consistent and lightweight, and no constraints regarding the operating system or underlying hardware are present.\nIt is very secure due to its agentless capabilities and open SSH security features.\nAnsible does not need any special system administrator skills to install and use it.\nAnsible has a smooth learning curve determined by the comprehensive documentation and easy to learn structure and configuration.\nIts modularity regarding plugins, inventories, modules, and playbooks make Ansible perfect companion orchestrate large environments.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "3) What is Ansible Tower?",
        "answer": "Ansible Tower is like Ansible at a more enterprise level. It is the web-based solution for managing your organization with an easy user interface that provides a dashboard with all of the state summaries of all the hosts. And allows quick deployments, and monitors all configurations.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "4) What is Ansible Galaxy?",
        "answer": "Ansible Galaxy is a galaxy website where users can share roles and to a command-line tool for installing, creating, and managing roles.\nAnsible Galaxy gives greater visibility to one of Ansible's most exciting features, such as application installation or reusable roles for server configuration. Lots of people share roles in the Ansible Galaxy.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "5) What is Ansible Modules?",
        "answer": "Ansible modules are discrete units of code which can be used from the command line or in a playbook task.\nThe modules also referred to as task plugins or library plugins in the Ansible.\nAnsible ships with several modules that are called module library, which can be executed directly or remote hosts through the playbook.\nUsers can also write their modules. These modules can control like services, system resources, files, or packages, etc. and handle executing system commands.\nADVERTISEMENT",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "6) How does Ansible work?",
        "answer": "Ansible works by connecting to the nodes and pushing out a small program called Ansible modules to them. Then Ansible executed these modules and removed them after finished. The library of the modules can reside on any machine, and there are no daemons, servers, or databases required.\n\nThe Management Node is the controlling node that controls the entire execution of the playbook. The inventory files provide the list of hosts where the Ansible modules need to be run. The Management Node makes an SSH connection and executes the small modules on the host's machine and install the software.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "7) What are the Ansible Server requirements?",
        "answer": "If you are a windows user, then you required to have a virtual machine in which Linux should be installed.\nAnd it requires python 2.6 version or higher.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "8) What are the variables in Ansible?",
        "answer": "The variable is very similar to using the variables in a programming language. It helps you to assign a value to a variable and use it anywhere in the playbook. You can put the conditions around the value of the variables and use them in the playbook accordingly.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "9) What is Ansible Task?",
        "answer": "Ansible Task allows us to break up bits of configuration policy into smaller files. These are the block of code which can be used to automate any process.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "10) Explain the basic terminologies or concepts in Ansible?",
        "answer": "Some basic terms which are commonly used in Ansible, such as:\nController Machine: The Controller machine is used to provisioning the servers, which is managed. This is the machine where Ansible is installed.\nInventory: An inventory is an initialization file which has details about the different servers you are managing.\nPlaybook: It is a code file that is written in the YAML format. A playbook contains the tasks that need to be automated or executed.\nTask: Every task represents a single procedure that needs to be executed, e.g., installs a library.\nModule: A module is the set of tasks that can be executed. Ansible has 100s of built-in modules, and also you can create custom ones.\nRole: The role is a pre-defined way for organizing playbooks and other files to facilitate sharing and reusing portions of provisioning.\nPlay: The task executed from start to finish, or the execution of a playbook is called the play.\nFacts: Facts are global variables which are store details about the system, such as network interfaces or operating system.\nHandlers: Handlers are used to trigger the status of a service, such as restarting or stopping a service.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "11) What are Ad-hoc commands?",
        "answer": "Ad-hoc commands are simple one-line commands which are used to perform a certain task. You can think of Ad-hoc commands as an alternative to writing playbooks. An example of an Ad-hoc command, as shown as follows:\nansible host -m netscaler -a \"nsc_host=nsc.example.com user=ansiuser password=ansipass\"  \nThe above Ad-hoc command accesses the NetScaler module to disable the server.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "12) How would you access a variable of the first host in a group?",
        "answer": "Executes the following commands to access a variable of the first host in a group:\n{{ hostvars[groups['webservers'][0]]['ansible_eth0']['ipv4']['address'] }}  \nThis command is accessing the hostname of the first machine in the webservers group. If you are doing this by a template, then use the jinja2 '#set', or you can use set_fact.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "13) How to keep secrete data in a playbook?",
        "answer": "The following command is used to keep verbose output but hide the sensitive information from others who would like to be able to see the output.\n-   name: secrete task  \nshell: /user/bin/do_somthing -value={{secrete value}}  \nno_log: True   \nAlso, the no_log attribute can apply to an entire play.\n-   hosts: all  \nno_log: True",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "14) What are Ansible Vaults, and why are they used?",
        "answer": "Ansible Vault is a feature that allows keeping all your secrets safe. It can encrypt entire files, YAML playbooks, or even a few variables. It provides a facility where you also can integrate the sensitive data into your playbooks.\n\nVault is implemented with file-level granularity, where the files are completely encrypted or unencrypted. It uses the same password for encrypting as well as decrypt the data, which makes Ansible vault user-friendly.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "15) What is the way to access shell environment variables in Ansible?",
        "answer": "In Ansible, if you want to access existing variables, then you need to use the 'env' lookup plugin.\nFor example, you want to access the value of the Office environment on the management machine, as shown in the following command, such as:\n---  \n# ...  \nvars:  \nlocal_home: \"{{ lookup('env','Office') }}\"  \nI  \n{{ ansible_env.SOME_VARIABLE }}",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "16) Who you can copy file recursively onto a target host?",
        "answer": "The \"copy\" module has a recursive parameter. Therefore, if you want to perform more efficient for a large number of files, then the \"synchronize\" module is the best option for doing this task.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "17) How do you set the path or any other environment variable for a task?",
        "answer": "The environment variables can be set by using the 'environment' keyword. It can be set for either a task or an entire playbook. Follow the following code to see how do set the path, such as:\nenvironment:  \nPATH: \"{{ansible_env.PATH}}:/thingy/bin\"  \nSOME: value",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "18) How can you see all variables for a host?",
        "answer": "You can see all the variables using the host vary variable. It stores host variables with the hostname as key. For example, to look at the variables defined for localhost, you can run the following command, such as:\nansible -m debug -a \"var=hostvars[inventory_hostname]\"",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "19) What is the difference between the Variable Name and Environment Variable in Ansible?",
        "answer": "Variable Name Environment Variable\nYou need to add strings to create variable names. You need existing variables to access environment variables.\nYou can easily create multiple variable names by adding strings. To create environment variables, you must refer to the advanced Ansible playbook.\nUse the IPV4 address for variable names. Use {{ansible_env.SOME_VARIABLE}} for remote environment variables.",
        "reference": "javatpoint.com",
        "role": "ansible"
    },
    {
        "question": "20) What is RedHat Ansible?",
        "answer": "Ansible and Ansible Tower by Red Hat, both are the end to end complete automation platforms which are capable of providing the following features or functionalities:\nProvisioning\nDeploying applications\nOrchestrating workflows\nManage IT systems\nConfiguration of IT systems\nNetworks\nApplications\nAll of these activities are dealing with Ansible, where it can help the business to solve real-time business problems.",
        "reference": "javatpoint.com",
        "role": "ansible"
    }
]