[
    {
        "question": "1. What do you mean by the term ‘type’ in ElasticSearch?",
        "answer": "Types are logical categories or parts of an index whose semantics are determined by the user. Elasticsearch clusters can consist of multiple Indices (databases), each of which contains several Types (tables). A type holds multiple Documents (rows), and every document has some Properties (columns). By using types, multiple data types can be stored in the same index, thus reducing the total number of indices. Example: Example: Suppose, in your car manufacturing scenario, you had a Tatafactory index. There are three types (tables) in this index as follows: Cars\nPeople\nSpare_Parts Cars People Spare_Parts Every type then contains documents relevant to that type (e.g. a Tata Innova document is housed in the Cars type). In this document, you can find all the information about the particular car.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "2. What do you mean by NRT (Near Real-Time Search) in ElasticSearch?",
        "answer": "Elasticsearch provides near real-time search functionality. It means that there is a slight delay (approximately one second) between the time you index a document and the moment it becomes searchable.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "3. What are the advantages of ElasticSearch?",
        "answer": "ElasticSearch's advantages can be listed or summarized as follows: Elasticsearch is a fast search engine: Since Elasticsearch is built on top of Apache Lucene, it provides a full-text search. The latency between the time a document is indexed and the moment it can be searched is extremely short with ElasticSearch - typically one second. This makes Elasticsearch a good choice for time-sensitive use cases such as infrastructure monitoring and security analytics.\nElasticsearch is a distributed search engine: Elasticsearch stores or distributes documents across several containers called shards, which are duplicated to provide redundant copies of the data in the event of a hardware or system failure. Due to Elasticsearch's distributed nature, it can scale up to thousands of servers and can handle petabytes of data. You can use ElasticSearch as a replacement for document stores such as RavenDB and MongoDB.\nElasticsearch provides a wide range of features:  Aside from being scalable, fast, and resilient, Elasticsearch offers numerous built-in features like data roll-ups and index lifecycle management that make storing and searching data easier and more efficient.\nData ingestion, visualization, and reporting are simplified with the Elastic Stack or BELEK: Data can be collected and processed easily using Beats and Logstash before being indexed in Elasticsearch. Besides providing real-time visualization of Elasticsearch data, Kibana provides UIs for quick access to log files, application performance monitoring (APM), and infrastructure metrics data. Elasticsearch is a fast search engine: Since Elasticsearch is built on top of Apache Lucene, it provides a full-text search. The latency between the time a document is indexed and the moment it can be searched is extremely short with ElasticSearch - typically one second. This makes Elasticsearch a good choice for time-sensitive use cases such as infrastructure monitoring and security analytics. Elasticsearch is a fast search engine: Elasticsearch is a distributed search engine: Elasticsearch stores or distributes documents across several containers called shards, which are duplicated to provide redundant copies of the data in the event of a hardware or system failure. Due to Elasticsearch's distributed nature, it can scale up to thousands of servers and can handle petabytes of data. You can use ElasticSearch as a replacement for document stores such as RavenDB and MongoDB. Elasticsearch is a distributed search engine: Elasticsearch provides a wide range of features:  Aside from being scalable, fast, and resilient, Elasticsearch offers numerous built-in features like data roll-ups and index lifecycle management that make storing and searching data easier and more efficient. Elasticsearch provides a wide range of features Data ingestion, visualization, and reporting are simplified with the Elastic Stack or BELEK: Data can be collected and processed easily using Beats and Logstash before being indexed in Elasticsearch. Besides providing real-time visualization of Elasticsearch data, Kibana provides UIs for quick access to log files, application performance monitoring (APM), and infrastructure metrics data. Data ingestion, visualization, and reporting are simplified with the Elastic Stack or BELEK:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "4. How to add a mapping to an index?",
        "answer": "Elasticsearch lets you add the mapping to an index based on the data provided by the user in the request body. The following syntax can be used to add a mapping to an index: Syntax: Syntax: POST /_<index_name>/_type/_id POST /_<index_name>/_type/_id",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "5. What is the process of deleting an index in Elasticsearch?",
        "answer": "Deleting an index removes all of its shards, documents, and metadata. Use the following command to delete an index in Elasticsearch: Syntax: Syntax: DELETE /<index_name> DELETE /<index_name> Example: To delete an index named my-index-321, we use the following command. Example: DELETE /my-index-321 DELETE /my-index-321",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "6. Define the terms Shard and Replica in ElasticSearch.",
        "answer": "Shard: Elasticsearch crashes are often caused by large indexes. Due to the unlimited number of documents that can be stored on each index, an index may consume more disk space than the hosting server can provide. Indexing will begin to fail as soon as the index reaches this limit. As a solution to this problem, it is possible to divide or segment indexes horizontally into multiple pieces, also called shards. For an index, you can easily specify how many shards you want. As a result, every shard is its own, fully functional, and independent \"index\", which can run on any node in a cluster. Shard:   Replica: As the name implies, replicas are Elasticsearch fail-safe mechanisms, and are essentially copies of an index's shards. As a backup, this could come in handy when a node crashes. Furthermore, replicas can serve read requests, which is useful for increasing search performance. To ensure high availability, replicas must not be placed on the same node as the original shard (called the \"primary shared\") from which they were replicated. Replica:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "7. What is an index in ElasticSearch?",
        "answer": "An index is a collection of documents that are somewhat similar in nature. As an example, you could have an index of customer data, another one of product catalogs, and another one of order data. The name of an index (which must be all lowercase) serves as an identifier for the index when indexing, searching, updating, and deleting documents contained within it. An index (plural: indices) can have one or more than one shards and replicas.  ",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "8. Which operations can you perform on a document?",
        "answer": "Elasticsearch allows the following operations to be performed over documents: Indexing a document\nFetching documents\nUpdating documents\nDeleting documents Indexing a document Fetching documents Updating documents Deleting documents",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "9. Explain what is a document in ElasticSearch.",
        "answer": "The term \"document\" refers to a unit of information that can be indexed. Each index within Elasticsearch contains multiple documents. For instance, you could have a document for every customer, another for every order, etc. These documents are written in JavaScript Object Notation (JSON), which is a widely used format for internet data exchange. Documents are composed of fields, and each field has its own type of data. In a particular index, you can store as many documents as you wish.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "10. Explain a node in Elastic Search.",
        "answer": "You can think of a node as a single server that forms part of your cluster. Nodes are assigned roles that describe their responsibilities and operations. By default, every cluster node can handle HTTP and transport traffic. Communication between nodes is carried out via the transport layer, while REST clients utilize the HTTP layer. Nodes in a cluster are aware of each other and can forward client requests to the right node.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "11. What is cluster in ElasticSearch?",
        "answer": "A cluster is a collection of connected nodes. If you run only one instance or node of Elasticsearch, then you have a single-node cluster or a cluster of one node. Clusters automatically reorganize themselves when nodes join or leave so the data is distributed evenly among all the nodes. Despite being fully functional, the cluster is at risk of data loss if it fails.  ",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "12. What is ElasticSearch fuzzy search?",
        "answer": "With fuzzy search, you can find documents with terms similar to your search term based on a Levenshtein edit distance measure. Edit distance is essentially the number of single-character changes or edits required to change one term into another. Among these changes are: Change one character (box → fox)\nRemove one character (black → lack)\nInsert one character (sic → sick)\nTranspose two adjacent characters (act → cat) Change one character (box → fox) Remove one character (black → lack) Insert one character (sic → sick) Transpose two adjacent characters (act → cat) Within a specific edit distance, the fuzzy query generates a list of all possible variations and expansions of the search term. After that, the query returns a list of all possible matches. The most relevant and exact matches appear near the top of the list.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "13. What is ElasticSearch Mapping?",
        "answer": "ElasticSearch mappings define how documents and their fields are indexed and stored in ElasticSearch databases or ElasticSearch DBs. This defines the types and formats of the fields that appear in the documents. As a result, mapping can have a significant impact on how Elasticsearch searches for and stores data. After creating an index, we must define the mapping. An incorrect preliminary definition and mapping might lead to incorrect search results. Types of mapping Types of mapping Static mapping: Users perform static mappings when they create an index. We use static mappings to define data types and indexes. It is easy to define fields and their types when creating an index.\nDynamic mapping: Elasticsearch automatically creates dynamic mappings for the tables. The dynamic mapping of Elasticsearch comes in handy when we need to store extra attributes on documents. It is not always necessary to configure field names and types when indexing documents, as these will be created automatically by Elasticsearch based on any predefined rules. Static mapping: Users perform static mappings when they create an index. We use static mappings to define data types and indexes. It is easy to define fields and their types when creating an index. Static mapping: Dynamic mapping: Elasticsearch automatically creates dynamic mappings for the tables. The dynamic mapping of Elasticsearch comes in handy when we need to store extra attributes on documents. It is not always necessary to configure field names and types when indexing documents, as these will be created automatically by Elasticsearch based on any predefined rules. Dynamic mapping:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "14. How do you stop the ElasticSearch search service from running on a Linux server?",
        "answer": "To shut down or turn off the Elasticsearch service on a Linux server, you will need to 'kill' the running process. It is accomplished by sending a SIGTERM request to the process, which ends or terminates it. In order to initiate the shutdown process, you must first determine the process identifier (PID) for the Elasticsearch service you wish to terminate. Grep command can be used to locate processes easily. If you wish to locate all Elasticsearch-related processes running on a server, you can use the following command: ps -ef | grep elas ps -ef | grep elas After identifying the correct PID, simply execute a kill command with the PID of the Elasticsearch process. Upon successful execution of the kill command, Elasticsearch should no longer be running.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "15. Can you please list out different ElasticSearch data types for the document fields?",
        "answer": "Field types (also called field data types) describe the type of information or data a field contains, such as a string or boolean, and its intended use. The following are some data types for document fields: Common data types: Common data types: Binary: A binary value that is encoded as a Base64 string.\nBoolean: A true or false value.\nKeywords: The keyword family, which includes the keyword, constant keyword, and wildcard.\nNumbers: Numeric types such as long, double, float, bytes, integer, etc.\nDates: Date types, such as date_nano, date.\nAlias: Represents the alias of an existing field. Binary: A binary value that is encoded as a Base64 string. Binary: Boolean: A true or false value. Boolean: Keywords: The keyword family, which includes the keyword, constant keyword, and wildcard. Keywords: Numbers: Numeric types such as long, double, float, bytes, integer, etc. Numbers: Dates: Date types, such as date_nano, date. Dates: Alias: Represents the alias of an existing field. Alias Objects and relational types: Objects and relational types: Object: Represent a JSON object.\nNested: A JSON object that maintains a relationship between its subfields.\nFlattened: An entire JSON object represented by a single field value.\\\nJoin: Establishes a parent/child relationship between documents within an index. Object: Represent a JSON object. Object: Nested: A JSON object that maintains a relationship between its subfields. Nested: Flattened: An entire JSON object represented by a single field value.\\ Flattened: Join: Establishes a parent/child relationship between documents within an index. Join: Structured and Spatial data types: Structured and Spatial data types: Range: Range types, like date_range, long_range, float_range, double_range, and IP_range.\nPoint: Arbitrary cartesian points.\nGeo_point: Longitude and latitude points\nShape: Arbitrary cartesian geometries.\nGeo_shape: Complex shapes like polygons. Range: Range types, like date_range, long_range, float_range, double_range, and IP_range. Range: Point: Arbitrary cartesian points. Point: Geo_point: Longitude and latitude points Geo_point: Shape: Arbitrary cartesian geometries. Shape: Geo_shape: Complex shapes like polygons. Geo_shape:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "16. How does ElasticSearch work?",
        "answer": "The Working of ElasticSearch is summarized as follows: Firstly, raw data is gathered from a variety of sources, such as log files, system metrics, or web applications. Beats are lightweight data shipping agents (data shippers) that collect different types of data and forward it to Logstash.\nThis raw data is normalized, analyzed, and enriched prior to being indexed in Elasticsearch. Logstash performs several transformations and enhancements, and then sends the data to be indexed in Elasticsearch.\nAs soon as the data has been indexed in Elasticsearch, then users can run queries against it, and then aggregate it to generate insights. ElasticSearch enables you to store, search, and analyze vast or huge amounts of data in near real-time, providing results in milliseconds.\nLastly, from Kibana, users can create powerful visualizations of data, and visualize complex queries through interactive diagrams, geospatial data, and graphs. Firstly, raw data is gathered from a variety of sources, such as log files, system metrics, or web applications. Beats are lightweight data shipping agents (data shippers) that collect different types of data and forward it to Logstash. This raw data is normalized, analyzed, and enriched prior to being indexed in Elasticsearch. Logstash performs several transformations and enhancements, and then sends the data to be indexed in Elasticsearch. As soon as the data has been indexed in Elasticsearch, then users can run queries against it, and then aggregate it to generate insights. ElasticSearch enables you to store, search, and analyze vast or huge amounts of data in near real-time, providing results in milliseconds. Lastly, from Kibana, users can create powerful visualizations of data, and visualize complex queries through interactive diagrams, geospatial data, and graphs.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "17. What is ElasticSearch used for?",
        "answer": "Elasticsearch's speed and scalability as well as its ability to index different types of data make it ideal for a number of use cases. In addition to its high scalability, Elasticsearch also offers near-real-time search capabilities. All this adds up to a solution that offers much more than a search engine and supports many operational and critical business use cases. Since Elasticsearch has powerful search capabilities, it is typically the underlying technology for applications requiring complex search requirements. Listed below are some of the use cases of ElasticSearch: Application search, Enterprise search, and Website search.\nAnalyzing log data in near-real-time and on a scalable basis.\nBusiness analytics and security analytics.\nAnalysis and visualization of geospatial data.\nMonitoring the performance of applications.\nMonitoring infrastructure metrics and containers. Application search, Enterprise search, and Website search. Analyzing log data in near-real-time and on a scalable basis. Business analytics and security analytics. Analysis and visualization of geospatial data. Monitoring the performance of applications. Monitoring infrastructure metrics and containers.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "1. Explain Tokenizer in ElasticSearch.",
        "answer": "When a tokenizer receives a stream of characters (text), it tokenizes them (usually by breaking them up into individual words or tokens), and outputs the stream of words/tokens. Elasticsearch comes with several tokenizers that you can use to build your custom analyzers. A whitespace tokenizer, for example, breaks text into individual tokens whenever it encounters any whitespace. The text \"Scaler by InterviewBit!\" would be converted into terms or tokens [Scaler, by, InterviewBit].",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "2. What is an Analyzer ElasticSearch?",
        "answer": "When indexing data in ElasticSearch, the data is internally transformed by the Analyzer assigned to the index. In essence, an analyzer indicates how text should be indexed and searched in ElasticSearch. Elasticsearch comes with several ready-to-use analyzers built into it. You can also create custom analyzers by combining the built-in character filters, tokenizers, and token filters. Character filter: Used to remove unused characters or change some characters.\nTokenizer: Divides or breaks text into tokens (or words) based on some criteria (e.g. whitespace).\nToken filter: The filter receives tokens and applies filters to them (such as changing uppercase terms into lowercase). Character filter: Used to remove unused characters or change some characters. Character filter: Tokenizer: Divides or breaks text into tokens (or words) based on some criteria (e.g. whitespace). Tokenizer: Token filter: The filter receives tokens and applies filters to them (such as changing uppercase terms into lowercase). Token filter:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "3. What is an Inverted index in ElasticSearch?",
        "answer": "ElasticSearch utilizes a hashmap-like data structure known as an inverted index that allows for rapid full-text searches. The inverted index lists all the unique words that appear in one or more documents and identifies all the documents those words appear in. With it, you can conduct quick searches across millions of documents to find relevant data. Example: Let's assume we have two different documents: Example: Scaler is a good Ed-tech company.\nInterviewBit is one of the good companies. Scaler is a good Ed-tech company. InterviewBit is one of the good companies. The above texts have been tokenized first into separate terms for indexing purposes. All the unique terms are then stored in the index, along with information such as which document the term appears in, its position, as well as how many times it appeared. Accordingly, the inverted index is as follows: Term Frequency Document Document: Position\nScaler 1 1 1:1\nis 2 1,2 1:2,2:2\na 1 1 1:3\ngood 2 1,2 1:4,2:6\nEd-tech 1 1 1:5\nCompany 1 1 1:6\nInterviewBit 1 2 2:1\none 1 2 2:3\nof  1 2 2:4\nthe 1 2 2:5\ncompanies 1 2 2:7 Term Frequency Document Document: Position\nScaler 1 1 1:1\nis 2 1,2 1:2,2:2\na 1 1 1:3\ngood 2 1,2 1:4,2:6\nEd-tech 1 1 1:5\nCompany 1 1 1:6\nInterviewBit 1 2 2:1\none 1 2 2:3\nof  1 2 2:4\nthe 1 2 2:5\ncompanies 1 2 2:7 Term Frequency Document Document: Position Term Frequency Document Document: Position Term Frequency Document Document: Position Scaler 1 1 1:1\nis 2 1,2 1:2,2:2\na 1 1 1:3\ngood 2 1,2 1:4,2:6\nEd-tech 1 1 1:5\nCompany 1 1 1:6\nInterviewBit 1 2 2:1\none 1 2 2:3\nof  1 2 2:4\nthe 1 2 2:5\ncompanies 1 2 2:7 Scaler 1 1 1:1 Scaler 1 1 1:1 is 2 1,2 1:2,2:2 is 2 1,2 1:2,2:2 a 1 1 1:3 a 1 1 1:3 good 2 1,2 1:4,2:6 good 2 1,2 1:4,2:6 Ed-tech 1 1 1:5 Ed-tech 1 1 1:5 Company 1 1 1:6 Company 1 1 1:6 InterviewBit 1 2 2:1 InterviewBit 1 2 2:1 one 1 2 2:3 one 1 2 2:3 of  1 2 2:4 of 1 2 2:4 the 1 2 2:5 the 1 2 2:5 companies 1 2 2:7 companies 1 2 2:7 Let's say you are looking for a term company or companies. With this inverted index, queries can search for terms and quickly identify documents that contain these terms.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "4. Describe the functionality of the cat API in ElasticSearch.",
        "answer": "Elasticsearch API results are usually displayed in JSON format, which is not always easy to read. Human eyes require compact and aligned text, especially when looking at a terminal. In order to meet this need, cat APIs (compact and aligned text APIs) have been developed. Thus, the cat APIs feature offered by Elasticsearch facilitates an easier-to-read and comprehend printing format for Elasticsearch results. Cat APIs return plain text instead of traditional JSON, which is comprehensible by users. You can view the available operations in the cat API by running the following commands: Elasticsearch API GET _cat GET _cat Additionally, you may use the following parameters with your query. Verbose (v?): Gives results in a nice format or more verbose output. Use this parameter to see what each column represents.\nSyntax: Verbose (v?): Gives results in a nice format or more verbose output. Use this parameter to see what each column represents.\nSyntax: Verbose (v?): Syntax: Syntax: Syntax: GET _cat/<operation_name>?v GET _cat/<operation_name>?v Help (?help): Provides a list of the available headers and columns for a given operation. You can view all available headers by using this parameter.\nSyntax: Help (?help): Provides a list of the available headers and columns for a given operation. You can view all available headers by using this parameter.\nSyntax: Help (?help): Syntax: Syntax: Syntax: GET _cat/<operation_name>?help GET _cat/<operation_name>?help Headers (?h): Limit the output to specified headers or columns in the command.\nSyntax: Headers (?h): Limit the output to specified headers or columns in the command.\nSyntax: Headers (?h): Syntax: Syntax: Syntax: GET _cat/<operation_name>?h=<header_name_1>,<header_name_2>&v GET _cat/<operation_name>?h=<header_name_1>,<header_name_2>&v Numeri format (?format): Provide different types of numeric output, such as bytes, size, and time value.\nSort (?sort): Sorts the table by the specified columns as the parameter value. Numeri format (?format): Provide different types of numeric output, such as bytes, size, and time value. Numeri format (?format): Sort (?sort): Sorts the table by the specified columns as the parameter value. Sort (?sort):",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "5. What are the different ElasticSearch commands available in the cat API?",
        "answer": "There are different commands available in the Elasticsearch cat API. Here are a few: Count: Displays the total number of documents in your cluster. Count: Displays the total number of documents in your cluster. Count: GET _cat/count?v GET _cat/count?v Allocation: Displays the disk space allocated to indices and the number of shards per node. Allocation: Displays the disk space allocated to indices and the number of shards per node. Allocation: GET _cat/allocation?v GET _cat/allocation?v Field data: Shows the memory usage of each field per node. Field data: Shows the memory usage of each field per node. Field data GET _cat/fielddata?v GET _cat/fielddata?v Indices: Displays information about indices, including how much space they take up, how many shards they have, etc. Indices: Displays information about indices, including how much space they take up, how many shards they have, etc. Indices: GET _cat/indices?v GET _cat/indices?v Node Attributes: Displays the attributes associated with custom nodes. Node Attributes: Displays the attributes associated with custom nodes. Node Attributes: GET _cat/nodeattrs?v GET _cat/nodeattrs?v",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "6. Explain ELK stack and its architecture.",
        "answer": "The \"ELK\" acronym refers to three open-source products i.e., Elasticsearch, Logstash, and Kibana, which are all produced, managed, and maintained by Elastic company. With the introduction of Beats, this stack became a four-legged project called BELK or Elastic Stack. ElasticSearch: Elasticsearch is an open-source, modern, full-text search engine based or built on Apache Lucene. ElasticSearch enables you to store, search, and analyze vast or huge amounts of data in near real-time, providing results in milliseconds.\nLogstash: Logstash is a data processing pipeline tool, which collects data from different sources, performs several transformations and enhancements, and then sends the data to stash or wherever you want it to go. \nKibana: Kibana is a visualization tool built on top of Elasticsearch, enabling users to analyze and view data. The Kibana dashboard lets you visualize complex queries through interactive diagrams, geospatial data, and graphs.\nBeats: Beats are lightweight data shipping agents (data shippers) that collect different types of data and forward it to Logstash or ElasticSearch. There are different types of Beats, each focused on a specific type of data, such as metrics, log files, network packets, audit data, Windows events, uptime monitoring data, and cloud data. ElasticSearch: Elasticsearch is an open-source, modern, full-text search engine based or built on Apache Lucene. ElasticSearch enables you to store, search, and analyze vast or huge amounts of data in near real-time, providing results in milliseconds. ElasticSearch Logstash: Logstash is a data processing pipeline tool, which collects data from different sources, performs several transformations and enhancements, and then sends the data to stash or wherever you want it to go. Logstash: Kibana: Kibana is a visualization tool built on top of Elasticsearch, enabling users to analyze and view data. The Kibana dashboard lets you visualize complex queries through interactive diagrams, geospatial data, and graphs. Kibana: Beats: Beats are lightweight data shipping agents (data shippers) that collect different types of data and forward it to Logstash or ElasticSearch. There are different types of Beats, each focused on a specific type of data, such as metrics, log files, network packets, audit data, Windows events, uptime monitoring data, and cloud data. Beats: These components are typically used in conjunction to monitor, troubleshoot, and secure IT environments. The Beats and Logstash tools handle the collection and processing of data, while Elasticsearch stores and indexes the data, and Kibana provides a graphical UI (user interface) for querying and visualizing the data.  ",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "7. What configuration management tools does Elasticsearch support?",
        "answer": "Elasticsearch supports the following configuration management tools: Chef: cookbook-elastic search.\nPuppet: puppet-elastic search.\nAnsible: ansible-elastic search. Chef: cookbook-elastic search. Chef: Puppet: puppet-elastic search. Puppet: Ansible: ansible-elastic search. Ansible:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "8. Is it necessary to install X-Pack for Elasticsearch? What are some essential X-pack commands?",
        "answer": "Yes, if you are using ElasticSearch, you must install X-Pack. In essence, X-Pack is an Elastic Stack extension that combines or bundles alerting, reporting, monitoring, security, and graph capabilities into a single package that can be installed quickly and easily. Although the components of the X-Pack work seamlessly together, you can enable or disable the features you need. Since X-Pack is an Elastic Stack extension, you will need to install both Elasticsearch and Kibana before installing X-Pack. The version of X-Pack must match Elasticsearch and Kibana versions. The following are a few X-Pack commands that can help you configure security and perform other tasks: elasticsearch-certgen\nelasticsearch-certutil\nelasticsearch-reset-password\nelasticsearch-setup-passwords\nelasticsearch-syskeygen\nelasticsearch-users, etc. elasticsearch-certgen elasticsearch-certutil elasticsearch-reset-password elasticsearch-setup-passwords elasticsearch-syskeygen elasticsearch-users, etc.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "9. What do you mean by aggregation in ElasticSearch?",
        "answer": "Aggregations in Elasticsearch enable you to group data and calculate statistics on your data with a simple search query. In ElasticSearch, aggregations are categorized into three types: Bucket aggregations: Documents can be grouped into buckets by using bucket aggregations. You can use them to create data buckets or group data. A bucket can be formed based on existing field values, ranges, etc.\nMetric aggregations: This aggregation helps to calculate metrics (such as a sum, or average) based on field values.\nPipeline aggregations: This type of aggregation takes inputs from the output results of other aggregates rather than individual documents or fields. Bucket aggregations: Documents can be grouped into buckets by using bucket aggregations. You can use them to create data buckets or group data. A bucket can be formed based on existing field values, ranges, etc. Bucket aggregations: Metric aggregations: This aggregation helps to calculate metrics (such as a sum, or average) based on field values. Metric aggregations: Pipeline aggregations: This type of aggregation takes inputs from the output results of other aggregates rather than individual documents or fields. Pipeline aggregations:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "10. Does ElasticSearch have a schema?",
        "answer": "Yes, it is possible for ElasticSearch to have a schema. The schema is a description of one or more fields in a document that describe what type of document it is and how different fields of a document are to be handled. In Elasticsearch, a schema describes the fields in JSON documents, their data types, and how they should be indexed in the Lucene indexes. As such, we call this schema a \"mapping\" in Elasticsearch.ch. But Elasticsearch can also be schema-less, meaning that documents can be indexed without the need to provide a schema explicitly.  If a mapping isn't specified, Elasticsearch will by default generate one when newly added fields are detected during indexing.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "11. How can we perform a search in Elasticsearch?",
        "answer": "Below are a few ways to perform a search in Elasticsearch: Applying search API: You can search and aggregate data that is stored in Elasticsearch data streams and indices using the search API.\nSearch using a URI (Uniform Resource Identifier): The search request is executed using a URI (Uniform Resource Identifier) by providing request parameters.\nRequest body search: The search request should be executed using DSL (Domain Specific Language) within the body. Applying search API: You can search and aggregate data that is stored in Elasticsearch data streams and indices using the search API. Applying search API: Search using a URI (Uniform Resource Identifier): The search request is executed using a URI (Uniform Resource Identifier) by providing request parameters. Search using a URI (Uniform Resource Identifier): Request body search: The search request should be executed using DSL (Domain Specific Language) within the body. Request body search:",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "12. Explain Query DSL in ElasticSearch.",
        "answer": "Elasticsearch generally provides a query Domain Specific Language (DSL) based on JSON to define queries. Query DSL contains two kinds of clauses: Leaf query clause: A leaf query clause looks for specific values in a field or fields. They can be used independently. Matches, terms, and range queries are some examples of these queries.\nCompound query clause: A compound query clause is a combination of a leaf query and other compound queries. These queries combine multiple queries to produce their intended results. Leaf query clause: A leaf query clause looks for specific values in a field or fields. They can be used independently. Matches, terms, and range queries are some examples of these queries. Leaf query clause: Compound query clause: A compound query clause is a combination of a leaf query and other compound queries. These queries combine multiple queries to produce their intended results. Compound query clause The behaviour of query clauses differs depending on whether it is used in a filter context or a query context.",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "13. What types of queries does ElasticSearch support?",
        "answer": "Elasticsearch supports a wide range of queries. The query begins with a query keyword, which is followed by conditions and filters in the form of a JSON object. Here are a few of the queries: Match All Query: This is a basic query that retrieves all the documents in the specified index.\nFull-text queries: There are high-level queries for executing full-text searches over full-text fields. Full-text queries usually work depending on the analyzer associated with a particular document or index. Full-text queries can be of different types, such as match query, multi-match query, query-string query, etc.\nTerm Level Queries: Instead of full-text field searches, term-level queries deal with structured data like numbers, enums, dates, etc. Term level queries can be of different types, such as range, exists, prefix, wildcard, fuzzy, type, etc. Match All Query: This is a basic query that retrieves all the documents in the specified index. Match All Query: Full-text queries: There are high-level queries for executing full-text searches over full-text fields. Full-text queries usually work depending on the analyzer associated with a particular document or index. Full-text queries can be of different types, such as match query, multi-match query, query-string query, etc. Full-text queries: Term Level Queries: Instead of full-text field searches, term-level queries deal with structured data like numbers, enums, dates, etc. Term level queries can be of different types, such as range, exists, prefix, wildcard, fuzzy, type, etc. Term Level Queries: Conclusion In recent years, it has evolved into one of the most popular search engines that are used for business analytics, log analytics, security intelligence, operational intelligence, full-text searches, etc. Research has shown that Elasticsearch has a market share of about 0.24%, so there is a lot of opportunity for many renowned companies. Thus, you are still able to advance in your career as an ElasticSearch Engineer. Almost every area of ElasticSearch, along with the ELK stack, has been covered in the interview questions, including questions about the analyzers, filters, tokenizers, index, token filters, and APIs used in ElasticSearch. Here, we have compiled a list of insightful interview questions that give ample information vital to the interview process. Being familiar with these frequently asked interview questions increases your chances of getting hired. Hopefully, we have answered any questions or concerns that you may have had. All the best with your future endeavours. Additional Interview Preparation Resources AWS Interview Questions\nSQL Interview Questions\nREST API Interview Questions\nOther Technical Interview Questions AWS Interview Questions AWS Interview Questions SQL Interview Questions SQL Interview Questions REST API Interview Questions REST API Interview Questions Other Technical Interview Questions Other Technical Interview Questions",
        "reference": "interviewbit.com",
        "role": "elasticsearch"
    },
    {
        "question": "1) What is Elasticsearch?",
        "answer": "Elasticsearch is a NoSQL database search engine based on Apache Lucene. It is an open-source product developed in Java. Similar to MySQL and other databases, it is also used to store the data. Elasticsearch stores unstructured data in the document format. It offers an NRT (Near Real-Time Search) facility as well as allows to perform full-text search on data.\nElasticsearch is easy to deploy and manage. Even users can take the backup of data from Elasticsearch very easily and efficiently by setting up a few settings and executing queries.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "2) Who developed Elasticsearch and when?",
        "answer": "Elasticsearch was first launched in Feb 2010. It is developed by Shay Banon. Elasticsearch is licensed under Apache 2.0.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "3) What is the latest version of Elasticsearch and when it released?",
        "answer": "Elasticsearch 7.9.1 is the latest stable release of Elasticsearch. On 03 Sep 2020, the Elasticsearch community has released the latest version of Elasticsearch.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "4) Define the most essential features of Elasticsearch?",
        "answer": "Although Elasticsearch has various features but here are some most important features of Elasticsearch -\nOpen Source product\nIt offers a REST API web interface.\nMulti-language and Geolocation support\nStores unstructured data\nSupport full-text search as well as Schema-free database\nFeature of Near Real-Time (NRT) Search on data",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "5) What types of basic operations can be performed with Elasticsearch?",
        "answer": "Elasticsearch allows the users to perform the following basic operations with Elasticsearch -\nCreate an index\nUpdate index\nFetch data from an index\nDelete index\nFreeze index",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "6) What is the port number to access the Elasticsearch on the web? Can we change it?",
        "answer": "Elasticsearch is accessed by using HTTP protocol on the web, which needs a port number along with localhost address. The default port number of Elasticsearch is 9200.\nIn case the Elasticsearch port 9200 is already in use or used by any other tool, you can change the port number. Elasticsearch port number can be changed in the elasticsearch.yml file. This file exists inside the config folder.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "7) What are the basic requirements to work with Elasticsearch?",
        "answer": "To work with Elasticsearch, following requirements must be done -\nADVERTISEMENT\nYou should be familiar with the JSON object, APIs and document formats because the data is stored in the form of document in Elasticsearch.\nApart from knowledge, Java must be installed on your system to install Elasticsearch.\nA plugin to interact with Elasticsearch, e.g., elasticsearch-head plugin (available in google play store).",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "8) What is an index in Elasticsearch?",
        "answer": "An index in Elasticsearch is equivalent to a database in MySQL relational database structure. An index consists of multiple types (tables) and documents inside it. Elasticsearch can have multiple indices.\nElasticsearch -> Index -> Type -> Document with properties\nMySQL -> Database -> Table -> Columns/Rows\nTypically, we can say that an index is a collection of documents that contain information inside it. It can store actual and analyzed value as well.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "9) Does Elasticsearch provide an interactive graphical user interface to its users?",
        "answer": "No, Elasticsearch does not offer its own graphical user interface (GUI). We run it through a batch file (i.e., elasticsearch.bat) that provides a Command Line Interface (CLI).\nTo interact with Elasticsearch, we have to install a plugin or a data visualization tool. There are several plugins available, such as elasticsearch-head, icu-analyzer, etc. Despite this, you can install Kibana for data visualization, which is an essential component of ELK Stack.\nTo interact with Elasticsearch, we have to install a plugin or a data visualization tool. There are several plugins available, such as elasticsearch-head, icu-analyzer, etc. Despite this, you can install Kibana for data visualization, which is an essential component of ELK Stack.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "10) What is ELK stack? How Elasticsearch connect with it?",
        "answer": "ELK Stack is a set of three components - Elasticsearch, Logstash, and Kibana. Each component of the ELK stack is used for different purposes.\nElasticsearch is a NoSQL database tool, which is used to store the unstructured data.\nLogstash is a log pipeline tool to perform transformation on data. It takes input from different sources and performs various transformations on it. At last, it exports the data into various targets.\nKibana is a data visualization tool, which provides an interactive UI (User Interface) to the users for data visualization.\nThese three components of ELK Stack work together and provide essential services to perform tasks for the users. Although Elasticsearch can also be used individually as well.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "11) What is tokenizer in Elasticsearch?",
        "answer": "Tokenizers are used to generate the tokens from a text string. It breaks down the text string into tokens where it finds whitespace or other punctuation symbols. Elasticsearch offers a number of built-in tokenizers to generate tokens from a string. Standard tokenizer is one of the most popular tokenizers of Elasticsearch, which is mostly used to divides a string into multiple tokens.\nApart from that, there are several other tokenizers, such as - lowercase tokenizer, whitespace tokenizer, pattern tokenizer, keyword analyzer, NGram tokenizer, and many more offered by Elasticsearch. Usually, a tokenizer helps to analyze the text string.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "12) What is an analyzer in Elasticsearch?",
        "answer": "Analyzer helps to transform the data while indexing it to Elasticsearch. It transforms the data internally defined for an index and then index it. Tokenizer and filters collectively make an analyzer.\nThere are following types of analyzers offered by Elasticsearch -\nStandard Analyzer\nWhitespace Analyzer\nSimple Analyzer\nKeyword Analyzer\nPattern Analyzer\nStop Analyzer\nLanguage Analyzer\nSnowball Analyzer",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "13) What are frozen indices in Elasticsearch?",
        "answer": "Frozen indices are those indices which are rarely accessed. So, the users freeze these indices. Such indices are called frozen indices. Basically, we freeze those indices which are not in use to free up the memory.\n\nFrozen indices become read-only and its resources are no longer kept active. So, these indices are searchable, but to write again, we have to unfreeze them. Elasticsearch offers an ignore_throttled parameter, which is used to include the frozen indices in your search. Thus, we don't need to re-open them to make available for search.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "14) What is Elasticsearch Mapping?",
        "answer": "Mapping is a mechanism of Elasticsearch to be performed on documents and fields. It is responsible for storing and indexing the documents and their fields in the Elasticsearch database. Elasticsearch allows users to perform mapping on fields by defining datatype for them.\nFor example, - string datatype for name or number datatype for age, etc.\nThere are two types of mapping, i.e., Static mapping and Dynamic mapping.\nStatic mapping is a type of mapping which is done by users at the time of index creation. In comparison, Dynamic mapping is automatically done for the tables by the Elasticsearch.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "15) How to delete an index in Elasticsearch?",
        "answer": "To delete an index in Elasticsearch, you have to create a query having DELETE as the request method and index name you want to delete.\nDELETE index name",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "16) What do you understand by NRT in Elasticsearch?",
        "answer": "NRT refers to the Near Real-Time Search platform. Elasticsearch offers a near real-time search facility to its users. It returns the data in a very short time when we perform search operations on it. Whenever you index a document, Elasticsearch takes a bit of time until it becomes searchable.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "17) What is Elasticsearch API?",
        "answer": "API is an Application Programming Interface, which makes Elasticsearch easy to operate, manage, and create queries to perform operations on it. Elasticsearch provides REST APIs to manage, integrate, and perform several operations in various ways on it. It offers extensive APIs and methods. Typically, there are five types of APIs in Elasticsearch:\nDocument APIs\nSearch APIs\nAggregation APIs\nIndex APIs\nCluster APIs",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "18) What do you understand by multi-document APIs?",
        "answer": "Multi-document API is a document API, which further has few more APIs. Multi-document APIs are basically used to perform queries across multiple documents. Simply says that - it allows the users to perform the operation in bulk like fetch or update multiple documents using a single query.\nIt is further classified and has the following APIs for bulk operations -\nBulk API\nMulti Get API\nDelete By Query API\nUpdate By Query API\nReindex API",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "19) Which method is used to fetch the documents from Elasticsearch?",
        "answer": "Elasticsearch allows the users to search and fetch the documents from the database in two ways. We can use one of them accordingly -\nBy sending a GET request having a string parameter with a query, or\nBy sending a POST request which has a query in request body.\nAlong with the request method, we have to use a __search API to search the documents in database. Here GET and POST are request methods. Elasticsearch allows the users to search the documents as single or in bulk too.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "20) Elasticsearch uses which query language?",
        "answer": "Elasticsearch uses Query DSL to perform operations on it. Query DSL is an Apache Lucene Query Language.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "21) What is a cluster in Elasticsearch?",
        "answer": "In Elasticsearch, a cluster is a collection of nodes. Cluster and nodes work together and hold the data, where node is an instance of Elasticsearch. A cluster provides joined indexing as well as search capabilities to Elasticsearch users.\nElasticsearch can have several clusters where each cluster is identified by a unique name. Elasticsearch provides a default name to the cluster, which is elasticsearch.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "22) Does the Elasticsearch have a schema?",
        "answer": "Yes, Elasticsearch has a schema, which is usually called as mapping. Basically, a schema is a description of fields, which describes the document type. It helps to manage the different fields of document.\nSchema is a mapping that emphasizes the JSON documents.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "23) Define a document in Elasticsearch?",
        "answer": "In Elasticsearch, a document holds the information provided by Elasticsearch users. A document is similar to a row in relational databases like MySQL. The documents are stored inside the index created by the users. An index can hold several documents where each document has a unique id.\nA document has the data in the form of key-value (key: value) pairs. For example, {\"name\": \"Alen Walker\"}. Each document identifies by a unique id and it is associated with a type.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "24) What is a document type in Elasticsearch?",
        "answer": "In Elasticsearch, a type represents a class of similar documents. A type could be like student, customer, or item. A document type can be seen as the document schema/mapping, which has a mapping of all the fields in the document along with its data type.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "25) What is a shard in Elasticsearch?",
        "answer": "The data stored in an index can be divided into multiple partitions. Each of these partitions is called Shard, which is managed and controlled by a separate node. An Elasticsearch index has five shards by default.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "26) Name atleast 5 companies that are using Elasticsearch?",
        "answer": "Below is a list of companies which are using Elasticsearch -\nNetflix\nUdemy\nShopify\nWalmart\nUber\nSlack\nAdobe\nThere are several other companies that use Elasticsearch to store and manage their unstructured data.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "27) What is Index Lifecycle Management in Elasticsearch?",
        "answer": "Index Lifecycle Management (ILM) is an essential mechanism of Elasticsearch, which has been introduced in Elasticsearch 6.6. It is also known as ILM. ILM establishes a hot-warm-cold architecture, which offers a lifecycle to the index. This lifecycle has four states Hot, Warm, Cold, and Delete state.\nAn index goes through this lifecycle having different states, first it goes from hot state, then warm and cold and at last from delete state.\nTypically, ILM manages the indexes and their operations. Elasticsearch offers the ILM APIs for managing the indexes. Policy Management API, Index Management API, and Operation Management API are the Index Lifecycle Management APIs. These APIs further offers APIs to its user to manage the indexes.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "28) Which basic operations can be performed on a document?",
        "answer": "Elasticsearch allows performing various operations on an index, such as -\nAdd a document to an index\nDelete a document\nFetch the document\nUpdate the document data",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "29) What do you understand by an inverted index in Elasticsearch?",
        "answer": "Inverted index is the heart of search engines. The main purpose of each search engine is to provide fast and efficient searches while finding the documents. Usually, an inverted index is a hash map just like the data structure that directs the users from a word to a document or web page. It provides speedy searches when you search for a document between millions of documents.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "30) What is from and size components in Elasticsearch?",
        "answer": "The from and size components are used in pagination. They help to divide a large amount of data into several pages, where from is the initial point to start a search and size defines the number of items to be searched.\nFor example, - If there are 30 items calculated, but we want 15 items first and then remaining.\nSo, the first time from will be 0 and the size will be 14. Next time from will be 15 and the size will be 29.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "",
        "answer": "Match query analyzes the input request and creates basic queries. While in term query, exact matching is done.\nFor example, if we search for the document containing name: Anurag, and if any document has name = Anupriya, then it will also be the result of the search query in case of Match query. On the other hand, exact matching is performed in term query. So, the document containing name: Anupriya will not return.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "32) To install the Elasticsearch, which type of files are required to be download on different operating systems?",
        "answer": "On each operating system, a different type of file is required to be downloaded.\nFor example -\nOn Windows operating system, zip file needs to be download. Similarly,\nOn Linux operating system, download tar.gz file of Elasticsearch setup\nOn Mac Operating system, download tar.gz file of Elasticsearch setup\nFor Ubuntu-based system or Debian, download the deb package",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "33) Is Elasticsearch can integrate with other tools? If Yes, then list the name of those tools?",
        "answer": "Yes, Elasticsearch can integrate with other tools and technologies. The most popular tools are Logstash and Kibana, which are the components of the ELK stack. There is a list of some other tools to which Elasticsearch can integrate -\nAmazon Elasticsearch Services\nCouchbase\nContentful\nDatadog",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "34) What do you understand by cluster health? How to check the health of a cluster?",
        "answer": "In Elasticsearch, we can check the health of the cluster. Cluster health helps to show the health status of the cluster. It defines how many clusters are currently running in Elasticsearch. The health status is shown by three different colors, i.e., either Red, Green, or Yellow. Each color defines the different health status of a cluster.\nRED color indicates that some of the primary shards or nodes are not available in the cluster.\nRED - The cluster health status will be RED when some of the primary shards or nodes is not available in the cluster.\nYELLOW - The cluster health status will be RED when some or all shards are not allocated to any of the cluster.\nGREEN - The cluster health status will be RED when the shards are allocated to the node.\nBy executing simple cluster health, we can check the health of a cluster.\nGET _cluster/health  \nHere GET is a request method, _cluster is a cluster API, and health is a keyword for which we are looking for.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "35) Can we perform the write operation on frozen indices?",
        "answer": "No, we cannot perform a write operation on frozen indices because frozen indices are read-only indices. These indices are searchable, but we cannot write on them without unfreezing. However, without unfreezing the frozen indices, we can include them in our searches.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "36) How x-pack helps to get SQL access in Elasticsearch?",
        "answer": "X-pack comes with the SQL features that provide SQL access in Elasticsearch to execute the queries. This SQL support feature has been introduced in Elasticsearch 6.3.\nBasically, X-pack is an Elastic Stack extension with SQL features, which helps the users to execute the SQL queries against Elasticsearch. The SQL queries execute in a real-time environment and return the result in tabular form.\nWe can execute the Elasticsearch SQL command line using the elasticsearch-sql-cli.bat file that exists inside the bin folder. This Elasticsearch SQL translator can understand both SQL as well as Elasticsearch.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "37) What is Ingest Node in Elasticsearch?",
        "answer": "The ingest node is used to transform the document before indexing it in Elasticsearch. Basically, an ingest node pre-process the document before the indexing occurs. Such operations like rename a field name, add or remove a field from a document are handled by the ingest node.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "38) What is a repository, and what its role in taking a snapshot in Elasticsearch?",
        "answer": "A repository is a container or memory storage that holds the snapshots inside it. A single repository can store one or more snapshots. Snapshot is nothing; it is a data backup of Elasticsearch taken by the user to release the memory and secure the data.\nYou can create any number of repositories in Elasticsearch, which can hold several snapshots inside them. The repository provides a location and memory to store snapshots.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "repo?",
        "answer": "To create a repository, we need to set up a location where it will store. So, before taking a snapshot, it is very important to configure the path.repo setting in the elasticsearch.yml file in which we need to set the location for the repository to be stored. The elasticsearch.yml file exists inside the elasticsearch/config folder.\nSteps to configure\nNavigate to the elasticsearch/config folder an open elasticsearch.yml file on notepad.\nCopy and paste the following line at the end of the file.\npath.repo: [\"/my_backup_location\"]\nSave the file and restart the elasticsearch to see the effect.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "40) Why use the wait_for_completion parameter?",
        "answer": "Elasticsearch provides a wait_for_completion parameter, which is used while creating a snapshot query. This parameter is basically used in a snapshot query that indicates whether the request will wait for the snapshot to be complete or respond immediately once the snapshot is initialized. It is an optional parameter used as wait_for_completion=true.\nIt is used in snapshot query like the below query:\nPUT  \n_snapshot/repository_name/snapshot_name?wait_for_completion=true  \nNote that if you use wait_for_completion parameter in your query, the snapshot creation process will run in the background on Elasticsearch cli.",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    },
    {
        "question": "41) What is the use of restore API?",
        "answer": "Elasticsearch provides _restore API to restore the data, which backed up to a snapshot. So, the restore API helps to restore a snapshot into a running cluster.\nTo restore the data into Elasticsearch, both _snapshot and _restore APIs are used along with the snapshot name, which you want to restore. For example -\nPOST /_snapshot/snapshot_name/_restore",
        "reference": "javatpoint.com",
        "role": "elasticsearch"
    }
]