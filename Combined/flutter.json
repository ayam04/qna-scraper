[
    {
        "question": "1. What is the use of Ticker in Flutter?",
        "answer": "We use a ticker to tell how often our animation is refreshed in Flutter. Signals are sent at a constant frequency, such as 60 times per second, using this type of signal-sending class. We understand it better with our watch, which ticks constantly. For each tick, a callback method is provided that has the time since the first tick at each second since it was started. The tickers are synchronized immediately, even if they begin at different times.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "2. Explain Flutter Inspector.",
        "answer": "In the same manner, as with Native Android, the XML file allows us to view our app's blueprint and properties. There is a powerful tool called Flutter Inspector for Flutter applications that allows you to visualize the blueprint of your widgets and their properties. Using it, you can diagnose various layout issues and understand the current layout. \nFlutter Inspector offers the following benefits:  Select widget mode \nToggle platform \nShow paint baselines \nShow debug paint \nRefresh widget \nEnable slow animations \nShow/hide performance overlay Select widget mode Toggle platform Show paint baselines Show debug paint Refresh widget Enable slow animations Show/hide performance overlay",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "3. How would you execute code only in debug mode?",
        "answer": "We first need to import the dart foundation in order to run the code only in debug mode: import 'package:flutter/foundation.dart' as Foundation;    \n\nThe next step is to use kReleaseMode as follows: \n\nif (Foundation.kReleaseMode){     // is Release Mode??   \n   print('release mode');   \n} else {   \n             print('debug mode');   \n} import 'package:flutter/foundation.dart' as Foundation;    \n\nThe next step is to use kReleaseMode as follows: \n\nif (Foundation.kReleaseMode){     // is Release Mode??   \n   print('release mode');   \n} else {   \n             print('debug mode');   \n}",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "4. What is the use of Mixins?",
        "answer": "Multiple inheritances are not supported by Dart. Thus, we need mixins to implement multiple inheritances in Flutter/Dart. The use of mixins makes it easy to write reusable class code in multiple class hierarchy levels. Mixins can also be used to provide some utility functions (such as RenderSliverHelpers in Flutter).",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "5. Explain packages and plugins in Flutter.",
        "answer": "A package is a collection of classes, interfaces, and sub-packages that enable the creation of modular code that can be shared easily among users. Applications can be quickly developed using packages instead of developing everything from scratch. You can import new widgets or functionality into an app using a package in Flutter. There is a slight difference between plugins and packages as given below: Plugins: Using native code, enables more usability and makes it easier to use the device.  \nPackages:  These are new code or components written in the dart programming language. Plugins: Using native code, enables more usability and makes it easier to use the device. Plugins: Packages:  These are new code or components written in the dart programming language. Packages: Packages and plugins are often referred to as packages on DartPub, and specific distinctions between the two are made only during the creation of a new package.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "6. Explain the flutter architecture.",
        "answer": "The structure of Flutter consists of three layers:   Upper layers: The Dart-based platform that takes care of app widgets, gestures, animations, illustrations, and materials;\nFlutter engine: Handles the display and formatting of text.\nBuilt-in service: Used for the management of plugins, packages, and event loops. Upper layers: The Dart-based platform that takes care of app widgets, gestures, animations, illustrations, and materials; Upper layers Flutter engine: Handles the display and formatting of text. Flutter engine Built-in service: Used for the management of plugins, packages, and event loops. Built-in service",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "7. List some important features of flutter.",
        "answer": "Among the main features of flutter for developing mobile frameworks are:   Flexibility, scalability, and integration: Flutter's easy-to-use and easy-to-integrate framework provides enhanced flexibility, scalability, and integration capabilities.\nHot Reload: If the developer modifies the code, the changes can be seen immediately with Hot Reload. Thus, the changes are instantly visible within the app.\nOne-Stop Solution: Flutter app development relies on a single framework and platform for the development, deployment, and management of changes, rather than using separate platforms and frameworks for different purposes.\nNative Performance and Internationalized Flutter Libraries: Flutter app development provides widgets customized for Android, iOS, and Google Fuchsia.  Using widgets, you can integrate all the functionalities of the platform, such as scrolling, navigation, icons, and fonts.\nHuge Widget Library: It is because of Flutter's ready-to-use widget library that developers can develop apps faster when using the framework. In addition to a wide variety of widgets, it also includes animations with which you can spice up your application. Flexibility, scalability, and integration: Flutter's easy-to-use and easy-to-integrate framework provides enhanced flexibility, scalability, and integration capabilities. Flexibility, scalability, and integration: Hot Reload: If the developer modifies the code, the changes can be seen immediately with Hot Reload. Thus, the changes are instantly visible within the app. Hot Reload: One-Stop Solution: Flutter app development relies on a single framework and platform for the development, deployment, and management of changes, rather than using separate platforms and frameworks for different purposes. One-Stop Solution: Native Performance and Internationalized Flutter Libraries: Flutter app development provides widgets customized for Android, iOS, and Google Fuchsia.  Using widgets, you can integrate all the functionalities of the platform, such as scrolling, navigation, icons, and fonts. Native Performance and Internationalized Flutter Libraries: Huge Widget Library: It is because of Flutter's ready-to-use widget library that developers can develop apps faster when using the framework. In addition to a wide variety of widgets, it also includes animations with which you can spice up your application. Huge Widget Library:",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "8. Write the limitations of flutter.",
        "answer": "Flutter has the following limitations: Third-party libraries are limited: Since Flutter is relatively new, the number of third-party libraries is small. Additionally, some widgets in Flutter are only available on one platform.    \nRelease size is larger: Developers get frustrated when the release size is not as expected.  \nRequirements of Dart: Dart is an Object-oriented programming language, but it cannot compete with Java, JavaScript, or C# since it is still relatively new. As a result, not many developers choose it.  \nLimited complexity: Flutter's 3D modeling, Unity integration, and game engines fall short. Therefore, most ad mobile platforms also don't support it.   \nLack of overall support: Flutter is not so widely used yet. Even though it enjoys the attention of tech enthusiasts, it still lacks the continuous support that will come with time.  Currently, the only support that Flutter receives comes from its community. Third-party libraries are limited: Since Flutter is relatively new, the number of third-party libraries is small. Additionally, some widgets in Flutter are only available on one platform. Third-party libraries are limited: Release size is larger: Developers get frustrated when the release size is not as expected. Release size is larger: Requirements of Dart: Dart is an Object-oriented programming language, but it cannot compete with Java, JavaScript, or C# since it is still relatively new. As a result, not many developers choose it. Requirements of Dart: Limited complexity: Flutter's 3D modeling, Unity integration, and game engines fall short. Therefore, most ad mobile platforms also don't support it. Limited complexity: Lack of overall support: Flutter is not so widely used yet. Even though it enjoys the attention of tech enthusiasts, it still lacks the continuous support that will come with time.  Currently, the only support that Flutter receives comes from its community. Lack of overall support:",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "9. What are different build modes in flutter?",
        "answer": "Depending on your development phase, the framework compiles your code in different ways or modes, which we called a build mode. Flutter's tooling allows the application to be compiled in three modes. Depending on our stage of development, we may choose between these compilation modes. Debug Mode: This mode enables debugging of apps on a physical device, emulator, or simulator. Assertions and service extensions are enabled here. Quick deployment is then achieved by optimizing compilation. \nProfile Mode: In this mode, some debugging abilities are maintained, enough to analyze the app's performance while testing.  Tracing and some extensions are enabled in this case. On emulators and simulators, profile mode is disabled since their behavior does not reproduce real-world performance. The following command can be used to compile the profile mode: flutter run --profile \nRelease Mode: When deploying the app, this mode is used to minimize the size of the footprint and maximize optimization. Debugging, assertions and service extensions are disabled here. Faster startup, faster execution, and less size are its key features. The following command can be used to compile the release mode: flutter run --release Debug Mode: This mode enables debugging of apps on a physical device, emulator, or simulator. Assertions and service extensions are enabled here. Quick deployment is then achieved by optimizing compilation. Debug Mode Profile Mode: In this mode, some debugging abilities are maintained, enough to analyze the app's performance while testing.  Tracing and some extensions are enabled in this case. On emulators and simulators, profile mode is disabled since their behavior does not reproduce real-world performance. The following command can be used to compile the profile mode: flutter run --profile Profile Mode flutter run --profile Release Mode: When deploying the app, this mode is used to minimize the size of the footprint and maximize optimization. Debugging, assertions and service extensions are disabled here. Faster startup, faster execution, and less size are its key features. The following command can be used to compile the release mode: flutter run --release Release Mode flutter run --release",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "10. Explain the flutter widget and write its importance.",
        "answer": "Generally, a Flutter app consists of a number of widgets. A widget is a way to declare and construct user interfaces. In Flutter, you must write code inside a widget in order to build anything. With the widget, you can see how your app would appear with its current configuration. As soon as you modify the code, the widget will rebuild its description based on the difference between the old and new widget, and the changes will sync up with the UI of the app. The Flutter widget can be created as follows: Class ImageWidget extends StatelessWidget {   \n    // Class Stuff   \n} Class ImageWidget extends StatelessWidget {   \n    // Class Stuff   \n} The app is built by nesting widgets within each other. This means the root of your app is a widget, and everything below it is a widget.  Here's a simple image of what the widget tree looks like:  ",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "11. What are the types of widgets present in flutter?",
        "answer": "In flutter, widgets can be divided into two categories:   Stateless Widget: A widget that does nothing is a Stateless Widget. In essence, they are static and don’t store any state.   Thus, they don't save values that may change.\nStateful Widget: A widget that does anything is a Stateful Widget. Stateful widgets are dynamic by nature, which means they can monitor changes and update the UI accordingly. Stateless Widget: A widget that does nothing is a Stateless Widget. In essence, they are static and don’t store any state.   Thus, they don't save values that may change. Stateless Widget: Stateful Widget: A widget that does anything is a Stateful Widget. Stateful widgets are dynamic by nature, which means they can monitor changes and update the UI accordingly. Stateful Widget:",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "12. What do you mean by Dart? Write its importance.",
        "answer": "Dart, a programming language developed by Google, is used to code Flutter apps as well as server and desktop applications. By using Dart, Flutter avoids the use of a separate declarative layout language such as JSX or XML.  A simple Dart program is shown in the following example: void main()  \n{   \n for (int i = 0; i < 5; i++)  \n  {   \n         print('hello ${i + 1}');   \n  }   \n} void main()  \n{   \n for (int i = 0; i < 5; i++)  \n  {   \n         print('hello ${i + 1}');   \n  }   \n} An overview of Dart's importance: An overview of Dart's importance: Developers can read and visualize the layout of Dart very easily and effortlessly since it is declarative and programmatic.\nUnlike other programming languages, it supports the majority of the basic programming concepts like classes, interfaces, and functions.\nArrays are not directly supported by Dart. Rather, it supports the collection that replicates the data structure like arrays, generics, and optional typing.\nDespite being similar to JavaScript, Dart runs code several times faster.\nFor better performance and to reduce code execution time, the Dart virtual machine (VM) uses both Just-in-Time (JIT) and Ahead-of-Time (AOT) compilers.\nDart is object-oriented programming, which makes it very scalable and stable for creating even complex applications. Developers can read and visualize the layout of Dart very easily and effortlessly since it is declarative and programmatic. Unlike other programming languages, it supports the majority of the basic programming concepts like classes, interfaces, and functions. Arrays are not directly supported by Dart. Rather, it supports the collection that replicates the data structure like arrays, generics, and optional typing. Despite being similar to JavaScript, Dart runs code several times faster. For better performance and to reduce code execution time, the Dart virtual machine (VM) uses both Just-in-Time (JIT) and Ahead-of-Time (AOT) compilers. Dart is object-oriented programming, which makes it very scalable and stable for creating even complex applications.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "13. Explain App state.",
        "answer": "App State may also be referred to as a shared state or application state. It is possible to share app states across sections of your app and maintain user sessions in the same way. Here are some examples of App State: Login info   \nUser preferences  \nE-commerce shopping cart   \nSocial networking notifications, etc. Login info User preferences E-commerce shopping cart Social networking notifications, etc.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "14. Write the difference between runApp() and main() in flutter.",
        "answer": "main(): This function starts the program. Flutter does not allow us to write any program without the main() function.  \n\nrunApp(): Using runApp(), you are able to return the widgets that are connected to the screen as a root of the widget tree that will be rendered on the screen. This function is called in the main function, which is the driver of the app. main():   runApp():",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "15. Write the advantages of using flutter.",
        "answer": "For developing mobile applications, Flutter usually fulfills the custom needs and requirements. It offers the following advantages:   Reduce Code Development: Flutter's hot reload feature allows it to offer faster performance. With it, the application gets compiled using the arm C/C++ library, making it closer to machine code and enabling it to run more quickly. The Flutter team has put lots of effort into providing a wide variety of ready-to-use widgets. Most of them are incredibly customizable, saving your time like no other framework before.\nCross-platform Development: Using Flutter, you can write code, manage, and run it across multiple platforms. For the developers, this saves time, money, and effort.\nLive and Hot Reloading: This makes the app development process simpler and faster. Additionally, it also allows us to modify or update the code once a change is made.\nSimilar to Native App performance: In contrast to most cross-platform frameworks, Flutter does not rely on intermediate code representations or interpretations. The Flutter application is built directly into the machine code, which eliminates any performance issues associated with the interpretation process. With Flutter, you get a fully compiled release application ahead of time.\nGood Community Support: Developers can ask questions about issues and get answers quickly.\nLittle/Minimal Code: Each Flutter app is built using Dart programming language, which uses JIT and AOT compilation for faster startup time, faster performance, and smoother functionality. With the JIT feature, you can increase the speed of development and refresh the UI.\nDocumentation:  Flutter's documentation is well-organized and informative. It serves as a central repository for all written documents.\nExpressive and Flexible UI: Flutter offers a customizable layered architecture that allows for highly customizable designs, expressive UIs, and fast rendering. Reduce Code Development: Flutter's hot reload feature allows it to offer faster performance. With it, the application gets compiled using the arm C/C++ library, making it closer to machine code and enabling it to run more quickly. The Flutter team has put lots of effort into providing a wide variety of ready-to-use widgets. Most of them are incredibly customizable, saving your time like no other framework before. Reduce Code Development Cross-platform Development: Using Flutter, you can write code, manage, and run it across multiple platforms. For the developers, this saves time, money, and effort. Cross-platform Development Live and Hot Reloading: This makes the app development process simpler and faster. Additionally, it also allows us to modify or update the code once a change is made. Live and Hot Reloading Similar to Native App performance: In contrast to most cross-platform frameworks, Flutter does not rely on intermediate code representations or interpretations. The Flutter application is built directly into the machine code, which eliminates any performance issues associated with the interpretation process. With Flutter, you get a fully compiled release application ahead of time. Similar to Native App performance Good Community Support: Developers can ask questions about issues and get answers quickly. Good Community Support Little/Minimal Code: Each Flutter app is built using Dart programming language, which uses JIT and AOT compilation for faster startup time, faster performance, and smoother functionality. With the JIT feature, you can increase the speed of development and refresh the UI. Little/Minimal Code Documentation:  Flutter's documentation is well-organized and informative. It serves as a central repository for all written documents. Documentation: Expressive and Flexible UI: Flutter offers a customizable layered architecture that allows for highly customizable designs, expressive UIs, and fast rendering. Expressive and Flexible UI",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "16. Name some best editors for flutter development.",
        "answer": "With the Flutter development tools, developers can make Flutter development faster and thus boost their productivity. In order to develop mobile applications, Flutter IDE and tools require some plugins. With these plugins, we can compile Dart, analyze code, and develop Flutter. Here are some popular IDEs for Flutter development: Android Studio   \nVisual Studio   \nIntelliJ IDEA   \nXcode   \nEclipse \nEmacs \nVim, etc. Android Studio Visual Studio IntelliJ IDEA Xcode Eclipse Emacs Vim, etc.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "17. Name some apps that mostly use flutter.",
        "answer": "Flutter is used today by many organizations for developing apps. The following are some of the most popular apps built on Flutter: Google Ads \nReflectly \nAlibaba \nBirch Finance \nCoach Yourself \nTencent \nWatermaniac, etc. Google Ads Reflectly Alibaba Birch Finance Coach Yourself Tencent Watermaniac, etc.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "18. What do you mean by keys in flutter? When one should use it.",
        "answer": "Keys are used in Flutter as identifiers for widgets, elements, and semantic nodes. GlobalKeys and LocalKeys are the subclasses of Key. Within the widget tree, keys are responsible for preserving the state of modified widgets. With keys, you can also reorganize and modify collections of widgets that have an equivalent type and defined state. The primary use of keys is to modify a widget tree that contains stateful widgets, not to modify a tree that is totally composed of stateless widgets.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "19. Explain Container class in a flutter.",
        "answer": "Basically, in Flutter, a container is a widget that has the capacity to accommodate multiple child widgets and manage them efficiently through dimensions, padding, and background color. Whenever we want to style the background of a widget, either because of a color, shape, or size constraint, we may use a container widget. With the Container class, widgets can be stored and positioned on the screen at our discretion. In general, it resembles a box for storing contents.  \nIn the following image, you see how a basic container has padding, margin, and border properties surrounding its child widget:   ",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "20. Which one is better, either flutter or react native?",
        "answer": "Today, thousands of mobile apps are being built with the two most popular cross-platform development frameworks i.e., React Native and Flutter. There are many similarities between React Native and Flutter including reloading quickly, excellent UI, awesome tooling, and capability to build native apps. React Native: This is an entirely JavaScript-based application using React. Facebook backed and open-sourced it in 2015.  \nFlutter: It is written in the Dart programming language. In comparison to React Native, Flutter is a relatively new framework. Flutter was originally backed by another giant called Google. React Native: This is an entirely JavaScript-based application using React. Facebook backed and open-sourced it in 2015. React Native: Flutter: It is written in the Dart programming language. In comparison to React Native, Flutter is a relatively new framework. Flutter was originally backed by another giant called Google. Flutter: Choosing between them is difficult from the developer's perspective.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "21. When to use mainAxisAlignment and crossAxisAlignment.",
        "answer": "The mainAxisAlignment is how items are aligned on that axis, whereas crossAxisAlignment is how items are aligned on the other axis. Row and column widgets can align their children according to our preferences using the crossAxisAlignment and the mainAxisAlignment properties.  \n\nAs Children of the Row Widget are arranged horizontally.  \nFor Row:  \nmainAxisAlignment = Horizontal Axis  \ncrossAxisAlignment = Vertical Axis  \n\nThis can be better understood by looking at the image below:    For Row:       As Children of the Column Widget are arranged vertically. \nFor Column:  \nmainAxisAlignment = Vertical Axis  \ncrossAxisAlignment = Horizontal Axis   \n\nThis can be better understood by looking at the image below:  For Column:      ",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "22. Is Flutter Open Source or not?",
        "answer": "Yes, Flutter is a free and open-source UI software development kit from Google that allows developers to build cross-platform mobile apps with ease. Learn More. Learn More",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "23. Why does a flutter app usually take a long developing time?",
        "answer": "The first time you build a Flutter application, it takes much longer than usual since Flutter creates a device-specific IPA or APK file. Xcode and Gradle are used in this process to build a file, which usually takes a lot of time.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "1. What do you mean by Streams?",
        "answer": "In asynchronous programming, streams are used to provide a sequence of data in an asynchronous manner. Similar to a pipe, we put a value on one end and a listener receives it on the other. Several listeners can be put into one stream, and they'll all get the same value when they're put in the pipeline. It's possible to create and manage streams through the SteamController. The Stream API provides the await for and listen() methods for processing streams. Streams can be created in many ways, but they can only be used in the same manner. Here is an example: Future<int> sumStream(Stream<int> stream) async {   \n  var sum = 0;   \n   await for (var value in stream) {   \n     sum += value;   \n   }   \n   return sum;   \n} Future<int> sumStream(Stream<int> stream) async {   \n  var sum = 0;   \n   await for (var value in stream) {   \n     sum += value;   \n   }   \n   return sum;   \n}",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "2. What are different types of Streams?",
        "answer": "The streams’ functionality is part of Dart and is inherited by Flutter. In Flutter, there are two kinds of streams:   Single Subscription Streams: These streams deliver events sequentially. They are considered as sequences contained within a larger whole. These streams are used when the order in which events are received matters, such as reading a file. There can be only one listener throughout the sequence, and without a listener, the event won't be triggered. \nBroadcast Streams: These streams deliver events to their subscribers. Upon subscribing to events, subscribers are immediately able to start listening to them.  These are versatile streams that allow several listeners to listen simultaneously. Furthermore, one can listen again even after canceling a previous subscription. Single Subscription Streams: These streams deliver events sequentially. They are considered as sequences contained within a larger whole. These streams are used when the order in which events are received matters, such as reading a file. There can be only one listener throughout the sequence, and without a listener, the event won't be triggered. Single Subscription Streams Broadcast Streams: These streams deliver events to their subscribers. Upon subscribing to events, subscribers are immediately able to start listening to them.  These are versatile streams that allow several listeners to listen simultaneously. Furthermore, one can listen again even after canceling a previous subscription. Broadcast Streams",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "3. What do you mean by flutter SDK?",
        "answer": "A Flutter SDK (Software Development Kit) enables developers to build applications for mobile, web, and desktop using a single codebase. Flutter SDK includes the following features: Dart SDK   \nContains a rendering engine, widgets, APIs for testing and integration, etc.  \nCompilation tools for Native Machine Code (code for iOS and Android).    \nReact-style modern framework  \nProvide Interop and plugin APIs to connect with system and 3rd-party SDKs.   \nA headless test runner that runs tests on Windows, Linux, and Mac.  \nUse the Dart DevTools to test, debug, and profile your app. Use  \nFlutter and Dart command-line tools to develop, build, test and compile your apps across platforms. Dart SDK Contains a rendering engine, widgets, APIs for testing and integration, etc. Compilation tools for Native Machine Code (code for iOS and Android). React-style modern framework Provide Interop and plugin APIs to connect with system and 3rd-party SDKs. A headless test runner that runs tests on Windows, Linux, and Mac. Use the Dart DevTools to test, debug, and profile your app. Use Flutter and Dart command-line tools to develop, build, test and compile your apps across platforms.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "4. Write difference between Hot reload and Hot restart.",
        "answer": "For any dart application, the initial execution requires a fair amount of time. Therefore, to solve this problem, flutter has two features: Hot Reload and Hot Restart, which reduce the execution time of our app after we run it. Hot Reload: It is considered an excellent feature of flutter that takes approximately one second to perform its functionality.  With this function, you can make changes, fix bugs, create UIs, and add features easily and quickly. By utilizing the hot reload feature, we can quickly compile the new code in a file and send it to Dart Virtual Machine (DVM). As soon as DVM completes the update, it updates the app's UI. The preserved state is not destroyed in hot reload.\nHot Restart: It has a slightly different functionality as compared to a hot reload. In this, the preserved states of our app are destroyed, and the code gets compiled again from the beginning. Although it takes longer than a hot reload, it's faster than a full restart function. Hot Reload: It is considered an excellent feature of flutter that takes approximately one second to perform its functionality.  With this function, you can make changes, fix bugs, create UIs, and add features easily and quickly. By utilizing the hot reload feature, we can quickly compile the new code in a file and send it to Dart Virtual Machine (DVM). As soon as DVM completes the update, it updates the app's UI. The preserved state is not destroyed in hot reload. Hot Reload Hot Restart: It has a slightly different functionality as compared to a hot reload. In this, the preserved states of our app are destroyed, and the code gets compiled again from the beginning. Although it takes longer than a hot reload, it's faster than a full restart function. Hot Restart",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "5. Explain BuildContext.",
        "answer": "BuildContexts are used to identify or locate widgets in widget trees. Each widget has its own BuildContext, i.e., one BuildContext per widget. Basically, we're using it to find references to other widgets and themes. In addition, you can utilize it to interact with widget parents and access widget data.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "6. What do you mean by Widget testing?",
        "answer": "Flutter supports three types of tests:   Unit tests: Using unit testing, you can test a class or method. Unit tests do not check for rendering to screen, interacting with external services, or user interactions.   \nWidget tests: Using widget testing, you can test a single widget.  This ensures that the widget's UI looks as expected and responds appropriately to events. In other words, it ensures that the widget design, rendering, and interaction with other widgets are up to the mark.   \nIntegration tests:  Using Integration testing, you can test the critical flows of the entire app. It is important to check whether all widgets and services work together as expected. You can also use it to measure and benchmark the performance of your app. Unit tests: Using unit testing, you can test a class or method. Unit tests do not check for rendering to screen, interacting with external services, or user interactions. Unit tests: Widget tests: Using widget testing, you can test a single widget.  This ensures that the widget's UI looks as expected and responds appropriately to events. In other words, it ensures that the widget design, rendering, and interaction with other widgets are up to the mark. Widget tests: Integration tests:  Using Integration testing, you can test the critical flows of the entire app. It is important to check whether all widgets and services work together as expected. You can also use it to measure and benchmark the performance of your app. Integration tests:",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "7. What is state management?",
        "answer": "Whether you are building a mobile app or a web application, State Management is crucial. Using it, states of various UI controls are centralized to handle data flow across an application. It can be a text field, radio button, checkbox, dropdown, toggle, form, and so on. In Flutter, state management can be categorized into two types as follows: Ephemeral State: Ephemeral state is also called UI state or local state, and it pertains to a particular widget. In other words, it is a state that is contained within the specific widget. By means of StatefulWidget, Flutter provides support for this state.\nApp State: This is different from the ephemeral state since it is a state that we intend to share across different parts of the app and which we want to maintain between sessions. These types of states can thus be used globally. By means of scoped_model, Flutter provides support for this state. Ephemeral State: Ephemeral state is also called UI state or local state, and it pertains to a particular widget. In other words, it is a state that is contained within the specific widget. By means of StatefulWidget, Flutter provides support for this state. Ephemeral State: App State: This is different from the ephemeral state since it is a state that we intend to share across different parts of the app and which we want to maintain between sessions. These types of states can thus be used globally. By means of scoped_model, Flutter provides support for this state. App State: The following diagram gives a better explanation of the differences between ephemeral and app states:  ",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "8. Explain pubspec.yaml file.",
        "answer": "The pubspec.yaml file, also known as 'pubspec', is a file that is included when you create a Flutter project and is located at the top of the project tree. This file contains information about the dependencies like packages and their versions, fonts, etc., that a project requires. It makes sure that the next time you build the project, you will get the same package version. Additionally, you can set constraints for the app. During working with the Flutter project, this configuration file of the project will be required a lot. This specification is written in YAML, which can be read by humans.  \n\nThe following are included in this file:   General project settings, like name of the project, version, description, etc.   \nDependencies within a project.   \nThe assets of the project (e.g., images, audio, etc.). General project settings, like name of the project, version, description, etc. Dependencies within a project. The assets of the project (e.g., images, audio, etc.).",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "9. What do you understand about tween animation?",
        "answer": "The shortened version of in-between animation is tween animation. The start and endpoints of an animation must be specified in tween animation. Using this method, the animation can begin at the beginning and can progress through a series of values until it reaches the endpoint. Transition speed and duration are also determined by using the tween animation. Calculating the transition from the beginning to the end will be easier with the widget framework. tween animation",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "10. How can we create HTTP requests in Flutter?",
        "answer": "To create HTTP requests, use the HTTP package (import 'package:http/http.dart' as http;). In the following manner, we can make the Requests: http.get(‘https://jsonplaceholder.typicode.com/albums/1‘); http.get(‘https://jsonplaceholder.typicode.com/albums/1‘); It will return a Future <http.Response>.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "11. Name two database packages mostly used in Flutter.",
        "answer": "As far as Flutter is concerned, the following database packages are widely accepted and mostly used: Firebase database: It gives users access to and control over the cloud database. Firebase basically provides a NoSQL database for Flutter apps with the ability to manage data retrieval and storage through JSON protocol. Data sync and quick loading make it one of the most suitable options for Flutter Apps. \nFeatures: Firebase database:  Features: Features NoSQL DB \nAPIs (REST only) \nAuthentication\nAnalytics \nStorage NoSQL DB APIs (REST only) Authentication Analytics Storage SQFlite database: Users can access and modify the SQLite database using this. With this database, you have full control over your database, queries, relationships, and anything you could desire. \nFeatures: SQFlite database:  Features: Features Serverless \nZero configuration \nOpen-Source \nCompact \nSingle DB file Serverless Zero configuration Open-Source Compact Single DB file",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "12. Explain Flutter Provider.",
        "answer": "The provider is built using widgets. You can use all the objects in the provider as if they were just part of Flutter with the new widget subclasses it creates. This also means that the provider is not cross-platform. The provider is the simplest way to handle state management. Basically, it works on the concept of PUB-SUB i.e., there is one provider and several subscribers.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "13. What is await in Flutter? Write it's usage.",
        "answer": "Until the async method is finished, await interrupts the process flow. Await generally means: Wait here until this function is finished so that you can get its return value. Await can only be used with async. Using this, all currently running functions are put on hold until PF nature is complete.",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "14. Write the difference between SizedBox Vs Container.",
        "answer": "Container: In this parent widget, multiple child widgets can be easily controlled and handled by adjusting their size, padding, and color efficiently. We can wrap a widget in a container widget if it needs any styling, like a color, a shape, or a size constraint, etc.\nSizedBox: This is a specific size box. It does not allow us to set the widget's color or decoration, unlike Container. In this case, we only need to resize the widget that is passed as a child. In other words, it forces its child widget to have a specific size. Container: In this parent widget, multiple child widgets can be easily controlled and handled by adjusting their size, padding, and color efficiently. We can wrap a widget in a container widget if it needs any styling, like a color, a shape, or a size constraint, etc. Container: SizedBox: This is a specific size box. It does not allow us to set the widget's color or decoration, unlike Container. In this case, we only need to resize the widget that is passed as a child. In other words, it forces its child widget to have a specific size. SizedBox:",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "15. What do you mean by Null-aware operators?",
        "answer": "Null-aware operators in dart allow you to make computations based on whether or not a value is null. Dart provides some useful information to handle the null values. The \"??=\" assignment operator: It assigns a value to a variable only if it is null. The \"??=\" assignment operator: It assigns a value to a variable only if it is null. int a;                           // a is initialized with null value.    \na ??= 10;     \nprint(a);                      // It will print 10. int a;                           // a is initialized with null value.    \na ??= 10;     \nprint(a);                      // It will print 10. The \"??\" null-aware operator: This one computes and returns the value between two expressions. In the first step, expression 1 is checked for nullness, and if it is, its value is returned; otherwise, expression 2 is evaluated, and its value is returned. The \"??\" null-aware operator: This one computes and returns the value between two expressions. In the first step, expression 1 is checked for nullness, and if it is, its value is returned; otherwise, expression 2 is evaluated, and its value is returned. print(5 ?? 10);            // It will print 5.   \nprint(null ?? 10);       // It will print 10. print(5 ?? 10);            // It will print 5.   \nprint(null ?? 10);       // It will print 10. The “?.” Safe Navigation Operator: It is also known as the Elvis operator. It is possible to use the ?. operator when calling a method/getter on an object, as long as the object isn't null (otherwise, the method will return null). The “?.” Safe Navigation Operator: It is also known as the Elvis operator. It is possible to use the ?. operator when calling a method/getter on an object, as long as the object isn't null (otherwise, the method will return null). obj?.child?.child?.getter       //The expression returns null if obj, child1, or child2 are null. If not, the getter is called and returned. obj?.child?.child?.getter       //The expression returns null if obj, child1, or child2 are null. If not, the getter is called and returned. Conclusion: Flutter is a mobile technology that is among the most innovative and booming in the mobile market as the next revolutionary thing right now. Although it is a relatively new framework for developing cross-platform applications, its popularity is soaring due to which there is an increase in demand for Flutter developers.  Important Resources\nFlutter Projects\nFlutter vs Android Studio\nFlutter vs React Native Important Resources  Flutter Projects  Flutter vs Android Studio  Flutter vs React Native",
        "reference": "interviewbit.com",
        "role": "flutter"
    },
    {
        "question": "1) What is Flutter?",
        "answer": "Flutter is a UI toolkit for creating fast, beautiful, natively compiled mobile applications with one programming language and a single codebase. It is an open-source development framework developed by Google. Generally, Flutter is not a language; it is an SDK. Flutter apps use Dart programming language for creating an app. The first alpha version of Flutter was released in May 2017.\nFlutter is mainly optimized for 2D mobile apps that can run on both Android and iOS platforms. We can also use it to build full-featured apps, including camera, storage, geolocation, network, third-party SDKs, and more.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "2) What is Dart?",
        "answer": "Dart is a general-purpose, object-oriented programming language with C-style syntax. It is open-source and developed by Google in 2011. The purpose of Dart programming is to create a frontend user interfaces for the web and mobile apps. It is an important language for creating Flutter apps. The Dart language can be compiled both AOT (Ahead-of-Time) and JIT (Just-in-Time.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "3) Should I learn Dart for Flutter?",
        "answer": "Yes, it is very necessary to learn Dart language for building Flutter application.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "4) Is Flutter Free?",
        "answer": "Yes. Flutter is free and open-source.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "5) What are the Flutter widgets?",
        "answer": "A Flutter app is always considered as a tree of widgets. Whenever you are going to code for building anything in Flutter, it will be inside a widget. Widgets describe how your app view should look like with their current configuration and state. When you made any alteration in the code, the widget rebuilt its description by calculating the difference of previous and current widget to determine the minimal changes for rendering in the app's UI.\nWidgets are nested with each other to build the app. It means your app's root is itself a widget, and all the way down is a widget also. For example, a widget can display something, can define design, can handle interaction, etc.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "6) What do you understand by the Stateful and Stateless widgets?",
        "answer": "A Stateful widget has state information. It is referred to as dynamic because it can change the inner data during the widget lifetime. A widget that allows us to refresh the screen is called a Stateful widget. This widget does not have a build() method. It has createState() method, which returns a class that extends the Flutters State Class. The examples of the Stateful widget are Checkbox, Radio, Slider, InkWell, Form, and TextField.\nThe Stateless widget does not have any state information. It remains static throughout its lifecycle. The examples of the Stateless widget are Text, Row, Column, Container, etc. If the screen or widget contains static content, it should be a Stateless widget, but if you want to change the content, it needs to be a Stateful widget.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "7) What are the best editors for Flutter development?",
        "answer": "The Flutter development tools allow to make Flutter development faster and thus boosting the developer's workflow. Flutter IDE and tools need some plugins to develop mobile applications. The plugins help us to dart compiling, code analysis, and Flutter development. The popular IDE for Flutter developments are as follows:\nADVERTISEMENT\nAndroid Studio\nVisual Studio\nIntelliJ IDEA\nXcode\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "yaml file?",
        "answer": "It is the project's configuration file that will use a lot during working with the Flutter project. It allows you how your application works. It also allows us to set the constraints for the app. This file contains:\nProject general settings such as name, description, and version of the project.\nProject dependencies.\nProject assets (e.g., images, audio, etc.).",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "9) What are packages and plugins in Flutter?",
        "answer": "A package is a group of similar types of classes, interfaces, and sub-packages. The packages and plugins help us to build the app without having to develop everything from packages. In Flutter, it allows you to import new widgets or functionality into the app. The packages and plugins have a very small distinction. Generally, packages are the new components or the code written in dart languages, whereas plugins allow more functionality on the device by using the native code. In the DartPub, packages and plugins are both referred to as packages.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "10) What are the advantages of Flutter?",
        "answer": "The popular advantages of the Flutter framework are as follows:\nCross-platform Development: This feature allows Flutter to write the code once, maintain, and can run on different platforms. It saves the time, effort, and money of the developers.\nFaster Development: The performance of the Flutter application is fast. Flutter compiles the application by using the arm C/C++ library that makes it closer to machine code and gives the app a better native performance.\nGood Community: Flutter has good community support where the developers can ask the issues and get the result quickly.\nLive and Hot Reloading: It makes the app development process extremely fast. This feature allows us to change or update the code are reflected as soon as the alterations are made.\nMinimal code: Flutter app is developed by Dart programming language, which uses JIT and AOT compilation to improve the overall start-up time, functioning and accelerates the performance. JIT enhances the development system and refreshes the UI without putting extra effort into building a new one.\nUI Focused: It has an excellent user interface because it uses a design-centric widget, high-development tools, advanced APIs, and many more features.\nDocumentation: Flutter has very good documentation support. It is organized and more informative. We can get everything that we want to be written in one place.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "11) How can you install Flutter?",
        "answer": "To install and run Flutter on the Windows system, you need first to meet these requirements for your development environment.\nOperating System Windows 7 or Later (I am Windows 10. You can also use Mac or Linux OS.).\nDisk Space 400 MB (It does not include disk space for IDE/tools).\nTools 1. Windows PowerShell\n2. Git for Windows 2.x (Here, Use Git from Windows Command Prompt option).\nSDK Flutter SDK for Windows\nIDE Android Studio (Official)\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "12) Which one is better between Flutter and React Native?",
        "answer": "Flutter and React Native are both used to develop the native hybrid app from a single codebase. These apps can run on iOS and Android platforms.\nReact Native develop by Facebook, whereas the Flutter framework was first introduced by Google. So, both framework has a very good feature and community.\nFlutter uses Dart language to create applications, whereas React Native uses JavaScript to build the applications.\nFrom the developer's point of view, it is very difficult to choose amongst them. Thus, it is very challenging to choose a winner between Flutter and React Native.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "13) Why does the first Flutter app build take so long?",
        "answer": "When you build the Flutter app the first time, it will take a longer time. It is because the Flutter built the device-specific APK or IPA file. Thus, the Gradle and Xcode are used to build the file, taking a long time.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "14) Why is the Android and iOS folder in the Flutter project?",
        "answer": "Android: This folder holds a complete Android project. It is used when you create the Flutter application for Android. When the Flutter code is compiled into the native code, it will get injected into this Android project, so that the result is a native Android application. For Example: When you are using the Android emulator, this Android project is used to build the Android app, which is further deployed to the Android Virtual Device.\niOS: This folder holds a complete Mac project. It is used when you build the Flutter application for iOS. It is similar to the Android folder, which is used when developing an app for Android. When the Flutter code is compiled into the native code, it will get injected into this iOS project, so that the result is a native iOS application. Building a Flutter application for iOS is only possible when you are working on macOS and Xcode IDE.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "15) What is Tween Animation?",
        "answer": "It is the short form of in-betweening. In a tween animation, it is required to define the start and endpoint of animation. It means the animation begins with the start value, then goes through a series of intermediate values and finally reached the end value. It also provides the timeline and curve, which defines the time and speed of the transition. The widget framework provides a calculation of how to transition from the start and endpoint.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "16) Explain Hot Reload in Flutter?",
        "answer": "The hot reload feature allows you to quickly and easily perform an experiment in the project. It helps to build UI, add new features, fix bugs, and make app development fast. To perform hot reloading of a Flutter app, do the following steps:\nRun the app in a supported Flutter editor or terminal window.\nModify any of the Dart files in the project.\nIf you use an IDE that supports Flutter, then select Save All or click the Hot Reload button on the toolbar. Immediately, you can see the result in your emulator or real device.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "17) Name some popular apps that use Flutter?",
        "answer": "Today, many organizations use Flutter for building the app. Some of the most popular app built on Flutter are as follows:\nGoogle Ads\nReflectly\nAlibaba\nBirch Finance\nCoach Yourself\nTencent\nWatermaniac",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "18) What is the latest release of Flutter SDK?",
        "answer": "The latest release of the Flutter framework is Flutter- v1.20.4 on 15 September 2020.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "19) Name the popular database package used in the Flutter?",
        "answer": "The most used and popular database packages used in the Flutter are as follows:\nsqflite database: It allows to access and manipulate SQLite database.\nFirebase database: It will enable you to access and manipulate the cloud database.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "20) Which type of animation allows you to represent real-world behavior?",
        "answer": "The Physics-based animation allows you to represent real-world behavior in Flutter.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "21) What is the difference between Hot Restart and Hot Reload?",
        "answer": "The following are the essential differences between Hot Restart and Hot Reload:\nHot Reload Hot Restart\nIt works with a small r key on the terminal or commands prompt. It mainly works with States value.\nThe hot reload feature allows us to quickly compile the newly added code in the file and sent them to Dart Virtual Machine (DVM). After DVM completes the updation, it immediately updates the UI of the app. It allows developers to get a fully compiled application because it destroys the preserves State values and sets them to their defaults. On every Hot Restart, our app widget tree is completely rebuilt with the new typed code.\nIt helps to build UI, add new features, fix bugs, and make app development fast. It takes more time than Hot Reload to compile and update the app.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "22) In the below code snippet, convert makeMangoShake() to a getter called mangoshake using the shorthand \"fat arrow\" syntax:",
        "answer": "class Recipe {  \n  int mango;  \n  int milk;  \n  int sugar;  \n  Recipe(this.mango, this.milk, this.sugar);   \n  int makeMangoShake() {  \n    return mango+milk+sugar;  \n  }  \n}   \nFat Arrow (=>) is used when the method contains a single line of code. We can use it using the following syntax:\nmethodName(parameters) => statement;   \nIt is to note that we cannot use the return keyword with a fat arrow (=>). After converting the makeMangoShake() into a fat arrow, it will look like the below code:\nint get mangoshake => mango + milk + sugar;",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "23) What is the difference between \"main()\" and \"runApp()\" functions in Flutter?",
        "answer": "We can differentiate the main and runApp functions in Flutter as below:\nThe main() function is responsible for starting the program. Without the main() function, we cannot write any program on Flutter.\nThe runApp() function is responsible for returning the widgets that are attached to the screen as a root of the widget tree and will be rendered on the screen.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "24) When should you use mainAxisAlignment and crossAxisAlignment?",
        "answer": "We can use the crossAxisAlignment and mainAxisAlignment to control how a row and column widgets align its children based on our choice.\nThe row's cross-axis will run vertically, and the main axis will run horizontally. See the below visual representation to understand it more clearly.\n\nThe column's cross-axis will run horizontally, and the main axis will run vertically. The below visual representation explains it more clearly.\n\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "25) What is the difference between SizedBox VS Container?",
        "answer": "The Container in Flutter is a parent widget that can contain multiple child widgets and manage them efficiently through width, height, padding, background color, etc. If we have a widget that needs some background styling may be a color, shape, or size constraints, we may wrap it in a container widget.\nThe SizedBox widget in Flutter is a box that comes with a specified size. Unlike Container, it does not allows us to set color or decoration for the widget. We can only use it for sizing the widget passed as a child. It means it forces its child widget to have a specific width or height.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "26) What is Stream in Flutter?",
        "answer": "A stream is a sequence of asynchronous events. It provides an asynchronous sequence of data. It is the same as a pipe where we put some value on the one end, and if we have a listener on the other end, it will receive that value. We can keep multiple listeners in a stream, and all of those will receive the same value when put in the pipeline.\nWe can process a stream by using the await for or listen() from the Stream API. It has a way to respond to errors. We can create streams in many ways, but they can be used in the same way. See the below example:\nFuture<int> sumStream(Stream<int> stream) async {  \n    var sum = 0;  \n    await for (var value in stream) {  \n      sum = sum + value;  \n    }  \n    return sum;  \n  }",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "27) Explain the different types of Streams?",
        "answer": "Streams can be of two types, which are:\nSingle subscription streams\nIt is the most common type of stream that contains a sequence of events, which is the parts of a larger whole. It will deliver the events in the correct order and without missing any of them. If any of the events are missing, then the rest of the stream makes no sense. This stream is mainly used to read a file or receive a web request. It will listen once, and if it is listening again, it means missing an initial event. When it starts listening, the data will be fetched and provided in chunks.\nBroadcast streams\nIt is a type of stream used for individual messages that can be handled one at a time without the knowledge of the previous events. It can have multiple listeners to listen simultaneously, and we can listen again after canceling the previous subscription. This mouse events in a browser is a kind of this stream.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "28) Why is the build() method on State and not StatefulWidgets?",
        "answer": "The main reason behind this is that the StatefulWidget uses a separate State class without building a method inside its body. It means all fields inside a Widget are immutable and includes all its sub-classes.\nOn the other hand, the StatelessWidget has its build and associated methods inside its body. It is due to the nature of StatelessWidget, which is rendered completely on the screen using the provided info. It also doesn't allow any future changes in its State information.\nThe StatefulWidget allows us to change the State information during the course of the app. Therefore, it is not suitable for storage in a build method to satisfy Widget class conditions where all fields are immutable. This is the main reason to introduce the State class. Here, we only need to override the createState() function to attach the defined State with the StatefulWidget, and then all expected changes happen in a separate class.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "29) What are the different build modes in Flutter?",
        "answer": "The Flutter tooling supports three modes while compiling the application. These compilation modes can be chosen by depending on where we are in the development cycle. The name of the modes are:\nDebug\nProfile\nRelease",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "",
        "answer": "?? operator ? Operator\nThe \"??\" operator is used to evaluate and returns the value between two expressions. It can be used as below:\nexpr1 ?? expr2\nThis operator first checks the expression 1 and, if it is non-null, returns its value; otherwise, it will evaluate and returns the value of expression 2. The \"?\" operator is used to evaluate and returns the value between two expressions based on the given condition. It can be used as below:\ncondition ? expr1 : expr2\nThis operator first checks the condition, and if it is true, it will evaluate expr1 and returns its value (if the condition is matched). Otherwise, it evaluates and returns the value of expr2.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "31) Why do we need mixins?",
        "answer": "Dart does not support multiple inheritances. Thus to implement the multiple inheritances in Flutter/Dart, we need mixins. Mixins provide a way to write the reusable class's code in multiple class hierarchies.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "32) Why we use a Ticker in Flutter?",
        "answer": "Ticker in Flutter is a refresh rate of our animation. It is a class that sends a signal at a regular interval, i.e., around 60 times per second. We can understand it with our watch, which tics at regular intervals. At each tick, Ticker provides a callback method with the duration since the first ticks at each second, after it was started. Even if the tickers started at different times, it always synchronized automatically.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "33) What are keys in Flutter, and when to use it?",
        "answer": "Keys in Flutter are used as an identifier for Widgets, Elements and SemanticsNodes. We can use it when a new widget tries to update an existing element; then, its key should be the same as the current widget key associated with the element.\nKeys should not be different amongst the Elements within the same parent.\nThe subclasses of Key must be a GlobalKey or LocalKey.\nKeys are useful when we try to manipulate (such as adding, removing, or reordering) a collection of widgets of the same type that hold some state.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "34) How would you execute code only in debug mode?",
        "answer": "To execute the code only in debug mode, we need to first import the dart foundation as below:\nimport 'package:flutter/foundation.dart' as Foundation;   \nNext, we need to use the kReleaseMode as below:\nif (Foundation.kReleaseMode){ // is Release Mode ??  \n    print('release mode');  \n} else {  \n    print('debug mode');  \n}",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "35) What is profile mode, and when do you use it?",
        "answer": "Profile mode is used to measure the performance of our applications. In this mode, some debugging ability is maintained to profile your app's performance. This mode is disabled on the emulator and simulator because they are not representative of real performance.\nWe can use the below command to compile the profile mode:\nflutter run --profile",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "36) What is release mode, and when do you use it?",
        "answer": "Release mode allows us to optimize the codes and generate them without any debug data in a fully optimized form. In this mode, many of the application's code will be entirely removed or rewritten.\nWe use this mode when we are ready to release the app. It enables maximum optimization and minimal footprint size of the application.\nWe can use the below command to compile the release mode:\nflutter run --release",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "37) What is the difference between WidgetsApp and MaterialApp?",
        "answer": "The below comparison chart explains the basic differences between WidgesApp and MaterialApp:\nWidgetsApp MaterialApp\nWidgetsApp is used for basic navigation. It includes many foundational widgets together with the widgets library that Flutter uses to create the UI of our app. MaterialApp, along with the material library, is a layer that is built on the top of WidgetsApp and its library. It implements Material Design that provides a unified look and feels to our app on any platform.\nWidgetsApp class is the base class for MaterialApp class. It offers many interesting tools such as Navigator or Theme for developing the application.\nIt wraps several widgets that are required for building the application. It wraps several widgets that are required for building material design applications.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "38) What is BuildContext?",
        "answer": "BuildContext in Flutter is the part of the widgets in the Element tree so that each widget has its own BuildContext. We mainly use it to get a reference to another widget or theme. For example, if we want to use a material design element, it is required to reference it to the scaffold. We can get it using the Scaffold.of(context) method.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "39) What types of tests can you perform in Flutter?",
        "answer": "Testing is an activity used to verify and validate the application, which is bug-free and meets the user requirements. Generally, we can use these three types of tests in Flutter:\nUnit Tests: It tests a single function, method, or class. Its goal is to ensure the correctness of code under a variety of conditions. This testing is used for checking the validity of our business logic.\n\nWidget Tests: It tests a single widget. Its goal is to ensure that the widget's UI looks and interacts with other widgets as expected.\nIntegration Tests: It validates a complete app or a large part of the app. Its goal is to ensure that all the widgets and services work together as expected.\nFlutter also provides one additional testing known as a golden test. Its goal is to ensure that you have an image of a widget or screen and check to see whether the actual widget matches it or not.\nTo read more information, click here.",
        "reference": "javatpoint.com",
        "role": "flutter"
    },
    {
        "question": "40) What are Null-aware operators?",
        "answer": "Dart provides some useful information to handle the null values.\n1. The \"??=\" assignment operator that assigns a value to a variable only when that variable is null.\nint a; // Initial value of a is null.  \na ??= 5;  \nprint(a); // It will print 5.  \n2. The \"??\" null-aware operator that is used to evaluate and returns the value between two expression. It first checks the expression 1 and if it is non-null, returns its value; otherwise, it will evaluate and returns the value of expression 2:\nprint(3 ?? 5); // It will print 3.  \nprint(null ?? 5); // It will print 5.",
        "reference": "javatpoint.com",
        "role": "flutter"
    }
]