[
    {
        "question": "1. How do you access history of requests in Postman?",
        "answer": "The request history can be accessed in the History tab provided on the Postman application. If we sign into the Postman account, then the history will be synced across the devices where you are logged in. When you click on any of the requests present in the History tab, the view opens the request that we have saved while we were working on it earlier.\nHistory also consists of the collection runs that were executed as summarized versions. They are not logged in History as single requests.\nClick on “View More option (…)” on the request, we will see options to save, document, monitor, delete or mock the request.\nMultiple requests can be selected by using Command or Control button and then clicking on the request. When you click on any of the requests present in the History tab, the view opens the request that we have saved while we were working on it earlier. History also consists of the collection runs that were executed as summarized versions. They are not logged in History as single requests. Click on “View More option (…)” on the request, we will see options to save, document, monitor, delete or mock the request. Multiple requests can be selected by using Command or Control button and then clicking on the request. The following image shows the page that shows when you click on View More Option upon a request present in the History tab:   Image Source: Postman Learning Documentation",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "2. What is digest auth in Postman?",
        "answer": "Digest Authorization is one of the authorization techniques provided by Postman. In this technique, the client first sends the request to the API and get responses from the server including a number which is usable only once, a realm value and 401 unauthorized response. We will be then sent back an encrypted data array having both username and password along with the data received from the server earlier. The server uses this data to generate an encrypted data string and compares this with what was sent for authenticating the request. We can do this by selecting the Authorization tab, then selecting “Digest Auth” from the drop-down list. Postman window presents the fields for both stages of the authentication request. The fields required for the second stage of the request are auto-filled based on the data received from the server. For more information, you can refer here. here  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "3. What is a collection in Postman?",
        "answer": "A collection in Postman helps to group similar requests. It helps in systematically arranging the requests into folders.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "4. Why do we use Postman?",
        "answer": "We use Postman for the below reasons: Firstly, Postman is free software that is useful for API testing.\nIt can send HTTP requests of various types (such as GET, POST, PUT, PATCH, etc) and gives the ability to save environments for future use.\nIt helps in managing the end-to-end lifecycle of the API - starting from design to mocking to testing and finally maintaining the APIs.\nIt provides Runtime Service that helps in managing API collections, environments, work-spaces, and different examples.\nIt can be used to easily integrate with CI/CD tools such as Jenkins.\nHas extensive support from the community and provides extensive documentation. Firstly, Postman is free software that is useful for API testing. It can send HTTP requests of various types (such as GET, POST, PUT, PATCH, etc) and gives the ability to save environments for future use. It helps in managing the end-to-end lifecycle of the API - starting from design to mocking to testing and finally maintaining the APIs. It provides Runtime Service that helps in managing API collections, environments, work-spaces, and different examples. It can be used to easily integrate with CI/CD tools such as Jenkins. Has extensive support from the community and provides extensive documentation.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "5. How will you log variable values in Postman?",
        "answer": "We can log the variable values in Postman in the console by using the command:\nconsole.log(pm.variables.get(\"variable_name\"));  console.log(pm.variables.get(\"variable_name\"));",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "6. How do you access postman variables?",
        "answer": "It can be accessed by using the variable name as:{{variable_name}} {{variable_name}}",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "7. What are the various authorization methods provided by Postman?",
        "answer": "Postman provides the below API request Authorization Options: API Key\nBearer Token\nBasic auth\nDigest auth\nOauth 1.0\nOauth 2.0\nHawk Authentication\nAWS Signature\nNTLM Authentication API Key Bearer Token Basic auth Digest auth Oauth 1.0 Oauth 2.0 Hawk Authentication AWS Signature NTLM Authentication",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "8. What are the different types of API requests supported in Postman?",
        "answer": "Postman supports the following type of requests: GET\nPOST\nPUT\nPATCH\nDELETE\nCOPY\nHEAD\nOPTIONS\nLINK\nUNLINK\nPURGE\nLOCK\nUNLOCK\nPROPFIND\nVIEW GET POST PUT PATCH DELETE COPY HEAD OPTIONS LINK UNLINK PURGE LOCK UNLOCK PROPFIND VIEW",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "9. How are Query Params different from Path Variables?",
        "answer": "Path Variables are used for identifying specific resources and Query Parameters are used for sorting or filtering the resources.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "10. What is Basic Auth in Postman?",
        "answer": "Basic Auth in Postman is a type of authorization technique provided in Postman for HTTP user agents like web browsers. It provides fields to enter username and password which when entered gets associated with the request. username password  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "11. What is Postman?",
        "answer": "Postman is a free, HTTP Client based software application primarily used to perform API testing. It supports testing of HTTP requests by utilizing GUI (Graphical User Interface) which can be executed and the responses can be validated. It also helps in collaborating among the team members for the development of API by providing a platform to design, develop, test, and document APIs.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "12. What encoding is accepted by Postman in authorization credentials?",
        "answer": "Postman accepts authorization credentials in Base64 encoding format only. It is provided in Postman by default. If we do not want to use an inbuilt encoding system, we can refer to third-party websites for converting the credentials in base64 format.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "13. Can we have the same names for global variables in postman?",
        "answer": "The scope of global variables is limited to the workspace and is global. Due to this, variables having global scope cannot have the same names. We can have the same names for local variables but they need to be part of different variables.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "14. What do you know about postman monitor?",
        "answer": "Monitoring is a method of staying in sync with the health and performance of the APIs. Postman provides inbuilt monitoring services that help us be in sync with the API development and performance. The monitors provided by Postman are mainly based on the working of collection runners. They run every request in the collection and analyze the values mentioned in the test scripts. Monitors use the test scripts for validating and monitoring the responses. The reports generated are shared with the developers over emails or alerts in slack, hipchat, etc based on our configuration settings.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "15. What is a binary form in POST methods?",
        "answer": "The binary form is designed to help send data in a format that is not possible to be entered manually. These options are used while sending large files like images, CSV files, etc in the POST request. Binary representation is the easiest representation for sending complex data with the request.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "16. What are the limitations of Postman?",
        "answer": "Postman is not suitable for processing 1000+ API requests.\nIf the project is very large, managing the collections and requests become cumbersome.\nIt is not suitable if we want to manage the workspace in the form of code as there would be a lot of code duplication for dynamic API requests. Postman is not suitable for processing 1000+ API requests. If the project is very large, managing the collections and requests become cumbersome. It is not suitable if we want to manage the workspace in the form of code as there would be a lot of code duplication for dynamic API requests.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "17. How can you save the responses of API to a file in Postman?",
        "answer": "We can do this in two ways: Click on the Download button in the response section.\nClick on the arrow beside send button - There will be an option to send and download. Clicking on it will prompt Postman to ask the location of saving the response post successful execution of the request. Click on the Download button in the response section. Click on the arrow beside send button - There will be an option to send and download. Clicking on it will prompt Postman to ask the location of saving the response post successful execution of the request.  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "18. What is the significance of 301 status code?",
        "answer": "301 status code represents permanent redirect from one website page to another. It tells the search engine that the old page is outdated and the engine has to index the new page URL.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "1. Does Postman provide a feature to log requests and responses?",
        "answer": "Postman does allow viewing of requests and response parameters in the software application itself. But it is important to see how the request was sent upon applying the pre-request scripts. In such cases, Postman has an additional tool called “Postman Console” which is used for viewing every request and response detail. We can also log the details in the console by using console.log statements in the scripts.  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "2. Why is Base64 encoding primarily used in Postman?",
        "answer": "Base64 encoding is primarily used because it does the task of data transmission in a textual format that is easier to be sent in the requests in HTML form statistics format. Another reason why we use this is that using identical 64 characters for encoding is heavily reliable in any language we use.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "3. What is the purpose of the 304 status code?",
        "answer": "304 status code stands for NOT MODIFIED. This is used for diminishing the bandwidth of the network in cases of restricted GET requests. In such cases, the response body should be empty or blank and the headers should have a date, location, signature etc.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "4. Is it preferable to save our work on Postman Cloud?",
        "answer": "When working on enterprise-level applications for organizations, it is not preferred to store our work on the Postman cloud because of the required privacy and security. In the Postman cloud, there are chances of security breaches by a skilled hacker.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "5. What are the various variable scopes provided by Postman?",
        "answer": "Postman has the following variable scopes: Global Variables: Global variables allow data access between different collections, requests, and scripts. They are available throughout the workspace.\nEnvironment Variables: These allow us to tailor the requests about different development environments - such as local testing, stage testing, or prod testing.\nLocal Variables: These are temporary variables that are accessible only within the scope of requests scripts. They are either scoped to a single request or single collection, depending on the requirements. These variables are not available after the completion of the script execution.\nCollection Variables: These variables are scoped to be available for all the requests present in a collection. They are independent of the environment.\nData Variables: These variables come from external JSON or CSV files for defining the datasets required to run the collection in Collection Runner or Newman. Global Variables: Global variables allow data access between different collections, requests, and scripts. They are available throughout the workspace. Global Variables: Environment Variables: These allow us to tailor the requests about different development environments - such as local testing, stage testing, or prod testing. Environment Variables: Local Variables: These are temporary variables that are accessible only within the scope of requests scripts. They are either scoped to a single request or single collection, depending on the requirements. These variables are not available after the completion of the script execution. Local Variables: Collection Variables: These variables are scoped to be available for all the requests present in a collection. They are independent of the environment. Collection Variables: Data Variables: These variables come from external JSON or CSV files for defining the datasets required to run the collection in Collection Runner or Newman. Data Variables:",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "6. Is it possible to reuse the authentication token for multiple requests?",
        "answer": "Yes, it is possible. It can be achieved by creating a collection and adding all the requests having the same authentication token to that collection and then assigning the auth token to the collection. This can be applied to the individual requests by selecting the “Inherit auth from parent” option in the Authorization tab.  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "7. How do you write test cases for basic authentication in Postman?",
        "answer": "Basic Authentication is one of the authentication techniques provided in Postman that ensures that we can set the username and password along with the API requests. We can do this by first setting the credentials of the API by: Navigating to the Authorization tab.\nFrom the dropdown, select Basic Auth.\nAdd the username and password to the API in the input fields given. Navigating to the Authorization tab. From the dropdown, select Basic Auth. Add the username and password to the API in the input fields given.   The test cases can be written as follows: pm.test(\"Is the Request Authenticated?\", function () {\n       var jsonData = pm.response.json();\n       //if authenticated then assert to true\n       pm.expect(jsonData.authenticated).to.eql(true);\n  });\n  pm.test(\"Is the Content-Type present?\", function () {\n       pm.response.to.have.header(\"Content-Type\");\n  });\n  pm.test(\"Is it a successful POST Request?\", function () {\n       pm.response.to.have.status(200);\n  }); pm.test(\"Is the Request Authenticated?\", function () {\n       var jsonData = pm.response.json();\n       //if authenticated then assert to true\n       pm.expect(jsonData.authenticated).to.eql(true);\n  });\n  pm.test(\"Is the Content-Type present?\", function () {\n       pm.response.to.have.header(\"Content-Type\");\n  });\n  pm.test(\"Is it a successful POST Request?\", function () {\n       pm.response.to.have.status(200);\n  });",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "8. How do you set the same headers for all requests in a Postman Collection?",
        "answer": "Postman collections allow using pre-request scripts at the individual request level and the collection level. We can add any script that applies to all requests in the collection in the pre-request scripts. We can do it by following the below steps: Right-click on the collection, navigate to the pre-request tab.\nAdd the below lines of code in the script to add a request header for all the requests present in the collection. Right-click on the collection, navigate to the pre-request tab. Add the below lines of code in the script to add a request header for all the requests present in the collection. pm.request.headers.add({\n    key: 'TestHeader',\n    value: 'testValue'\n}); pm.request.headers.add({\n    key: 'TestHeader',\n    value: 'testValue'\n}); Click on Update for saving the script.\nExecute the request in the collection and check if the headers are added to the request in the Postman console. Click on Update for saving the script. Execute the request in the collection and check if the headers are added to the request in the Postman console. Header from Pre-Request Script:  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "9. What are workspaces in Postman? What are their uses?",
        "answer": "Workspaces are the areas/space given by Postman for team collaboration to work on a specific or set of collections. It provides a way to logically separate requests or collections that are personal to the developer or the team so that the maintenance of requests is made easy. There are two types of workspaces in Postman: Personal Workspace:\nThese workspaces are useful when we are working simultaneously on multiple projects and we require logical separation between the requests to handle the requests better.\nTeam Workspace:\nThese are created for team collaboration so that more than one person can be part of testing requests.\nWe can invite new users for collaborating on our collections by sharing the email id of the users. Once the invite is accepted, the new users can start contributing to the workspace by adding or modifying the requests. Personal Workspace:\nThese workspaces are useful when we are working simultaneously on multiple projects and we require logical separation between the requests to handle the requests better. Personal Workspace: These workspaces are useful when we are working simultaneously on multiple projects and we require logical separation between the requests to handle the requests better. These workspaces are useful when we are working simultaneously on multiple projects and we require logical separation between the requests to handle the requests better. Team Workspace:\nThese are created for team collaboration so that more than one person can be part of testing requests.\nWe can invite new users for collaborating on our collections by sharing the email id of the users. Once the invite is accepted, the new users can start contributing to the workspace by adding or modifying the requests. Team Workspace: These are created for team collaboration so that more than one person can be part of testing requests.\nWe can invite new users for collaborating on our collections by sharing the email id of the users. Once the invite is accepted, the new users can start contributing to the workspace by adding or modifying the requests. These are created for team collaboration so that more than one person can be part of testing requests. We can invite new users for collaborating on our collections by sharing the email id of the users. Once the invite is accepted, the new users can start contributing to the workspace by adding or modifying the requests. We can create a new workspace by clicking on the Workspace icon and then clicking on “Create New”.   We can select our workspace to be personal or team workspace by configuring the properties in the create window.  ",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "10. How will you stop the execution of upcoming requests or execution of the collections?",
        "answer": "We can use the below code to stop the execution of the next request: pm.setNextRequest(null); pm.setNextRequest(null);",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "11. What do you understand by the pre-request script?",
        "answer": "Pre-request scripts are those scripts that are used for executing Javascript code before a request is run. It is used for performing pre-processing tasks like setting variables, parameters, headers, body data, etc.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "12. How can we use Custom Javascript libraries in our scripts with an example?",
        "answer": "Postman provides a lot of built-in tools and libraries that we can use to add in our pre-request or post-request scripts or test cases. Let us take the example of using the moment.js library. It provides a lot of useful functions to format data around time. Consider that we have a POST request that needs to specify the created date to the user which expects the format “DD/MM/YYYY”. We can use the moment library to perform this using a single line of code. In our pre-request script, we need to add the below lines of code to get the correctly formatted data and then store that in an environment variable: var moment = require('moment');\npm.environment.set('createdDate',moment().format('DD/MM/YYYY')); var moment = require('moment');\npm.environment.set('createdDate',moment().format('DD/MM/YYYY')); There are a lot of other useful libraries like crypto.js that are useful for converting text to encrypted values which can further be used anywhere in the request body.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "13. If we have a global and a local variable of the same name, which one will be given the most preference in Postman?",
        "answer": "In such cases, the higher precedence is given to the local variable by overwriting the value of the global variable.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "14. Does Postman allow flexibility to make use of the command-line?",
        "answer": "Postman provides a command-line tool called Newman using which we can run any Postman collection. It is a NodeJS based package that requires a node environment for executing collections using Newman Collection Runner. It has full parity with Postman’s Collection Runner i.e it provides support for running assertions, pre-request scripts, or other request scripts linked with the requests that belong to the collection. We can use Newman by following the below steps: Install Node\nInstall Newman package using npm command as: npm install -g newman\nTo run the collection, first export the environment to JSON format in Postman. Then run the below command for running the collection in Newman: Install Node Install Newman package using npm command as: npm install -g newman npm install -g newman To run the collection, first export the environment to JSON format in Postman. Then run the below command for running the collection in Newman: newman run {{path to collection json}} -e {{path to environment json}} newman run {{path to collection json}} -e {{path to environment json}}",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "15. How will you generate random numbers of a given range in Postman?",
        "answer": "Suppose you want to generate numbers between the range 1 to N, then it can be done in the pre-request script as follows: pm.globals.set('randomNumber', Math.floor(Math.random() * N)); pm.globals.set('randomNumber', Math.floor(Math.random() * N)); We can then use this variable in the URL as:{{randomNumber}} {{randomNumber}}",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "16. What do you understand by Scratch Pad?",
        "answer": "Scratch Pad is a space provided by Postman that helps us to work without being connected to Postman servers. It provides the flexibility of utilizing some of the features of postman offline. The features include- collection creation, creating requests and the ability to send requests. These are stored locally and once logged in, the work is saved into the workspace.",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "17. How do you get the cURL command based on the details of REST API obtained from Postman?",
        "answer": "We can obtain the cURL command equivalent by following the below steps: Click on the Code icon as shown below: Click on the Code icon as shown below:   You will get the cURL command of the REST API request sent as shown in the screenshot below: You will get the cURL command of the REST API request sent as shown in the screenshot below:   We can also get the command for the request in different languages like C#, Javascript, NodeJs, PHP, etc by selecting the option that we require from the drop-down as shown in the image below: We can also get the command for the request in different languages like C#, Javascript, NodeJs, PHP, etc by selecting the option that we require from the drop-down as shown in the image below:   Conclusion Postman has become the most popular and beloved tool for API testing. Hence, hands-on experience with the Postman tool has become very important for any backend developer. Recommended Resources: Recommended Resources: API Testing\nREST API\nSoftware Testing\nWeb Services\nJMeter API Testing API Testing REST API REST API Software Testing Software Testing Web Services Web Services JMeter JMeter",
        "reference": "interviewbit.com",
        "role": "postman"
    },
    {
        "question": "1) What is Postman?",
        "answer": "Postman is a free HTTP client-based software application and a collaboration platform for API development. It is mainly used to perform API testing. It is a very popular API client which facilitates developers and provides a platform to design, build, share, test, and document APIs. Postman supports testing of HTTP requests by utilizing GUI (Graphical User Interface), which later we can execute and validate the responses.\nThe Postman tool also facilitates us to send HTTP/s requests to a service and get their responses. We can ensure that the service is up and running by using this.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "2) What was the Postman originally developed?",
        "answer": "When the Postman was developed, it was originally a Chrome browser plugin. It extends its solution with the native version for both Mac and Windows.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "3) Why do we use Postman?",
        "answer": "The Postman tool has become a choice of more than 8 million users. Following are the main reasons for using Postman:\nADVERTISEMENT\nADVERTISEMENT\nIt is free: Postman is free software that we can use for API testing. It is free to download and use for teams of any size.\nIt is easy to use: Postman is an easy-to-use software tool. We can send HTTP requests of various types (such as GET, POST, PUT, PATCH, etc.). We have to download it, and we can send our first request in minutes. It also gives us the ability to save environments for future use.\nCommunity & Support: It has a huge community forum for customer support and extensive documentation.\nIt is extensible: Postman facilitates us customizing it according to our needs with the Postman API.\nAPIs Support: It facilitates us to make any API call (REST, SOAP, or plain HTTP) and easily inspect even the largest responses. It also helps manage the end-to-end lifecycle of the API - starting from design to mocking to testing and finally maintaining the APIs.\nRuntime Services: Postman provides Runtime Services that help us manage API collections, environments, work-spaces, and different examples.\nIntegration: Postman facilitates us to easily integrate test suites into our preferred CI/CD tools and services, such as Jenkins with Newman (command-line collection runner).",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "4) What is an API?",
        "answer": "API is an acronym that stands for \"Application Programming Interface\". It is a set of routines, protocols, and tools used for building Software applications. API is an interface, so it specifies how one software program should interact with other software programs.\nIn other words, we can say that API is an Application Programming Interface that acts as an interface between two software applications and allows these two software applications to communicate with each other. API is a collection of software functions that another software program can execute.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "5) What are the various authorization methods provided by Postman?",
        "answer": "Postman provides the following API request authorization options:\nAPI Key\nOauth 1.0\nOauth 2.0\nBearer Token\nBasic auth\nDigest auth\nHawk Authentication\nAWS Signature\nNTLM Authentication",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "6) What is the use of the collection in Postman?",
        "answer": "In Postman, a collection is used to group similar requests. It systematically arranges the requests into folders.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "7) What are the various tools used for API Testing?",
        "answer": "Following is a list of some tools that are used for API Testing:\nPostman\nSoapUI\nKatalon Studio\nTricentis Tosca\nApigee\nJmeter etc.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "8) How can you access the Postman variables?",
        "answer": "We can access the Postman variables by using the variable name as:{{variable_name}}",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "9) What are the different types of API requests supported in Postman?",
        "answer": "Following is a list of the different types of API requests supported in Postman:\nGET\nPOST\nPUT\nPATCH\nCOPY\nDELETE\nHEAD\nOPTIONS\nLINK\nUNLINK\nPURGE\nLOCK\nUNLOCK\nPROPFIND\nVIEW",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "",
        "answer": "An HTTP request is a programming request made by the client to a named host located on a server. HTTP works as a communication interface or a request-response protocol between a client and server. The main aim of the HTTP request is to access a resource on the server. To make the HTTP request, the client uses components of a URL (Uniform Resource Locator), which includes the information needed to access the resource.\nAn example of the HTTP request:\nA client (browser) sends an HTTP request to the server; then, the server responds to the client. The response sent by the server contains the status information about the request, and it can also contain the requested content.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "11) What are the core components of an HTTP request?",
        "answer": "Following are the five core components of an HTTP request:\nHTTP methods: It is a set of request methods used to perform needed action for a given resource (GET, PUT, POST, and DELETE).\nUniform Resource Identifier (URI): It is a kind of address that describes the resource.\nHTTP Version: It specifies the version of the HTTP. For example HTTP v1.1\nRequest Headers: It specifies the content type and content length of the request. For example: Content-type: application/ JSON, Content-Length: 511\nPayload: It is used to specify the Request Body that includes message content.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "12) Why does Postman accept Base64 encoding only?",
        "answer": "Postman accepts Base64 encoding only because it transmits the data into the textual form and sends it in an easier form, such as HTML form data. This is also preferred because we can rely on the same 64 characters in any encoding language we want to use.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "13) Which type of encoding does Postman accept authorization credentials and why?",
        "answer": "Postman accepts authorization credentials in Base64 encoding only. This is inbuilt in Postman, or else you can refer to a third-party website to convert the credentials in base64. The Base64 authorization credentials are generally used because they transmit the data into a textual form and send it in an easier form, such as HTML form data.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "14) What are the core components of an HTTP Response?",
        "answer": "Following are the four core components of an HTTP Response:\nStatus/Response Code: The server generates the status or response codes when the client makes a request. For example, 404 means Page Not Found, and 200 means Response is OK.\nHTTP Version: It describes the HTTP version. For example: HTTP v1.1, HTTP v1.3 etc.\nResponse Header: The Response Header includes the information for the HTTP response message. For example, Content-type, Content-length, date, status, and server type.\nResponse Body: The Response Body contains the client's data requested from the server.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "15) What is the meaning of the term environment in Postman?",
        "answer": "In Postman, the term environment is a set of key-value pairs. You can create multiple environments in Postman and switch among them quickly by pressing a button. There are 2 types of environment, global and local.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "16) Can we have two global scope variables with the same name in Postman?",
        "answer": "The global variables are global, so we cannot set duplicate names for them without any environment as it creates confusion for the software. On the other hand, local variables can have the same name but in different environments.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "17) Which one is preferred in Postman, a global or local variable?",
        "answer": "In Postman, if 2 variables have the same name (one being local, the other global), then the higher priority is of the local variable. The local variable will overwrite the global variable.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "18) How can you log variable values in Postman?",
        "answer": "In Postman, we can log the variable values in the console by using the following command:\nconsole.log(pm.variables.get(\"variable_name\"));",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "19) What is the use of Postman monitor?",
        "answer": "The Postman monitor is used for running collections. Collections run till the specified time defined by the users. It requires the users to be logged in, and the users share the Monitor reports over an email on a daily or monthly basis.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "20) What do you understand by team workspace in Postman?",
        "answer": "As we know, a workspace is a collaborative environment for users to develop and test APIs. In the same way, a team workspace is a workspace that is shared by the whole team working on the same collections of requests. Usually, it is time-consuming and hard to share the collections through external drives or other sharing; the team workspace synchronizes and collaborates all the team's work in one place.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "21) What is the difference between Query Params and Path Variables?",
        "answer": "Query Params or Query Parameters are used for sorting or filtering the resources. On the other hand, Path Variables are used for identifying specific resources.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "22) What is the use of Postman Collection runners?",
        "answer": "The Postman Collection runner is used to perform Data-driven testing. It runs a group of API requests for multiple iterations with different data sets.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "23) What is Basic Auth in Postman?",
        "answer": "In Postman, Basic Auth is an authorization technique provided for HTTP user agents like web browsers to enter username and password. After entering the username and password, it gets associated with the request.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "24) Can we import local variables in Postman Monitors?",
        "answer": "Yes, we can import local variables in Postman Monitors, but it is not allowed to import global variables in Postman Monitors.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "25) What are the main limitations of Postman?",
        "answer": "Following is the list of key limitations of Postman:\nPostman cannot process 1000+ API requests.\nIn the case of huge projects, it isn't easy to manage the collections and requests.\nPostman is not suitable for managing the workspace in the form of code. This is because there would be a lot of code duplication for dynamic API requests.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "26) What is a binary form in POST methods? What is its usage?",
        "answer": "In POST methods, the binary form is designed to send data easily in a format it is impossible to enter data manually. This is mainly used when sending large files like images, CSV files, etc., in the POST request. The binary representation is one of the easiest representations used for sending complex data with the request.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "27) What is the use of Postman cloud when we are working in a company?",
        "answer": "The Postman cloud is a common repository of companies to access Postman collections. That is why we use it when we are working in a company. We can save the work instantly in the Postman cloud after logging in. It facilitates the team members to access data/collections from anywhere.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "28) What is digest auth in Postman?",
        "answer": "The digest auth or digest authorization is one of the authorization techniques provided by Postman. This technique lets the clients send the request first to the API and get responses from the server, including a number that can be used only once a real value and 401 unauthorized responses. After that, the client can send back an encrypted data array with both username and password and the data received from the server earlier. Now, the server uses this data to generate an encrypted data string and compares this with what was sent for authenticating the request.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "29) Why is it not suggested to save work in Postman cloud?",
        "answer": "It is not suggested and is not preferred to save your work in the Postman cloud as the company's work is not allowed to be leaked and remain confidential. While saving your work on Postman cloud, it may cause a security breach as it requires sign-in. That's why the Postman Cloud is not suggested for saving work, and team workspace is highly preferred.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "30) What do you understand by status code 201?",
        "answer": "The status code 201 means created when you have successfully created a resource using POST or PUT request. It returns a link to a newly created resource using the location header.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "31) What is the procedure to remove local variables?",
        "answer": "The local variables are automatically removed once you have executed and completed the tests.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "32) What is the procedure to save the responses of API to a file in Postman?",
        "answer": "In Postman, there are two ways to save the responses of an API to a file:\nFirst, click on the download button in the response section.\nSecond, click on the arrow next to the send button. Here, you will see an option to send and download. After clicking on it, you will get a prompt Postman asking for the location of saving the response post successful request execution.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "33) What is the meaning of the status code 304?",
        "answer": "The status code 304 means NOT MODIFIED. It is used to minimize the network bandwidth usage in conditional GET requests. The response body should be empty. Headers should have a date, and location, etc.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "34) What is the use of the 301 status code in Postman?",
        "answer": "In Postman, the 301 status code is used to specify that the page has been permanently redirected from one website page to another. It tells the search engine that the old page is outdated, and the search engine has to index the new page URL.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "35) What is the method to organize requests in Postman?",
        "answer": "We can organize requests in Postman with the Collections.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "36) What are the various variable scopes provided by Postman?",
        "answer": "Following is a list of several variable scopes provided by Postman:\nGlobal Variables: Global variables allow data access between different collections, requests, and scripts. They are available throughout the workspace.\nLocal Variables: Local variables are the temporary variables that can be accessed only within the scope of requests scripts. Depending on the requirements, these variables are either scoped to a single request or single collection. These variables are not available once the script execution is completed.\nEnvironment Variables: The Environment variables allow us to tailor the requests about different development environments such as local testing, stage testing, or prod testing.\nCollection Variables: The Collection variables are independent of the environment and scoped to be available for all the requests present within the collection.\nData Variables: The Data variables come from external JSON or CSV files and define the datasets required to run the collection in Collection Runner or Newman.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "37) What is the difference between the form data and x-www-form-urlencoded?",
        "answer": "The key difference between the form data and x-www-form-urlencoded is that the URL will be prearranged when sent through x-www-form-urlencoded.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "38) In which conditions should we use global, collection, and local variables?",
        "answer": "Global variables are the general-purpose variables. They are used while passing data to other requests and are ideal for quick results and prototyping.\nCollection variables are generally used for storing some constants that do not change during the execution of the collection. These variables are used for constants that do not change during the execution and URLs / authentication credentials if only one environment exists.\nLocal variables are the temporary variables and are only available within the request that has set them or when using Newman/Collection runner during the script execution. These variables are used whenever we have to override all other variable scopes.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "39) How can we access the history of requests in Postman?",
        "answer": "In Postman, we can access the history of requests in the History tab provided on the Postman application. When we sign into the Postman account, the history will be synced across the devices where you are logged in. After clicking on any of the requests present in the History tab, the view will open the request that we saved while working on it earlier. History also contains the collection runs that were executed as summarized versions.\nWhen you click on the \"View More option\" on the request, you will see options to save, document, monitor, delete or mock the request. You can also select multiple requests by using Command or Control button and then clicking on the request.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "40) How can we stop executing requests or stop the collection run?",
        "answer": "We can stop executing requests or stop the collection run by using the following command:\npostman.setNextRequest(null);",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "41) Is it possible to reuse the authentication token for multiple requests?",
        "answer": "Yes, it is possible to reuse the authentication token for multiple requests. We can achieve it by creating a collection and adding all the requests having the same authentication token to that collection and then assigning the auth token to the same collection. We can apply it to the individual requests by selecting the \"Inherit auth from parent\" option in the Authorization tab.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "42) Where are the query parameters stored in a GET request in Postman?",
        "answer": "In the GET request, the query parameters are stored in the URL in Postman.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "43) What is executed first in a collection run?",
        "answer": "The pre-request scripts at the compilation level are executed first in a collection run.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "44) How can we access a Postman variable?",
        "answer": "We can access a Postman variable by entering the variable name as {{var}}.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "45) Which tool can be used to run Postman collections in Jenkins?",
        "answer": "We can use the Newman tool to run Postman collections in Jenkins.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "46) What are the most commonly seen status codes in Postman?",
        "answer": "Following is the list of most commonly seen status codes in Postman:\n200 (OK): Status code 200 specifies that the request was correct.\n201 (Created): Status code 201 specifies that the value wrapped with the request has been created in the database. Here, it is obvious that the request was correct.\n204 (No Content): Status code 204 specifies that the request was correct and received, but there is no content to send. It means there is no response to send to the client by the server.\n400 (Bad Request): Status code 400 specifies a bad request. A bad request means that the syntax of the request was incorrect. It appears when we have sent the wrong parameters along with the request URL or in the request's body.\n401 (Unauthorized request): Status code 401 specifies an unauthorized request. An unauthorized request is a request for which you are not authorized. This status code appears when we are not authorized to access the server or enter the wrong credentials.\n404 (Not Found): Status code 404 specifies that the server was connected, but it could not find what was requested. It simply means \"request not found\". This status code normally appears when we request a web page not available on the server.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "47) What is Scratch Pad?",
        "answer": "Postman provides a space known as Scratch Pad. The Scratch Pad facilitates us to work without being connected to Postman servers and also provides the flexibility to utilize some of the features of Postman offline. These features include collection creation, creating requests, and the ability to send requests. The Scratch Pads are stored locally, and once logged in; the work is saved into the workspace.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "48) What are the different Request Method types in Postman?",
        "answer": "The different Request Method types in Postman are as follows:\nGet\nPost\nPut\nDelete\nPatch\nHead\nDelete",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "49) How can you iterate a request 100 times in Postman?",
        "answer": "We can iterate a request 100 times in Postman using Collection Runner.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "50) What are some examples of the JS libraries available in Postman?",
        "answer": "Some examples of the JS libraries available in Postman are Lodash, Moment, GUID, etc.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "51) What is the full form of GUID? Where is it used?",
        "answer": "GUID is an acronym that stands for Global Unique Identifier. It is a set of hexadecimal digits separated by hyphens and solves the purpose of uniqueness.\nIn Postman, it is used to generate and send a random value to APIs.\nExample:\n{  \n\"id\": \"{{$guid}}\",  \n}",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "52) Which programming language is used for Postman tests?",
        "answer": "JavaScript is used for Postman tests.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "53) How can you generate random numbers of a given range in Postman?",
        "answer": "In Postman, we can generate random numbers of a given range using some script. Suppose you want to generate numbers between the range of 1 to N, then use the following pre-request script:\npm.globals.set('randomNumber', Math.floor(Math.random()* N));  \nNow, use this variable in the URL as {{randomNumber}}",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "54) How can we view request logs and response logs in Postman?",
        "answer": "We can view request logs and response logs in Postman through the Postman Console window.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "55) What is the binary form in the Post method in Postman?",
        "answer": "In Postman, the binary form is designed to send the information in a specific format that cannot be entered manually. For example, images, files, etc. Everything in a computer is converted to binary.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "56) How can you organize requests in Postman?",
        "answer": "In Postman, we can use Collections to organize requests.",
        "reference": "javatpoint.com",
        "role": "postman"
    },
    {
        "question": "57) Which method is preferred to write the tests?/ JavaScript or Functional?",
        "answer": "The functional method is advised and recommended while writing tests in Postman. Although we can use JavaScript methods, there has been no notice of ending the support for the JavaScript method.",
        "reference": "javatpoint.com",
        "role": "postman"
    }
]