[
    {
        "question": "1) What do you understand by OOP?",
        "answer": "OOP stands for object-oriented programming. It is a programming paradigm that revolves around the object rather than function and procedure. In other words, it is an approach for developing applications that emphasize on objects. An object is a real word entity that contains data and code. It allows binding data and code together.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "There are various OOP languages but the most widely used are:\nADVERTISEMENT\nPython\nJava\nGo\nDart\nC++\nC#\nRuby",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) What is the purpose of using OOPs concepts?",
        "answer": "The aim of OOP is to implement real-world entities like inheritance, hiding, polymorphism in programming. The main purpose of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) What are the four main features of OOPs?",
        "answer": "The OOP has the following four features:\nInheritance\nEncapsulation\nPolymorphism\nData Abstraction",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) Why OOP is so popular?",
        "answer": "OOPs, programming paradigm is considered as a better style of programming. Not only it helps in writing a complex piece of code easily, but it also allows users to handle and maintain them easily as well. Not only that, the main pillar of OOPs - Data Abstraction, Encapsulation, Inheritance, and Polymorphism, makes it easy for programmers to solve complex scenarios. As a result of these, OOPs is so popular.",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What are the advantages and disadvantages of OOP?",
        "answer": "Advantages of OOP\nIt follows a bottom-up approach.\nIt models the real word well.\nIt allows us the reusability of code.\nAvoids unnecessary data exposure to the user by using the abstraction.\nOOP forces the designers to have a long and extensive design phase that results in better design and fewer flaws.\nDecompose a complex problem into smaller chunks.\nProgrammer are able to reach their goals faster.\nMinimizes the complexity.\nEasy redesign and extension of code that does not affect the other functionality.\nDisadvantages of OOP\nProper planning is required.\nProgram design is tricky.\nProgrammer should be well skilled.\nClasses tend to be overly generalized.",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What are the limitations of OOPs?",
        "answer": "Requires intensive testing processes.\nSolving problems takes more time as compared to Procedure Oriented Programming.\nThe size of the programs created using this approach may become larger than the programs written using the procedure-oriented programming approach.\nSoftware developed using this approach requires a substantial amount of pre-work and planning.\nOOP code is difficult to understand if you do not have the corresponding class documentation.\nIn certain scenarios, these programs can consume a large amount of memory.\nNot suitable for small problems.\nTakes more time to solve problems.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What are the differences between object-oriented programming and structural programming?",
        "answer": "Object-oriented Programming Structural Programming\nIt follows a bottom-up approach. It follows a top-down approach.\nIt provides data hiding. Data hiding is not allowed.\nIt is used to solve complex problems. It is used to solve moderate problems.\nIt allows reusability of code that reduces redundancy of code. Reusability of code is not allowed.\nIt is based on objects rather than functions and procedures. It provides a logical structure to a program in which the program is divided into functions.\nIt provides more security as it has a data hiding feature. It provides less security as it does not support the data hiding feature.\nMore abstraction more flexibility. Less abstraction less flexibility.\nIt focuses on data. It focuses on the process or logical structure.",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What do you understand by pure object-oriented language? Why Java is not a pure object-oriented programming language?",
        "answer": "The programming language is called pure object-oriented language that treats everything inside the program as an object. The primitive types are not supported by the pure OOPs language. There are some other features that must satisfy by a pure object-oriented language:\nEncapsulation\nInheritance\nPolymorphism\nAbstraction\nAll predefined types are objects\nAll user-defined types are objects\nAll operations performed on objects must be only through methods exposed to the objects.\nJava is not a pure object-oriented programming language because pre-defined data types in Java are not treated as objects. Hence, it is not an object-oriented language.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Class: A class is a blueprint or template of an object. It is a user-defined data type. Inside a class, we define variables, constants, member functions, and other functionality. It does not consume memory at run time. Note that classes are not considered as a data structure. It is a logical entity. It is the best example of data binding.\nObject: An object is a real-world entity that has attributes, behavior, and properties. It is referred to as an instance of the class. It contains member functions, variables that we have defined in the class. It occupies space in the memory. Different objects have different states or attributes, and behaviors.\nThe following figure best illustrates the class and object.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What are the differences between class and object?",
        "answer": "Class Object\nIt is a logical entity. It is a real-world entity.\nIt is conceptual. It is real.\nIt binds data and methods together into a single unit. It is just like a variable of a class.\nIt does not occupy space in the memory. It occupies space in the memory.\nIt is a data type that represents the blueprint of an object. It is an instance of the class.\nIt is declared once. Multiple objects can be declared as and when required.\nIt uses the keyword class when declared. It uses the new keyword to create an object.\nA class can exist without any object. Objects cannot exist without a class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What are the key differences between class and structure?",
        "answer": "Class Structure\nClass is a group of common objects that shares common properties. The structure is a collection of different data types.\nIt deals with data members and member functions. It deals with data members only.\nIt supports inheritance. It does not support inheritance.\nMember variables cannot be initialized directly. Member variables can be initialized directly.\nIt is of type reference. It is of a type value.\nIt's members are private by default. It's members are public by default.\nThe keyword class defines a class. The keyword struct defines a structure.\nAn instance of a class is an object. An instance of a structure is a structure variable.\nUseful while dealing with the complex data structure. Useful while dealing with the small data structure.",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) What is the concept of access specifiers when should we use these?",
        "answer": "In OOPs language, access specifiers are reserved keyword that is used to set the accessibility of the classes, methods and other members of the class. It is also known as access modifiers. It includes public, private, and protected. There is some other access specifier that is language-specific. Such as Java has another access specifier default. These access specifiers play a vital role in achieving one of the major functions of OOP, i.e. encapsulation. The following table depicts the accessibility.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) What are the manipulators in OOP and how it works?",
        "answer": "Manipulators are helping functions. It is used to manipulate or modify the input or output stream. The modification is possible by using the insertion (<<) and extraction (>>) operators. Note that the modification of input or output stream does not mean to change the values of variables. There are two types of manipulators with arguments or without arguments.\nThe example of manipulators that do not have arguments is endl, ws, flush, etc. Manipulators with arguments are setw(val), setfill(c), setbase(val), setiosflags(flag). Some other manipulators are showpos, fixed, scientific, hex, dec, oct, etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What are the rules for creating a constructor?",
        "answer": "It cannot have a return type.\nIt must have the same name as the Class name.\nIt cannot be marked as static.\nIt cannot be marked as abstract.\nIt cannot be overridden.\nIt cannot be final.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What are the differences between the constructor and the method in Java?",
        "answer": "Constructor Method\nConstructor has the same name as the class name. The method name and class name are not the same.\nIt is a special type of method that is used to initialize an object of its class. It is a set of instructions that can be invoked at any point in a program.\nIt creates an instance of a class. It is used to execute Java code.\nIt is invoked implicitly when we create an object of the class. It gets executed when we explicitly called it.\nIt cannot be inherited by the subclass. It can be inherited by the subclass.\nIt does not have any return type. It must have a return type.\nIt cannot be overridden in Java. It can be overridden in Java.\nIt cannot be declared as static. It can be declared as static.\nJava compiler automatically provides a default constructor. Java compiler does not provide any method by default.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) How does procedural programming be different from OOP differ?",
        "answer": "Procedural Oriented Programming Object-Oriented Programming\nIt is based on functions. It is based on real-world objects.\nIt follows a top-down approach. It follows a bottom-up approach.\nIt is less secure because there is no proper way to hide data. It provides more security.\nData is visible to the whole program. It encapsulates the data.\nReuse of code is not allowed. The code can be reused.\nModification and extension of code are not easy. We can easily modify and extend code.\nExamples of POP are C, VB, FORTRAN, Pascal, etc. Examples of OOPs are C++, Java, C#, .NET, etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What are the differences between error and exception?",
        "answer": "Basis of Comparison Exception Error\nRecoverable/ Irrecoverable Exception can be recovered by using the try-catch block. An error cannot be recovered.\nType It can be classified into two categories i.e. checked and unchecked. All errors in Java are unchecked.\nOccurrence It occurs at compile time or run time. It occurs at run time.\nPackage It belongs to java.lang.Exception package. It belongs to java.lang.Error package.\nKnown or unknown Only checked exceptions are known to the compiler. Errors will not be known to the compiler.\nCauses It is mainly caused by the application itself. It is mostly caused by the environment in which the application is running.\nExample Checked Exceptions: SQLException, IOException\nUnchecked Exceptions: ArrayIndexOutOfBoundException, NullPointerException, ArithmaticException Java.lang.StackOverFlow, java.lang.OutOfMemoryError",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What are the characteristics of an abstract class?",
        "answer": "An abstract class is a class that is declared as abstract. It cannot be instantiated and is always used as a base class. The characteristics of an abstract class are as follows:\nInstantiation of an abstract class is not allowed. It must be inherited.\nAn abstract class can have both abstract and non-abstract methods.\nAn abstract class must have at least one abstract method.\nYou must declare at least one abstract method in the abstract class.\nIt is always public.\nIt is declared using the abstract\nThe purpose of an abstract class is to provide a common definition of the base class that multiple derived classes can share.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) Is it possible for a class to inherit the constructor of its base class?",
        "answer": "No, a class cannot inherit the constructor of its base class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) Identify which OOPs concept should be used in the following scenario?",
        "answer": "A group of 5 friends, one boy never gives any contribution when the group goes for the outing. Suddenly a beautiful girl joins the same group. The boy who never contributes is now spending a lot of money for the group.\n\nRuntime Polymorphism",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What is composition?",
        "answer": "Composition is one of the vital concepts in OOP. It describes a class that references one or more objects of other classes in instance variables. It allows us to model a has-a association between objects. We can find such relationships in the real world. For example, a car has an engine. the following figure depicts the same\n\n\nThe main benefits of composition are:\nReuse existing code\nDesign clean APIs\nChange the implementation of a class used in a composition without adapting any external clients.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What are the differences between copy constructor and assignment operator?",
        "answer": "The copy constructor and the assignment operator (=) both are used to initialize one object using another object. The main difference between the two is that the copy constructor allocates separate memory to both objects i.e. existing object and newly created object while the assignment operator does not allocate new memory for the newly created object. It uses the reference variable that points to the previous memory block (where an old object is located).\nSyntax of Copy Constructor\nclass_name (const class_name &obj)  \n{  \n//body  \n}  \nSyntax of Assignment Operator\nclass_name obj1, obj2;  \nobj1=obj2;  \n\nCopy Constructor Assignment Operator\nIt is an overloaded constructor. It is an operator.\nIt creates a new object as a copy of an existing object. It assigns the value of one object to another object both of which already exist.\nThe copy constructor is used when a new object is created with some existing object. It is used when we want to assign an existing object to a new object.\nBoth the objects use separate memory locations. Both objects share the same memory but use the two different reference variables that point to the same location.\nIf no copy constructor is defined in the class, the compiler provides one. If the assignment operator is not overloaded then the bitwise copy will be made.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) What is the difference between Composition and Inheritance?",
        "answer": "Inheritance means an object inheriting reusable properties of the base class. Compositions mean that an object holds other objects. In Inheritance, there is only one object in memory (derived object) whereas, in Composition, the parent object holds references of all composed objects. From a design perspective, inheritance is \"is a\" relationship among objects whereas Composition is \"has a\" relationship among objects.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is constructor chaining?",
        "answer": "In OOPs, constructor chaining is a sequence of invoking constructors (of the same class) upon initializing an object. It is used when we want to invoke a number of constructors, one after another by using only an instance. In other words, if a class has more than one constructor (overloaded) and one of them tries to invoke another constructor, this process is known as constructor chaining. In C++, it is known as constructor delegation and it is present from C++ 11.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) What are the limitations of inheritance?",
        "answer": "The main disadvantage of using inheritance is two classes get tightly coupled. That means one cannot be used independently of the other. If a method or aggregate is deleted in the Super Class, we have to refactor using that method in SubClass.\nInherited functions work slower compared to normal functions.\nNeed careful implementation otherwise leads to improper solutions.",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) What are the differences between Inheritance and Polymorphism?",
        "answer": "Inheritance Polymorphism\nInheritance is one in which a derived class inherits the already existing class's features. Polymorphism is one that you can define in different forms.\nIt refers to using the structure and behavior of a superclass in a subclass. It refers to changing the behavior of a superclass in the subclass.\nIt is required in order to achieve polymorphism. In order to achieve polymorphism, inherence is not required.\nIt is applied to classes. It is applied to functions and methods.\nIt can be single, hybrid, multiple, hierarchical, multipath, and multilevel inheritance. There are two types of polymorphism compile time and run time.\nIt supports code reusability and reduces lines of code. It allows the object to decide which form of the function to be invoked at run-time (overriding) and compile-time (overloading).",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) What is Coupling in OOP and why it is helpful?",
        "answer": "In programming, separation of concerns is known as coupling. It means that an object cannot directly change or modify the state or behavior of other objects. It defines how closely two objects are connected together. There are two types of coupling, loose coupling, and tight coupling.\nObjects that are independent of one another and do not directly modify the state of other objects is called loosely coupled. Loose coupling makes the code more flexible, changeable, and easier to work with.\nObjects that depend on other objects and can modify the states of other objects are called tightly coupled. It creates conditions where modifying the code of one object also requires changing the code of other objects. The reuse of code is difficult in tight coupling because we cannot separate the code.\nSince using loose coupling is always a good habit.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Scope Resolution Operator (::)\nTernary Operator (? :)\nMember Access or Dot Operator (.)\nPointer to Member Operator (.*)\nsizeof operator",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) What is the difference between new and override?",
        "answer": "The new modifier instructs the compiler to use the new implementation instead of the base class function. Whereas, Override modifier helps to override the base class function.\nvirtual: indicates that a method may be overridden by an inheritor\noverride: Overrides the functionality of a virtual method in a base class, providing different functionality.\nnew: Hides the original method (which doesn't have to be virtual), providing different functionality. This should only be used where it is absolutely necessary.\nWhen you hide a method, you can still access the original method by upcasting to the base class. This is useful in some scenarios, but dangerous.",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) Explain overloading and overriding with example?",
        "answer": "Overloading\nOverloading is a concept in OOP when two or more methods in a class with the same name but the method signature is different. It is also known as compile-time polymorphism. For example, in the following code snippet, the method add() is an overloaded method.\npublic class Sum  \n{  \nint a, b, c;  \npublic int add();  \n{  \nc=a+b;  \nreturn c;  \n}  \nadd(int a, int b);  \n{  \n//logic  \n}  \nadd(int a, int b, int c);  \n{  \n//logic  \n}  \nadd(double a, double b, double c);  \n{  \n//logic  \n}  \n//statements  \n}  \n\n\nOverriding\nIf a method with the same method signature is presented in both child and parent class is known as method overriding. The methods must have the same number of parameters and the same type of parameter. It overrides the value of the parent class method. It is also known as runtime polymorphism. For example, consider the following program.\nclass Dog  \n{  \npublic void bark()  \n{  \nSystem.out.println(\"woof \");  \n}  \n}  \nclass Hound extends Dog  \n{  \npublic void sniff()  \n{  \nSystem.out.println(\"sniff \");  \n}  \n//overrides the method bark() of the Dog class  \npublic void bark()  \n{  \nSystem.out.println(\"bowl\");  \n}  \n}  \npublic class OverridingExample  \n{  \npublic static void main(String args[])  \n{  \nDog dog = new Hound();  \n//invokes the bark() method of the Hound class  \ndog.bark();  \n}  \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) What is Cohesion in OOP?",
        "answer": "In OOP, cohesion refers to the degree to which the elements inside a module belong together. It measures the strength of the relationship between the module and data. In short, cohesion represents the clarity of the responsibilities of a module. It is often contrasted with coupling.\nIt focuses on a how single module or class is intended. Higher the cohesiveness of the module or class, better is the object-oriented design.\n\nThere are two types of cohesion, i.e. High and Low.\nHigh cohesion is associated with several required qualities of software including robustness, reliability, and understandability.\nLow cohesion is associated with unwanted qualities such as being difficult to maintain, test, reuse, or even understand.\nHigh cohesion often associates with loose coupling and vice versa.",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) Give a real-world example of polymorphism?",
        "answer": "The general meaning of Polymorphism is one that has different forms. The best real-world example of polymorphism is a person that plays different roles at different palaces or situations.\nAt home a person can play the role of father, husband, and son.\nAt the office the same person plays the role of boss or employee.\nIn public transport, he plays the role of passenger.\nIn the hospital, he can play the role of doctor or patient.\nAt the shop, he plays the role of customer.\n\nHence, the same person possesses different behavior in different situations. It is called polymorphism.",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) What is the difference between a base class and a superclass?",
        "answer": "The base class is the root class- the most generalized class. At the same time, the superclass is the immediate parent class from which the other class inherits.",
        "reference": "javatpoint.com"
    },
    {
        "question": "35) What is data abstraction and how can we achieve data abstraction?",
        "answer": "It is one of the most important features of OOP. It allows us to show only essential data or information to the user and hides the implementation details from the user. A real-world example of abstraction is driving a car. When we drive a car, we do not need to know how the engine works (implementation) we only know how ECG works.\nThere are two ways to achieve data abstraction\nAbstract class\nAbstract method",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What are the levels of data abstraction?",
        "answer": "There are three levels of data abstraction:\nPhysical Level: It is the lowest level of data abstraction. It shows how the data is actually stored in memory.\nLogical Level: It includes the information that is actually stored in the database in the form of tables. It also stores the relationship among the data entities in relatively simple structures. At this level, the information available to the user at the view level is unknown.\nView Level: It is the highest level of data abstraction. The actual database is visible to the user. It exists to ease the availability of the database by an individual user.",
        "reference": "javatpoint.com"
    },
    {
        "question": "37) What are the types of variables in OOP?",
        "answer": "There are three types of variables:\n\nInstance Variable: It is an object-level variable. It should be declared inside a class but must be outside a method, block, and constructor. It is created when an object is created by using the new keyword. It can be accessed directly by calling the variable name inside the class.\nStatic Variable: It is a class-level variable. It is declared with keyword static inside a class but must be outside of the method, block, and constructor. It stores in static memory. Its visibility is the same as the instance variable. The default value of a static variable is the same as the instance variable. It can be accessed by calling the class_name.variable_name.\nLocal Variable: It is a method-level variable. It can be declared in method, constructor, or block. Note that the use of an access modifier is not allowed with local variables. It is visible only to the method, block, and constructor in which it is declared. Internally, it is implemented at the stack level. It must be declared and initialized before use.\nAnother type of variable is used in object-oriented programming is the reference variable.\nReference Variable: It is a variable that points to an object of the class. It points to the location of the object that is stored in the memory.",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) Is it possible to overload a constructor?",
        "answer": "Yes, the constructors can be overloaded by changing the number of arguments accepted by the constructor or by changing the data type of the parameters. For example:\npublic class Demo  \n{  \nDemo()  \n{  \n//logic  \n}  \nDemo(String str) //overloaded constructor   \n{  \n//logic  \n}  \nDemo(double d) //overloaded constructor  \n{  \n//logic  \n}  \n//statements  \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "39) Can we overload the main() method in Java also give an example?",
        "answer": "Yes, we can also overload the main() method in Java. Any number of main() methods can be defined in the class, but the method signature must be different. Consider the following code.\nclass OverloadMain    \n{    \npublic static void main(int a)  //overloaded main method    \n{    \nSystem.out.println(a);    \n}    \npublic static void main(String args[])    \n{       \nSystem.out.println(\"main method invoked\");    \nmain(6);    \n}    \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "40) Consider the following scenario:",
        "answer": "If a class Demo has a static block and a main() method. A print statement is presented in both. The question is which one will first execute, static block or the main() method, and why?\nJVM first executes the static block on a priority basis. It means JVM first goes to static block even before it looks for the main() method in the program. After that main() method will be executed.\nclass Demo    \n{    \nstatic                  //static block    \n{    \nSystem.out.println(\"Static block\");    \n}    \npublic static void main(String args[])  //static method    \n{    \nSystem.out.println(\"Static method\");    \n}    \n}",
        "reference": "javatpoint.com"
    }
]