[
    {
        "question": "1) What is the Collection framework in Java?",
        "answer": "Collection Framework is a combination of classes and interface, which is used to store and manipulate the data in the form of objects. It provides various classes such as ArrayList, Vector, Stack, and HashSet, etc. and interfaces such as List, Queue, Set, etc. for this purpose.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) What are the main differences between array and collection?",
        "answer": "Array and Collection are somewhat similar regarding storing the references of objects and manipulating the data, but they differ in many ways. The main differences between the array and Collection are defined below:\nADVERTISEMENT\nArrays are always of fixed size, i.e., a user can not increase or decrease the length of the array according to their requirement or at runtime, but In Collection, size can be changed dynamically as per need.\nArrays can only store homogeneous or similar type objects, but in Collection, heterogeneous objects can be stored.\nArrays cannot provide the ?ready-made? methods for user requirements as sorting, searching, etc. but Collection includes readymade methods to use.",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) Explain various interfaces used in Collection framework?",
        "answer": "Collection framework implements various interfaces, Collection interface and Map interface (java.util.Map) are the mainly used interfaces of Java Collection Framework. List of interfaces of Collection Framework is given below:\nADVERTISEMENT\n\n1. Collection interface: Collection (java.util.Collection) is the primary interface, and every collection must implement this interface.\nSyntax:\npublic interface Collection<E>extends Iterable  \nWhere <E> represents that this interface is of Generic type\n2. List interface: List interface extends the Collection interface, and it is an ordered collection of objects. It contains duplicate elements. It also allows random access of elements.\nSyntax:\npublic interface List<E> extends Collection<E>  \n3. Set interface: Set (java.util.Set) interface is a collection which cannot contain duplicate elements. It can only include inherited methods of Collection interface\n\nSyntax:\npublic interface Set<E> extends Collection<E>  \nQueue interface: Queue (java.util.Queue) interface defines queue data structure, which stores the elements in the form FIFO (first in first out).\nSyntax:\npublic interface Queue<E> extends Collection<E>  \n4. Dequeue interface: it is a double-ended-queue. It allows the insertion and removal of elements from both ends. It implants the properties of both Stack and queue so it can perform LIFO (Last in first out) stack and FIFO (first in first out) queue, operations.\nSyntax:\npublic interface Dequeue<E> extends Queue<E>  \n5. Map interface: A Map (java.util.Map) represents a key, value pair storage of elements. Map interface does not implement the Collection interface. It can only contain a unique key but can have duplicate elements. There are two interfaces which implement Map in java that are Map interface and Sorted Map.",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) What is the difference between ArrayList and Vector?",
        "answer": "No. ArrayList Vector\n1) ArrayList is not synchronized. Vector is synchronized.\n2) ArrayList is not a legacy class. Vector is a legacy class.\n3) ArrayList increases its size by 50% of the array size. Vector increases its size by doubling the array size.\n4) ArrayList is not ?thread-safe? as it is not synchronized. Vector list is ?thread-safe? as it?s every method is synchronized.",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) What is the difference between ArrayList and LinkedList?",
        "answer": "No. ArrayList LinkedList\n1) ArrayList uses a dynamic array. LinkedList uses a doubly linked list.\n2) ArrayList is not efficient for manipulation because too much is required. LinkedList is efficient for manipulation.\n3) ArrayList is better to store and fetch data. LinkedList is better to manipulate data.\n4) ArrayList provides random access.\nLinkedList does not provide random access.\n5)\nArrayList takes less memory overhead as it stores only object LinkedList takes more memory overhead, as it stores the object as well as the address of that object.",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What is the difference between Iterator and ListIterator?",
        "answer": "Iterator traverses the elements in the forward direction only whereas ListIterator traverses the elements into forward and backward direction.\nNo. Iterator ListIterator\n1) The Iterator traverses the elements in the forward direction only. ListIterator traverses the elements in backward and forward directions both.\n2) The Iterator can be used in List, Set, and Queue. ListIterator can be used in List only.\n3) The Iterator can only perform remove operation while traversing the collection. ListIterator can perform ?add,? ?remove,? and ?set? operation while traversing the collection.",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What is the difference between Iterator and Enumeration?",
        "answer": "No. Iterator Enumeration\n1) The Iterator can traverse legacy and non-legacy elements. Enumeration can traverse only legacy elements.\n2) The Iterator is fail-fast. Enumeration is not fail-fast.\n3) The Iterator is slower than Enumeration. Enumeration is faster than Iterator.\n4) The Iterator can perform remove operation while traversing the collection. The Enumeration can perform only traverse operation on the collection.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What is the difference between List and Set?",
        "answer": "The List and Set both extend the collection interface. However, there are some differences between the both which are listed below.\nThe List can contain duplicate elements whereas Set includes unique items.\nThe List is an ordered collection which maintains the insertion order whereas Set is an unordered collection which does not preserve the insertion order.\nThe List interface contains a single legacy class which is Vector class whereas Set interface does not have any legacy class.\nThe List interface can allow n number of null values whereas Set interface only allows a single null value.",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What is the difference between HashSet and TreeSet?",
        "answer": "The HashSet and TreeSet, both classes, implement Set interface. The differences between the both are listed below.\nHashSet maintains no order whereas TreeSet maintains ascending order.\nHashSet impended by hash table whereas TreeSet implemented by a Tree structure.\nHashSet performs faster than TreeSet.\nHashSet is backed by HashMap whereas TreeSet is backed by TreeMap.",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) What is the difference between Set and Map?",
        "answer": "The differences between the Set and Map are given below.\nSet contains values only whereas Map contains key and values both.\nSet contains unique values whereas Map can contain unique Keys with duplicate values.\nSet holds a single number of null value whereas Map can include a single null key with n number of null values.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What is the difference between HashSet and HashMap?",
        "answer": "The differences between the HashSet and HashMap are listed below.\nHashSet contains only values whereas HashMap includes the entry (key, value). HashSet can be iterated, but HashMap needs to convert into Set to be iterated.\nHashSet implements Set interface whereas HashMap implements the Map interface\nHashSet cannot have any duplicate value whereas HashMap can contain duplicate values with unique keys.\nHashSet contains the only single number of null value whereas HashMap can hold a single null key with n number of null values.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What is the difference between HashMap and TreeMap?",
        "answer": "The differences between the HashMap and TreeMap are given below.\nHashMap maintains no order, but TreeMap maintains ascending order.\nHashMap is implemented by hash table whereas TreeMap is implemented by a Tree structure.\nHashMap can be sorted by Key or value whereas TreeMap can be sorted by Key.\nHashMap may contain a null key with multiple null values whereas TreeMap cannot hold a null key but can have multiple null values.",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) What is the difference between HashMap and Hashtable?",
        "answer": "No. HashMap Hashtable\n1) HashMap is not synchronized. Hashtable is synchronized.\n2) HashMap can contain one null key and multiple null values. Hashtable cannot contain any null key or null value.\n3) HashMap is not ?thread-safe,? so it is useful for non-threaded applications. Hashtable is thread-safe, and it can be shared between various threads.\n4) 4) HashMap inherits the AbstractMap class Hashtable inherits the Dictionary class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) What is the difference between Collection and Collections?",
        "answer": "The differences between the Collection and Collections are given below.\nThe Collection is an interface whereas Collections is a class.\nThe Collection interface provides the standard functionality of data structure to List, Set, and Queue. However, Collections class is to sort and synchronize the collection elements.\nThe Collection interface provides the methods that can be used for data structure whereas Collections class provides the static methods which can be used for various operation on a collection.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What is the difference between Comparable and Comparator?",
        "answer": "No. Comparable Comparator\n1) Comparable provides only one sort of sequence. The Comparator provides multiple sorts of sequences.\n2) It provides one method named compareTo(). It provides one method named compare().\n3) It is found in java.lang package. It is located in java.util package.\n4) If we implement the Comparable interface, The actual class is modified. The actual class is not changed.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What do you understand by BlockingQueue?",
        "answer": "BlockingQueue is an interface which extends the Queue interface. It provides concurrency in the operations like retrieval, insertion, deletion. While retrieval of any element, it waits for the queue to be non-empty. While storing the elements, it waits for the available space. BlockingQueue cannot contain null elements, and implementation of BlockingQueue is thread-safe.\nSyntax:\npublic interface BlockingQueue<E> extends Queue <E>",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) What is the advantage of Properties file?",
        "answer": "If you change the value in the properties file, you don't need to recompile the java class. So, it makes the application easy to manage. It is used to store information which is to be changed frequently. Consider the following example.\nimport java.util.*;  \nimport java.io.*;  \npublic class Test {  \npublic static void main(String[] args)throws Exception{  \n    FileReader reader=new FileReader(\"db.properties\");  \n          Properties p=new Properties();  \n    p.load(reader);  \n          System.out.println(p.getProperty(\"user\"));  \n    System.out.println(p.getProperty(\"password\"));  \n}  \n}  \nOutput\nsystem\noracle",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What does the hashCode() method?",
        "answer": "The hashCode() method returns a hash code value (an integer number).\n\nThe hashCode() method returns the same integer number if two keys (by calling equals() method) are identical.\nHowever, it is possible that two hash code numbers can have different or the same keys.\nIf two objects do not produce an equal result by using the equals() method, then the hashcode() method will provide the different integer result for both the objects.",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) Why we override equals() method?",
        "answer": "The equals method is used to check whether two objects are the same or not. It needs to be overridden if we want to check the objects based on the property.\nFor example, Employee is a class that has 3 data members: id, name, and salary. However, we want to check the equality of employee object by the salary. Then, we need to override the equals() method.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) How to synchronize List, Set and Map elements?",
        "answer": "Yes, Collections class provides methods to make List, Set or Map elements as synchronized:\npublic static List synchronizedList(List l){}\npublic static Set synchronizedSet(Set s){}\npublic static SortedSet synchronizedSortedSet(SortedSet s){}\npublic static Map synchronizedMap(Map m){}\npublic static SortedMap synchronizedSortedMap(SortedMap m){}",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What is the advantage of the generic collection?",
        "answer": "There are three main advantages of using the generic collection.\nIf we use the generic class, we don't need typecasting.\nIt is type-safe and checked at compile time.\nGeneric confirms the stability of the code by making it bug detectable at compile time.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What is hash-collision in Hashtable and how it is handled in Java?",
        "answer": "Two different keys with the same hash value are known as hash-collision. Two separate entries will be kept in a single hash bucket to avoid the collision. There are two ways to avoid hash-collision.\nSeparate Chaining\nOpen Addressing",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What is the Dictionary class?",
        "answer": "The Dictionary class provides the capability to store key-value pairs.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) What is the default size of load factor in hashing based collection?",
        "answer": "The default size of load factor is 0.75. The default capacity is computed as initial capacity * load factor. For example, 16 * 0.75 = 12. So, 12 is the default capacity of Map.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What do you understand by fail-fast?",
        "answer": "The Iterator in java which immediately throws ConcurrentmodificationException, if any structural modification occurs in, is called as a Fail-fast iterator. Fail-fats iterator does not require any extra space in memory.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) What is the difference between Array and ArrayList?",
        "answer": "The main differences between the Array and ArrayList are given below.\nSN Array ArrayList\n1 The Array is of fixed size, means we cannot resize the array as per need. ArrayList is not of the fixed size we can change the size dynamically.\n2 Arrays are of the static type. ArrayList is of dynamic size.\n3 Arrays can store primitive data types as well as objects. ArrayList cannot store the primitive data types it can only store the objects.",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) What is the difference between the length of an Array and size of ArrayList?",
        "answer": "The length of an array can be obtained using the property of length whereas ArrayList does not support length property, but we can use size() method to get the number of objects in the list.\nFinding the length of the array\nInt [] array = new int[4];  \nSystem.out.println(\"The size of the array is \" + array.length);  \n          \nFinding the size of the ArrayList\nArrayList<String> list=new ArrayList<String>();    \nlist.add(\"ankit\");    \nlist.add(\"nippun\");  \nSystem.out.println(list.size());",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) How to convert ArrayList to Array and Array to ArrayList?",
        "answer": "We can convert an Array to ArrayList by using the asList() method of Arrays class. asList() method is the static method of Arrays class and accepts the List object. Consider the following syntax:\nArrays.asList(item)  \nWe can convert an ArrayList to Array using toArray() method of the ArrayList class. Consider the following syntax to convert the ArrayList to the List object.\nList_object.toArray(new String[List_object.size()])",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) How to make Java ArrayList Read-Only?",
        "answer": "We can obtain java ArrayList Read-only by calling the Collections.unmodifiableCollection() method. When we define an ArrayList as Read-only then we cannot perform any modification in the collection through  add(), remove() or set() method.",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) How to remove duplicates from ArrayList?",
        "answer": "There are two ways to remove duplicates from the ArrayList.\nUsing HashSet: By using HashSet we can remove the duplicate element from the ArrayList, but it will not then preserve the insertion order.\nUsing LinkedHashSet: We can also maintain the insertion order by using LinkedHashSet instead of HashSet.\nThe Process to remove duplicate elements from ArrayList using the LinkedHashSet:\nCopy all the elements of ArrayList to LinkedHashSet.\nEmpty the ArrayList using clear() method, which will remove all the elements from the list.\nNow copy all the elements of LinkedHashset to ArrayList.",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) How to reverse ArrayList?",
        "answer": "To reverse an ArrayList, we can use reverse() method of Collections class. Consider the following example.\nimport java.util.ArrayList;  \nimport java.util.Collection;  \nimport java.util.Collections;  \nimport java.util.Iterator;  \nimport java.util.List;  \npublic class ReverseArrayList {  \npublic static void main(String[] args) {  \n     List list = new ArrayList<>();  \n     list.add(10);  \n     list.add(50);  \n     list.add(30);  \n     Iterator i = list.iterator();  \n     System.out.println(\"printing the list....\");  \n     while(i.hasNext())  \n     {  \n         System.out.println(i.next());  \n     }  \n     Iterator i2 = list.iterator();  \n     Collections.reverse(list);  \n     System.out.println(\"printing list in reverse order....\");  \n     while(i2.hasNext())  \n     {  \n         System.out.println(i2.next());  \n     }  \n    }  \n}  \nOutput\nprinting the list....\n10\n50\n30\nprinting list in reverse order....\n30\n50\n10",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) How to sort ArrayList in descending order?",
        "answer": "To sort the ArrayList in descending order, we can use the reverseOrder method of Collections class. Consider the following example.\nimport java.util.ArrayList;  \nimport java.util.Collection;  \nimport java.util.Collections;  \nimport java.util.Comparator;  \nimport java.util.Iterator;  \nimport java.util.List;  \n  public class ReverseArrayList {  \npublic static void main(String[] args) {  \n     List list = new ArrayList<>();  \n     list.add(10);  \n     list.add(50);  \n     list.add(30);  \n     list.add(60);  \n     list.add(20);  \n     list.add(90);  \n            Iterator i = list.iterator();  \n     System.out.println(\"printing the list....\");  \n     while(i.hasNext())  \n     {  \n         System.out.println(i.next());  \n     }  \n          Comparator cmp = Collections.reverseOrder();  \n    Collections.sort(list,cmp);  \n     System.out.println(\"printing list in descending order....\");  \n     Iterator i2 = list.iterator();  \n     while(i2.hasNext())  \n     {  \n         System.out.println(i2.next());  \n     }  \n       }  \n}  \nOutput\nprinting the list....\n10\n50\n30\n60\n20\n90\nprinting list in descending order....\n90\n60\n50\n30\n20\n10",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) How to synchronize ArrayList?",
        "answer": "We can synchronize ArrayList in two ways.\nUsing Collections.synchronizedList() method\nUsing CopyOnWriteArrayList<T>",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) When to use ArrayList and LinkedList?",
        "answer": "LinkedLists are better to use for the update operations whereas ArrayLists are better to use for the search operations.\n\n\n\u2190 Prev\nNext \u2192",
        "reference": "javatpoint.com"
    }
]