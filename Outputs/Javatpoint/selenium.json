[
    {
        "question": "Basic Level - Selenium Interview Questions",
        "answer": "1) What is test automation or automation testing?\nAutomation testing uses automation tools to write and execute test cases, no manual involvement is necessary for executing an automated test suite. Testers prefer automation tools to write test scripts and test cases and then group into test suites.\nADVERTISEMENT\nAutomation testing enables the use of specialized tools to automate the execution of manually designed test cases without any human intervention. Automation testing tools can access the test data, controls the execution of tests and compares the actual result against the expected result. Consequently, generating detailed test reports of the system under test.",
        "reference": "javatpoint.com"
    },
    {
        "question": "1) What is test automation or automation testing?",
        "answer": "Automation testing uses automation tools to write and execute test cases, no manual involvement is necessary for executing an automated test suite. Testers prefer automation tools to write test scripts and test cases and then group into test suites.\nADVERTISEMENT\nAutomation testing enables the use of specialized tools to automate the execution of manually designed test cases without any human intervention. Automation testing tools can access the test data, controls the execution of tests and compares the actual result against the expected result. Consequently, generating detailed test reports of the system under test.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) What are the advantages of automation testing?",
        "answer": "Some basic Advantages of automation testing are as follows.\nADVERTISEMENT\nAutomation testing supports both functional and performance test on an application.\nIt supports the execution of repeated test cases.\nIt facilitates parallel execution.\nIt aids in testing a large test matrix.\nIt improves accuracy because there are no chances of human errors.\nIt saves time and money.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Lists of top 10 used automation testing tools for Functional Automation are as follows.\nTeleric Test Studio, Developed by Teleric.\nTestingWhiz\nHPE Unified Functional Testing (HP - UFT formerly QTP)\nTosca Testsuite\nWatir\nQuick Test Professional, provided by HP.\nRational Robot, provided by IBM.\nCoded UI, provided by Microsoft.\nSelenium, open source.\nAuto It, Open Source.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Lists of some commonly used Automation Testing tools for Non-Functional Automation are as follows.\nLoad Runner, provided by Hp.\nJMeter, provided by Apache.\nBurp Suite, provided by PortSwigger.\nAcunetix, provided by Acunetix.",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) What is Selenium?",
        "answer": "Selenium is a portable framework for software testing. Selenium tool facilitates with a playback tool for authoring functional tests without the need to learn a test scripting language.\nSelenium is one of the most widely used open source Web UI (User Interface) automation testing suite. Jason Huggins developed Selenium in 2004 as an internal tool at Thought Works. Selenium supports automation across different browsers, platforms, and programming languages.",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What are the different components of Selenium?",
        "answer": "Selenium is not just a single tool but a suite of software's, each having a different approach to support automation testing. It comprises of four major components which include:\nSelenium Integrated Development Environment (IDE)\nSelenium Remote Control (Now Deprecated)\nWebDriver\nSelenium Grid",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Selenium supports various operating systems, browsers and programming languages. Following is the list:\nProgramming Languages: C#, Java, Python, PHP, Ruby, Perl, JavaScript.\nOperating Systems: Android, iOS, Windows, Linux, Mac, Solaris.\nBrowsers: Google Chrome, Mozilla Firefox, Internet Explorer, Edge, Opera, Safari, etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What are the significant changes/upgrades in various Selenium versions?",
        "answer": "Selenium v1.0:\nVersion 1.0 was the initial release of Selenium.\nIt included three tools: Selenium IDE, Selenium RC, and Selenium Grid.\nSelenium v2.0:\nSelenium WebDriver was introduced replacing Selenium RC in version \"2.0\".\nWith the onset of WebDriver, RC got deprecated and moved to the legacy package.\nSelenium v3:\nThe latest release Selenium 3 has new added features and functionalities.\nIt includes Selenium IDE, Selenium WebDriver, and Selenium Grid.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Different types of testing's that we can achieve through Selenium are.\nFunctional Testing\nRegression Testing\nSanity Testing\nSmoke Testing\nResponsive Testing\nCross Browser Testing\nUI testing (black box)\nIntegration Testing",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) What is Selenium IDE?",
        "answer": "Selenium IDE is implemented as Firefox extension which provides record and playback functionality on test scripts. It allows testers to export recorded scripts in many languages like HTML, Java, Ruby, RSpec, Python, C#, JUnit and TestNG.\nSelenium IDE has limited scope, and the generated test scripts are not very robust, and portable.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What do you mean by Selenese?",
        "answer": "Selenium commands, also known as \"Selenese\" are the set of commands used in Selenium that run your tests. For example, command - open (URL); launches the desired URL in the specified browser and it accept both relative and absolute URLs.\nA sequence of Selenium commands (Selenese) together is known as a test script.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What are the different ways of locating a web element in Selenium?",
        "answer": "In Selenium, web elements are identified and located with the help of Locators. Locators specify a target location which uniquely defines the web element in the context of a web application. Thus, to identify web elements accurately and precisely we have different types of locators in Selenium:\nID\nClassName\nName\nTagName\nLinkText\nPartialLinkText\nXpath\nCSS Selector\nDOM",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) How many types of WebDriver API's are available in Selenium?",
        "answer": "The list of WebDriver API's which are used to automate browser include:\nAndroidDriver\nChromeDriver\nEventFiringWebDriver\nFirefoxDriver\nHtmlUnitDriver\nInternetExplorerDriver\niPhoneDriver\niPhoneSimulatorDriver\nRemoteWebDriver",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Selenium can be used to automate functional tests and can be integrated with automation test tools such as Maven, Jenkins, &Docker to achieve continuous testing. It can also be integrated with tools such as TestNG, &JUnit for managing test cases and generating reports.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What do you mean by the assertion in Selenium?",
        "answer": "The assertion is used as a verification point. It verifies that the state of the application conforms to what is expected. The types of assertion are \"assert\", \"verify\" and \"waitFor\".",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) Explain the difference between assert and verify commands?",
        "answer": "Assert: Assert command checks if the given condition is true or false. If the condition is true, the program control will execute the next phase of testing, and if the condition is false, execution will stop, and nothing will be executed.\nVerify: Verify command also checks if the given condition is true or false. It doesn't halt program execution, i.e., any failure during verification would not stop the execution, and all the test phases would be executed.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) What do you mean by XPath?",
        "answer": "XPath is also defined as XML Path. It is a language used to query XML documents. It is an important approach to locate elements in Selenium. XPath consists of a path expression along with some conditions. Here, we can easily write XPath script/query to locate any element in the webpage. It is developed to allow the navigation of XML documents. The key factors that it considered while navigating are selecting individual elements, attributes, or some other part of an XML document for specific processing. It also produces reliable locators. Some other points about XPath are as follows.\nXPath is a language used for locating nodes in XML documents.\nXPath can be used as a substitute when you don't have a suitable id or name attribute for the element you want to locate.\nXPath provides locating strategies like:\nXPath Absolute\nXPath Attributes",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "XPath Absolute:\nXPath Absolute enables users to mention the complete XPath location from the root HTML tag to the specific elements.\nSyntax: //html/body/tag1[index]/tag2[index]/.../tagN[index]\nExample: //html/body/div[2]/div/div[2]/div/div/div/fieldset/form/div[1]/input[1]\n\nXPath Attributes:\nXPath Attributes is always recommended when you don't have a suitable id or name attribute for the element you want to locate.\nSyntax: //htmltag[@attribute1='value1' and @attribute2='value2']\nExample: //input[@id='passwd' and @placeholder='password']",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What is the difference between \"/\" and \"//\" in XPath?",
        "answer": "Single Slash \"/\": Single slash is used to create XPath with absolute path.\nDouble Slash \"//\": Double slash is used to create XPath with the relative path.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What are the different types of annotations which are used in Selenium?",
        "answer": "JUnit annotations which can be used are:\nTest\nBefore\nAfter\nIgnore\nBeforeClass\nAfterClass\nRunWith",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What are the WebDriver supported Mobile Testing Drivers?",
        "answer": "WebDriver supported \"mobile testing drivers\" are:\nAndroidDriver\nIphoneDriver\nOperaMobileDriver",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What are the popular programming languages supported by Selenium WebDriver to write Test Cases?",
        "answer": "Selenium WebDriver supports the below languages to write Test Cases.\nJAVA\nPHP\nPython\nC#\nRuby\nPerl",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What is the difference between type keys and type commands?",
        "answer": "TypeKeys() will trigger JavaScript event in most of the cases whereas .type() won't.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) What is the difference between \"type\" and \"typeAndWait\" command?",
        "answer": "\"type\" command is used to type keyboard key values into the text box of software web application. It can also be used for selecting values of combo box whereas \"typeAndWait\" command is used when your typing is completed and software web page start reloading. This command will wait for software application page to reload. If there is no page reload event on typing, you have to use a simple \"type\" command.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is the difference between findElement() and findElements()?",
        "answer": "findElement(): It is used to find the first element within the current page using the given \"locating mechanism\". It returns a single WebElement.\nfindElements(): It uses the given \"locating mechanism\" to find all the elements within the current page. It returns a list of web elements.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) What is the wait? How many types of waits in selenium?",
        "answer": "Selenium Webdriver introduces the concept of waits for the AJAX-based application. There are two types of waits:\nImplicit Wait\nExplicit Wait",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) What is the main disadvantage of implicit wait?",
        "answer": "The main disadvantage of implicit wait is that it slows down test performance.\nAnother disadvantage of implicit wait is:\nSuppose, you set the waiting limit to be 10 seconds, and the elements appear in the DOM in 11 seconds, your tests will be failed because you told it to wait a maximum of 10 seconds.",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) What is Selenium Grid?",
        "answer": "Selenium Grid facilitates you to distribute your tests on multiple machines and all of them at the same time. So, you can execute tests on Internet Explorer on Windows and Safari on Mac machine using the same text script. It reduces the time of test execution and provides quick feedback.\nAdvance Level - Selenium Interview Questions\n29) How can we launch different browsers in Selenium WebDriver?\nWe have to create an instance of a driver of that particular browser.\nWebDriver driver =newFirefoxDriver();  \nHere, \"WebDriver\" is an interface, and we are creating a reference variable \"driver\" of type WebDriver, instantiated using \"FireFoxDriver\" class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "Advance Level - Selenium Interview Questions",
        "answer": "29) How can we launch different browsers in Selenium WebDriver?\nWe have to create an instance of a driver of that particular browser.\nWebDriver driver =newFirefoxDriver();  \nHere, \"WebDriver\" is an interface, and we are creating a reference variable \"driver\" of type WebDriver, instantiated using \"FireFoxDriver\" class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) How can we launch different browsers in Selenium WebDriver?",
        "answer": "We have to create an instance of a driver of that particular browser.\nWebDriver driver =newFirefoxDriver();  \nHere, \"WebDriver\" is an interface, and we are creating a reference variable \"driver\" of type WebDriver, instantiated using \"FireFoxDriver\" class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "public class FirefoxBrowserLaunchDemo {  \n  public static void main(String[] args) {  \n  //Creating a driver object referencing WebDriver interface  \nWebDriver driver;  \n  //Setting webdriver.gecko.driver property  \nSystem.setProperty(\"webdriver.gecko.driver\", pathToGeckoDriver + \"\\\\geckodriver.exe\");  \n  //Instantiating driver object and launching browser  \ndriver = newFirefoxDriver();  \n  //Using get() method to open a webpage  \ndriver.get(\"http://javatpoint.com\");  \n  //Closing the browser  \ndriver.quit();  \n      }  \n  }",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "public class ChromeBrowserLaunchDemo {  \n  public static void main(String[] args) {  \n  //Creating a driver object referencing WebDriver interface  \nWebDriver driver;  \n  //Setting the webdriver.chrome.driver property to its executable's location  \nSystem.setProperty(\"webdriver.chrome.driver\", \"/lib/chromeDriver/chromedriver.exe\");  \n      //Instantiating driver object  \ndriver = newChromeDriver();  \n  //Using get() method to open a webpage  \ndriver.get(\"http://javatpoint.com\");  \n  //Closing the browser  \ndriver.quit();  \n      }  \n  }",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "public class IEBrowserLaunchDemo {  \n  public static void main(String[] args) {  \n  //Creating a driver object referencing WebDriver interface  \nWebDriver driver;  \n  //Setting the webdriver.ie.driver property to its executable's location  \nSystem.setProperty(\"webdriver.ie.driver\", \"/lib/IEDriverServer/IEDriverServer.exe\");  \n      //Instantiating driver object  \ndriver = newInternetExplorerDriver();  \n  //Using get() method to open a webpage  \ndriver.get(\"http://javatpoint.com\");  \n  //Closing the browser  \ndriver.quit();  \n      }  \n  }",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "We will use Action class to generate user event like right-click an element in WebDriver.\nActions action = newActions(driver);  \nWebElement element = driver.findElement(By.id(\"elementId\"));  \naction.contextClick(element).perform();",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Actions action = newActions(driver);  \nWebElement element = driver.findElement(By.id(\"elementId\"));  \naction.moveToElement(element).perform();",
        "reference": "javatpoint.com"
    },
    {
        "question": "35) How do you perform drag and drop operation in WebDriver?",
        "answer": "Code snippet to perform drag and drop operation:\n//WebElement on which drag and drop operation needs to be performed  \nWebElementfromWebElement = driver.findElement(By Locator of fromWebElement);  \n  //WebElement to which the above object is dropped  \nWebElementtoWebElement = driver.findElement(By Locator of toWebElement);  \n  //Creating object of Actions class to build composite actions  \nActions builder = newActions(driver);  \n  //Building a drag and drop action  \nAction dragAndDrop = builder.clickAndHold(fromWebElement)  \n             .moveToElement(toWebElement)  \n             .release(toWebElement)  \n         .build();  \n  //Performing the drag and drop action  \ndragAndDrop.perform();",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What are the different methods to refresh a web page in WebDriver?",
        "answer": "There are multiple ways of refreshing a page in Webdriver.\n1. Using driver.navigate command -\ndriver.navigate().refresh();  \n2. Using driver.getCurrentUrl() with driver.get() command -\ndriver.get(driver.getCurrentUrl());  \n3. Using driver.getCurrentUrl() with driver.navigate() command -\ndriver.navigate().to(driver.getCurrentUrl());  \n4. Pressing an F5 key on any textbox using the sendKeys command -\ndriver.findElement(By textboxLocator).sendKeys(Keys.F5);  \n5. Passing ascii value of the F5 key, i.e., \"\\uE035\" using the sendKeys command -\ndriver.findElement(By textboxLocator).sendKeys(\"\\uE035\");",
        "reference": "javatpoint.com"
    },
    {
        "question": "37) Write a code snippet to navigate back and forward in browser history?",
        "answer": "Navigate back in browser history:\ndriver.navigate().back();  \nNavigate forward in browser history:\ndriver.navigate().forward();",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) How to invoke an application in WebDriver?",
        "answer": "driver.get(\"url\"); or  \ndriver.navigate().to(\"url\");  \nMisc. Questions - Selenium Interview Question.\n39) What are the benefits of Automation Testing?\nBenefits of Automation testing are as follows.\nIt allows execution of repeated test cases\nIt enables parallel execution\nAutomation Testing encourages unattended execution\nIt improves accuracy. Thus, it reduces human-generated errors\nIt saves time and money.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "39) What are the benefits of Automation Testing?\nBenefits of Automation testing are as follows.\nIt allows execution of repeated test cases\nIt enables parallel execution\nAutomation Testing encourages unattended execution\nIt improves accuracy. Thus, it reduces human-generated errors\nIt saves time and money.",
        "reference": "javatpoint.com"
    },
    {
        "question": "39) What are the benefits of Automation Testing?",
        "answer": "Benefits of Automation testing are as follows.\nIt allows execution of repeated test cases\nIt enables parallel execution\nAutomation Testing encourages unattended execution\nIt improves accuracy. Thus, it reduces human-generated errors\nIt saves time and money.",
        "reference": "javatpoint.com"
    },
    {
        "question": "40) How can we get a text of a web element?",
        "answer": "Get command is used to get the inner text of the specified web element. The get command doesn't require any parameter, but it returns a string type value. It is also one of the widely used commands for verification of messages, labels, and errors,etc.,from web pages.\nSyntax\nString Text = driver.findElement(By.id(\"Text\")).getText();",
        "reference": "javatpoint.com"
    },
    {
        "question": "41) How to select value in a dropdown?",
        "answer": "We use the WebDriver's Select class to select the value in the dropdown.\nSyntax:\nselectByValue:\nSelect selectByValue = new Select(driver.findElement(By.id(\"SelectID_One\")));  \nselectByValue.selectByValue(\"greenvalue\");  \nselectByVisibleText:\nSelect selectByVisibleText = new Select (driver.findElement(By.id(\"SelectID_Two\")));  \nselectByVisibleText.selectByVisibleText(\"Lime\");  \n\nSelect selectByIndex = new Select(driver.findElement(By.id(\"SelectID_Three\")));  \nselectByIndex.selectByIndex(2);",
        "reference": "javatpoint.com"
    },
    {
        "question": "42) What are the different types of navigation commands?",
        "answer": "The navigation commands are as follows.\nnavigate().back()\nThe above command needs no parameters and takes back the user to the previous webpage.\nExample\ndriver.navigate().back();  \nnavigate().forward()\nThe above command allows the user to navigate to the next web page with reference to the browser's history.\nExample\ndriver.navigate().forward();  \nnavigate().refresh()\nThe navigate().refresh() command allows the user to refresh the current web page by reloading all the web elements.\n\nExample\ndriver.navigate().refresh();  \nnavigate().to()\nThe navigate().to() command allows the user to launch a new web browser window and navigate to the specified URL.\nExample\ndriver.navigate().to(\"https://google.com\");",
        "reference": "javatpoint.com"
    },
    {
        "question": "43) How to deal with frame in WebDriver?",
        "answer": "An inline frame abbreviates as an iframe. It is used to insert another document within the current document. These document can be HTML document or simply web page and nested web page.\nSelect iframe by id\ndriver.switchTo().frame(\"ID of the frame\");  \nLocating iframe using tagName\ndriver.switchTo().frame(driver.findElements(By.tagName(\"iframe\").get(0));  \nLocating iframe using index\nframe(index)\ndriver.switchTo().frame(0);  \nframe(Name of Frame)\ndriver.switchTo().frame(\"name of the frame\");  \nframe(WebElement element)\nSelect Parent Window\ndriver.switchTo().defaultContent();",
        "reference": "javatpoint.com"
    },
    {
        "question": "NET?",
        "answer": "To use HtmlUnit first use the RemoteWebDriver and pass it in the desired capabilities.\nIWebDriver driver  \n= new RemoteWebDriver(DesiredCapabilities.HtmlUnit())  \nFor the Firefox implementation to run, use\nIWebDriver driver  \n= new RemoteWebDriver(DesiredCapabilities.HtmlUnitWithJavaScript())",
        "reference": "javatpoint.com"
    },
    {
        "question": "45) How can you redirect browsing from a browser through some proxy?",
        "answer": "Selenium facilitates with a PROXY class to redirect browsing from a proxy. Look at the example below.\nExample\nString PROXY = \"199.201.125.147:8080\";  \norg.openqa.selenium.Proxy proxy = new.org.openqa.selenium.Proxy();  \nproxy.setHTTPProxy(Proxy)  \n .setFtpProxy(Proxy)  \n .setSslProxy(Proxy)  \nDesiredCapabilities cap = new DesiredCapabilities();  \ncap.setCapability(CapabilityType.PROXY, proxy);  \nWebDriver driver = new FirefoxDriver(cap);",
        "reference": "javatpoint.com"
    },
    {
        "question": "46) What is POM (Page Object Model)? What are its advantages?",
        "answer": "Page Object Model is a design pattern for creating an Object directory for web UI elements. Each web page is required to have its page class. The page class is responsible for finding the WebElements in web pages and then perform operations on WebElements.\nThe benefits of using POM are as follows.\nIt facilitates with separate operations and flows in the UI from Verification - improves code readability\nMultiple tests can use the same Object Repository because the Object Repository is independent of Test Cases.\nReusability of code",
        "reference": "javatpoint.com"
    },
    {
        "question": "47) How to capture screenshot in WebDriver?",
        "answer": "Below is the program to capture screenshot in WebDriver.\nimport org.junit.After;  \nimport org.junit.Before;  \nimport org.junit.Test;  \nimport java.io.File;  \nimport java.io.IOException;  \nimport org.apache.commons.io.FileUtils;  \nimport org.openqa.selenium.OutputType;  \nimport org.openqa.selenium.TakesScreenshot;  \nimport org.openqa.selenium.WebDriver;  \nimport org.openqa.selenium.firefox.FirefoxDriver;  \n  public class TakeScreenshot {  \nWebDriver drv;  \n@Before  \npublic void setUp() throws Exception {  \ndriver = new FirefoxDriver();  \ndrv.get(\"https://google.com\");  \n}  \n@After  \npublic void tearDown() throws Exception {  \ndrv.quit();  \n}  \n  @Test  \npublic void test() throws IOException {  \n//capture the screenshot  \nFile scrFile = ((TakeScreenshot)drv).getScreenshotAs(OutputType.FILE);  \n// paste the screenshot in the desired location  \nFileUtils.copyFile(scrFile, new File(\"C:\\\\Screenshot\\\\Scr.jpg\"))  \n}  \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "48) How to type text in a textbox using Selenium?",
        "answer": "The sendKeys(\"String to be entered\") is used to enter the string in a textbox.\nSyntax\nWebElement username = drv.findElement(By.id(\"Email\"));  \n// entering username  \nusername.sendKeys(\"sth\");",
        "reference": "javatpoint.com"
    },
    {
        "question": "49) How can you find if an element is displayed on the screen?",
        "answer": "WebDriver allows user to check the visibility of the web elements. These web elements can be buttons, radio buttons, drop, checkboxes, boxes, labels etc. which are used with the following methods.\nisDisplayed()\nisSelected()\nisEnabled()\nSyntax:\nisDisplayed():  \nboolean buttonPresence = driver.findElement(By.id(\"gbqfba\")).isDisplayed();  \nisSelected():  \nboolean buttonSelected = driver.findElement(By.id(\"gbqfba\")).isSelected();  \nisEnabled():  \nboolean searchIconEnabled = driver.findElement(By.id(\"gbqfb\")).isEnabled();",
        "reference": "javatpoint.com"
    },
    {
        "question": "50) How to click on a hyper link using linkText?",
        "answer": "driver.findElement(By.linkText(\"Google\")).click();  \nThe above command search the element using a link text, then click on that element and thus the user will be re-directed to the corresponding page.\nThe following command can access the link mentioned earlier.\ndriver.findElement(By.partialLinkText(\"Goo\")).click();  \nThe above-given command searches the element based on the substring of the link provided in the parenthesis. And after that partialLinkText() finds the web element with the specified substring and then clicks on it.",
        "reference": "javatpoint.com"
    }
]