[
    {
        "question": "",
        "answer": "Sol:\nSyntax to Create a Table in SQL:\nCREATE TABLE table_name  \n(  \ncolumn_Name1 data type (size of the column),    \ncolumn_Name2 data type (size of the column),    \ncolumn_Name3 data type (size of the column),    \n...    \ncolumn_NameN data type (size of the column)  \n);    \nWe can create a table using Create Table keyword. This keyword creates only one table at a time.\nExamples:\nExample 1:\nThe following example creates the Student table:\nADVERTISEMENT\nCREATE TABLE Student  \n(  \nStudent_ID int,  \nStu_Name varchar (25),    \nStu_Subject_ID varchar (10),    \nStu_Marks int,  \nStu_Age int  \n);    \nExample 2:\nThe following example creates the Subject table:\nCREATE TABLE Subject  \n(  \nSubject_ID varchar (10),    \nSubject_Name varchar (30),    \n);",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax to insert data into a table:\nINSERT INTO Table_Name VALUES (value_1, value_2, value_3, ...., value_N);    \nWe can easily insert the record using the INSERT statement in SQL.\nExamples:\nExample 1:\nThe following queries insert the data of students into Student table:\nINSERT INTO Student VALUES (101, Akhil, BCA101, 85, 20);    \nINSERT INTO Student VALUES (102, Balram, BCA104, 78, 19);  \nINSERT INTO Student VALUES (103, Bheem, BCA102, 80, 22);  \nINSERT INTO Student VALUES (104, Chetan, BCA103, 95, 20);  \nINSERT INTO Student VALUES (105, Diksha, BCA104, 99, 20);  \nINSERT INTO Student VALUES (106, Raman, BCA105, 88, 19);   \nINSERT INTO Student VALUES (107, Sheetal, BCA103, 98, 22);   \nExample 2:\nThe following query inserts Subject_ID and Subject_Name into the Subject table:\nINSERT INTO Subject VALUES (BCA101, C);  \nINSERT INTO Subject VALUES (BCA102, C++);   \nINSERT INTO Subject VALUES (BCA103, Principle of Management);  \nINSERT INTO Subject VALUES (BCA104, Core Java);  \nINSERT INTO Subject VALUES (BCA105, Math);  \nINSERT INTO Subject VALUES (BCA106, Android);",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax to access specific records from the table:\nSELECT * FROM Table_Name WHERE condition;  \n\nExamples:\nExample 1:\nThe following query shows all the rows of those Students whose age is 20:\nSELECT * FROM Student WHERE Stu_Age = 20;  \nThe WHERE clause in this query shows only those rows which satisfy the specified condition.\nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n101 Akhil BCA101 85 20\n104 Chetan BCA103 95 20\n105 Diksha BCA104 99 20\nExample 2: The following query shows the Subject_Name of those subjects whose Subject_ID is BCA103 and BCA106:\nSELECT * FROM Student WHERE Subject_ID = 'BCA103' and Subject_ID = 'BCA106' ;  \n\nThe WHERE clause in this query shows only those rows which satisfy the specified condition.\nOutput:\nSubject_ID Subject_Name\nBCA103 Principle of Management\nBCA106 Android",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 4: Write a query in SQL to find the minimum and maximum number from the integer column:",
        "answer": "Sol:\nSyntax to find the maximum and minimum number from the column:\nSELECT MAX(Column_Name), MIN(Column_Name) FROM Table_Name;  \nWe can easily find the maximum and minimum values of any integer column using the MAX and MIN aggregate functions.\nExample:\nThe following query shows the maximum and minimum marks of the Stu_Marks column from the Student table:\nSELECT MAX(Stu_Marks), MIN(Stu_Marks) FROM Student;",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 5: Write a query to access the first record from the SQL table?",
        "answer": "Sol:\nSyntax to find the first record from the table:\nSELECT * FROM Table_Name WHERE Rownum = 1;  \nWe can easily find the first row of any table by assigning 1 to the Rownum keyword in the WHERE clause of the SELECT statement.\nExample:\nThe following query shows the first row of the student table in the output:\nSELECT * FROM Student WHERE Rownum = 1;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n101 Akhil BCA101 85 20",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 6: Write a query to access the last record from the table?",
        "answer": "Sol:\nSyntax to find the first record from the table:\nSELECT * FROM Table_Name WHERE Rowid = SELECT MAX(Rowid) from Table_Name;  \nWe can easily find the last row of any table by using the above syntax.\nExample:\nThe following query shows the last row of the student table in the output:\nSELECT * FROM Student WHERE Rowid = SELECT MAX(Rowid) from Student;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n107 Sheetal BCA103 98 22",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 7: Write a query to access the first Nth rows from the table?",
        "answer": "Sol:\nSyntax to find the first Nth records from the table:\nSELECT * FROM Table_Name WHERE Rownum < = N ;  \nWe can easily retrieve the first five rows of any table by using the Rownum keyword. We have to use the 'Less than equals to' comparison operator for this operation.\nHere, N defines the number of rows to be shown in the output.\nExample:\nThe following query shows the first five rows of the student table in the output:\nSELECT * FROM Student WHERE Rownum < = 5;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n101 Akhil BCA101 85 20\n102 Balram BCA104 78 19\n103 Bheem BCA102 80 22\n104 Chetan BCA103 95 20\n105 Diksha BCA104 99 20",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 8: Write a query to access the last Nth rows from the SQL table?",
        "answer": "Sol:\nSyntax to find the last Nth records from the table:\nSELECT * FROM (SELECT * FROM Table_Name order by Rowid DESC) WHERE Rownum < = N ;  \nWe can easily retrieve the first five rows of any table by using the Rownum keyword.\nExample:\nThe following query shows the last four rows of the Subject table:\nSELECT * FROM (SELECT * FROM Subject order by Rowid DESC) WHERE Rownum < = 4 ;  \nOutput:\nSubject_ID Subject_Name\nBCA103 Principle of Management\nBCA104 Core Java\nBCA105 Math\nBCA106 Android",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 9: Write a query in SQL to retrieve only even rows from the table?",
        "answer": "Sol:\nSyntax to find the Even rows from the table:\nSELECT * FROM Table_Name WHERE MOD (Rowid,2) = 0 ;  \nWe can easily retrieve the even rows from the table by using the MOD function in the WHERE clause of the SELECT statement.\nExample:\nThe following query shows even rows of student table in the result:\nSELECT * FROM Student WHERE MOD (Rowid,2) = 0 ;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n102 Balram BCA104 78 19\n104 Chetan BCA103 95 20\n106 Raman BCA105 88 19",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 10: Write a query in SQL to retrieve only an odd number of rows from the table?",
        "answer": "Sol:\nSyntax to find the Odd number of rows from the table:\nSELECT * FROM Table_Name WHERE MOD (Rowid,2) = 1 ;  \nWe can easily retrieve the odd rows from the table by using the MOD function in the WHERE clause of the SELECT statement.\nExample:\nThe following query shows odd rows of Student table in the result:\nSELECT * FROM Student WHERE MOD (Rowid,2) = 1 ;  \nOutput:\n\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n101 Akhil BCA101 85 20\n103 Bheem BCA102 80 22\n105 Diksha BCA104 99 20\n107 Sheetal BCA103 98 22",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nCREATE TABLE New_Table_Name SELECT * FROM Existing_Table_Name;  \nExample: The following query creates Student_Marks table from the existing Student table:\nCREATE TABLE Student_Marks SELECT * FROM Student;",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nSELECT TOP 1 Column_Name  \nFROM (  \nSELECT DISTINCT TOP N Column_Name  \nFROM Table_Name  \nORDER BY Column_Name DESC  \n)  \nORDER BY Column_Name ASC;  \nExample:\nThe following query shows the 3rd highest marks from the Student table:\nSELECT TOP 1 Stu_Marks  \nFROM (  \nSELECT DISTINCT TOP N Stu_Marks  \nFROM Student  \nORDER BY Stu_Marks DESC  \n)  \nORDER BY Stu_Marks ASC;",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 13: Write a query in SQL to find the second-highest value of an integer column from the table?",
        "answer": "Sol:\nSyntax to find the second highest value of the integer column:\nSelect MAX(Column_Name) from Table_Name   \nwhere Column_Name NOT IN (Select MAX(Column_Name) from Table_Name);  \nExample:\nThe following query shows the second-highest marks from the student table:\nSelect MAX(Stu_Marks) from Student   \nwhere Stu_Marks NOT IN (Select MAX(Stu_Marks) from Student);",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSELECT GETDATE();",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nSELECT (Column_Name) FROM (SELECT DISTINCT Column_Name from Table_Name ORDER BY Column_Name DESC) WHERE ROWNUM<=3;  \nExample:\nThe following query shows the record of the three highest marks from the student table:\nSELECT (Stu_Marks) FROM (SELECT DISTINCT Stu_Marks from Student ORDER BY Stu_Marks DESC) WHERE ROWNUM<=3;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n105 Diksha BCA104 99 20\n107 Sheetal BCA103 98 22\n104 Chetan BCA103 95 20",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nFor this operation, you have to use the WHERE clause in the SELECT statement.\nSELECT Stu_Name, Stu_Marks FROM Student WHERE Stu_Age = 20;  \nOutput:\nStu_Name Stu_Marks\nAkhil 85\nChetan 95\nDiksha 99",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nFor this operation, you need to use the MAX function with the GROUP BY statement.\nSelect Student_ID, Stu_Subject_ID, MAX(Stu_Marks) from Student group by Stu_Subject_ID;  \nOutput:\nStudent_ID Stu_Subject_ID MAX(Stu_Marks)\n101 BCA101 85\n105 BCA104 99\n103 BCA102 80\n107 BCA103 98\n106 BCA105 88",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 18: Write a query to show all the record of those students whose Marks is greater than 82 and age is 22",
        "answer": "Sol:\nHere, you have to use the AND operator between the two conditions in the WHERE clause. The AND operator returns those records which match the specified conditions.\nSELECT * FROM Student WHERE Stu_Marks > 82 and Stu_Age = 22;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n107 Sheetal BCA103 98 22",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nHere, you have to use the LIKE operator, which matches the given pattern in the table.\nSELECT * FROM Student WHERE Stu_Name LIKE '%m';  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n102 Balram BCA104 78 19\n103 Bheem BCA102 80 22",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol: The following query uses the GROUP BY statement with the COUNT function, which returns the number of students in each subject.\nSELECT Stu_Subject_ID COUNT(Stu_Subject_ID) as 'Number of Students' FROM Student GROUP BY Stu_Subject_ID ;  \nOutput:\nStu_Subject_ID Number of Students\nBCA101 1\nBCA104 2\nBCA102 1\nBCA103 2\nBCA105 1",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nThe following query uses the UPPER function with that column name whose values are to be shown in upper case:\nSELECT UPPER(Stu_Name) from Student;",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 22: Write an SQL query to show the unique values of Stu_Age from the student table:",
        "answer": "Sol:\nThe following query uses the SQL DISTINCT function with the Stu_Age column:\nSELECT DISTINCT(Stu_Age) from Student;",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nSELECT SUBSTRING(Column_Name, 1, N) from Table_Name;  \nThis syntax uses the SUBSTRING function, which shows the specific characters of the string.\nExample:\nThe following query shows the first two characters of Stu_Name from the Student table:\nSELECT SUBSTRING(Stu_Name, 1, 2) from Student;",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nHere, we have to use the ORDER BY clause, which shows the student details in the descending order of Stu_Name:\nSELECT * FROM Student ORDER BY Stu_Name DESC;  \nOutput:\nStudent_ID Stu_Name Stu_Subject_ID Stu_Marks Stu_Age\n107 Sheetal BCA103 98 22\n106 Raman BCA105 88 19\n105 Diksha BCA104 99 20\n104 Chetan BCA103 95 20\n103 Bheem BCA102 80 22\n102 Balram BCA104 78 19\n101 Akhil BCA101 85 20",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nSELECT * FROM Table_Name1 MINUS SELECT * FROM Table_Name2;  \nThis syntax uses the SQL MINUS operator, which shows the values of Table1 that does not exist in Table2.\nExample: Let's take another table, Student2, consisting of 3 columns Bus_ID, Stu_Name, and Stu_Address.\nBus_ID Stu_Name Stu_Subject_ID\n1 Ramesh BCA101\n6 Chetan BCA103\n5 Akhil BCA101\n4 Bhanu BCA103\n3 Balram BCA104\n2 Ram BCA105\nThe following query shows only those rows of Stu_Name and Stu_Subject_ID of student table which does not exist in Student2 table:\nOutput:\nSELECT Stu_Name, Stu_Subject_ID from Student \nMINUS \nSELECT Stu_Name, Stu_Subject_ID from Student2;   \nOutput:\nStu_Name Stu_Subject_ID\nBheem BCA102\nDiksha BCA104\nRaman BCA105\nSheetal BCA103",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nSELECT DISTINCT Column_Name FROM Table_Name a WHERE 3 <= (SELECT COUNT(DISTINCT Column_Name) FROM Table_Name b WHERE a. Column_Name <= b.Column_Name ) ORDER BY a. Column_Name DESC;  \nExample:\nThe following query shows the three minimum marks from the student table:\nSELECT DISTINCT Stu_Marks FROM Student a WHERE 3 <= (SELECT COUNT(DISTINCT Stu_Marks) FROM Student b WHERE a. Stu_Marks <= b.Stu_Marks ) ORDER BY a.Stu_Marks DESC;",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nSyntax:\nSELECT AVG (Column_Name) FROM Table_Name;  \nExample:\nThe following query finds the average of marks of Student table:\nSELECT AVG (Stu_Marks ) FROM Student;",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 28: Write a query to create a View in Structured Query Language,",
        "answer": "Sol:\nSyntax:\nCREATE VIEW View_Name AS SELECT Column_Name1, Column_Name2, ..... FROM Table_Name WHERE Condition;  \nFor Creating a View in SQL, we have to use the Create View statement with the SELECT statement.    \nExample:\nThe following query creates the View of those students whose Marks is greater than 85 from the Student table:\nCREATE VIEW Student_Age AS SELECT Stu_Name, Stu_Age FROM Student WHERE Stu_Marks < 85;  \nYou can see the view table by using the following query:\nSELECT * FROM Student_Age;  \nOutput:\nStu_Name Stu_Age\nChetan 20\nDiksha 20\nSheetal 22",
        "reference": "javatpoint.com"
    },
    {
        "question": "Query 29: Write a Query to add another column in the existing table:",
        "answer": "Sol:\nSyntax:\nALTER TABLE Table_Name ADD Column_Name Datatype ( Length_of_Column) ;  \nIf you want to add another column or field to the existing table, you must use the ALTER statement in SQL.\nExample:\nThe following query adds the Stu_Address column to the existing Student table:\nALTER TABLE Student ADD Stu_Addressvarchar (25) ;",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Sol:\nThe following query converts the floating-point value into the integer type.\nSELECT CONVERT (int, 3025.58);",
        "reference": "javatpoint.com"
    }
]