[
    {
        "question": "1) What is Jira?",
        "answer": "ADVERTISEMENT\nJira is a software testing tool developed by an Australian company, i.e., Atlassian.\nIt is a bug tracking tool used to track the issues and bugs related to your software and Mobile apps.\nThe name \"Jira\" comes from the Japanese word \"Gojira\", which means Godzilla.\nJira is based on Agile methodology, and the current version of Jira is 6.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Jira workflow is a set of activities performed to track and transition of an issue during the lifecycle of an issue where transition represents the link between the two statuses when an issue moves from one status to another status, and status determines the impact of the work on an issue filed by the tester.\nThe following are the phases that occur in a workflow:\nTODO\nIn Progress\nDone\nThe Jira workflow is known as defect lifecycle or bug lifecycle. The bug lifecycle consists of the following phases:\nOpen issue\nWhen the issue is created by the tester, then the issue is assigned to the software developer, and they start working on it.\nIn Progress\nThis is the phase where the software developers start working on the issue.\nResolved issue\nWhen the issue is resolved by the software developer and waiting for the verification by the software tester. If the verification is successful, then the issue is closed; otherwise, the issue gets reopened.\nReopened issue\nIf the verification is unsuccessful, then the issue is reopened and assigned to the software developer.\nClose issue\nIf the verification of the fixed bug is successful, then the issue is closed by the tester.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Jira is a defect tracking tool that creates different reports which allow you to get an overview of the current status of a project.\nJIRA report is a pictorial representation of the current status of a project in the form of charts, line-charts, bar-graphs, etc.\nThe following are the reports generated by Jira:\nAverage Age report\nThe average report is a bar chart that displays the average age of unresolved issues for a project or filter.\nThe Average Age report is generated that depends upon the selected project, the type of issue selected in the filter, and time is chosen (hours/days/week/months).\nCreated vs. Resolved Issues report\nThe created vs. resolved issues report displays the difference chart between the number of issues created and the number of issues resolved within a timeframe.\nPie chart\nThe pie chart is used to display the issues grouped by a specified field, and the specified field can be priority, assignee, project, issue type, etc.\nRecently created issue report\nThe recently created issue report represents a chart that shows the rate at which the new issues are created and how many issues are resolved during the same interval.\nResolution Time Report\nThe resolution time report determines the length of the time taken to resolve the issues for a project/filter.\nSingle Level Group by the Report\nThe single-level group by the report does not display the chart, but it categorizes the issues grouped by a particular field for a filter.\nTime Since Issue Reports\nThe time since the issue report is a bar chart that shows the number of issues of a particular data field which was set on a given date. Suppose I choose the \"Created\" as a data field then the bar chart shows the number of issues which are created.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "The following are the steps to create an issue:\nClick on the '+' button to create an issue. On clicking on the '+' button, the screen appears which is shown below:\n\nProject: It determines the name of the project.\nIssue Type: It is a dropdown which displays the lists of all the issue types. You can choose either of them such as Bug, epic, task, sub task.\nSummary: In the summary text field, you need to type the summary related to the issue that you are creating.\nPriority: You can set the priority of an issue. It can be either medium, high, low.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "An issue can also be shared with other users in Jira. The following are the steps required to share an issue with other users in Jira:\nSuppose we have an issue that already exists in Jira, i.e., the login button is not working.\n\nThe above screen shows that an issue \"TP-2 login button is not working\" has been created.\nIf we want to share the issue, then this can be achieved by using the share option available on the issue's description, it can be shown in the below screenshot:\n\nClick on the share shown in the above screenshot. On clicking on the share, the screen appears shown below:\n\n\nThe above screen shows that the dialog box appears on clicking on the share button, and in a dialog box, you need to enter the name, team or email address of a user to which you want to share your issue.",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What is the purpose of Dashboard?",
        "answer": "Once you log in to the Jira, Dashboard is the first display which you see. Jira admin can change the view of the dashboard, and also you can change the things that are visible on the dashboard.\nA dashboard displays gadgets and apps that help the team members to track the project's progress.\nThe dashboard contains useful information, such as the issues assigned to the logged-in user and the user's activity stream.\nOn clicking on the Dashboard link appearing at the left side of the panel, the page appears which is shown below:\n\n\nFollowing are the steps required to create a Dashboard:\nClick on the Dashboards appearing on the left side of the panel.\nClick on the (...) button appearing at the top right corner of the page.\n\nClick on the Create dashboard option appearing in the dropdown menu of (...) option.\nOn clicking on the Create dashboard, the screen appears, which is shown below:\n\nWhere,\nName: It provides the descriptive name of a dashboard.\nDescription: It is not a mandatory field. In this field, you can add the description of a dashboard that you are creating.\nStart from: Start from is a field that contains the dropdown in which you can choose either Blank Dashboard (It is a blank dashboard which does not contain any gadgets, but you can customize the dashboard according to your needs) or Default dashboard (It is pre-existing dashboard).\nShared with: Select the user and group to which you want to share your Dashboard.",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What do you mean by scheduling an issue?",
        "answer": "We can schedule the issues due dates which are used to track, review, and inform the team about due dates. Scheduling an issue is the most powerful feature that performs the fixed and relative date searches based on the due dates.\nAdvanced searches can also be performed by using the Jira Query Language.\nYou can schedule an issue by using the Date field. It can be done either by creating a new issue or editing an issue.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) Explain how project details are listed in Jira?",
        "answer": "Project in Jira comes with the main attributes, and these attributes can be a Name of the project, key, components, versions.\nWhen you log in to the Jira, the first page that appears is the Dashboard.\n\nIn the above screen, the right-hand side section represents the Activity Stream that contains all the activities which you performed on an issue or a project.",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What are the issue types that are created and tracked via JIRA?",
        "answer": "An issue in Jira can be a bug, feature, task, or any project work. Each Jira project comes with default issue types, and these issue types depend on the type of project that you are using.\nThere are three types of Jira projects:\nJira Core (business projects)\nJira Software (software projects)\nJira Service Desk (service desk projects)\nTwo types of issue exist in Jira Core:\nTask\nThe task is a work that needs to be completed.\nSubtask\nSubtask is a piece of work which needs to be done to complete a task.\nFive types of issue exist in Jira Software:\nBug\nA bug is a problem that exists in the functionality of a product.\nEpic\nEpic is a big user story which needs to be broken into smaller stories.\nSubtask\nSubtask is a piece of work which needs to be done to complete a task.\nTask\nTask is a work that needs to be completed.\nStory\nThe story is the smallest unit of work which needs to be completed.\nEight types of issue exist in Jira Service Desk:\nChange\nIt requests a change in a current IT profile.\nIT help\nIt requests for help related to an IT-related problem.\nIncident\nIt is used for reporting an incident.\nNew feature\nIt requests for adding a new feature or capability in software.\nProblem\nIt is used for investigating and reporting the root cause of multiple incidents.\nService request\nIt is requesting for help from an internal or customer service desk.\nService request with approval\nIt is used for requesting help that requires the approval of a manager or a board.\nSupport\nIt is used for requesting help for customer support related issues.",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) How is sub-task created in Jira?",
        "answer": "The following are the steps required to create a sub-task:\nStep 1: Open the issue for which you want to create the sub-task.\nStep 2: Click on theicon to create a sub-task.\n\nStep 3: To create a sub task, you need to enter the following screen shown in the below screen:",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) Explain the term cloning an issue?",
        "answer": "Cloning an issue means creating the duplicate copy of an issue within the same project. The clone issue is basically a copy of the original issue which is pertaining to the same information stored in the original issue.\nA clone issue is a separate entity from the original issue, but it can be linked to the original issue.\nOperations applied to the original issue will not have any effect on the clone issue",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) Explain Kanban board?",
        "answer": "Kanban board is a tool used to visualize the work and limit work-in-progress.\nAs in scrum, we are taking some activities from a product backlog and adding in a sprint backlog. However, in Kanban, we do not have sprint, so sprint backlog activity will not be performed. This is the main difference between scrum and Kanban that scrum contains sprint backlog while kanban does not contain the sprint backlog.\nKanban board consists of three states:\nTo Do\nDoing\nDone\n\nWhen the project is started, then we put all the activities from the product backlog to the 'To Do' state. When the team member starts working on an activity, then that activity is put in a 'Doing' state, and when the activity is placed, then it is placed in a 'Done' state.\nFrom the Kanban board, one can get to know which activities have been done and which activities they need to develop.\nOne of the most important features of the Kanban board is a Limit option. In the above figure, we have eight tasks in a product backlog and limit set is 4. At a time, it will take only four tasks in a 'To Do' state, and if any of the tasks come in a 'Doing' state, then one more task from the product backlog will be placed in a 'To Do' state. In this way, we can set the limit depending on the availability of the resources.",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) Explain Scrum board?",
        "answer": "The Scrum Board is a physical board on which the user stories present in the current sprint backlog are displayed.\n\nScrum board is divided into columns such as:\nStories: This column contains all the user stories available in the current sprint backlog.\nTODO: This state contains the subtasks of the stories on which the work has not started on.\nIn Progress: This state contains all the tasks on which the work has started.\nDone: This state contains all the tasks at which all the work have been completed.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) List all the reports generated by Kanban projects in Jira?",
        "answer": "The two types of reports are generated by Kanban projects:\nControl chart\nThe control chart is a useful chart which helps in measuring the team's performance. The control chart displays the average cycle time of your team over a period of time. The control chart plots the following issues on the chart:\nAny issues which are outside the standard deviation known as outliers.\nIt displays the average time taken to complete the tasks.\nIt also displays the team's rolling average.\nIt displays the average cycle time of your product, version, or a sprint.\nIt helps you to identify whether the data from the current sprint determines the future performance of a product, i.e., the less variance in the cycle time means that median or mean can determine the future performance.\nHow to create a Control flow chart\nThe following are the steps to create a control flow chart:\nGo to the Jira official website.\nClick on the project on which you are working.\nClick on the Reports appearing at the left side of the panel.\nSelect the Control chart.\nCumulative flow diagram\nCumulative flow diagram is a kanban tool that allows the team to view the effort and project's effort.\nCumulative diagram consists of two axis, i.e., X-axis and Y-axis where X-axis (horizontal axis) represents the time taken to complete a task and Y-axis (vertical axis) represents the number of issues or tasks.\nThe size of the area represents the number of work items currently involved in each state for the selected time period.\n\nFeatures of Cumulative flow diagram:\nMonitor how WIP builds over time\nIf the line goes up, which means that WIP (Work In Progress) goes up means that the team is working on more tasks than handling them at a time. Increase in WIP results in increased cycle times, and this reduces team efficiency. So, it is important to keep the line straight.\nObserve how much team delivers\nWith the help of CFD diagram, we can keep track of all the tasks which have been delivered by the team. If the bottom line of the CFD diagram represents the Done state, then the slope of the line between any two points would represent the average throughput between these two points.\nSpot bottlenecks instantly\nCumulative diagram determines the exact amount of work in each state of your project. If one or more areas represent that WIP is expanding, then CFD spots this bottleneck instantly.\nMeasure your past performance\nThe horizontal difference between the top line and bottom line at any point provides the process approximate average cycle time. The comparison between the exact cycle time and approximate cycle time provides you a good understanding of the process performance.\nMonitor your process health\nCumulative flow diagram is used to evaluate the efficiency of a process and also helps to identify the problems to achieve a stable and healthy process. The average arrival rate must be close to the average throughput to achieve a stable system, i.e., Average Cycle Time= Average Throughput.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) List all the reports generated by scrum projects in Jira?",
        "answer": "The following are the reports generated by scrum projects in Jira are:\nBurndown chart\nBurndown chart displays the amount of work that has been completed in a sprint, and the total work is remaining.\nBurndown chart is useful as it provides the following observations:\nIf the team finishes its work early, which means that the team is not committed with sufficient work during sprint planning.\nIf the team does not finish its work within a sprint means that they are committed with a lot of work.\nIf the burndown chart drops sharply which means that the work has not been estimated properly.\nHow to create a Burndown chart\nThe following are the steps required to create a Burndown chart:\nGo the Jira official website.\nClick on the project on which you are working.\nClick on the Reports appearing at the left side of the panel.\nSelect the Burndown chart.\nBurnup chart\nBurnup chart is the visual representation of a sprint's completed work compared with the total scope. It is used to identify problems such as deviation from the planned project path.\nHow to create a Burnup chart\nThe following are the steps required to create a Burnup chart:\nGo to the Jira official website.\nClick on the project on which you are working.\nClick on the Reports appearing at the left side of the panel.\nSelect the Burnup chart from the Reports dropdown.\nThe following are the important points related to the Burnup chart:\nThe vertical axis represents the amount of work, and it can be measured in different ways such as Story points, issues count, or estimates while the horizontal axis represents the time in days.\nThe distance between the lines on a chart is the remaining amount of work. When all the issues have been completed, the lines will meet.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) Define a component in Jira?",
        "answer": "Components are the subdivisions of a project and used to group the issues within a project into smaller parts.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) How to delete a component in Jira?",
        "answer": "Follow the below steps to delete a component in Jira:\nClick on the Components appearing at the left side of the panel.\n\nClick on the '...' icon then the dropdown appears which shows two options, i.e., Edit and Delete.\n\nClick on the Delete option to delete the component from the Jira project.",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What is a validator in Jira?",
        "answer": "Validators check whether the input provided by the user is valid before the transition is performed.\nIf the validation fails, then the issue does not proceed to the destination status of the transition.\nList of validators:\nRequired Field validators\nRequired field validator ensures that the field is mandatory or required. The required fields marked with the red asterisk (*) on every transition screen. In Jira, we can use the field configuration to make the fields compulsory or mandatory. With the help of Required field validators, it is possible to make the fields mandatory that makes the overall process more user-friendly.\nRegular Expression Validator\nRegular Expression Validator checks whether the input given to a certain field matches the regular expression that you define. It is a quite powerful validator, and its use cases vary from the simple validation, the user should provide the exact value that matches the use cases.\nParameters\nRegular expression: It is an expression that the input field should match.\n\nUser define message: This message appears when the validation fails.\nValidator to compare to two fields with each other\nThis validator is used to compare the two fields. To use this validator, both the fields must be of the same type.\nThe following is the list of operators that this validator supports:\n> ( greater than)\n< ( less than)\n>= (greater than or equal to)\n<= (less than or equal to)\n= (equal)\n!= (Not equal)\nDate Compare Validator\nThe Date Compare Validator is used to compare the date field with the fixed date. It can support the date field types such as Date fields (Date and date with time). We can use a fixed date in the format yyyy-mm-dd hh:mm or a pattern (days, months, weeks, years).\nField Compare Validator\nField Compare Validator is a validator that compares the fields against the fixed values.\nIt supports the following operators:\n= (equal to)\n!= (Not equal to)\n> (greater than)\n>= (greater than or equal to)\n< (less than)\n<= (less than or equal to)\nIN\nNOT IN\nCONTAINS\nIt supports the comparison types such as String, Number, and Option ID. For example, we have a field named \"Salary\", and its field value should not be less than 30,000, it can be represented as:\nSalary>=30,000;\nUser in Project Role Validator\nThis validator ensures that the currently logged in user should be in a certain specific role. For example, only a user with a role \"Developer\" can do this workflow transition.\nUser in Group Validator\nIt validates that the current user should be in any of the specified groups.\nUser in Field Validator\nThis validator ensures that the current logged in user is set on a certain field.\nThere are two options available in this validator:\nYou can set the status of a current user in a field.\nHe/she is not set in this field.\nParent Issue Type Validator\nThis validator is used to prevent creating the subtasks from the parent issue. We can achieve this by adding a validator to the \"Create\" transition from the subtask. You can also provide a custom error message for this type of validator.\nParent Issue Status Validator\nThis validator ensures that the parent issue should have some specific status. The status can be Reopened, In Progress, Backlog, etc.\nField Values Changed Validator\nField Values Changed Validator ensures that the user can change the value in a field.\nJQL Validator\nJQL (Jira Query Language) evaluates the current issue against the JQL query. In JQL Validator, the query is generated automatically related to the issue.\nJQL Validator provides some additional fields:\nValidator message: It is used to define the custom error message if the validation fails. If you do not want to provide the custom error message, then you can leave this field as empty.\nRun as user: In this field, we can define a technical user with which the JQL expression will be evaluated. If you leave this field as empty, then the current user will be considered for this transition.",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What is an issue collector?",
        "answer": "An issue collector allows you to gather the feedback form of any website in the form of Jira issues. It can also collect the issues who do not have a Jira account.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What are the differences between Scrum board and Kanban board?",
        "answer": "The following are the differences between Scrum board and kanban board:\nScrum Kanban\nPlanning It has fixed planning. It focussed on planning. It starts with the sprint planning and ends with the sprint review, retrospective. The daily meeting is held so that the team knows the next steps, priorities, and the learnings from the previous steps. It has no fixed planning, and no daily meetings are conducted. In Kanban, changes can occur at any time, i.e., frequent changes occur.\nTimeline In scrum, we work on the sprint that has the fixed-time duration means that after some fixed-time, we are delivering something to the client. Kanban does not have the concept of a sprint, so it has no fixed timeline for delivering the product to the client.\nTask estimates During sprint planning, it is decided that how many activities are to be pulled from the product backlog and add in a sprint backlog. For example, if the sprint is for two weeks, then the number of activities are selected in such a way that they can be completed within the sprint, i.e., in two weeks. It does not estimate the task.\nScrum Master In scrum methodology, we have one scrum master who handles the team and conducts the meeting on a daily basis. In Kanban methodology, we do not have any scrum master. It's the responsibility of each individual to deliver a valuable product.\nSuitability This methodology is suitable for large-sized projects as large-sized projects can be divided into multiple sprints. It is mainly suitable for small-sized projects.\nConstant changes In Scrum, constant changes can be adapted easily in shorter sprints. If any major change occurs, then Kanban methodology gets failed.\nCost In Scrum, the task is estimated, i.e., a fixed number of activities are taken in a sprint, so the total cost of the project is minimal. In Kanban, the task is not estimated, so the total cost of the project is not accurate.\nRoles and responsibilities In Scrum, a specific role is assigned to the team members by the Scrum Master while the product owner tells the objectives of the product on which team members have to work. No predefined role is assigned to the team members. It's the responsibility of all the team members to work in collaboration to deliver a valuable product.\nMeasurement of Productivity The productivity is measured by using cycle time or the time taken to complete the whole project from start to the end. Productivity is measured by using velocity through sprints.\nRelease Methodology Small release after the end of each sprint. It provides continuous delivery.",
        "reference": "javatpoint.com"
    }
]