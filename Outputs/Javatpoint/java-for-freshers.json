[
    {
        "question": "1) Discuss JVM, JRE, JDK",
        "answer": "JVM (Java Virtual Machine): JVM acts as a run-time engine for running Java applications. It is the JVM that invokes the main method. JVM is the part of JRE(Java Runtime Environment).\nJRE (Java Runtime Environment): JRE is the runtime environment in which bytecode can be executed. It does the implementation of the JVM (Java Virtual Machine) and facilitates all of the class libraries and other support files that JVM uses at runtime. So JRE is the software package that fulfills the requirement of what is required in order to run/execute a Java program.\nJDK(Java Development Kit): It is the tool that is required for the compilation, documentation, and packaging of Java programs. The JDK completely includes JRE, which contains tools for Java programmers. The Java Development Kit is provided free of charge. Along with JRE, it includes an interpreter/loader, a compiler (javac), an archiver (jar), a documentation generator (Javadoc), and other tools needed in Java development. In short, it contains JRE + development tools.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) Discuss public static void main(String args[])",
        "answer": "public: Public is an access modifier. Any Class will be able to access this main method because it is public.\nstatic: It is a Java keyword that denotes a class-based object as one that may be accessed without first generating an instance of a Class. We use static because we want the main() method to run without any instances as well.\nvoid: It is the return type of the main method. Void states that the main() method will not return any value.\nmain: It is the name of the method, which is main() in our case. It is the first method executed by JVM.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Class: A user-defined class serves as a template or prototype from which objects can be built. It stands for the collection of attributes or operations that are shared by all objects of a particular type. In general, these elements can be found in the following sequence in class declarations.\nObject: It is a basic unit of Object-Oriented Programming and represents real-life entities. A typical Java program creates many objects, which, as you know, interact by invoking methods. An object consists of:\nState: It is represented by an object's characteristics. Additionally, it reflects an object's characteristics.\nBehavior: It is represented by the methods of an object. It is represented via an object's methods. It also shows how one object interacts with other objects.\nIdentity: It provides a thing with a special name and makes it possible for one object to communicate with another.\nFor Example, a student is an example of a class. A specific student with a unique identification is an example of an object.\nclass Student  \n{  \n   // instance variables declaration  \n   // Methods definition  \n}  \nAn object of a Student is a specific student  \nStudent studObj = new Student ();  \nOne of the objects of Student is referred to as 'studObj'",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "A Java method is a set of statements to perform a task. A method is placed in a class.\nSignatures of methods: The method's name, return type, and the number of parameters comprise the method signature.\nA method can have the following elements in its signature:\nAccess specifier - public, private, protected, etc. (Not mandatory)\nAccess modifier - static, synchronized, etc. (Not mandatory)\nReturn type - void, int, String, etc. (Mandatory)\nMethod name - show() (Mandatory)\n\nWith or without parameters - (int number, String name); (parenthesis are mandatory)\nclass TestClass  \n{  \nvoid m1()   \n{  \n}  \npublic double m2(double y)   \n{  \n}  \npublic static void m3()   \n{  \n      }  \npublic static void m4(String y)   \n{  \n      }  \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) Why is Java not purely Object-oriented?",
        "answer": "It is because the language supports primitive data types like boolean, byte, char, int, float, double, long, and short. Hence, Java is not regarded as being entirely object-oriented.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "A variable that is unique to each object or instance is known as an instance variable. This implies that each thing will only exist once. A variable with one copy per class is referred to as a class variable. There won't be a duplicate of the class variables in the object.\nclass Student  \n{  \n    int rollNo; // instance variable  \n    String studName; // instance variable  \n    int std; // 1, 2, 3, etc. // instance variable  \n    String address;  \n    static String schoolName; // class variable  \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What are constructors in Java?",
        "answer": "A constructor is a section of code that is used to initialize an object in Java. It has to be given the same name as the class. Additionally, it is automatically invoked when an object is created and has no return type.\nThe Java compiler automatically produces a no-argument constructor, often known as the default constructor, if a class does not explicitly define any.\nWhen a class has no other parents, the default constructor invokes the class parent's no-argument constructor (because it only has one statement, super()); or the Object class constructor (since the Object class is either a direct or indirect parent of all classes).\n\nThere are two types of constructors:\nParameterized constructor\nDefault constructor",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What are the different ways to create objects in Java?",
        "answer": "The following are the different ways for the creation of objects in Java.\nADVERTISEMENT\nUsing new keyword\nUsing new instance\nUsing clone() method\nUsing deserialization\nUsing the newInstance() method of the Constructor class",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What's the purpose of Static methods and static variables?",
        "answer": "We utilize static keywords to make a method or variable shared for all objects when it is necessary to share them across many objects of a class rather than create separate copies for each object.\nStatic variable: Another name for a static variable is a class variable.\nThese variables are declared in a manner similar to instance variables, with the exception that static variables are declared in a class outside of any method constructor or block using the static keyword.\nNo of how many objects we generate, we are only allowed to have one instance of a static variable per class.\nStatic variables are generated at the beginning of program execution and immediately removed at its conclusion.\nWe don't need to build an object of that class in order to access static variables.\nStatic techniques: You can call a static method without constructing any objects. The method may be accessed simply by typing in the Class name. Only static variables, not local or global non-static variables, may be accessed using the static method.\nFilename: ClassMain.java\nclass MethodStatic  \n{  \npublic static void displayMe()  \n{  \nSystem.out.println(\"Static Method can be accessed directly using the class name!\");  \n}  \n}  \npublic class ClassMain   \n{  \npublic static void main(String args[])  \n{  \nMethodStatic.displayMe();  \n}  \n}  \nOutput:\nStatic Method can be accessed directly using the class name!",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) Why can static methods not access non-static variables or methods?",
        "answer": "It is because static methods may be used without instantiating the class. If the class is not instantiated, the variables are not initialized and cannot be accessible from a static method. Therefore, a static method cannot access non-static variables or methods.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What is a static class?",
        "answer": "If all of the variables of the class and methods are static and the constructor is private, the class is said to be a static class. The class cannot be instantiated if the constructor is made private. Thus, the Class name is the sole way to gain access.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "The following are the types of variables in Java:\nLocal Variables\nInstance Variables\nStatic Variables\nLocal Variables: When a variable is defined within a method or block, or constructor, then that variable is known as the local variable. These variables come into the picture when the control enters the method or block. The local variables get destroyed after exiting from the block or when the control returns from the method. The scope of these local variables exists only within the block in which the variable is declared. i.e., we can access these variables only within that block. We can never use the access specifier for the local variables.\nFilename: LocVariable.java\n// Java program for demonstrating the local variables  \npublic class LocVariable  \n{  \n    // method  \n    public void getLocalVariableValue()   \n    {     \n        int locVar = 0;  \n        locVar = locVar + 1;  \n        System.out.println(\"The value of the local variable\" + \" is: \" + locVar);  \n    }  \n          // main method  \n    public static void main(String argvs[])  \n    {  \n        // create an object of the class LocVariable  \n        LocVariable ob = new LocVariable();  \n        ob.getLocalVariableValue();  \n    }  \n}  \nOutput:\nThe value of the local variable is: 1\nExplanation: In the above program, the locVar variable is the local variable to the method getLocalVariableValue(). If we use the variable locVar outside the getLocalVariableValue() method, the compiler produces an error. The following program shows the same.\nFilename: LocVariable1.java\npublic class LocVariable1  \n{  \n// method  \npublic void getLocalVariableValue()   \n{     \n    int locVar = 0;  \n    locVar = locVar + 1;  \n    System.out.println(\"The value of the local variable\" + \" is: \" + locVar);  \n}  \n{  \n      // print statement that accesses the local variable outside the method getLocalVariableValue()  \n System.out.println(\"Accessing the local variable outside of the method\" + locVar);  \n}  \n  // main method  \npublic static void main(String argvs[])  \n{  \n    // create an object of the class LocVariable1  \n    LocVariable1 ob = new LocVariable1();  \n    ob.getLocalVariableValue();  \n}  \n}  \nOutput:\n/LocVariable1.java:14: error: cannot find symbol\n     System.out.println(\"Accessing the local variable outside of the method\" + locVar);\n                                                                               ^\n  symbol:   variable locVar\n  location: class LocVariable1\n1 error\nInstance Variables: Non-static variables are instance variables. These variables are declared in a class outside any constructor, method, or block. Since the instance variables are declared inside a class, these variables come into the picture when the class is instantiated. When the objects of the class are destroyed, these variables are also destroyed. Unlike the local variables, we can apply the access specifiers to the instance variables. When one does not apply the access specifier, the default access specifier is used.\nFilename: VariableInstance.java\n// Java program for demonstrating the instance variables  \npublic class VariableInstance  \n{  \n// instance variables  \nint instVarId;  \nString instVarName;  \n  // main method  \npublic static void main(String args[])  \n{  \n// creating an object of the class VariableInstance  \nVariableInstance obj = new VariableInstance();  \nobj.instVarId = 00001;  \nobj.instVarName = \"InstVariable1\";  \nSystem.out.println(\"Displaying the first object: \");  \nSystem.out.println(\"instanceVarId = \" + obj.instVarId);  \nSystem.out.println(\"instanceVarName = \" + obj.instVarName);  \n  // creating an object of the class VariableInstance  \nVariableInstance obj1 = new VariableInstance();  \nobj1.instVarId = 00002;  \nobj1.instVarName = \"InstVariable2\";  \nSystem.out.println(\"Displaying the second object: \");  \nSystem.out.println(\"instanceVarId = \" + obj1.instVarId);  \nSystem.out.println(\"instanceVarName = \" + obj1.instVarName);  \n}  \n}  \nOutput:\nDisplaying the first object: \ninstanceVarId = 1\ninstanceVarName = InstVariable1\nDisplaying the second object: \ninstanceVarId = 2\ninstanceVarName = InstVariable2\nIn the above-mentioned program, the instance variables are instVarId, and instVarName. In the program, two objects are created, and each object will have its own copy of the instance variables. In the above program, each object will have its own copies of instance variables, and the same is reflected in the output too.\nStatic variable: Class variables are also known as static variables.\nStatic variables are also declared in a similar fashion as the instance variables. The difference is that instance variables do not come with the static keyword. In contrast, the static variables are declared with the static keyword inside a class and outside any block or constructor.\nUnlike the instance variables, there is only one copy of the static variables, no matter how many objects we create of that class.\nStatic variables are created at the beginning of the program execution and get automatically destroyed when the execution ends.\nTo access the static variables, one does not need to create an object of that class. The static variables can be accessed using the class names. Static keyword plays a key role in the implementation of the singleton design pattern. The illustration of it is shown in the following program.\nFilename: VarStatic.java\n// Java program for demonstrating the static variables  \npublic class VarStatic  \n{  \n// static variables  \nprivate static int cnt = 0;  \nprivate int nonStaticCnt = 0;  \npublic void incCounter()  \n{  \ncnt = cnt + 1;  \nnonStaticCnt = nonStaticCnt + 1;  \n}  \npublic static int getStaticCnt()  \n{  \nreturn cnt;  \n}  \npublic int getNonStaticCnt()  \n{  \nreturn nonStaticCnt;  \n}  \npublic static void main(String args[])  \n{  \n// creating two objects of the class VarStatic  \nVarStatic stVarOb1 = new VarStatic();  \nVarStatic stVarOb2 = new VarStatic();  \nstVarOb1.incCounter();  \nstVarOb2.incCounter();  \nSystem.out.println(\"Static count for the object stVarOb1: \" + stVarOb1.getStaticCnt());  \nSystem.out.println(\"NonStatic count for the object stVarOb1: \" + stVarOb1.getNonStaticCnt());  \nSystem.out.println(\"Static count for the object stVarOb2: \" + stVarOb2.getStaticCnt());  \nSystem.out.println(\"NonStatic count for the object stVarOb2: \" + stVarOb2.getNonStaticCnt());  \n}  \n}  \nOutput:\nStatic count for the object stVarOb1: 2\nNonStatic count for the object stVarOb1: 1\nStatic count for the object stVarOb2: 2\nNonStatic count for the object stVarOb2: 1\nIn the above-mentioned program, stVarOb1 and stVarOb2 share the same instance of the static variable cnt. Therefore, if the value gets incremented by any one of the objects, the incremented value gets reflected on both of the objects stVarObj1 and stVarObj2. It is because only copies of the static variables are available.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Observe the following differences between the HashTable and HashMap.\nHashTable is synchronized, and hence, it is thread-safe and can easily be shared with many threads. On the other hand, the HashMap is not synchronized and is not thread-safe, and hence, can not be shared (without any synchronization code) among many threads.\nHashTable does not allow any null value or key, whereas HashMap allows multiple null values and one null key.\nHashTable is generally not preferred over HashMap if the synchronization of thread synchronization is needed.\nRefer to HashTable and HashMap for more details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) Is the overloading of the main() method possible in Java?",
        "answer": "Yes, we can overload the main() method in Java. The way we overload the other methods is also the way of overloading the main() method. For launching the program, the JVM (Java Virtual Machine) looks for the signature of the method. It is the normal main() method that acts as the entry point of the program and is invoked by the JVM. The overloaded main() method has to be invoked explicitly. Observe the following.\nFilename: OverloadMain.java\npublic class OverloadMain   \n{  \n// main method  \npublic static void main(String argvs[])   \n{  \n  System.out.println(\"Main method with the array of String as the argument.\");  \n  main(2); // invoking the overloaded main() method  \n}  \n  // overloaded main() method with int as the argument  \npublic static void main(int i)   \n{  \n  System.out.println(\"Main method with integer as the argument.\");  \n}  \n}  \nOutput:\nMain method with the array of String as the argument.\nMain method with integer as the argument.\nWe see that the overloaded main() method with int as the argument has been called explicitly.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Synchronization ensures that only one block of code is accessed at a time. There is a risk for erroneous results to be produced at the end if numerous threads access the same block of code. We can offer synchronization for the delicate block of codes to get around this problem. A thread requires a key to access synchronized code, as indicated by the term \"synchronized.\" All Java objects have locks. A lock has only one key. A thread can access a synchronous method only if it can obtain the key of the object being locked. Locking is done on a per-object basis.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What is the meaning of Collections in Java?",
        "answer": "Collections is a framework designed for storing objects and editing themes for storing objects.\nThe following operations can be performed using collections.\nSorting\nSearching\nInsertion\nManipulation\nDeletion\nA group of objects is called a collection. All interfaces and classes for the collection are available in the java.util package.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Synchronization is not recommended for the implementation of all of the methods. It is because one of the threads accesses the synchronized code, and then the next thread must have to wait. Hence, it leads to a slow performance on the other end.",
        "reference": "javatpoint.com"
    },
    {
        "question": "Why?",
        "answer": "The pointers are not used in Java because they are increase the complexity of the program and they are unsafe too. Since simplicity is one of the most popular features of the Java language, adding the concept related to pointers is contradicting to the simplicity of the language. Also, in Java, it is the responsibility of the JVM for the implicit memory allocation. Thus, in order to avoid the direct access of the memory by the user, pointers are discouraged in Java.",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What is the Inheritance?",
        "answer": "Inheritance is the mechanism using which one object can inherit all of the characteristics and actions of another object belonging to a different class. It is utilized for code reusability and method overriding. The concept of inheritance in Java is that new classes may be constructed on top of older ones. One can utilize the parent class's properties and methods when one inherits from the existing class. One may also add the methods and additional fields to the existing class. The parent-child connection, also known as the IS-A relationship, is represented through inheritance.\nThe following are the five different types of inheritance in Java.\nSingle-level inheritance\nMultiple Inheritance (Using the Java Interfaces)\nMulti-level inheritance\nHybrid Inheritance\nHierarchical Inheritance",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) How is an Interface different from an Abstract class?",
        "answer": "There are various differences between an Interfaces and an Abstract class in Java.\nConstituents - Interface can only contain constants, whereas an abstract class contains instance variables.\nConstructor and Instantiation - An abstract class may contain a default constructor, which is invoked when the object of the subclass is created, whereas an interface never contains a constructor, and it is also not possible to create an object of an interface.\nImplementation of Methods - All of the classes that do the implementation of an interface are required to provide the implementation for all the methods that are present in that interface. However, a class that extends the abstract class does not require to do the implementation of all of the methods that are present in the abstract class. Only the implementation of the abstract methods present in the abstract class is required.\nMethods Types - An abstract class has both: non-abstract as well as abstract methods. On the other hand, in the case of interfaces, we see only abstract methods.",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) Explain the lifecycle of a thread in Java?",
        "answer": "The lifecycle of a thread has the following states and follows the following order:\nNew - In the life cycle of a thread, it is the first state. The instance of the thread is created, and the method start() is not invoked yet. Now, the thread is considered to be alive.\nRunnable - After calling the method start(), but before calling the method run(), a thread is said to be in the state of runnable. A thread may also go back to the runnable state from the sleeping or waiting state.\nRunning - When the thread enters the state of running after the method run() is invoked. It is when the execution of the thread starts.\nNon-Runnable - Even though the thread is alive, it is not apt to run. Typically, it goes back to the state of runnable after some time.\nTerminated - When the method run() does the completion of its execution, the thread enters the terminated state. Now, the thread is not alive now.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Stack Memory:\nIt is used to keep the local variables and the order of execution of methods.\nWhen the memory of the stack gets filled then it returns the java.lan.StackOverFlowError.\nAccessing the stack memory is faster than accessing the memory as compared to the heap.\nMethods that are currently running utilize the stack space.\nHeap Memory:\nFor storing objects, heap memory is used.\nWhen the heap memory gets filled, then it returns java.lang.OutOfMemoryError.\nAccessing the heap memory is slower as compared to accessing the stack memory.\nThroughout the applications, heap space is used.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) Can one modify the throws clause of the superclass method while overriding it in the subclass?",
        "answer": "Yes, one can do the modification of the throws clause of the superclass method while overriding it in the subclass. But there are some rules that needs to be taken into consideration while overriding in the case of exception handling.\nIf the methods of the superclass do not declare an exception, then the overridden method of the subclass can not make the declaration of the checked expectation, but it can make the declaration of the unchecked exceptions.\nIf the method of the superclass makes the exception declaration, then the overridden method of the subclass can make the declaration of the same subclass exception or no exception but can not make the declaration of the parent exception.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) Is it possible to change the scope of methods that are overridden in the subclass?",
        "answer": "Yes, one is allowed to do the change scope of those methods that are overridden in the subclass in Java. However, it should be noted that one can not reduce the method accessibility. The following points should be taken into consideration while changing the method accessibility.\nThe private access specifier can be changed to public, protected, or default.\nThe protected access specifier can be changed to default or public.\nThe default access specifier can be changed to public.\nThe public access specifier can not be changed to any other access specifier. It will always remain public.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What are the benefits of passing 'this' into a method in lieu of the object of the current class itself?",
        "answer": "We know that 'this' is referred to the object of the current class. Hence, it should be similar to the objects of the current class. However, there are two main benefits of passing \"this\" in lieu of the object of the current class.\n'this' is a final variable. Hence, 'this' can not be assigned to any new value, whereas the object of the current class may not be final, and it can be changed.\nIn the synchronized block, 'this' can be used.",
        "reference": "javatpoint.com"
    }
]