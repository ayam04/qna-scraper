[
    {
        "question": "1) What is C language?",
        "answer": "C is a mid-level and procedural programming language. The Procedural programming language is also known as the structured programming language is a technique in which large programs are broken down into smaller modules, and each module uses structured code. This technique minimizes error and misinterpretation. More details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) Why is C known as a mother language?",
        "answer": "C is known as a mother language because most of the compilers and JVMs are written in C language. Most of the languages which are developed after C language has borrowed heavily from it like C++, Python, Rust, javascript, etc. It introduces new core concepts like arrays, functions, file handling which are used in these languages. More details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) Why is C called a mid-level programming language?",
        "answer": "C is called a mid-level programming language because it binds the low level and high -level programming language. We can use C language as a System programming to develop the operating system as well as an Application programming to generate menu driven customer driven billing system. More details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) Who is the founder of C language?",
        "answer": "Dennis Ritchie. More details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) When was C language developed?",
        "answer": "C language was developed in 1972 at bell laboratories of AT&T. More details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What are the features of the C language?",
        "answer": "The main features of C language are given below:\nADVERTISEMENT\nSimple: C is a simple language because it follows the structured approach, i.e., a program is broken into parts\nPortable: C is highly portable means that once the program is written can be run on any machine with little or no modifications.\nMid Level: C is a mid-level programming language as it combines the low- level language with the features of the high-level language.\nStructured: C is a structured language as the C program is broken into parts.\nFast Speed: C language is very fast as it uses a powerful set of data types and operators.\nMemory Management: C provides an inbuilt memory function that saves the memory and improves the efficiency of our program.\nExtensible: C is an extensible language as it can adopt new features in the future.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What is the use of printf() and scanf() functions?",
        "answer": "printf(): The printf() function is used to print the integer, character, float and string values on to the screen.\nFollowing are the format specifier:\n%d: It is a format specifier used to print an integer value.\n%s: It is a format specifier used to print a string.\n%c: It is a format specifier used to display a character value.\n%f: It is a format specifier used to display a floating point value.\nscanf(): The scanf() function is used to take input from the user.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What is the difference between the local variable and global variable in C?",
        "answer": "Following are the differences between a local variable and global variable:\nBasis for comparison Local variable Global variable\nDeclaration A variable which is declared inside function or block is known as a local variable. A variable which is declared outside function or block is known as a global variable.\nScope The scope of a variable is available within a function in which they are declared. The scope of a variable is available throughout the program.\nAccess Variables can be accessed only by those statements inside a function in which they are declared. Any statement in the entire program can access variables.\nLife Life of a variable is created when the function block is entered and destroyed on its exit. Life of a variable exists until the program is executing.\nStorage Variables are stored in a stack unless specified. The compiler decides the storage location of a variable.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What is the use of a static variable in C?",
        "answer": "Following are the uses of a static variable:\nA variable which is declared as static is known as a static variable. The static variable retains its value between multiple function calls.\nStatic variables are used because the scope of the static variable is available in the entire program. So, we can access a static variable anywhere in the program.\nThe static variable is initially initialized to zero. If we update the value of a variable, then the updated value is assigned.\nThe static variable is used as a common value which is shared by all the methods.\nThe static variable is initialized only once in the memory heap to reduce the memory usage.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) What is the use of the function in C?",
        "answer": "Uses of C function are:\nC functions are used to avoid the rewriting the same code again and again in our program.\nC functions can be called any number of times from any place of our program.\nWhen a program is divided into functions, then any part of our program can easily be tracked.\nC functions provide the reusability concept, i.e., it breaks the big task into smaller tasks so that it makes the C program more understandable.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What is the difference between call by value and call by reference in C?",
        "answer": "Following are the differences between a call by value and call by reference are:\nCall by value Call by reference\nDescription When a copy of the value is passed to the function, then the original value is not modified. When a copy of the value is passed to the function, then the original value is modified.\nMemory location Actual arguments and formal arguments are created in separate memory locations. Actual arguments and formal arguments are created in the same memory location.\nSafety In this case, actual arguments remain safe as they cannot be modified. In this case, actual arguments are not reliable, as they are modified.\nArguments The copies of the actual arguments are passed to the formal arguments. The addresses of actual arguments are passed to their respective formal arguments.\nExample of call by value:\n#include <stdio.h>  \nvoid change(int,int);  \nint main()  \n{  \n    int a=10,b=20;  \n    change(a,b); //calling a function by passing the values of variables.  \n    printf(\"Value of a is: %d\",a);  \n    printf(\"\\n\");  \n    printf(\"Value of b is: %d\",b);  \n    return 0;  \n}  \nvoid change(int x,int y)  \n{  \n    x=13;  \n    y=17;  \n}  \nOutput:\nValue of a is: 10\nValue of b is: 20\nExample of call by reference:\n#include <stdio.h>  \nvoid change(int*,int*);  \nint main()  \n{  \n    int a=10,b=20;  \n    change(&a,&b); // calling a function by passing references of variables.  \n    printf(\"Value of a is: %d\",a);  \n    printf(\"\\n\");  \n    printf(\"Value of b is: %d\",b);  \n    return 0;  \n}  \nvoid change(int *x,int *y)  \n{  \n    *x=13;  \n    *y=17;  \n}  \nOutput:\nValue of a is: 13\nValue of b is: 17\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What is recursion in C?",
        "answer": "When a function calls itself, and this process is known as recursion. The function that calls itself is known as a recursive function.\nRecursive function comes in two phases:\nWinding phase\nUnwinding phase\nWinding phase: When the recursive function calls itself, and this phase ends when the condition is reached.\n\nUnwinding phase: Unwinding phase starts when the condition is reached, and the control returns to the original call.\nExample of recursion\n#include <stdio.h>  \nint calculate_fact(int);  \nint main()  \n{  \n int n=5,f;  \n f=calculate_fact(n); // calling a function  \n printf(\"factorial of a number is %d\",f);  \n  return 0;  \n}  \nint calculate_fact(int a)  \n{  \n  if(a==1)  \n  {  \n      return 1;  \n  }  \n  else  \n  return a*calculate_fact(a-1); //calling a function recursively.  \n   }  \nOutput:\nfactorial of a number is 120\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) What is an array in C?",
        "answer": "An Array is a group of similar types of elements. It has a contiguous memory location. It makes the code optimized, easy to traverse and easy to sort. The size and type of arrays cannot be changed after its declaration.\nArrays are of two types:\nOne-dimensional array: One-dimensional array is an array that stores the elements one after the another.\n\nSyntax:\ndata_type array_name[size];  \nMultidimensional array: Multidimensional array is an array that contains more than one array.\nSyntax:\ndata_type array_name[size];  \nExample of an array:\n#include <stdio.h>  \nint main()  \n{  \n   int arr[5]={1,2,3,4,5}; //an array consists of five integer values.  \n   for(int i=0;i<5;i++)  \n   {  \n       printf(\"%d \",arr[i]);  \n   }  \n    return 0;  \n}  \nOutput:\n1 2 3 4 5\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) What is a pointer in C?",
        "answer": "A pointer is a variable that refers to the address of a value. It makes the code optimized and makes the performance fast. Whenever a variable is declared inside a program, then the system allocates some memory to a variable. The memory contains some address number. The variables that hold this address number is known as the pointer variable.\nFor example:\nData_type *p;  \nThe above syntax tells that p is a pointer variable that holds the address number of a given data type value.\nExample of pointer\n#include <stdio.h>  \nint main()  \n{  \n   int *p; //pointer of type integer.  \n   int a=5;  \n   p=&a;  \n   printf(\"Address value of 'a' variable is %u\",p);  \n    return 0;  \n}  \nOutput:\nAddress value of 'a' variable is 428781252\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What is the usage of the pointer in C?",
        "answer": "Accessing array elements: Pointers are used in traversing through an array of integers and strings. The string is an array of characters which is terminated by a null character '\\0'.\nDynamic memory allocation: Pointers are used in allocation and deallocation of memory during the execution of a program.\nCall by Reference: The pointers are used to pass a reference of a variable to other function.\nData Structures like a tree, graph, linked list, etc.: The pointers are used to construct different data structures like tree, graph, linked list, etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What is a NULL pointer in C?",
        "answer": "A pointer that doesn't refer to any address of value but NULL is known as a NULL pointer. When we assign a '0' value to a pointer of any type, then it becomes a Null pointer.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) What is a far pointer in C?",
        "answer": "A pointer which can access all the 16 segments (whole residence memory) of RAM is known as far pointer. A far pointer is a 32-bit pointer that obtains information outside the memory in a given section.",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What is dangling pointer in C?",
        "answer": "If a pointer is pointing any memory location, but meanwhile another pointer deletes the memory occupied by the first pointer while the first pointer still points to that memory location, the first pointer will be known as a dangling pointer. This problem is known as a dangling pointer problem.\nDangling pointer arises when an object is deleted without modifying the value of the pointer. The pointer points to the deallocated memory.\nLet's see this through an example.\n#include<stdio.h>  \nvoid main()  \n{  \n        int *ptr = malloc(constant value); //allocating a memory space.  \n        free(ptr); //ptr becomes a dangling pointer.  \n}  \nIn the above example, initially memory is allocated to the pointer variable ptr, and then the memory is deallocated from the pointer variable. Now, pointer variable, i.e., ptr becomes a dangling pointer.\nHow to overcome the problem of a dangling pointer\nThe problem of a dangling pointer can be overcome by assigning a NULL value to the dangling pointer. Let's understand this through an example:\n#include<stdio.h>  \n      void main()  \n      {  \n              int *ptr = malloc(constant value); //allocating a memory space.  \n              free(ptr); //ptr becomes a dangling pointer.  \n              ptr=NULL; //Now, ptr is no longer a dangling pointer.  \n      }  \nIn the above example, after deallocating the memory from a pointer variable, ptr is assigned to a NULL value. This means that ptr does not point to any memory location. Therefore, it is no longer a dangling pointer.",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What is pointer to pointer in C?",
        "answer": "In case of a pointer to pointer concept, one pointer refers to the address of another pointer. The pointer to pointer is a chain of pointers. Generally, the pointer contains the address of a variable. The pointer to pointer contains the address of a first pointer. Let's understand this concept through an example:\n#include <stdio.h>  \n int main()  \n{  \n    int a=10;  \n    int *ptr,**pptr; // *ptr is a pointer and **pptr is a double pointer.  \n    ptr=&a;  \n    pptr=&ptr;  \n    printf(\"value of a is:%d\",a);  \n    printf(\"\\n\");  \n    printf(\"value of *ptr is : %d\",*ptr);  \n    printf(\"\\n\");  \n    printf(\"value of **pptr is : %d\",**pptr);  \n    return 0;  \n}  \nIn the above example, pptr is a double pointer pointing to the address of the ptr variable and ptr points to the address of 'a' variable.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What is static memory allocation?",
        "answer": "In case of static memory allocation, memory is allocated at compile time, and memory can't be increased while executing the program. It is used in the array.\nThe lifetime of a variable in static memory is the lifetime of a program.\nThe static memory is allocated using static keyword.\nThe static memory is implemented using stacks or heap.\nThe pointer is required to access the variable present in the static memory.\nThe static memory is faster than dynamic memory.\nIn static memory, more memory space is required to store the variable.\nFor example:  \nint a[10];  \nThe above example creates an array of integer type, and the size of an array is fixed, i.e., 10.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What is dynamic memory allocation?",
        "answer": "In case of dynamic memory allocation, memory is allocated at runtime and memory can be increased while executing the program. It is used in the linked list.\nThe malloc() or calloc() function is required to allocate the memory at the runtime.\nAn allocation or deallocation of memory is done at the execution time of a program.\nNo dynamic pointers are required to access the memory.\nThe dynamic memory is implemented using data segments.\nLess memory space is required to store the variable.\nFor example  \nint *p= malloc(sizeof(int)*10);  \nThe above example allocates the memory at runtime.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What functions are used for dynamic memory allocation in C language?",
        "answer": "malloc()\nThe malloc() function is used to allocate the memory during the execution of the program.\nIt does not initialize the memory but carries the garbage value.\nIt returns a null pointer if it could not be able to allocate the requested space.\nSyntax\nptr = (cast-type*) malloc(byte-size) // allocating the memory using malloc() function.  \ncalloc()\nThe calloc() is same as malloc() function, but the difference only is that it initializes the memory with zero value.\nSyntax\nptr = (cast-type*)calloc(n, element-size);// allocating the memory using calloc() function.  \nrealloc()\nThe realloc() function is used to reallocate the memory to the new size.\nIf sufficient space is not available in the memory, then the new block is allocated to accommodate the existing data.\nSyntax\nptr = realloc(ptr, newsize); // updating the memory size using realloc() function.  \nIn the above syntax, ptr is allocated to a new size.\nfree():The free() function releases the memory allocated by either calloc() or malloc() function.\nSyntax\nfree(ptr); // memory is released using free() function.  \nThe above syntax releases the memory from a pointer variable ptr.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What is the difference between malloc() and calloc()?",
        "answer": "calloc() malloc()\nDescription The malloc() function allocates a single block of requested memory. The calloc() function allocates multiple blocks of requested memory.\nInitialization It initializes the content of the memory to zero. It does not initialize the content of memory, so it carries the garbage value.\nNumber of arguments It consists of two arguments. It consists of only one argument.\nReturn value It returns a pointer pointing to the allocated memory. It returns a pointer pointing to the allocated memory.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) What is the structure?",
        "answer": "The structure is a user-defined data type that allows storing multiple types of data in a single unit. It occupies the sum of the memory of all members.\nThe structure members can be accessed only through structure variables.\nStructure variables accessing the same structure but the memory allocated for each variable will be different.\nSyntax of structure\nstruct structure_name  \n{  \n  Member_variable1;  \n Member_variable2  \n.  \n.  \n}[structure variables];  \nLet's see a simple example.\n#include <stdio.h>  \nstruct student  \n{  \n    char name[10];       // structure members declaration.  \n    int age;  \n}s1;      //structure variable  \nint main()  \n{  \n    printf(\"Enter the name\");  \n    scanf(\"%s\",s1.name);  \n    printf(\"\\n\");  \n    printf(\"Enter the age\");  \n    scanf(\"%d\",&s1.age);  \n    printf(\"\\n\");  \n    printf(\"Name and age of a student: %s,%d\",s1.name,s1.age);  \n    return 0;  \n}  \nOutput:\nEnter the name shikha\nEnter the age 26\nName and age of a student: shikha,26  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is a union?",
        "answer": "The union is a user-defined data type that allows storing multiple types of data in a single unit. However, it doesn't occupy the sum of the memory of all members. It holds the memory of the largest member only.\nIn union, we can access only one variable at a time as it allocates one common space for all the members of a union.\nSyntax of union\nunion union_name  \n{  \nMember_variable1;  \nMember_variable2;  \n.  \n.  \nMember_variable n;  \n}[union variables];  \nLet's see a simple example\n#include<stdio.h>  \nunion data  \n{  \n    int a;      //union members declaration.  \n    float b;  \n    char ch;  \n};  \nint main()  \n{  \n  union data d;       //union variable.  \n  d.a=3;  \n  d.b=5.6;  \n  d.ch='a';  \n  printf(\"value of a is %d\",d.a);  \n  printf(\"\\n\");  \n  printf(\"value of b is %f\",d.b);  \n  printf(\"\\n\");  \n  printf(\"value of ch is %c\",d.ch);  \n  return 0;  \n}  \nOutput:\nvalue of a is 1085485921\nvalue of b is 5.600022\nvalue of ch is a\nIn the above example, the value of a and b gets corrupted, and only variable ch shows the actual output. This is because all the members of a union share the common memory space. Hence, the variable ch whose value is currently updated.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) What is an auto keyword in C?",
        "answer": "In C, every local variable of a function is known as an automatic (auto) variable. Variables which are declared inside the function block are known as a local variable. The local variables are also known as an auto variable. It is optional to use an auto keyword before the data type of a variable. If no value is stored in the local variable, then it consists of a garbage value.",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) What is the purpose of sprintf() function?",
        "answer": "The sprintf() stands for \"string print.\" The sprintf() function does not print the output on the console screen. It transfers the data to the buffer. It returns the total number of characters present in the string.\nSyntax\nint sprintf ( char * str, const char * format, ... );  \nLet's see a simple example\n #include<stdio.h>  \nint main()  \n{  \n char a[20];  \n int n=sprintf(a,\"javaToint\");  \n printf(\"value of n is %d\",n);  \n return 0;}  \nOutput:\nvalue of n is 9",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) Can we compile a program without main() function?",
        "answer": "Yes, we can compile, but it can't be executed.\nBut, if we use #define, we can compile and run a C program without using the main() function. For example:\n#include<stdio.h>    \n#define start main    \nvoid start() {    \n   printf(\"Hello\");    \n}    \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) What is a token?",
        "answer": "The Token is an identifier. It can be constant, keyword, string literal, etc. A token is the smallest individual unit in a program. C has the following tokens:\nIdentifiers: Identifiers refer to the name of the variables.\nKeywords: Keywords are the predefined words that are explained by the compiler.\nConstants: Constants are the fixed values that cannot be changed during the execution of a program.\nOperators: An operator is a symbol that performs the particular operation.\nSpecial characters: All the characters except alphabets and digits are treated as special characters.",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) What is command line argument?",
        "answer": "The argument passed to the main() function while executing the program is known as command line argument. For example:\nmain(int count, char *args[]){  \n//code to  be executed  \n}",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) What is the acronym for ANSI?",
        "answer": "The ANSI stands for \" American National Standard Institute.\" It is an organization that maintains the broad range of disciplines including photographic film, computer languages, data encoding, mechanical parts, safety and more.",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) What is the difference between getch() and getche()?",
        "answer": "The getch() function reads a single character from the keyboard. It doesn't use any buffer, so entered data will not be displayed on the output screen.\nThe getche() function reads a single character from the keyword, but data is displayed on the output screen. Press Alt+f5 to see the entered character.\nLet's see a simple example\n#include<stdio.h>  \n#include<conio.h>  \nint main()  \n{  \n       char ch;  \n printf(\"Enter a character \");  \n ch=getch(); // taking an user input without printing the value.  \n printf(\"\\nvalue of ch is %c\",ch);  \n printf(\"\\nEnter a character again \");  \n ch=getche(); // taking an user input and then displaying it on the screen.  \n  printf(\"\\nvalue of ch is %c\",ch);  \n return 0;  \n}  \nOutput:\nEnter a character\nvalue of ch is a\nEnter a character again a\nvalue of ch is a\nIn the above example, the value entered through a getch() function is not displayed on the screen while the value entered through a getche() function is displayed on the screen.",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) What is the newline escape sequence?",
        "answer": "The new line escape sequence is represented by \"\\n\". It inserts a new line on the output screen.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) Who is the main contributor in designing the C language after Dennis Ritchie?",
        "answer": "Brain Kernighan.",
        "reference": "javatpoint.com"
    },
    {
        "question": "35) What is the difference between near, far and huge pointers?",
        "answer": "A virtual address is composed of the selector and offset.\nA near pointer doesn't have explicit selector whereas far, and huge pointers have explicit selector. When you perform pointer arithmetic on the far pointer, the selector is not modified, but in case of a huge pointer, it can be modified.\nThese are the non-standard keywords and implementation specific. These are irrelevant in a modern platform.",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What is the maximum length of an identifier?",
        "answer": "It is 32 characters ideally but implementation specific.",
        "reference": "javatpoint.com"
    },
    {
        "question": "37) What is typecasting?",
        "answer": "The typecasting is a process of converting one data type into another is known as typecasting. If we want to store the floating type value to an int type, then we will convert the data type into another data type explicitly.\nSyntax\n(type_name) expression;",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) What are the functions to open and close the file in C language?",
        "answer": "The fopen() function is used to open file whereas fclose() is used to close file.",
        "reference": "javatpoint.com"
    },
    {
        "question": "39) Can we access the array using a pointer in C language?",
        "answer": "Yes, by holding the base address of array into a pointer, we can access the array using a pointer.",
        "reference": "javatpoint.com"
    },
    {
        "question": "40) What is an infinite loop?",
        "answer": "A loop running continuously for an indefinite number of times is called the infinite loop.\nInfinite For Loop:\nfor(;;){  \n//code to be executed  \n}  \nInfinite While Loop:\nwhile(1){  \n//code to be executed  \n}  \nInfinite Do-While Loop:\ndo{  \n//code to be executed  \n}while(1);",
        "reference": "javatpoint.com"
    },
    {
        "question": "41) Write a program to print \"hello world\" without using a semicolon?",
        "answer": "#include<stdio.h>      \nvoid main(){      \n if(printf(\"hello world\")){} // It prints the ?hello world? on the screen.  \n}     \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "42) Write a program to swap two numbers without using the third variable?",
        "answer": "#include<stdio.h>      \n#include<conio.h>      \nmain()      \n{      \nint a=10, b=20;    //declaration of variables.  \nclrscr();        //It clears the screen.  \nprintf(\"Before swap a=%d b=%d\",a,b);        \n      a=a+b;//a=30 (10+20)       \nb=a-b;//b=10 (30-20)      \na=a-b;//a=20 (30-10)      \n      printf(\"\\nAfter swap a=%d b=%d\",a,b);      \ngetch();      \n}  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "43) Write a program to print Fibonacci series without using recursion?",
        "answer": "#include<stdio.h>    \n#include<conio.h>    \nvoid main()    \n{    \n int n1=0,n2=1,n3,i,number;    \n clrscr();    \n printf(\"Enter the number of elements:\");    \n scanf(\"%d\",&number);    \n printf(\"\\n%d %d\",n1,n2);//printing 0 and 1    \n     for(i=2;i<number;++i)//loop starts from 2 because 0 and 1 are already printed    \n {    \n  n3=n1+n2;    \n  printf(\" %d\",n3);    \n  n1=n2;    \n  n2=n3;    \n }    \ngetch();    \n}    \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "44) Write a program to print Fibonacci series using recursion?",
        "answer": "#include<stdio.h>      \n#include<conio.h>      \nvoid printFibonacci(int n) // function to calculate the fibonacci series of a given number.  \n{      \nstatic int n1=0,n2=1,n3;    // declaration of static variables.  \n    if(n>0){      \n         n3 = n1 + n2;      \n         n1 = n2;      \n        n2 = n3;      \n         printf(\"%d \",n3);      \n         printFibonacci(n-1);    //calling the function recursively.  \n    }      \n}      \nvoid main(){      \n    int n;      \n    clrscr();      \n    printf(\"Enter the number of elements: \");      \n    scanf(\"%d\",&n);      \n    printf(\"Fibonacci Series: \");      \n    printf(\"%d %d \",0,1);      \n    printFibonacci(n-2);//n-2 because 2 numbers are already printed      \n    getch();      \n}      \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "45) Write a program to check prime number in C Programming?",
        "answer": "#include<stdio.h>      \n#include<conio.h>      \nvoid main()      \n{      \nint n,i,m=0,flag=0;    //declaration of variables.  \nclrscr();    //It clears the screen.  \nprintf(\"Enter the number to check prime:\");      \nscanf(\"%d\",&n);      \nm=n/2;      \nfor(i=2;i<=m;i++)      \n{      \nif(n%i==0)      \n{      \nprintf(\"Number is not prime\");      \nflag=1;      \nbreak;    //break keyword used to terminate from the loop.  \n}      \n}      \nif(flag==0)      \nprintf(\"Number is prime\");      \ngetch();    //It reads a character from the keyword.  \n}  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "46) Write a program to check palindrome number in C Programming?",
        "answer": "#include<stdio.h>    \n#include<conio.h>    \nmain()    \n{    \nint n,r,sum=0,temp;    \nclrscr();    \nprintf(\"enter the number=\");    \nscanf(\"%d\",&n);    \ntemp=n;    \nwhile(n>0)    \n{    \nr=n%10;    \nsum=(sum*10)+r;    \nn=n/10;    \n}    \nif(temp==sum)    \nprintf(\"palindrome number \");    \nelse    \nprintf(\"not palindrome\");    \ngetch();    \n}    \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "47) Write a program to print factorial of given number without using recursion?",
        "answer": "#include<stdio.h>    \n#include<conio.h>    \nvoid main(){    \n  int i,fact=1,number;    \n  clrscr();    \n  printf(\"Enter a number: \");    \n  scanf(\"%d\",&number);    \n      for(i=1;i<=number;i++){    \n      fact=fact*i;    \n  }    \n  printf(\"Factorial of %d is: %d\",number,fact);    \n  getch();    \n}    \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "48) Write a program to print factorial of given number using recursion?",
        "answer": "#include<stdio.h>      \n#include<conio.h>      \n long factorial(int n)    // function to calculate the factorial of a given number.   \n{      \n  if (n == 0)      \n    return 1;      \nelse      \nreturn(n * factorial(n-1));    //calling the function recursively.  \n}      \n void main()      \n{      \n  int number;    //declaration of variables.  \n  long fact;      \n clrscr();      \n  printf(\"Enter a number: \");      \nscanf(\"%d\", &number);       \n fact = factorial(number);    //calling a function.  \nprintf(\"Factorial of %d is %ld\\n\", number, fact);      \n getch();   //It reads a character from the keyword.   \n}  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "49) Write a program to check Armstrong number in C?",
        "answer": "#include<stdio.h>      \n#include<conio.h>      \nmain()      \n{      \nint n,r,sum=0,temp;    //declaration of variables.  \nclrscr(); //It clears the screen.     \nprintf(\"enter the number=\");      \nscanf(\"%d\",&n);      \ntemp=n;      \nwhile(n>0)      \n{      \nr=n%10;      \nsum=sum+(r*r*r);      \nn=n/10;      \n}      \nif(temp==sum)      \nprintf(\"armstrong  number \");      \nelse      \nprintf(\"not armstrong number\");      \ngetch();  //It reads a character from the keyword.  \n}    \nMore details.",
        "reference": "javatpoint.com"
    }
]