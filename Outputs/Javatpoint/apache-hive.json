[
    {
        "question": "",
        "answer": "Apache Hive is a Data warehousing tool developed over the Hadoop Distributed File System (HDFS). It runs SQL like queries called HQL (Hive Query Language), which gets internally converted to map reduce jobs. Hive is developed by Facebook and used for querying and analysis of data that is stored in HDFS. Hive is an open-source tool or software that facilitates programmers to analyze large data sets on Hadoop. It also supports Data Definition Language (DDL), Data Manipulation Language (DML) and user-defined functions.\nNote: Although Hive is not a database, it gives you logical abstraction over the databases and the tables.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) When can we use Hive?",
        "answer": "We can use Hive in the following conditions:\nADVERTISEMENT\nWhen we have to make data warehouse applications.\nWhen we have to deal with static data instead of dynamic data.\nWhen we have to maintain a large data set.\nWhen we use queries instead of scripting.\nWhen the application is on high latency (high response time).",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Hive supports all those client applications written in Java, PHP, Python, C, and Ruby programming languages.",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) Can you rename a table in Hive?",
        "answer": "Yes, we can rename a table in Hive by using the following command:\nAlter Table table_name RENAME TO new_name",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) What are the different types of tables available in Hive?",
        "answer": "There are two types of tables available in Hive:\nManaged tables\nExternal tables",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What is the difference between external and managed tables in Hive?",
        "answer": "There are two types of tables available in Hive, external tables and managed tables. Here, external tables are used to give data control to Hive but not control of a schema. On the other hand, the managed tables give both schema and data control to Hive.",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What are the different modes of Hive?",
        "answer": "According to the size of data nodes in Hadoop, Hive can be operated in the following two modes:\nLocal mode\nMap reduce mode",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) When should we use Map reduce mode in Hive?",
        "answer": "In Hive, the Map reduce mode is used in the following conditions:\nTo perform on a large amount of data sets and query going to execute in a parallel way.\nWhen Hadoop has multiple data nodes and is distributed across different nodes, we should use this mode.\nTo process large data sets and also achieve better performance.",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) Can we use Hive for OLTP systems? / Is Hive suitable to be used for OLTP systems? Why?",
        "answer": "No. Because Hive does not provide insert and update at the row level, it is not suitable for the OLTP system.\nADVERTISEMENT",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) What are the most important components of Hive Architecture?",
        "answer": "The most important components of Hive Architecture are:\nUser Interface\nCompiler\nMetastore\nDriver\nExecute Engine",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) Where does the data of a Hive table get stored?",
        "answer": "By default, the data of a Hive table is stored in an HDFS directory - /user/hive/warehouse. We can adjust it by setting the desired directory in the configuration parameter hive.metastore.warehouse.dir in hive-site.xml.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What are the three main parts that Hive is composed of?",
        "answer": "Hive contains the following three main parts:\nHive Clients\nHive Services\nHive Storage and Computing",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) Is it possible to change the default location of a managed table in Hive?",
        "answer": "Yes, it is possible to change the default location of a managed table in Hive by using the LOCATION '<hdfs_path>' clause.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) What do you understand by a Hive Metastore?",
        "answer": "A Hive Metastore is a relational database used to store the Metadata of Hive partitions, tables, databases, etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What is the difference between local and remote Metastores in Hive?",
        "answer": "Local Metastores: Local metastores run on the same Java Virtual Machine (JVM) as the Hive service.\nRemote Metastore: The Remote metastores run on a separate, distinct JVM as the Hive service.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What types of databases does Hive support?",
        "answer": "Hive supports two types of databases:\nDerby Database: Hive uses a derby database for single-user metadata storage.\nMySQL Database: Hive uses the MySQL database in the case of multiple user Metadata or shared Metadata.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) Is it possible that multiple users use one Metastore?",
        "answer": "No, Hive doesn't support metastore sharing so, multiple users can not use one Metastore.",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) Why does Hive not store metadata information in HDFS?",
        "answer": "Hive does not store metadata information in HDFS. Instead, it uses RDBMS. Hive stores metadata information in the metastore, and to achieve low latency, it uses RDBMS. Because HDFS read/write operations are time-consuming processes.",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What are the three different modes in which we can operate Hive?",
        "answer": "The three modes we can operate Hive are local mode, distributed mode, and pseudo-distributed mode.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What is a partition in Hive?",
        "answer": "In Hive, a partition is used to group similar data types together based on column or partition key. Hive organizes tables into partitions. In other words, we can say that partition is used to create a sub-directory in the table directory. Each table can have one or more partition keys to identify a particular partition.",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) Why is partitioning used in Hive?",
        "answer": "Partitioning is used in Hive to reduce the query latency. Instead of scanning the entire tables, it scans only the relevant partitions and corresponding datasets.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What do you understand by dynamic partitioning, and when is it used?",
        "answer": "A partitioning is called dynamic partitioning while loading the data into the Hive table. In other words, we can say that dynamic partitioning values for partition columns in the runtime.\nDynamic partitioning is used in the following cases:\nWhile we Load data from an existing non-partitioned table, it is used to improve the sampling. Thus it decreases the query latency.\nWhile we do not know all the values of the partitions beforehand, so, finding these partition values manually from a huge dataset is a tedious task.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What are the three Hive collection data types?",
        "answer": "The three main Hive collection data types are:\nARRAY\nMAP\nSTRUCT",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) When should we use SORT BY instead of ORDER BY?",
        "answer": "We should use SORT BY instead of ORDER BY when we have to sort huge datasets. The reason is that the SORT BY clause sorts the data using multiple reducers, while the ORDER BY sorts all of the data together using a single reducer.\nHence, if you use the ORDER BY clause, it will take a lot of time to execute many inputs. So, in this case, SORT BY is preferred over ORDER BY.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) Which data type in Hive is used to store data information?",
        "answer": "The TIMESTAMP data type in Hive is used to store all data information in the java.sql.timestamp format.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) What is a Hive variable? Why is it used?",
        "answer": "A Hive variable is a variable created in the Hive environment that Hive scripts can reference. It is used to pass some values to the Hive queries when we start executing queries.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Yes, we can run a Unix shell command from Hive by using the ! mark just before the command.\nFor example, !pwd at hive prompt can be used to list the current directory.",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) Is it possible to execute Hive queries from a script file?",
        "answer": "Yes, we can execute Hive queries from a script file with the help of a source command. For example - Hive> source /path/queryfile.hql",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) Is it possible to delete the DBPROPERTY in Hive? / How can you delete the DBPROPERTY in Hive?",
        "answer": "It is not possible to delete the DBPROPERTY in Hive because there is no proper way to delete the DBPROPERTY.",
        "reference": "javatpoint.com"
    },
    {
        "question": "HIVERC file?",
        "answer": "The .HIVERC is a file that contains a list of commands that need to be run when the Command Line Input (CLI) is initiated.",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) What do you understand by schema on read?",
        "answer": "The schema is validated with the data while reading the data and not enforced while writing the data, and that's why it is called schema on read.",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) How can you check if a specific partition exists in Hive?",
        "answer": "We should use the following command to check if a specific partition exists in Hive:\nSHOW PARTITIONS table_name PARTITION (partitioned_column='partition_value')",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) What do you understand by bucketing in Hive? Why do we need a bucket?",
        "answer": "In Hive, bucketing is the concept of breaking data down into ranges, which are known as buckets. Bucketing is mainly a data organizing technique. It is similar to partitioning in Hive with an added functionality that it divides large datasets into more manageable parts known as buckets. The partitioning into buckets can give extra structure to the data to use for more efficient queries. The range for a bucket is determined by the hash value of one or more columns in the dataset.\nThere are two main reasons for performing bucketing to a partition:\nWe perform bucketing to a partition because a map side join requires the data belonging to a unique join key to be present in the same partition.\nBucketing facilitates us to decrease the query time, and it also makes the sampling process more efficient.",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) How can you list all databases that began with the letter 'C'?",
        "answer": "We can list all databases that began with the letter 'C' by using the following command:\nSHOW DATABASES LIKE 'C.*.'",
        "reference": "javatpoint.com"
    },
    {
        "question": "35) How Hive distributes the rows into buckets?",
        "answer": "Hive distributes the rows into buckets by using the following formula:\nhash_function (bucketing_column) modulo (num_of_buckets)   \nThe hash_function depends on the column data type. Although, hash_function for integer data type will be:\nhash_function (int_type_column)= value of int_type_column",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What do you understand by indexing, and why do we need it?",
        "answer": "Indexing in Hive is a Hive query optimization technique, and it is mainly used to speed up the access of a column or set of columns in a Hive database. With the use of the index, the Hive database system does not need to read all rows in the table, especially that one has selected. That's why we use indexing.",
        "reference": "javatpoint.com"
    },
    {
        "question": "37) Which Java class is used to handle the input record encoding into files that store Hive tables?",
        "answer": "The following Java class is used to handle the input record encoding into files that store Hive tables:\n'org.apache.hadoop.mapred.TextInputFormat'",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) Which Java class is used to handle the output record encoding into Hive query files?",
        "answer": "The following Java class is used to handle the output record encoding into Hive query files:\n'org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat'",
        "reference": "javatpoint.com"
    },
    {
        "question": "39) What is the use of Hcatalog in Hive?",
        "answer": "In Hive, Hcatalog is used to share data structures with external systems. It provides access to Hive metastore to the users of other tools on Hadoop so that they can easily read and write data to Hive's data warehouse.",
        "reference": "javatpoint.com"
    },
    {
        "question": "40) What are the key differences between Hive and HBase?",
        "answer": "Both Hive and HBase are incredible Apache tools, and both are used for Big Data, but there are some differences between them. A list of key differences between Hive and HBase:\nHive HBase\nHive is a query engine. Hbase is data storage mainly for unstructured data.\nHive allows most of the SQL queries. HBase does not allow SQL queries.\nHive is mainly used for batch processing. Hbase is mainly used for transactional processing.\nHive is not real-time processing. HBase is real-time processing.\nHive is only used for analytical queries. HBase is used for real-time querying.\nHive runs on the top of MapReduce. HBase runs on the top of HDFS (Hadoop distributed file system).\nHive is not a full database. It is a data warehouse framework HBase supports the NoSQL database.\nHive provides SQL features to Spark/Hadoop data. HBase is used to store and process Hadoop data in real-time.\nHive has a schema model. HBase is free from the schema model.\nHive is made for high latency operations. HBase is made for low-level latency operations.\nHive is not suited for real-time querying. HBase is used for real-time querying of Big Data.",
        "reference": "javatpoint.com"
    },
    {
        "question": "41) What do you understand by a Hive variable? What is its usage?",
        "answer": "Hive variables are created in the Hive environment that can be referenced by Hive scripts. These variables are used for passing some values to the hive queries when the query starts executing.",
        "reference": "javatpoint.com"
    },
    {
        "question": "42) What do you understand by ObjectInspector functionality in Hive?",
        "answer": "In Hive, the ObjectInspector functionality is used to analyze the structure of individual columns and the internal structure of the row objects. It facilitates us to get access to complex objects which can be stored in multiple formats in Hive.",
        "reference": "javatpoint.com"
    },
    {
        "question": "43) What is UDF in Hive?",
        "answer": "In Hive, UDF is a user-designed function created with a Java program to address a specific function not part of the existing Hive functions.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "There are mainly 4 different types of joins in Hive:\nJOIN\nLEFT OUTER JOIN\nRIGHT OUTER JOIN\nFULL OUTER JOIN\nExample:\nTo understand it well, let's consider two tables named \"CUSTOMERS\" and \"ORDERS\" respectively.\nTable 1: CUSTOMERS\nID NAME AGE ADDRESS SALARY\n1 Alex 21 New York 2000.00\n2 Aryan 22 Delhi 3000.00\n3 Neetu 23 Lucknow 3500.00\n4 Raj 24 Kanpur 2600.00\n5 Priya 25 Ludhiana 3200.00\n6 Robert 26 London 4000.00\n7 Julia 27 Paris 2700.00\nTable 1: ORDERS\nOID DATE CUSTOMER_ID AMOUNT\n102 2009-10-08 00:00:00 3 3000\n100 2009-10-08 00:00:00 3 1500\n101 2009-11-20 00:00:00 2 1560\n103 2008-05-20 00:00:00 4 2060\nNow, see the different join operations:\nJOIN\nThe Hive JOIN clause is used to combine and retrieve the records from multiple tables. It is very similar to Outer Join in SQL. In Hive, a JOIN condition is to be raised using the tables' primary keys and foreign keys.\nUse the following query to demonstrate JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, c.AGE, o.AMOUNT   \nFROM CUSTOMERS c JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get to the following result:\nID NAME AGE AMOUNT\n3 Neetu 23 3000\n3 Neetu 23 1500\n2 Aryan 22 1560\n4 Raj 24 2060\nLEFT OUTER JOIN\nThe LEFT OUTER JOIN in Hive returns all the rows from the left table, even if there are no matches in the right table. This means, if the ON clause matches zero records in the right table, the JOIN still returns a row in the result with a NULL in each column from the right table.\nIn other words, we can say that a LEFT OUTER JOIN returns all the values from the left table, plus the matched values from the right table and NULL in the case of no matching JOIN predicate.\nUse the following query to demonstrate LEFT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nLEFT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\nRIGHT OUTER JOIN\nThe RIGHT OUTER JOIN in Hive returns all the rows from the right table, even if there are no matches in the left table. It is the simple opposite of LEFT OUTER JOIN. If the ON clause matches zero records in the left table, the RIGHT OUTER JOIN still returns a row with NULL in each column from the left table.\nIn other words, we can say that a RIGHT OUTER JOIN returns all the values from the right table, plus the matched values from the left table and NULL in case of no matching join predicate.\nUse the following query to demonstrate RIGHT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE  \nFROM CUSTOMERS c   \nRIGHT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\nFULL OUTER JOIN\nThe FULL OUTER JOIN in Hive combines the records of both the left and the right outer tables that satisfy the JOIN condition. The result table contains all the records from both the tables or fills in NULL values for missing matches on either side.\nUse the following query to demonstrate FULL OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nFULL OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00",
        "reference": "javatpoint.com"
    },
    {
        "question": "JOIN",
        "answer": "The Hive JOIN clause is used to combine and retrieve the records from multiple tables. It is very similar to Outer Join in SQL. In Hive, a JOIN condition is to be raised using the tables' primary keys and foreign keys.\nUse the following query to demonstrate JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, c.AGE, o.AMOUNT   \nFROM CUSTOMERS c JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get to the following result:\nID NAME AGE AMOUNT\n3 Neetu 23 3000\n3 Neetu 23 1500\n2 Aryan 22 1560\n4 Raj 24 2060\nLEFT OUTER JOIN\nThe LEFT OUTER JOIN in Hive returns all the rows from the left table, even if there are no matches in the right table. This means, if the ON clause matches zero records in the right table, the JOIN still returns a row in the result with a NULL in each column from the right table.\nIn other words, we can say that a LEFT OUTER JOIN returns all the values from the left table, plus the matched values from the right table and NULL in the case of no matching JOIN predicate.\nUse the following query to demonstrate LEFT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nLEFT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\nRIGHT OUTER JOIN\nThe RIGHT OUTER JOIN in Hive returns all the rows from the right table, even if there are no matches in the left table. It is the simple opposite of LEFT OUTER JOIN. If the ON clause matches zero records in the left table, the RIGHT OUTER JOIN still returns a row with NULL in each column from the left table.\nIn other words, we can say that a RIGHT OUTER JOIN returns all the values from the right table, plus the matched values from the left table and NULL in case of no matching join predicate.\nUse the following query to demonstrate RIGHT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE  \nFROM CUSTOMERS c   \nRIGHT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\nFULL OUTER JOIN\nThe FULL OUTER JOIN in Hive combines the records of both the left and the right outer tables that satisfy the JOIN condition. The result table contains all the records from both the tables or fills in NULL values for missing matches on either side.\nUse the following query to demonstrate FULL OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nFULL OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00",
        "reference": "javatpoint.com"
    },
    {
        "question": "LEFT OUTER JOIN",
        "answer": "The LEFT OUTER JOIN in Hive returns all the rows from the left table, even if there are no matches in the right table. This means, if the ON clause matches zero records in the right table, the JOIN still returns a row in the result with a NULL in each column from the right table.\nIn other words, we can say that a LEFT OUTER JOIN returns all the values from the left table, plus the matched values from the right table and NULL in the case of no matching JOIN predicate.\nUse the following query to demonstrate LEFT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nLEFT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\nRIGHT OUTER JOIN\nThe RIGHT OUTER JOIN in Hive returns all the rows from the right table, even if there are no matches in the left table. It is the simple opposite of LEFT OUTER JOIN. If the ON clause matches zero records in the left table, the RIGHT OUTER JOIN still returns a row with NULL in each column from the left table.\nIn other words, we can say that a RIGHT OUTER JOIN returns all the values from the right table, plus the matched values from the left table and NULL in case of no matching join predicate.\nUse the following query to demonstrate RIGHT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE  \nFROM CUSTOMERS c   \nRIGHT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\nFULL OUTER JOIN\nThe FULL OUTER JOIN in Hive combines the records of both the left and the right outer tables that satisfy the JOIN condition. The result table contains all the records from both the tables or fills in NULL values for missing matches on either side.\nUse the following query to demonstrate FULL OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nFULL OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00",
        "reference": "javatpoint.com"
    },
    {
        "question": "RIGHT OUTER JOIN",
        "answer": "The RIGHT OUTER JOIN in Hive returns all the rows from the right table, even if there are no matches in the left table. It is the simple opposite of LEFT OUTER JOIN. If the ON clause matches zero records in the left table, the RIGHT OUTER JOIN still returns a row with NULL in each column from the left table.\nIn other words, we can say that a RIGHT OUTER JOIN returns all the values from the right table, plus the matched values from the left table and NULL in case of no matching join predicate.\nUse the following query to demonstrate RIGHT OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE  \nFROM CUSTOMERS c   \nRIGHT OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\nFULL OUTER JOIN\nThe FULL OUTER JOIN in Hive combines the records of both the left and the right outer tables that satisfy the JOIN condition. The result table contains all the records from both the tables or fills in NULL values for missing matches on either side.\nUse the following query to demonstrate FULL OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nFULL OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00",
        "reference": "javatpoint.com"
    },
    {
        "question": "FULL OUTER JOIN",
        "answer": "The FULL OUTER JOIN in Hive combines the records of both the left and the right outer tables that satisfy the JOIN condition. The result table contains all the records from both the tables or fills in NULL values for missing matches on either side.\nUse the following query to demonstrate FULL OUTER JOIN on the CUSTOMERS and ORDERS tables:\nhive> SELECT c.ID, c.NAME, o.AMOUNT, o.DATE   \nFROM CUSTOMERS c   \nFULL OUTER JOIN ORDERS o   \nON (c.ID = o.CUSTOMER_ID);  \nAfter the successful execution of the query, you get the following result:\nID NAME AMOUNT DATE\n1 Alex NULL NULL\n2 Aryan 1560 2009-11-20 00:00:00\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n4 Raj 2060 2008-05-20 00:00:00\n5 Priya NULL NULL\n6 Robert NULL NULL\n7 Julia NULL NULL\n3 Neetu 3000 2009-10-08 00:00:00\n3 Neetu 1500 2009-10-08 00:00:00\n2 Aryan 1560 2009-11-20 00:00:00\n4 Raj 2060 2008-05-20 00:00:00",
        "reference": "javatpoint.com"
    }
]