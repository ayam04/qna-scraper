[
    {
        "question": "1) What is JavaScript?",
        "answer": "JavaScript is a scripting language. It is different from Java language. It is object-based, lightweight, cross-platform translated language. It is widely used for client-side validation. The JavaScript Translator (embedded in the browser) is responsible for translating the JavaScript code for the web browser. More details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Some of the features of JavaScript are:\nADVERTISEMENT\nLightweight\nInterpreted programming language\nGood for the applications which are network-centric\nComplementary to Java\nComplementary to HTML\nOpen source\nCross-platform",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) Who developed JavaScript, and what was the first name of JavaScript?",
        "answer": "JavaScript was developed by Brendan Eich, who was a Netscape programmer. Brendan Eich developed this new scripting language in just ten days in the year September 1995. At the time of its launch, JavaScript was initially called Mocha. After that, it was called Live Script and later known as JavaScript.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Some of the advantages of JavaScript are:\nServer interaction is less\nFeedback to the visitors is immediate\nInteractivity is high\nInterfaces are richer",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Some of the disadvantages of JavaScript are:\nNo support for multithreading\nNo support for multiprocessing\nReading and writing of files is not allowed\nNo support for networking applications.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "The function which has named at the time of definition is called a named function. For example\nfunction msg()  \n{  \n  document.writeln(\"Named Function\");  \n}  \nmsg();",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) Name the types of functions",
        "answer": "The types of function are:\nNamed - These type of functions contains name at the time of definition. For Example:\nfunction display()  \n{  \n  document.writeln(\"Named Function\");  \n}  \ndisplay();  \nAnonymous - These type of functions doesn't contain any name. They are declared dynamically at runtime.\nvar display=function()  \n{  \n  document.writeln(\"Anonymous Function\");  \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) Define anonymous function",
        "answer": "It is a function that has no name. These functions are declared dynamically at runtime using the function operator instead of the function declaration. The function operator is more flexible than a function declaration. It can be easily used in the place of an expression. For example:\nvar display=function()  \n{  \n  alert(\"Anonymous Function is invoked\");  \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) Can an anonymous function be assigned to a variable?",
        "answer": "Yes, you can assign an anonymous function to a variable.",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) In JavaScript what is an argument object?",
        "answer": "The variables of JavaScript represent the arguments that are passed to a function.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "In JavaScript, we need closures when a variable which is defined outside the scope in reference is accessed from some inner scope.\nvar num = 10;  \nfunction sum()   \n{  \ndocument.writeln(num+num);  \n}   \nsum();",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) If we want to return the character from a specific index which method is used?",
        "answer": "The JavaScript string charAt() method is used to find out a char value present at the specified index. The index number starts from 0 and goes to n-1, where n is the length of the string. The index value can't be a negative, greater than or equal to the length of the string. For example:\nvar str=\"Javatpoint\";    \ndocument.writeln(str.charAt(4));",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) What is the difference between JavaScript and JScript?",
        "answer": "Netscape provided the JavaScript language. Microsoft changed the name and called it JScript to avoid the trademark issue. In other words, you can say JScript is the same as JavaScript, but Microsoft provides it.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) How to write a hello world example of JavaScript?",
        "answer": "A simple example of JavaScript hello world is given below. You need to place it inside the body tag of HTML.\n<script type=\"text/javascript\">  \ndocument.write(\"JavaScript Hello World!\");  \n</script>  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What are the key differences between Java and JavaScript? / How is JavaScript different from Java?",
        "answer": "JavaScript is a lightweight programming language (most commonly known as scripting language) developed by Netscape, Inc. It is used to make web pages interactive. It is not a part of the Java platform. Following is a list of some key differences between Java and JavaScript\nA list of key differences between Java and JavaScript\nJava JavaScript\nJava is a complete and strongly typed programming language used for backend coding. In Java, variables must be declared first to use in the program, and the type of a variable is checked at compile-time. JavaScript is a weakly typed, lightweight programming language (most commonly known as scripting language) and has more relaxed syntax and rules.\nJava is an object-oriented programming (OOPS) language or structured programming languages such as C, C++, or .Net. JavaScript is a client-side scripting language, and it doesn't fully support the OOPS concept. It resides inside the HTML documents and is used to make web pages interactive (not achievable with simple HTML).\nJava creates applications that can run in any virtual machine (JVM) or browser. JavaScript code can run only in the browser, but it can now run on the server via Node.js.\nThe Java code needs to be compiled. The JavaScript code doesn't require to be complied.\nJava Objects are class-based. You can't make any program in Java without creating a class. JavaScript Objects are prototype-based.\nJava is a Complete and Standalone language that can be used in backend coding. JavaScript is assigned within a web page and integrates with its HTML content.\nJava programs consume more memory. JavaScript code is used in HTML web pages and requires less memory.\nThe file extension of the Java program is written as \".Java\" and it translates source code into bytecodes which are then executed by JVM (Java Virtual Machine). The JavaScript file extension is written as \".js\" and it is interpreted but not compiled. Every browser has a JavaScript interpreter to execute the JS code.\nJava supports multithreading. JavaScript doesn't support multithreading.\nJava uses a thread-based approach to concurrency. JavaScript uses an event-based approach to concurrency.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) How to use external JavaScript file?",
        "answer": "I am assuming that js file name is message.js, place the following script tag inside the head tag.\n<script type=\"text/javascript\" src=\"message.js\"></script>  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) Is JavaScript case sensitive language?",
        "answer": "Yes, JavaScript is a case sensitive language. For example:\nVar msg = \"JavaScript is a case-sensitive language\"; //Here, var should be used to declare a variable  \nfunction display()   \n{  \ndocument.writeln(msg); // It will not display the result.  \n}   \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What is BOM?",
        "answer": "BOM stands for Browser Object Model. It provides interaction with the browser. The default object of a browser is a window. So, you can call all the functions of the window by specifying the window or directly. The window object provides various properties like document, history, screen, navigator, location, innerHeight, innerWidth,\n\nMore Details: Browser Object Model",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What is DOM? What is the use of document object?",
        "answer": "DOM stands for Document Object Model. A document object represents the HTML document. It can be used to access and change the content of HTML.\nMore Details: Document Object Model",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What is the use of window object?",
        "answer": "The window object is created automatically by the browser that represents a window of a browser. It is not an object of JavaScript. It is a browser object.\n\nThe window object is used to display the popup dialog box. Let's see with description.\nMethod Description\nalert() displays the alert box containing the message with ok button.\nconfirm() displays the confirm dialog box containing the message with ok and cancel button.\nprompt() displays a dialog box to get input from the user.\nopen() opens the new window.\nclose() closes the current window.\nsetTimeout() performs the action after specified time like calling function, evaluating expressions.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What is the use of history object?",
        "answer": "The history object of a browser can be used to switch to history pages such as back and forward from the current page or another page. There are three methods of history object.\nhistory.back() - It loads the previous page.\nhistory.forward() - It loads the next page.\nhistory.go(number) - The number may be positive for forward, negative for backward. It loads the given page number.\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) How to write a comment in JavaScript?",
        "answer": "There are two types of comments in JavaScript.\nSingle Line Comment: It is represented by // (double forward slash)\nMulti-Line Comment: Slash represents it with asterisk symbol as /* write comment here */\nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) How to create a function in JavaScript?",
        "answer": "To create a function in JavaScript, follow the following syntax.\nfunction function_name(){  \n//function body  \n}  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) What are the different data types present in JavaScript?",
        "answer": "There are two types of data types in JavaScript:\nPrimitive data types\nNon- Primitive data types\nPrimitive data types\n\nThe primitive data types are as follows:\nString: The string data type represents a sequence of characters. It is written within quotes and can be represented using a single or a double quote.\nExample:\nvar str1 = \"Hello JavaTpoint\"; //using double quotes  \nvar str2 = 'Hello Javatpoint'; //using single quotes  \nNumber: The number data type is used to represent numeric values and can be written with or without decimals.\nExample:\nvar x = 5; //without decimal  \nvar y = 5.0; //with decimal  \nBoolean: The Boolean data type is used to represent a Boolean value, either false or true. This data type is generally used for conditional testing.\nExample:\nvar x = 5;  \nvar y =  6;  \nvar z =  5;  \n(x == y) // returns false  \n(x == z) //returns true  \nBigInt: The BigInt data type is used to store numbers beyond the Number data type limitation. This data type can store large integers and is represented by adding \"n\" to an integer literal.\nExample:\nvar bigInteger =  123456789012345678901234567890;  \n// This is an example of bigInteger.  \nUndefined: The Undefined data type is used when a variable is declared but not assigned. The value of this data type is undefined, and its type is also undefined.\nExample:\nvar x; // value of x is undefined  \nvar y = undefined; // You can also set the value of a variable as undefined.  \nNull: The Null data type is used to represent a non-existent, null, or a invalid value i.e. no value at all.\nExample:\nvar  x = null;  \nSymbol: Symbol is a new data type introduced in the ES6 version of JavaScript. It is used to store an anonymous and unique value.\nExample:\nvar symbol1 = Symbol('symbol');  \ntypeof: The typeof operator is used to determine what type of data a variable or operand contains. It can be used with or without parentheses (typeof(x) or typeof x). This is mainly used in situations when you need to process the values of different types.\nExample:\ntypeof 10;  // Returns: \"number\"  \ntypeof 10.0;  // Returns: \"number\"  \ntypeof 2.5e-4;  // Returns: \"number\"  \ntypeof Infinity;  // Returns: \"number\"  \ntypeof NaN;  // Returns: \"number\". Despite being \"Not-A-Number\"  \n// Strings  \ntypeof '';  // Returns: \"string\"  \ntypeof 'Welcome to JavaTpoint';  // Returns: \"string\"  \ntypeof '12';  // Returns: \"string\". Number within quotes is typeof string  \n// Booleans  \ntypeof true;  // Returns: \"boolean\"  \ntypeof false;  // Returns: \"boolean\"  \n// Undefined  \ntypeof undefined;  // Returns: \"undefined\"  \ntypeof undeclaredVariable; // Returns: \"undefined\"  \n// Null  \ntypeof Null;  // Returns: \"object\"  \n// Objects  \ntypeof {name: \"John\", age: 18};  // Returns: \"object\"  \n// Arrays  \ntypeof [1, 2, 3];  // Returns: \"object\"  \n// Functions  \ntypeof function(){};  // Returns: \"function\"  \nNon-Primitive data types\nIn the above examples, we can see that the primitive data types can store only a single value. To store multiple and complex values, we have to use non-primitive data types.\nThe non-primitive data types are as follows:\nObject: The Object is a non-primitive data type. It is used to store collections of data. An object contains properties, defined as a key-value pair. A property key (name) is always a string, but the value can be any data type, such as strings, numbers, Booleans, or complex data types like arrays, functions, and other objects.\nExample:\n// Collection of data in key-value pairs  \nvar obj1 = {  \n   x:  123,  \n   y:  \"Welcome to JavaTpoint\",  \n   z: function(){  \n      return this.x;  \n   }  \n}  \nArray: The Array data type is used to represent a group of similar values. Every value in an array has a numeric position, called its index, and it may contain data of any data type-numbers, strings, Booleans, functions, objects, and even other arrays. The array index starts from 0 so that the first array element is arr[0], not arr[1].\nExample:\nvar colors = [\"Red\", \"Yellow\", \"Green\", \"Orange\"];  \nvar cities = [\"Noida\", \"Delhi\", \"Ghaziabad\"];  \nalert(colors[2]);   // Output: Green  \nalert(cities[1]);   // Output: Delhi  \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is the difference between == and ===?",
        "answer": "The == operator checks equality only whereas === checks equality, and data type, i.e., a value must be of the same type.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) How to write HTML code dynamically using JavaScript?",
        "answer": "The innerHTML property is used to write the HTML code using JavaScript dynamically. Let's see a simple example:\ndocument.getElementById('mylocation').innerHTML=\"<h2>This is heading using JavaScript</h2>\";   \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) How to write normal text code using JavaScript dynamically?",
        "answer": "The innerText property is used to write the simple text using JavaScript dynamically. Let's see a simple example:\ndocument.getElementById('mylocation').innerText=\"This is text using JavaScript\";   \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) How to create objects in JavaScript?",
        "answer": "There are 3 ways to create an object in JavaScript.\nBy object literal\nBy creating an instance of Object\nBy Object Constructor\nLet's see a simple code to create an object using object literal.\nemp={id:102,name:\"Rahul Kumar\",salary:50000}   \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) How to create an array in JavaScript?",
        "answer": "There are 3 ways to create an array in JavaScript.\nBy array literal\nBy creating an instance of Array\nBy using an Array constructor\nLet's see a simple code to create an array using object literal.\nvar emp=[\"Shyam\",\"Vimal\",\"Ratan\"];    \nMore details.",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) What does the isNaN() function?",
        "answer": "The isNan() function returns true if the variable value is not a number. For example:\nfunction number(num) {  \n  if (isNaN(num)) {  \n    return \"Not a Number\";  \n  }  \n  return \"Number\";  \n}  \nconsole.log(number('1000F'));  \n// expected output: \"Not a Number\"  \n  console.log(number('1000'));  \n// expected output: \"Number\"",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) What is the output of 10+20+\"30\" in JavaScript?",
        "answer": "3030 because 10+20 will be 30. If there is numeric value before and after +, it treats as binary + (arithmetic operator).\nfunction display()  \n{  \n  document.writeln(10+20+\"30\");  \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) What is the output of \"10\"+20+30 in JavaScript?",
        "answer": "102030 because after a string all the + will be treated as string concatenation operator (not binary +).\nfunction display()  \n{  \n  document.writeln(\"10\"+20+30);  \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) Difference between Client side JavaScript and Server side JavaScript?",
        "answer": "Client-side JavaScript comprises the basic language and predefined objects which are relevant to running JavaScript in a browser. The client-side JavaScript is embedded directly by in the HTML pages. The browser interprets this script at runtime.\nServer-side JavaScript also resembles client-side JavaScript. It has a relevant JavaScript which is to run in a server. The server-side JavaScript are deployed only after compilation.",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) In which location cookies are stored on the hard disk?",
        "answer": "The storage of cookies on the hard disk depends on the OS and the browser.\nThe Netscape Navigator on Windows uses a cookies.txt file that contains all the cookies. The path is c:\\Program Files\\Netscape\\Users\\username\\cookies.txt\nThe Internet Explorer stores the cookies on a file [email protected] The path is: c:\\Windows\\Cookies\\[email protected]",
        "reference": "javatpoint.com"
    },
    {
        "question": "stopPropagation() methods in JavaScript?",
        "answer": "In JavaScript, the event.preventDefault() method is used to prevent the default behavior of an element.\nFor example: If you use it in a form element, it prevents it from submitting. If used in an anchor element, it prevents it from navigating. If used in a contextmenu, it prevents it from showing or displaying.\nOn the other hand, the event.stopPropagation() method is used to stop the propagation of an event or stop the event from occurring in the bubbling or capturing phase.",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What is the real name of JavaScript?",
        "answer": "The original name was Mocha, a name chosen by Marc Andreessen, founder of Netscape. In September of 1995, the name was changed to LiveScript. In December 1995, after receiving a trademark license from Sun, the name JavaScript was adopted.",
        "reference": "javatpoint.com"
    },
    {
        "question": "preventDefault() method was used in an element?",
        "answer": "When we use the event.defaultPrevent() method in the event object returns a Boolean indicating that the event.preventDefault() was called in a particular element.",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) What is the difference between undefined value and null value?",
        "answer": "Undefined value: A value that is not defined and has no keyword is known as undefined value. For example:\nint number;//Here, a number has an undefined value.  \nNull value: A value that is explicitly specified by the keyword \"null\" is known as a null value. For example:\nString str=null;//Here, str has a null value.",
        "reference": "javatpoint.com"
    },
    {
        "question": "39) How to set the cursor to wait in JavaScript?",
        "answer": "The cursor can be set to wait in JavaScript by using the property \"cursor\". The following example illustrates the usage:\n<script>  \nwindow.document.body.style.cursor = \"wait\";   \n</script>",
        "reference": "javatpoint.com"
    },
    {
        "question": "40) What is this [[[]]]?",
        "answer": "This is a three-dimensional array.\nvar myArray = [[[]]];",
        "reference": "javatpoint.com"
    },
    {
        "question": "41) Are Java and JavaScript same?",
        "answer": "No, Java and JavaScript are the two different languages. Java is a robust, secured and object-oriented programming language whereas JavaScript is a client-side scripting language with some limitations.",
        "reference": "javatpoint.com"
    },
    {
        "question": "42) What is negative infinity?",
        "answer": "Negative Infinity is a number in JavaScript which can be derived by dividing the negative number by zero. For example:\nvar num=-5;  \nfunction display()  \n{  \n  document.writeln(num/0);  \n}  \ndisplay();  \n//expected output: -Infinity",
        "reference": "javatpoint.com"
    },
    {
        "question": "43) What is the difference between View state and Session state?",
        "answer": "\"View state\" is specific to a page in a session whereas \"Session state\" is specific to a user or browser that can be accessed across all pages in the web application.",
        "reference": "javatpoint.com"
    },
    {
        "question": "44) What are the pop-up boxes available in JavaScript?",
        "answer": "Alert Box\nConfirm Box\nPrompt Box\nExample of alert() in JavaScript\n<script type=\"text/javascript\">  \nfunction msg(){  \n alert(\"Hello Alert Box\");  \n}  \n</script>  \n<input type=\"button\" value=\"click\" onclick=\"msg()\"/>  \nExample of confirm() in JavaScript\n<script type=\"text/javascript\">  \nfunction msg(){  \nvar v= confirm(\"Are u sure?\");  \nif(v==true){  \nalert(\"ok\");  \n}  \nelse{  \nalert(\"cancel\");  \n}  \n  }  \n</script>  \n  <input type=\"button\" value=\"delete record\" onclick=\"msg()\"/>  \nExample of prompt() in JavaScript\n<script type=\"text/javascript\">  \nfunction msg(){  \nvar v= prompt(\"Who are you?\");  \nalert(\"I am \"+v);  \n  }  \n</script>  \n  <input type=\"button\" value=\"click\" onclick=\"msg()\"/>",
        "reference": "javatpoint.com"
    },
    {
        "question": "45) How can we detect OS of the client machine using JavaScript?",
        "answer": "The navigator.appVersion string can be used to detect the operating system on the client machine.",
        "reference": "javatpoint.com"
    },
    {
        "question": "46) How to submit a form using JavaScript by clicking a link?",
        "answer": "Let's see the JavaScript code to submit the form by clicking the link.\n<form name=\"myform\" action=\"index.php\">  \nSearch: <input type='text' name='query' />  \n<a href=\"javascript: submitform()\">Search</a>  \n</form>  \n<script type=\"text/javascript\">  \nfunction submitform()  \n{  \n  document.myform.submit();  \n}  \n</script>",
        "reference": "javatpoint.com"
    },
    {
        "question": "47) Is JavaScript faster than ASP script?",
        "answer": "Yes, because it doesn't require web server's support for execution.",
        "reference": "javatpoint.com"
    },
    {
        "question": "48) How to change the background color of HTML document using JavaScript?",
        "answer": "<script type=\"text/javascript\">  \ndocument.body.bgColor=\"pink\";  \n</script>",
        "reference": "javatpoint.com"
    },
    {
        "question": "49) How to handle exceptions in JavaScript?",
        "answer": "By the help of try/catch block, we can handle exceptions in JavaScript. JavaScript supports try, catch, finally and throw keywords for exception handling.",
        "reference": "javatpoint.com"
    },
    {
        "question": "50) How to validate a form in JavaScript?",
        "answer": "<script>  \nfunction validateform(){  \nvar name=document.myform.name.value;  \nvar password=document.myform.password.value;  \n  if (name==null || name==\"\"){  \n  alert(\"Name can't be blank\");  \n  return false;  \n}else if(password.length<6){  \n  alert(\"Password must be at least 6 characters long.\");  \n  return false;  \n  }  \n}  \n</script>  \n<body>  \n<form name=\"myform\" method=\"post\" action=\"abc.jsp\" onsubmit=\"return validateform()\" >  \nName: <input type=\"text\" name=\"name\"><br/>  \nPassword: <input type=\"password\" name=\"password\"><br/>  \n<input type=\"submit\" value=\"register\">  \n</form>  \nTest it Now\nVisit here: JavaScript form validation.",
        "reference": "javatpoint.com"
    },
    {
        "question": "51) How to validate email in JavaScript?",
        "answer": "<script>  \nfunction validateemail()  \n{  \nvar x=document.myform.email.value;  \nvar atposition=x.indexOf(\"@\");  \nvar dotposition=x.lastIndexOf(\".\");  \nif (atposition<1 || dotposition<atposition+2 || dotposition+2>=x.length){  \n  alert(\"Please enter a valid e-mail address \\n atpostion:\"+atposition+\"\\n dotposition:\"+dotposition);  \n  return false;  \n  }  \n}  \n</script>  \n<body>  \n<form name=\"myform\"  method=\"post\" action=\"#\" onsubmit=\"return validateemail();\">  \nEmail: <input type=\"text\" name=\"email\"><br/>  \n  <input type=\"submit\" value=\"register\">  \n</form>  \nTest it Now\nVisit here: JavaScript Email validation.",
        "reference": "javatpoint.com"
    },
    {
        "question": "52) What is this keyword in JavaScript?",
        "answer": "The this keyword is a reference variable that refers to the current object. For example:\nvar address=    \n{    \ncompany:\"Javatpoint\",    \ncity:\"Noida\",    \nstate:\"UP\",    \nfullAddress:function()    \n{    \nreturn this.company+\" \"+this.city+\" \"+this.state;    \n}    \n};    \nvar fetch=address.fullAddress();    \ndocument.writeln(fetch);",
        "reference": "javatpoint.com"
    },
    {
        "question": "53) What is the requirement of debugging in JavaScript?",
        "answer": "JavaScript didn't show any error message in a browser. However, these mistakes can affect the output. The best practice to find out the error is to debug the code. The code can be debugged easily by using web browsers like Google Chrome, Mozilla Firebox.\nTo perform debugging, we can use any of the following approaches:\nUsing console.log() method\nUsing debugger keyword",
        "reference": "javatpoint.com"
    },
    {
        "question": "54) What is the use of debugger keyword in JavaScript?",
        "answer": "JavaScript debugger keyword sets the breakpoint through the code itself. The debugger stops the execution of the program at the position it is applied. Now, we can start the flow of execution manually. If an exception occurs, the execution will stop again on that particular line.. For example:\nfunction display()  \n{  \nx = 10;    \ny = 15;    \nz = x + y;    \ndebugger;    \ndocument.write(z);    \ndocument.write(a);     \n}     \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "55) What is the role of a strict mode in JavaScript?",
        "answer": "The JavaScript strict mode is used to generates silent errors. It provides \"use strict\"; expression to enable the strict mode. This expression can only be placed as the first statement in a script or a function. For example:\n\"use strict\";    \nx=10;    \nconsole.log(x);",
        "reference": "javatpoint.com"
    },
    {
        "question": "57) What is the use of Math object in JavaScript?",
        "answer": "The JavaScript math object provides several constants and methods to perform a mathematical operation. Unlike date object, it doesn't have constructors. For example:\nfunction display()  \n{  \n  document.writeln(Math.random());  \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "58) What is the use of a Date object in JavaScript?",
        "answer": "The JavaScript date object can be used to get a year, month and day. You can display a timer on the webpage by the help of JavaScript date object.\nfunction display()  \n{  \n  var date=new Date();    \nvar day=date.getDate();    \nvar month=date.getMonth()+1;    \nvar year=date.getFullYear();    \ndocument.write(\"<br>Date is: \"+day+\"/\"+month+\"/\"+year);    \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "59) What is the use of a Number object in JavaScript?",
        "answer": "The JavaScript number object enables you to represent a numeric value. It may be integer or floating-point. JavaScript number object follows the IEEE standard to represent the floating-point numbers.\nfunction display()  \n{  \nvar x=102;//integer value    \nvar y=102.7;//floating point value    \nvar z=13e4;//exponent value, output: 130000    \nvar n=new Number(16);//integer value by number object    \ndocument.write(x+\" \"+y+\" \"+z+\" \"+n);    \n}     \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "60) What is the use of a Boolean object in JavaScript?",
        "answer": "The JavaScript Boolean is an object that represents value in two states: true or false. You can create the JavaScript Boolean object by Boolean() constructor.\nfunction display()  \n{  \ndocument.writeln(10<20);//true    \ndocument.writeln(10<5);//false     \n}     \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "61) What is the use of a TypedArray object in JavaScript?",
        "answer": "The JavaScript TypedArray object illustrates an array like a view of an underlying binary data buffer. There is any number of different global properties, whose values are TypedArray constructors for specific element types.\nfunction display()  \n{  \nvar arr1= [1,2,3,4,5,6,7,8,9,10];     \n       arr1.copyWithin(2) ;   \n       document.write(arr1);    \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "62) What is the use of a Set object in JavaScript?",
        "answer": "The JavaScript Set object is used to store the elements with unique values. The values can be of any type i.e. whether primitive values or object references. For example:\nfunction display()  \n{  \nvar set = new Set();    \nset.add(\"jQuery\");    \nset.add(\"AngularJS\");    \nset.add(\"Bootstrap\");    \nfor (let elements of set) {    \n document.writeln(elements+\"<br>\");    \n}     \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "63) What is the use of a WeakSet object in JavaScript?",
        "answer": "The JavaScript WeakSet object is the type of collection that allows us to store weakly held objects. Unlike Set, the WeakSet are the collections of objects only. It doesn't contain the arbitrary values. For example:\nfunction display()  \n{  \nvar ws = new WeakSet();    \nvar obj1={};    \nvar obj2={};    \nws.add(obj1);    \nws.add(obj2);    \n//Let's check whether the WeakSet object contains the added object    \ndocument.writeln(ws.has(obj1)+\"<br>\");    \ndocument.writeln(ws.has(obj2));     \n}     \ndisplay()",
        "reference": "javatpoint.com"
    },
    {
        "question": "64) What is the use of a Map object in JavaScript?",
        "answer": "The JavaScript Map object is used to map keys to values. It stores each element as key-value pair. It operates the elements such as search, update and delete on the basis of specified key. For example:\nfunction display()  \n{  \nvar map=new Map();    \nmap.set(1,\"jQuery\");    \nmap.set(2,\"AngularJS\");    \nmap.set(3,\"Bootstrap\");    \ndocument.writeln(map.get(1)+\"<br>\");    \ndocument.writeln(map.get(2)+\"<br>\");    \ndocument.writeln(map.get(3));    \n}  \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "65) What is the use of a WeakMap object in JavaScript?",
        "answer": "The JavaScript WeakMap object is a type of collection which is almost similar to Map. It stores each element as a key-value pair where keys are weakly referenced. Here, the keys are objects and the values are arbitrary values. For example:\nfunction display()  \n{  \nvar wm = new WeakMap();    \nvar obj1 = {};    \nvar obj2 = {};    \nvar obj3= {};    \nwm.set(obj1, \"jQuery\");    \nwm.set(obj2, \"AngularJS\");    \nwm.set(obj3,\"Bootstrap\");    \ndocument.writeln(wm.has(obj2));     \n}     \ndisplay();",
        "reference": "javatpoint.com"
    },
    {
        "question": "66) What are the falsy values in JavaScript, and how can we check if a value is falsy?",
        "answer": "Those values which become false while converting to Boolean are called falsy values.\nconst falsyValues = ['', 0, null, undefined, NaN, false];   \nWe can check if a value is falsy by using the Boolean function or the Double NOT operator (!!).",
        "reference": "javatpoint.com"
    },
    {
        "question": "67) What do you understand by hoisting in JavaScript?",
        "answer": "Hoisting is the default behavior of JavaScript where all the variable and function declarations are moved on top. In simple words, we can say that Hoisting is a process in which, irrespective of where the variables and functions are declared, they are moved on top of the scope. The scope can be both local and global.\nExample 1:\nhoistedVariable = 12;  \nconsole.log(hoistedVariable); // outputs 12 even when the variable is declared after it is initialized    \nvar hoistedVariable;  \nExample2:\nhoistedFunction();  // Outputs \" Welcome to JavaTpoint \" even when the function is declared after calling  \nfunction hoistedFunction(){   \n  console.log(\" Welcome to JavaTpoint \");  \n}  \nExample3:  \n// Hoisting in a local scope   \nfunction doSomething(){  \n  x = 11;  \n  console.log(x);  \n  var x;  \n}  \ndoSomething(); // Outputs 11 since the local variable \"x\" is hoisted inside the local scope  \nJavaScript MCQ\n1) Which of the following statement is true?\nIf onKeyDown returns false, the key-up event is canceled.\nIf onKeyDown returns false, the key-press event is canceled.\nIf onKeyPress returns false, the key-down event is canceled.\nIf onKeyPress returns false, the key-up event is canceled.\nShow Answer\nWorkspace\n\n\n2) Which of the following statement shows the primary difference between JavaScript and Java?\nThere is no difference between JavaScript and Java.\nFunctions are considered as fields.\nVariables are specific.\nFunctions are values, and there is no such distinction between methods and fields.\nShow Answer\nWorkspace\n\n\n3) Which of the following syntax is valid for creating a RegExp object?\n1. var txt=new RegExp(pattern,attributes);  \n2. var txt=/pattern/attributes;  \nOnly 1 syntax\nOnly 2 syntax\nBoth 1 and 2 syntax\nNone of the above\nShow Answer\nWorkspace\n\n\n4) Which of the following statement specifies the meaning of Augmenting classes?\nObjects inherit prototype properties even in a dynamic state.\nObjects inherit prototype properties only in a dynamic state.\nObjects inherit prototype properties in the static state.\nAn object doesn't inherit prototype properties in the static state.\nShow Answer\nWorkspace\n\n\n5) If para1 is the DOM object for a paragraph, which of the following would be the correct syntax to change the text within the paragraph?\npara1=\"New Text\"\nfirstChild.nodeValue= \"New Text\";\nvalue=\"New Text\";\nnodeValue=\"New Text\";\nShow Answer\nWorkspace\n\n\n6) Which of the following is used to define the behavior of the instances present of a class inside a method?\nMethod\nClasses\nInterfaces\nClasses and Interfaces\nShow Answer\nWorkspace\n\n\n7) Which of the following statement is true in the case of the property of the JSON() method?\nA JSON() method can be invoked manually as object.JSON()\nA JSON() method is invoked automatically by the JSON.stringify() method\nA JSON() method is automatically invoked by the compiler.\nA JSON() method cannot be invoked in any form.\nShow Answer\nWorkspace\n\n\n8) Which of the following statement is true if class B can extend another class A?\nA is the superclass, and B is the subclass.\nB is the superclass, and A is the subclass.\nBoth A and B are the superclass.\nBoth A and B are subclass.\nShow Answer\nWorkspace\n\n\n9) Which of the following is the correct syntax of the eval() function?\n[objectName.]eval(numeric)\n[EvalName.]eval(string)\n[EvalName.]eval(numeric)\n[objectName.]eval(string)\nShow Answer\nWorkspace\n\n\n10) What would be the output of the following JavaScript code?\nconst obj1 =   \n{    \n    a: 10,    \n    b: 15,    \n    c: 18    \n};    \nconst obj2 = Object.assign({c: 11, d: 12}, obj1);    \nconsole.log(obj2.c, obj2.d);   \n10, 12\n11, 12\nUndefined\nError\nShow Answer\nWorkspace",
        "reference": "javatpoint.com"
    }
]