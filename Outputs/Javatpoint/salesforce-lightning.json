[
    {
        "question": "1) What is Salesforce Lightning?",
        "answer": "Salesforce Lightning is a component-based framework developed by Salesforce.com to provide app development. It is designed to simplify business users who are not aware of this technology and typically do not have programming experience.\nSalesforce Lightning consists of a set of tools and technologies behind an important upgrade to the Salesforce1 Platform (now known as App Cloud), the company's mobile app development platform.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) What are the most important features of Salesforce Lightning? / What are the most important components that Salesforce Lightning contains?",
        "answer": "Salesforce Lightning contains the following important components:\nExperience: It is a set of modern user interfaces optimized for speed. This includes the Lightning Experience, Salesforce1 Mobile App, and template-based communities.\nLightning Component Framework: This is a JavaScript framework and set of standard components that facilitate us to build reusable components to customize the Lightning Experience, Salesforce1 Mobile App, and template-based communities and build your standalone apps.\nLightning Exchange: It specifies a section of the AppExchange where we can find 70+ partner components to start our development.\nLightning Design System: It specifies the best practices and style guides and modern enterprise UX best practices to build pixel-perfect apps that match the look and feel of the Lightning Experience and Salesforce1 Mobile app.\nVisual Building Tools: It specifies the drag-and-drop technologies for fast and easy app building & customizations. We can use the Lightning App Builder to customize the Lightning Experience and Salesforce1 Mobile app. We can also use the Community Builder to customize template-based communities.",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) How can we develop Salesforce Lightning components?",
        "answer": "We can develop the Salesforce Lightning components by using the following two programming models:\nADVERTISEMENT\nNative Aura Components model\nLightning web components model",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) Is Salesforce Lightning an MVC framework?",
        "answer": "No, Salesforce Lightning is not an MVC framework. Instead, it is a component-based framework.",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) What do you understand by Lightning experience?",
        "answer": "Lightning experience is the latest Salesforce desktop application, which has the latest features. Lightning experience is developed with an advanced User Interface (UI) and provides a lightning-fast optimized speed.",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What are the important tools included in Lightning?",
        "answer": "Following is the list of main tools included in Lightning:\nLightning Component Framework: The set of components and extensions facilitates us to build reusable components, customize the Salesforce1 Mobile App, and build standalone apps.\nLightning App Builder: It is a new UI tool that facilitates us to build extremely fast apps using components provided by Salesforce and platform developers.\nLightning Process Builder: This is a UI tool for visualizing and creating automated business processes.\nLightning Schema Builder: This is also a UI tool used for viewing and creating objects, fields, and relationships.\nLightning Connect: This is an integration tool that makes the Force.com app easily consume data from any external source that conforms to the OData spec.",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What is Aura? What is the use of aura: namespace?",
        "answer": "Aura is an open-source freeware technology that powers Lightning Components. The aura: namespace consists of all basic building blocks to define applications and components.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What do you understand about the Aura application bundle?",
        "answer": "The Aura application bundle consists of definitions and their associated resources. The aura definition can be defined as an application, interface, component, and event. The Aura definition bundle element is a folder consisting of definition files opposite the other metadata components. On the other hand, the aura definition bundle component is not a single file. Instead, it is a group of files.",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What is the difference between Visualforce Components and Lightning Components?",
        "answer": "The Visualforce components are page-centric, and they complete most of the work on the server. On the other hand, Lightning Components are client-side centric, making them more dynamic and mobile-friendly.",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) How do the two programming models, the Native Aura Components model, and Lightning web components model, coexist?",
        "answer": "The Native Aura Components model and Lightning, web components model, can be coexisted in the following way:\nThe Native Aura Components model can contain and utilize the Lightning web components model, including communicating via events and component methods. But, the opposite is not true. The Lightning web components model cannot be composed of Aura components, and they can only ever be its parent.\nThe code can also be shared between the Aura Components model and Lightning web components model using an ES Module.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What are the different types of events of Salesforce lightning components?",
        "answer": "Following are the main three different types of events of Salesforce lightning components:\nSystem Events: The system events are fired during the lightning app lifecycle.\nApplication Event: The application event is extended across the lightning application, and then any element that has enrolled for this event will get an alert.\nComponent Event: The component event scope is within itself or the parent component of this event. After that, all the parent components will get an alert.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What are the different component bundles of the lightning components?",
        "answer": "Following is the list of the different component bundles of the lightning components:\nComponent: It specifies the UI for the lightning components.\nController: It contains the client-side controller methods to handle components' events. It is also used to handle client-side events.\nStyle: It consists of the styles for the component.\nHelper: A JavaScript function can be called from any JavaScript code in a component's bundle. We can write a general logic in the helper and use it later in various controller methods to avoid repetition.\nDocument / Documentation: It specifies the description, sample code, and one or multiple references to example components. This component bundle is used for recording the component's use.\nRenderer: The renderer component bundle contains a client-side renderer to override default rendering for a component.\nSVG: It is a custom icon resource for components used in the Lightning App Builder or Community Builder.\nDesign: It consists of the file required for components used in Lightning App Builder, Lightning pages, or Community Builder.",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) What is the use of Lightning Data Service?",
        "answer": "Following are the main usages of Lightning Data Service:\nLightning Data Service is used for creating, deleting, editing, and loading a record in our component without Apex code.\nIt is used to handle field-level security and sharing rules.\nIt is used to enhance the user interface and performance consistency.\nThe biggest advantage of using Lightning Data Service is that it facilitates us to carry out basic tasks without Apex code.",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) What do you understand about the Lightning Design System?",
        "answer": "The Lightning Design System provides style guides and modern enterprise UX best practices to build pixel-perfect apps that look great and provide a look and feel of the Lightning Experience and Salesforce1 Mobile app.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What are the different events used in the Salesforce Lightning component?",
        "answer": "Following are the different types of events used in the Salesforce Lightning component:\nApplication Event: The scope of the application event is throughout the lightning App. It sends a notification if any component is registered for this event.\nComponent Event: The scope of this event is within itself or the parent component of this event. It sends a notification for all the components declared within the parent component.\n\nSystem Event: This type of event is fired by Salesforce's system during the lifecycle of the lightning app.",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What do you understand by aura definition bundle?",
        "answer": "An aura definition bundle is a specific type of bundle that contains an Aura definition and its related resources. This may be a component, application, event, interface, or a tokens collection. The AuraDefinitionBundle component is a folder that contains definition files. This is not a single file like most other metadata components. Instead, it is a collection of files. Each file represents a resource in a bundle, such as a markup, applications, code files (including controllers and helpers), events, documentation, and interfaces.\nAn aura definition bundle does not have a suffix. The definition files can have one of the following suffixes:\nSuffix Component Type\n.app Application\n.cmp Component\n.design Design\n.evt Event\n.intf Interface\n.js Controller, Helper, or Renderer\n.svg SVG Image\n.css Style\n.auradoc Documentation\n.tokens Tokens collection",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) What is Lightning out?",
        "answer": "Lightning out is a process that is used when we want to use our component on the external site. The biggest advantage of lightning out is utilizing lightning components in a visual force page.",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What are the key differences between Component Event and Application Event?",
        "answer": "Following is the list of key differences between Component Event and Application Event:\nComponent Event Application Event\nComponent events are used for communication between child and parent. Application events are used to communicate any changes in the component to a broader audience.\nComponent events use bubbling and capture same as used in DOM events. If you make any changes in a child component, it will be communicated to the parent component via component event. If a component is registered for this event in application events, it will get notified.\nComponent events can only be handled by components above them in the containment hierarchy. That's why their usage is localized to the components that need to know about them. Application events are best suitable for things that should be handled at the application level, such as navigating to a specific record. Application events also allow communication between components in separate application parts and have no direct containment relationship.",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What are the different types of Lightning Record pages, and how can we build them?",
        "answer": "There are mainly three types of Lightning Record pages:\nRecord page\nApp page\nHome page\nWe can create or build Lightning Record pages by using Lightning App Builder.",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What is the use of implements in the lightning component? What are the different interfaces implemented in the lightning component?",
        "answer": "Implements are used to refer to platform interfaces that make components able to be used in different contexts or to grant access to extra context data. A component can implement more than one interface.\nFollowing is the list of all interfaces that can be implemented in lightning component:\nINTERFACE NAMESPACE OWNER\nlightning:actionOverride lightning Salesforce\nlightning:appHomeTemplate lightning Salesforce\nlightning:availableForChatterExtensionComposer lightning Salesforce\nlightning:availableForChatterExtensionRenderer lightning Salesforce\nlightning:availableForFlowActions lightning Salesforce\nlightning:availableForFlowScreens lightning Salesforce\nlightning:backgroundUtilityItem lightning Salesforce\nlightning:hasPageReference lightning Salesforce\nlightning:homeTemplate lightning Salesforce\nlightning:isUrlAddressable lightning Salesforce\nlightning:recordHomeTemplate lightning Salesforce\nlightning:utilityItem lightning Salesforce\naura:rootComponent aura Salesforce\nclients:availableForMailAppAppPage clients Salesforce\nclients:hasEventContext clients Salesforce\nclients:hasItemContext clients Salesforce\nflexipage:availableForAllPageTypes flexipage Salesforce\nflexipage:availableForRecordHome flexipage Salesforce\nforce:appHostable force Salesforce\nforce:hasRecordId force Salesforce\nforce:hasSObjectName force Salesforce\nforce:lightningQuickAction force Salesforce\nforce:lightningQuickActionWithoutHeader force Salesforce\nforceCommunity:availableForAllPageTypes forceCommunity Salesforce\nforceCommunity:layout forceCommunity Salesforce\nforceCommunity:profileMenuInterface forceCommunity Salesforce\nforceCommunity:searchInterface forceCommunity Salesforce\nforceCommunity:themeLayout forceCommunity Salesforce\nlightningcommunity:allowInRelaxedCSP lightningcommunity Salesforce\nlightningsnapin:minimizedUI lightningsnapin Salesforce\nlightningsnapin:prechatUI lightningsnapin Salesforce\nltng:allowGuestAccess ltng Salesforce",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What is the difference between Lightning components and Visualforce components?",
        "answer": "Lightning components are client-side-centric and known for their dynamic, mobile-friendly nature. On the other hand, Visualforce components are page-centric and mainly work on server-based.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What are the attributes, and what are the required parameters in the attribute definition?",
        "answer": "Attributes are the variables that are used for storing the values. We should define the Default, Type, Name, Access, and Description in the attribute definition, although; only Name and Type are the required parameters.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What is Locker service in Salesforce lightning?",
        "answer": "In Salesforce lightning, the Locker service is robust security architecture for the lightning components. This service is used to improve and enhance security by isolating the lightning components which belong to the namespace from the components in the distinct namespace. Locker service follows some practices that enhance the code's maintainability by providing access to the supported APIs.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) How can we use a lightning component in the VisualForce Page?",
        "answer": "We can embed the lightning component on the VisualForce page by using Lightning out. We should follow the following three steps to add the lightning component to the VisualForce page:\nFirst, we must insert the lightning components for the JavaScript library of visual force to our intent visual force page through the tag.\nNow, we can generate and point a lightning app that we use for the component dependencies.\nAt last, we have to write a JavaScript function that creates the component over the page through $ Lightning.createComponent().",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is FlexiPage in Salesforce Lightning?",
        "answer": "FlexiPage is the metadata related to a lightning page. The lightning page specifies an adaptive screen that has several lightning components. It contains 25 components. FlexiPages are stored as XML files and deployed through a deployment tool or metadata API. These lightning pages are referred to as Flexipages in the API.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) Are Lightning Components only directed towards mobile apps?",
        "answer": "The Lightning Components are mainly designed with a mobile-first approach, but they have a responsive design that allows them to give the same experience even over the desktop without writing any separate lines of code.",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) What do you understand by Lightning:navigation?",
        "answer": "The Lightning:navigation is used to navigate to a page reference or create a URL from the given page Reference. We have to define the page reference object for navigating. The page reference is the JavaScript object which references a page, offering a defined structure that explains the type of page and its respective values.\nIt facilitates us to navigate to the following supported features:\nLightning Component\nWeb Page\nObject Page\nRecord Page\nNamed Page\nKnowledge Article\nNavigation Item Page\nRecord Relationship Page",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) Which Lightning components parts are server-side and which are client-side?",
        "answer": "The component page acting as a JavaScript controller is on the client-side for the Lightning parts. On the other hand, the server-side acts as an Apex Controller.",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) What are the different types of attributes that can be used for storing the values?",
        "answer": "Following are the different types of attributes that can be used for storing the values:\nBoolean\nDecimal\nString\nInteger\nDate\nDatetime\nMap\nSet",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) Can we integrate Lightning components with another framework like Angular?",
        "answer": "Yes, we can integrate Lightning components with any third-party framework like Angular.",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) What are the different phases in the application events propagation?",
        "answer": "There are mainly three phases in the application events propagation:\nCapture Phase\nDefault Phase\nBubble Phase",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) What is the use of Lightning:recordEditForm?",
        "answer": "In the Lightning:recordEditForm, the Lightning:inputField is used for creating the editable fields. Using the Lightning:output field, we can display the read-only information.\nThe Lightning:recordEditForm contains the following features:\nIt displays the record edit layout to edit a particular record.\nIt can also display the record to create the layout to create a particular record.",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) Can we make a Lightning Component that can be used in the mobile and desktop user interfaces?",
        "answer": "Yes, we can make a Lightning Component that can be used in the mobile and desktop user interfaces. The Lightning Component specifies an extremely fast experience that is responsive and ready by default and has compatibility in Salesforce1 App. Its responsive nature makes it adjust as per the resolution of the screen size. So, we can use it easily on the desktop without any separate code.",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) How can we add Aura components to our Visualforce page?",
        "answer": "There are the following three ways that a developer can choose to add the Aura components to the Visualforce page:\nA developer can create a reference to a Lightning app for declaring the component dependencies.\nUse the <apex:includeLightning/> component and add the Lightning component for the Visualforce JavaScript library used in your Visualforce page.\nUse the $Lightning.createComponent() to create the component for a page by writing a JavaScript function.",
        "reference": "javatpoint.com"
    },
    {
        "question": "35) What is the difference between <ui:input> and <lightning:input>?",
        "answer": "The main difference between <ui:input> and <lightning:input>:\n<ui:input>: It does not contain lightning design system styling.\n<lightning:input>: It contains lightning design system styling.",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What is the usage of Aura: method Tag in Lightning?",
        "answer": "The Aura: method tag is mainly used to define component API. After using this tag, we don't need to fire and handle a component event, and it allows us to directly invoke the method in the component's controller on the client-side. It simplifies the code required for a parent component to call a method on a child component that forms a part of the parent component.",
        "reference": "javatpoint.com"
    },
    {
        "question": "37) Is it possible to create one component for inheriting style/CSS from the parent component, or do we always need to define it in the Salesforce component?",
        "answer": "It is completely possible to create one component for inheriting style/CSS from the parent component. We can inherit styles from parents, and it is not necessary to always define them in the Salesforce component.",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) What do you understand by an Action provider and a Value provider?",
        "answer": "An Action provider facilitates us to manage the events, actions, and handlers for the component. On the other hand, a Value provider facilitates us to use the component attribute's value in the component JavaScript and markup controller.",
        "reference": "javatpoint.com"
    },
    {
        "question": "39) Is it possible to include external JavaScript/CSS libraries like jQuery, bootstrap in components?",
        "answer": "Yes, it is possible to include multiple external JavaScript/CSS libraries like JQuery, Bootstrap, custom CSS, and custom JavaScript libraries in our lightning component using a static resource.",
        "reference": "javatpoint.com"
    },
    {
        "question": "40) How can we get the current record id in the lightning component?",
        "answer": "To get the current record id in the lightning component, we have to add the force:hasRecordId interface to a Lightning component. It makes the component able to assign the ID of the current record. The current record ID is useful if the component is used on a Lightning record page as an object-specific custom action or action override in Lightning Experience or the Salesforce app. This interface doesn't show any effect except when used within Lightning Experience, the Salesforce mobile app, and template-based communities.",
        "reference": "javatpoint.com"
    },
    {
        "question": "41) What do you understand by Scratch org?",
        "answer": "The Scratch org is an expandable Salesforce org used for testing and development. The Scratch org can be created for 30 days, after which we deactivate the Scratch org. The by default duration of Scratch org is seven days.",
        "reference": "javatpoint.com"
    },
    {
        "question": "42) What is the use of popup in the lightning component?",
        "answer": "Popup or Modals Boxes display content in a layer above the app. This paradigm is mainly used in cases such as creating or editing a record and various types of messaging and wizards.",
        "reference": "javatpoint.com"
    },
    {
        "question": "43) What is the purpose of the force:appHostable interface in the Salesforce lightning component?",
        "answer": "The force:appHostable interface is used as a custom tab in the Salesforce lightning component or mobile app.",
        "reference": "javatpoint.com"
    },
    {
        "question": "44) How can we define the field-level security in the Salesforce lightning components?",
        "answer": "We can use the Lightning:recordEditForm, force: record data, and Lightning: record form to define the field level security.",
        "reference": "javatpoint.com"
    },
    {
        "question": "45) What are the different global value providers in Salesforce lightning?",
        "answer": "Following are the different global value providers in Salesforce lightning:\n$globalID\n$Label\n$Locale\n$Browser\n$Resource",
        "reference": "javatpoint.com"
    },
    {
        "question": "46) How can we display the loading spinner in the lightning component?",
        "answer": "Loading spinners are the CSS indicators we can display while retrieving the data or performing slow calculations. We can use Lightning:spinner that shows the animated spinner image indicating that a request is loading.",
        "reference": "javatpoint.com"
    },
    {
        "question": "47: How do the capture phase and bubble phase propagate?",
        "answer": "The capture phase propagates from top to bottom while the bubble phase propagates from bottom to top.",
        "reference": "javatpoint.com"
    }
]