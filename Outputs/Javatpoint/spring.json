[
    {
        "question": "1) What is Spring?",
        "answer": "It is a lightweight, loosely coupled and integrated framework for developing enterprise applications in java.",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) What are the advantages of spring framework?",
        "answer": "Predefined Templates\nLoose Coupling\nEasy to test\nLightweight\nFast Development\nPowerful Abstraction\nDeclarative support\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) What are the modules of spring framework?",
        "answer": "Test\nSpring Core Container\nAOP, Aspects and Instrumentation\nData Access/Integration\nWeb\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) What is IOC and DI?",
        "answer": "IOC (Inversion of Control) and DI (Dependency Injection) is a design pattern to provide loose coupling. It removes the dependency from the program.\nLet's write a code without following IOC and DI.\npublic class Employee{  \nAddress address;  \nEmployee(){  \naddress=new Address();//creating instance  \n}  \n}  \nNow, there is dependency between Employee and Address because Employee is forced to use the same address instance.\n\nLet's write the IOC or DI code.\npublic class Employee{  \nAddress address;  \nEmployee(Address address){  \nthis.address=address;//not creating instance  \n}  \n}  \nNow, there is no dependency between Employee and Address because Employee is not forced to use the same address instance. It can use any address instance.",
        "reference": "javatpoint.com"
    },
    {
        "question": "5) What is the role of IOC container in spring?",
        "answer": "IOC container is responsible to:\nADVERTISEMENT\ncreate the instance\nconfigure the instance, and\nassemble the dependencies\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "6) What are the types of IOC container in spring?",
        "answer": "There are two types of IOC containers in spring framework.\nBeanFactory\nApplicationContext\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "7) What is the difference between BeanFactory and ApplicationContext?",
        "answer": "BeanFactory is the basic container whereas ApplicationContext is the advanced container. ApplicationContext extends the BeanFactory interface. ApplicationContext provides more facilities than BeanFactory such as integration with spring AOP, message resource handling for i18n etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "8) What is the difference between constructor injection and setter injection?",
        "answer": "No. Constructor Injection Setter Injection\n1) No Partial Injection Partial Injection\n2) Desn't override the setter property Overrides the constructor property if both are defined.\n3) Creates new instance if any modification occurs Doesn't create new instance if you change the property value\n4) Better for too many properties Better for few properties.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "9) What is autowiring in spring? What are the autowiring modes?",
        "answer": "Autowiring enables the programmer to inject the bean automatically. We don't need to write explicit injection logic.\nLet's see the code to inject bean using dependency injection.\n<bean id=\"emp\" class=\"com.javatpoint.Employee\" autowire=\"byName\" />  \nThe autowiring modes are given below:\nNo. Mode Description\n1) no this is the default mode, it means autowiring is not enabled.\n2) byName\ninjects the bean based on the property name. It uses setter method.\n3) byType injects the bean based on the property type. It uses setter method.\n4) constructor It injects the bean using constructor\nThe \"autodetect\" mode is deprecated since spring 3.",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) What are the different bean scopes in spring?",
        "answer": "There are 5 bean scopes in spring framework.\nNo. Scope Description\n1) singleton The bean instance will be only once and same instance will be returned by the IOC container. It is the default scope.\n2) prototype The bean instance will be created each time when requested.\n3) request The bean instance will be created per HTTP request.\n4) session The bean instance will be created per HTTP session.\n5) globalsession The bean instance will be created per HTTP global session. It can be used in portlet context only.",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) In which scenario, you will use singleton and prototype scope?",
        "answer": "Singleton scope should be used with EJB stateless session bean and prototype scope with EJB stateful session bean.",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) What are the transaction management supports provided by spring?",
        "answer": "Spring framework provides two type of transaction management supports:\nProgrammatic Transaction Management: should be used for few transaction operations.\nDeclarative Transaction Management: should be used for many transaction operations.",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) What are the advantages of JdbcTemplate in spring?",
        "answer": "Less code: By using the JdbcTemplate class, you don't need to create connection,statement,start transaction,commit transaction and close connection to execute different queries. You can execute the query directly.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "14) What are classes for spring JDBC API?",
        "answer": "JdbcTemplate\nSimpleJdbcTemplate\nNamedParameterJdbcTemplate\nSimpleJdbcInsert\nSimpleJdbcCall\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) How can you fetch records by spring JdbcTemplate?",
        "answer": "You can fetch records from the database by the query method of JdbcTemplate. There are two interfaces to do this:\nResultSetExtractor\nRowMapper",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) What is the advantage of NamedParameterJdbcTemplate?",
        "answer": "NamedParameterJdbcTemplate class is used to pass value to the named parameter. A named parameter is better than ? (question mark of PreparedStatement).\nIt is better to remember.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) What is the advantage of SimpleJdbcTemplate?",
        "answer": "The SimpleJdbcTemplate supports the feature of var-args and autoboxing.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) What is AOP?",
        "answer": "AOP is an acronym for Aspect Oriented Programming. It is a methodology that divides the program logic into pieces or parts or concerns.\nIt increases the modularity and the key unit is Aspect.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "19) What are the advantages of spring AOP?",
        "answer": "AOP enables you to dynamically add or remove concern before or after the business logic. It is pluggable and easy to maintain.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What are the AOP terminology?",
        "answer": "AOP terminologies or concepts are as follows:\nJoinPoint\nAdvice\nPointcut\nAspect\nIntroduction\nTarget Object\nInterceptor\nAOP Proxy\nWeaving\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What is JoinPoint?",
        "answer": "JoinPoint is any point in your program such as field access, method execution, exception handling etc.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) Does spring framework support all JoinPoints?",
        "answer": "No, spring framework supports method execution joinpoint only.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What is Advice?",
        "answer": "Advice represents action taken by aspect.",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) What are the types of advice in AOP?",
        "answer": "There are 5 types of advices in spring AOP.\nBefore Advice\nAfter Advice\nAfter Returning Advice\nThrows Advice\nAround Advice",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is Pointcut?",
        "answer": "Pointcut is expression language of Spring AOP.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) What is Aspect?",
        "answer": "Aspect is a class in spring AOP that contains advices and joinpoints.",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) What is Introduction?",
        "answer": "Introduction represents introduction of new fields and methods for a type.",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) What is target object?",
        "answer": "Target Object is a proxy object that is advised by one or more aspects.",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) What is interceptor?",
        "answer": "Interceptor is a class like aspect that contains one advice only.",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) What is weaving?",
        "answer": "Weaving is a process of linking aspect with other application.",
        "reference": "javatpoint.com"
    },
    {
        "question": "31) Does spring perform weaving at compile time?",
        "answer": "No, spring framework performs weaving at runtime.",
        "reference": "javatpoint.com"
    },
    {
        "question": "32) What are the AOP implementation?",
        "answer": "There are 3 AOP implementation.\nSpring AOP\nApache AspectJ\nJBoss AOP",
        "reference": "javatpoint.com"
    },
    {
        "question": "33) What is the front controller class of Spring MVC?",
        "answer": "The DispatcherServlet class works as the front controller in Spring MVC.\nMore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "34) What does @Controller annotation?",
        "answer": "The @Controller annotation marks the class as controller class. It is applied on the class.",
        "reference": "javatpoint.com"
    },
    {
        "question": "35) What does @RequestMapping annotation?",
        "answer": "The @RequestMapping annotation maps the request with the method. It is applied on the method.",
        "reference": "javatpoint.com"
    },
    {
        "question": "36) What does the ViewResolver class?",
        "answer": "The View Resolver class resolves the view component to be invoked for the request. It defines prefix and suffix properties to resolve the view component.",
        "reference": "javatpoint.com"
    },
    {
        "question": "37) Which ViewResolver class is widely used?",
        "answer": "The org.springframework.web.servlet.view.InternalResourceViewResolver class is widely used.",
        "reference": "javatpoint.com"
    },
    {
        "question": "38) Does spring MVC provide validation support?",
        "answer": "Yes.",
        "reference": "javatpoint.com"
    }
]