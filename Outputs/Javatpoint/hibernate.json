[
    {
        "question": "1) What is hibernate?",
        "answer": "Hibernate is an open-source and lightweight ORM tool that is used to store, manipulate, and retrieve data from the database.\nmore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "2) What is ORM?",
        "answer": "ORM is an acronym for Object/Relational mapping. It is a programming strategy to map object with the data stored in the database. It simplifies data creation, data manipulation, and data access.",
        "reference": "javatpoint.com"
    },
    {
        "question": "3) Explain hibernate architecture?",
        "answer": "Hibernate architecture comprises of many interfaces such as Configuration, SessionFactory, Session, Transaction, etc.\nmore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "4) What are the core interfaces of Hibernate?",
        "answer": "The core interfaces of Hibernate framework are:\nADVERTISEMENT\nConfiguration\nSessionFactory\nSession\nQuery\nCriteria\nTransaction\n5) Mention some of the advantages of using ORM over JDBC.\nORM has the following advantages over JDBC:\nApplication development is fast.\nManagement of transaction.\nGenerates key automatically.\nDetails of SQL queries are hidden.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "ORM has the following advantages over JDBC:\nApplication development is fast.\nManagement of transaction.\nGenerates key automatically.\nDetails of SQL queries are hidden.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "The objects of criteria are used for the creation and execution of the object-oriented criteria queries.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Some of the databases supported by Hibernate are:\nDB2\nMySQL\nOracle\nSybase SQL Server\nInformix Dynamic Server\nHSQL\nPostgreSQL\nFrontBase",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Key components of Hibernate are:\nConfiguration\nSession\nSessionFactory\nCriteria\nQuery\nTransaction",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Database Connection\nClass Mapping Setup",
        "reference": "javatpoint.com"
    },
    {
        "question": "10) How is SQL query created in Hibernate?",
        "answer": "The SQL query is created with the help of the following syntax:\n\nSession.createSQLQuery",
        "reference": "javatpoint.com"
    },
    {
        "question": "11) What does HQL stand for?",
        "answer": "Hibernate Query Language",
        "reference": "javatpoint.com"
    },
    {
        "question": "12) How is HQL query created?",
        "answer": "The HQL query is created with the help of the following syntax:\nSession.createQuery",
        "reference": "javatpoint.com"
    },
    {
        "question": "13) How can we add criteria to a SQL query?",
        "answer": "A criterion is added to a SQL query by using the Session.createCriteria.",
        "reference": "javatpoint.com"
    },
    {
        "question": "",
        "answer": "Classes whose objects are stored in a database table are called as persistent classes.",
        "reference": "javatpoint.com"
    },
    {
        "question": "15) What is SessionFactory?",
        "answer": "SessionFactory provides the instance of Session. It is a factory of Session. It holds the data of second level cache that is not enabled by default.\nmore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "16) Is SessionFactory a thread-safe object?",
        "answer": "Yes, SessionFactory is a thread-safe object, many threads cannot access it simultaneously.",
        "reference": "javatpoint.com"
    },
    {
        "question": "17) What is Session?",
        "answer": "It maintains a connection between the hibernate application and database.\nIt provides methods to store, update, delete or fetch data from the database such as persist(), update(), delete(), load(), get() etc.\n\nIt is a factory of Query, Criteria and Transaction i.e. it provides factory methods to return these instances.\nmore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "18) Is Session a thread-safe object?",
        "answer": "No, Session is not a thread-safe object, many threads can access it simultaneously. In other words, you can share it between threads.",
        "reference": "javatpoint.com"
    },
    {
        "question": "persist() method?",
        "answer": "No. save() persist()\n1) returns the identifier (Serializable) of the instance. Return nothing because its return type is void.\n2) Syn: public Serializable save(Object o) Syn: public void persist(Object o)",
        "reference": "javatpoint.com"
    },
    {
        "question": "20) What is the difference between get and load method?",
        "answer": "The differences between get() and load() methods are given below.\nNo. get() load()\n1) Returns null if an object is not found. Throws ObjectNotFoundException if an object is not found.\n2) get() method always hit the database.\nload() method doesn't hit the database.\n3) It returns the real object, not the proxy. It returns proxy object.\n4) It should be used if you are not sure about the existence of instance. It should be used if you are sure that instance exists.",
        "reference": "javatpoint.com"
    },
    {
        "question": "21) What is the difference between update and merge method?",
        "answer": "The differences between update() and merge() methods are given below.\nNo. The update() method merge() method\n1) Update means to edit something. Merge means to combine something.\n2) update() should be used if the session doesn't contain an already persistent state with the same id. It means an update should be used inside the session only. After closing the session, it will throw the error. merge() should be used if you don't know the state of the session, means you want to make the modification at any time.\nLet's try to understand the difference by the example given below:\n...  \nSessionFactory factory = cfg.buildSessionFactory();  \nSession session1 = factory.openSession();  \n   Employee e1 = (Employee) session1.get(Employee.class, Integer.valueOf(101));//passing id of employee  \nsession1.close();  \n   e1.setSalary(70000);  \n   Session session2 = factory.openSession();  \nEmployee e2 = (Employee) session1.get(Employee.class, Integer.valueOf(101));//passing same id  \n  Transaction tx=session2.beginTransaction();  \nsession2.merge(e1);  \n  tx.commit();  \nsession2.close();  \nAfter closing session1, e1 is in detached state. It will not be in the session1 cache. So if you call update() method, it will throw an error.\n\nThen, we opened another session and loaded the same Employee instance. If we call merge in session2, changes of e1 will be merged in e2.",
        "reference": "javatpoint.com"
    },
    {
        "question": "22) What are the states of the object in hibernate?",
        "answer": "There are 3 states of the object (instance) in hibernate.\nTransient: The object is in a transient state if it is just created but has no primary key (identifier) and not associated with a session.\nPersistent: The object is in a persistent state if a session is open, and you just saved the instance in the database or retrieved the instance from the database.\nDetached: The object is in a detached state if a session is closed. After detached state, the object comes to persistent state if you call lock() or update() method.",
        "reference": "javatpoint.com"
    },
    {
        "question": "23) What are the inheritance mapping strategies?",
        "answer": "There are 3 ways of inheritance mapping in hibernate.\nTable per hierarchy\nTable per concrete class\nTable per subclass\nmore details...",
        "reference": "javatpoint.com"
    },
    {
        "question": "24) How to make an immutable class in hibernate?",
        "answer": "If you mark a class as mutable=\"false\", the class will be treated as an immutable class. By default, it is mutable=\"true\".",
        "reference": "javatpoint.com"
    },
    {
        "question": "25) What is automatic dirty checking in hibernate?",
        "answer": "The automatic dirty checking feature of Hibernate, calls update statement automatically on the objects that are modified in a transaction.\nLet's understand it by the example given below:\n...  \nSessionFactory factory = cfg.buildSessionFactory();  \nSession session1 = factory.openSession();  \nTransaction tx=session2.beginTransaction();  \n   Employee e1 = (Employee) session1.get(Employee.class, Integer.valueOf(101));  \n   e1.setSalary(70000);  \n   tx.commit();  \nsession1.close();  \nHere, after getting employee instance e1 and we are changing the state of e1.\nAfter changing the state, we are committing the transaction. In such a case, the state will be updated automatically. This is known as dirty checking in hibernate.",
        "reference": "javatpoint.com"
    },
    {
        "question": "26) How many types of association mapping are possible in hibernate?",
        "answer": "There can be 4 types of association mapping in hibernate.\nOne to One\nOne to Many\nMany to One\nMany to Many",
        "reference": "javatpoint.com"
    },
    {
        "question": "27) Is it possible to perform collection mapping with One-to-One and Many-to-One?",
        "answer": "No, collection mapping can only be performed with One-to-Many and Many-to-Many.",
        "reference": "javatpoint.com"
    },
    {
        "question": "28) What is lazy loading in hibernate?",
        "answer": "Lazy loading in hibernate improves the performance. It loads the child objects on demand.\nSince Hibernate 3, lazy loading is enabled by default, and you don't need to do lazy=\"true\". It means not to load the child objects when the parent is loaded.",
        "reference": "javatpoint.com"
    },
    {
        "question": "29) What is HQL (Hibernate Query Language)?",
        "answer": "Hibernate Query Language is known as an object-oriented query language. It is like a structured query language (SQL).\nThe main advantage of HQL over SQL is:\nYou don't need to learn SQL\nDatabase independent\nSimple to write a query",
        "reference": "javatpoint.com"
    },
    {
        "question": "30) What is the difference between first level cache and second level cache?",
        "answer": "No. First Level Cache Second Level Cache\n1) First Level Cache is associated with Session. Second Level Cache is associated with SessionFactory.\n2) It is enabled by default. It is not enabled by default.",
        "reference": "javatpoint.com"
    }
]