[
    {
        "question": "1. What are migrations in Laravel?",
        "answer": "In simple, Migrations are used to create database schemas in Laravel. In migration files, we store which table to create, update or delete. Each migration file is stored with its timestamp of creation to keep track of the order in which it was created. As migrations go up with your code in GitHub, GitLab, etc, whenever anyone clones your project they can run `PHP artisan migrate` to run those migrations to create the database in their environment. A normal migration file looks like below: <?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n       // Create other columns\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n} <?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n       // Create other columns\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n} <?php use Illuminate Database Migrations Migration use Illuminate Database Schema Blueprint use Illuminate Support Facades Schema class CreateUsersTable extends Migration class CreateUsersTable extends Migration /**\n     * Run the migrations.\n     *\n     * @return void\n     */ @return public function up() function up  'users' function (Blueprint $table) function Blueprint $table $table $table $table 'name' // Create other columns /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */ @return public function down() function down  'users' The up() method runs when we run `php artisan migrate` and down() method runs when we run `php artisan migrate:rollback`. If we rollback, it only rolls back the previously run migration. If we want to rollback all migrations, we can run 'php artisan migrate:reset`. If we want to rollback and run migrations, we can run `PHP artisan migrate:refresh`, and we can use `PHP artisan migrate:fresh` to drop the tables first and then run migrations from the start.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What is the latest Laravel version?",
        "answer": "The latest Laravel version is 8.x.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What are Models?",
        "answer": "With Laravel, each database table can have a model representation using a model file which can be used to interact with that table using Laravel Eloquent ORM. We can create a model using this artisan command: php artisan make:model Post php artisan make:model Post This will create a file in the models\u2019 directory and will look like below: class Post extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [];\n\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = [];\n} class Post extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = [];\n\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = [];\n} A Model can have properties like table, fillable, hidden, etc which defines properties of the table and model.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How to implement soft delete in Laravel?",
        "answer": "Soft Delete means when any data row is deleted by any means in the database, we are not deleting the data but adding a timestamp of deletion. We can add soft delete features by adding a trait in the model file like below. use Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Post extends Model {\n\n    use SoftDeletes;\n\n    protected $table = 'posts';\n\n    // ...\n} use Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass Post extends Model {\n\n    use SoftDeletes;\n\n    protected $table = 'posts';\n\n    // ...\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What are factories in Laravel?",
        "answer": "Factories are a way to put values in fields of a particular model automatically. Like, for testing when we add multiple fake records in the database, we can use factories to generate a class for each model and put data in fields accordingly. Every new laravel application comes with database/factories/UserFactory.php which looks like below: <?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nuse Illuminate\\Support\\Str;\n\nclass UserFactory extends Factory\n{\n   /**\n    * The name of the factory's corresponding model.\n    *\n    * @var string\n    */\n   protected $model = User::class;\n\n   /**\n    * Define the model's default state.\n    *\n    * @return array\n    */\n   public function definition()\n   {\n       return [\n           'name' => $this->faker->name,\n           'email' => $this->faker->unique()->safeEmail,\n           'email_verified_at' => now(),\n           'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n           'remember_token' => Str::random(10),\n       ];\n   }\n} <?php\n\nnamespace Database\\Factories;\n\nuse App\\Models\\User;\nuse Illuminate\\Database\\Eloquent\\Factories\\Factory;\nuse Illuminate\\Support\\Str;\n\nclass UserFactory extends Factory\n{\n   /**\n    * The name of the factory's corresponding model.\n    *\n    * @var string\n    */\n   protected $model = User::class;\n\n   /**\n    * Define the model's default state.\n    *\n    * @return array\n    */\n   public function definition()\n   {\n       return [\n           'name' => $this->faker->name,\n           'email' => $this->faker->unique()->safeEmail,\n           'email_verified_at' => now(),\n           'password' => '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', // password\n           'remember_token' => Str::random(10),\n       ];\n   }\n} <?php namespace Database Factories use App Models User use Illuminate Database Eloquent Factories Factory use Illuminate Support Str class UserFactory extends Factory class UserFactory extends Factory /**\n    * The name of the factory's corresponding model.\n    *\n    * @var string\n    */ @var protected $model /**\n    * Define the model's default state.\n    *\n    * @return array\n    */ @return public function definition() function definition  return 'name' $this 'email' $this 'email_verified_at' 'password' '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi' // password 'remember_token' 10 We can create a new factory using php artisan make:factory UserFactory --class=User. php artisan make:factory UserFactory --class=User The above command will create a new factory class for the User model. It is just a class that extends the base Factory class and makes use of the Faker class to generate fake data for each column. With the combination of factory and seeders, we can easily add fake data into the database for testing purposes.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What are seeders in Laravel?",
        "answer": "Seeders in Laravel are used to put data in the database tables automatically. After running migrations to create the tables, we can run `php artisan db:seed` to run the seeder to populate the database tables. We can create a new Seeder using the below artisan command: php artisan make:seeder [className] php artisan make:seeder [className] It will create a new Seeder like below: <?php\n\nuse App\\Models\\Auth\\User;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Seeder;\n\nclass UserTableSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run()\n    {\n        factory(User::class, 10)->create();\n    }\n} <?php\n\nuse App\\Models\\Auth\\User;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Seeder;\n\nclass UserTableSeeder extends Seeder\n{\n    /**\n     * Run the database seeds.\n     */\n    public function run()\n    {\n        factory(User::class, 10)->create();\n    }\n} <?php use App Models Auth User use Illuminate Database Eloquent Model use Illuminate Database Seeder class UserTableSeeder extends Seeder class UserTableSeeder extends Seeder /**\n     * Run the database seeds.\n     */ public function run() function run  10 The run() method in the above code snippet will create 10 new users using the User factory. Factories will be explained in the next question.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What are the default route files in Laravel?",
        "answer": "Below are the four default route files in the routes folder in Laravel: web.php - For registering web routes.\napi.php - For registering API routes.\nconsole.php - For registering closure-based console commands.\nchannel.php - For registering all your event broadcasting channels that your application supports. web.php - For registering web routes. api.php - For registering API routes. console.php - For registering closure-based console commands. channel.php - For registering all your event broadcasting channels that your application supports.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. How to put Laravel applications in maintenance mode?",
        "answer": "Maintenance mode is used to put a maintenance page to customers and under the hood, we can do software updates, bug fixes, etc. Laravel applications can be put into maintenance mode using the below command: php artisan down php artisan down And can put the application again on live using the below command: php artisan up php artisan up Also, it is possible to access the website in maintenance mode by whitelisting particular IPs.",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Can we use Laravel for Full Stack Development (Frontend + Backend)?",
        "answer": "Laravel is the best choice to make progressive, scalable full-stack web applications. Full-stack web applications can have a backend in laravel and the frontend can be made using blade files or SPAs using Vue.js as it is provided by default. But it can also be used to just provide rest APIs to a SPA application. Hence, Laravel can be used to make full-stack applications or just the backend APIs only.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. How to define environment variables in Laravel?",
        "answer": "The environment variables can be defined in the .env file in the project directory. A brand new laravel application comes with a .env.example and while installing we copy this file and rename it to .env and all the environment variables will be defined here. Some of the examples of environment variables are APP_ENV, DB_HOST, DB_PORT, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What is an artisan?",
        "answer": "Artisan is the command-line tool for Laravel to help the developer build the application. You can enter the below command to get all the available commands: PHP artisan list: Artisan command can help in creating the files using the make command. Some of the useful make commands are listed below: php artisan make:controller - Make Controller file php artisan make:controller php artisan make:model - Make a Model file php artisan make:model php artisan make:migration - Make Migration file php artisan make:migration php artisan make:seeder - Make Seeder file php artisan make:seeder php artisan make:factory - Make Factory file php artisan make:factory php artisan make:policy - Make Policy file php artisan make:policy php artisan make:command - Make a new artisan command php artisan make:command",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What are available databases supported by Laravel?",
        "answer": "The supported databases in laravel are: PostgreSQL\nSQL Server\nSQLite\nMySQL PostgreSQL SQL Server SQLite MySQL",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. What is the templating engine used in Laravel?",
        "answer": "The templating engine used in Laravel is Blade. The blade gives the ability to use its mustache-like syntax with the plain PHP and gets compiled into plain PHP and cached until any other change happens in the blade file. The blade file has .blade.php extension. Blade",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. Define Composer.",
        "answer": "Composer is the package manager for the framework. It helps in adding new packages from the huge community into your laravel application. For example, one of the most used packages for authentication will be Passport, for including that into your project, you can run the below command on your terminal: composer requires laravel/passport composer requires laravel/passport It generates a file(composer.json) in your project directory to keep track of all your packages. A default composer.json file of your laravel project will look something like below: {\n    \"name\": \"laravel/laravel\",\n    \"type\": \"project\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\"\n    ],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"fideloper/proxy\": \"^4.4\",\n        \"fruitcake/laravel-cors\": \"^2.0\",\n        \"guzzlehttp/guzzle\": \"^7.0.1\",\n        \"laravel/framework\": \"^8.12\",\n        \"laravel/tinker\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"facade/ignition\": \"^2.5\",\n        \"fakerphp/faker\": \"^1.9.1\",\n        \"laravel/sail\": \"^1.0.1\",\n        \"mockery/mockery\": \"^1.4.2\",\n        \"nunomaduro/collision\": \"^5.0\",\n        \"phpunit/phpunit\": \"^9.3.3\"\n    }\n} {\n    \"name\": \"laravel/laravel\",\n    \"type\": \"project\",\n    \"description\": \"The Laravel Framework.\",\n    \"keywords\": [\n        \"framework\",\n        \"laravel\"\n    ],\n    \"license\": \"MIT\",\n    \"require\": {\n        \"php\": \"^7.3|^8.0\",\n        \"fideloper/proxy\": \"^4.4\",\n        \"fruitcake/laravel-cors\": \"^2.0\",\n        \"guzzlehttp/guzzle\": \"^7.0.1\",\n        \"laravel/framework\": \"^8.12\",\n        \"laravel/tinker\": \"^2.5\"\n    },\n    \"require-dev\": {\n        \"facade/ignition\": \"^2.5\",\n        \"fakerphp/faker\": \"^1.9.1\",\n        \"laravel/sail\": \"^1.0.1\",\n        \"mockery/mockery\": \"^1.4.2\",\n        \"nunomaduro/collision\": \"^5.0\",\n        \"phpunit/phpunit\": \"^9.3.3\"\n    }\n} The \u201crequire\u201d and \u201crequire-dev\u201d keys in composer.json specify production and dev packages and their version constraints respectively.",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. What are Relationships in Laravel?",
        "answer": "Relationships in Laravel are a way to define relations between different models in the applications. It is the same as relations in relational databases. Different relationships available in Laravel are: One to One\nOne to Many\nMany to Many\nHas One Through\nHas Many Through\nOne to One (Polymorphic)\nOne to Many (Polymorphic)\nMany to Many (Polymorphic) One to One One to Many Many to Many Has One Through Has Many Through One to One (Polymorphic) One to Many (Polymorphic) Many to Many (Polymorphic) Relationships are defined as a method on the model class. An example of One to One relation is shown below. <?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the phone associated with the user.\n     */\n    public function phone()\n    {\n        return $this->hasOne(Phone::class);\n    }\n} <?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the phone associated with the user.\n     */\n    public function phone()\n    {\n        return $this->hasOne(Phone::class);\n    }\n} <?php namespace App Models use Illuminate Database Eloquent Model class User extends Model class User extends Model /**\n     * Get the phone associated with the user.\n     */ public function phone() function phone  return $this The above method phone on the User model can be called like : `$user->phone` or `$user->phone()->where(...)->get()`. We can also define One to Many relationships like below: <?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the addresses for the User.\n     */\n    public function addresses()\n    {\n        return $this->hasMany(Address::class);\n    }\n} <?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass User extends Model\n{\n    /**\n     * Get the addresses for the User.\n     */\n    public function addresses()\n    {\n        return $this->hasMany(Address::class);\n    }\n} <?php namespace App Models use Illuminate Database Eloquent Model class User extends Model class User extends Model /**\n     * Get the addresses for the User.\n     */ public function addresses() function addresses  return $this Since a user can have multiple addresses, we can define a One to Many relations between the User and Address model. Now if we call `$user->addresses`, eloquent will make the join between tables and it will return the result.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What is Eloquent in Laravel?",
        "answer": "Eloquent is the ORM used to interact with the database using Model classes. It gives handy methods on class objects to make a query on the database. It can directly be used to retrieve data from any table and run any raw query. But in conjunction with Models, we can make use of its various methods and also make use of relationships and attributes defined on the model. Some examples of using the Eloquent are below: `DB::table(\u2018users\u2019)->get()`\n`User::all()`\n`User::where(\u2018name\u2019, \u2018=\u2019, \u2018Eloquent\u2019)->get()` `DB::table(\u2018users\u2019)->get()` `User::all()` `User::where(\u2018name\u2019, \u2018=\u2019, \u2018Eloquent\u2019)->get()`",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What is throttling and how to implement it in Laravel?",
        "answer": "Throttling is a process to rate-limit requests from a particular IP. This can be used to prevent DDOS attacks as well. For throttling, Laravel provides a middleware that can be applied to routes and it can be added to the global middlewares list as well to execute that middleware for each request. Here\u2019s how you can add it to a particular route: Route::middleware('auth:api', 'throttle:60,1')->group(function () {\n    Route::get('/user', function () {\n        //\n    });\n}); Route::middleware('auth:api', 'throttle:60,1')->group(function () {\n    Route::get('/user', function () {\n        //\n    });\n}); This will enable the /user route to be accessed by a particular user from a particular IP only 60 times in a minute.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. What are facades?",
        "answer": "Facades are a way to register your class and its methods in Laravel Container so they are available in your whole application after getting resolved by Reflection. The main benefit of using facades is we don\u2019t have to remember long class names and also don\u2019t need to require those classes in any other class for using them. It also gives more testability to the application. The below image could help you understand why Facades are used for: Facades in Laravel  Facades in Laravel",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What are Events in Laravel?",
        "answer": "In Laravel, Events are a way to subscribe to different events that occur in the application. We can make events to represent a particular event like user logged in, user logged out, user-created post, etc. After which we can listen to these events by making Listener classes and do some tasks like, user logged in then make an entry to audit logger of application. For creating a new Event in laravel, we can call below artisan command: php artisan make:event UserLoggedIn php artisan make:event UserLoggedIn This will create a new event class like below: <?php\n\nnamespace App\\Events;\n\nuse App\\Models\\User;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserLoggedIn\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * The user instance.\n     *\n     * @var \\App\\Models\\User\n     */\n    public $user;\n\n    /**\n     * Create a new event instance.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n} <?php\n\nnamespace App\\Events;\n\nuse App\\Models\\User;\nuse Illuminate\\Broadcasting\\InteractsWithSockets;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass UserLoggedIn\n{\n    use Dispatchable, InteractsWithSockets, SerializesModels;\n\n    /**\n     * The user instance.\n     *\n     * @var \\App\\Models\\User\n     */\n    public $user;\n\n    /**\n     * Create a new event instance.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n} <?php namespace App Events use App Models User use Illuminate Broadcasting InteractsWithSockets use Illuminate Foundation Events Dispatchable use Illuminate Queue SerializesModels class UserLoggedIn class UserLoggedIn use Dispatchable InteractsWithSockets SerializesModels /**\n     * The user instance.\n     *\n     * @var \\App\\Models\\User\n     */ @var public $user /**\n     * Create a new event instance.\n     *\n     * @param  \\App\\Models\\User  $user\n     * @return void\n     */ @param @return public function __construct(User $user) function __construct User $user $user $this $user For this event to work, we need to create a listener as well. We can create a listener like this: php artisan make:listener SetLogInFile --event=UserLoggedIn php artisan make:listener SetLogInFile --event=UserLoggedIn The below resultant listener class will be responsible to handle when the UserLoggedIn event is triggered. use App\\Events\\UserLoggedIn;\n\nclass SetLogInFile\n{\n    /**\n     * Handle the given event.\n     *\n     * @param  \\App\\Events\\UserLoggedIn\n     * @return void\n     */\n    public function handle(UserLoggedIn $event)\n    {\n        //\n    }\n} use App\\Events\\UserLoggedIn;\n\nclass SetLogInFile\n{\n    /**\n     * Handle the given event.\n     *\n     * @param  \\App\\Events\\UserLoggedIn\n     * @return void\n     */\n    public function handle(UserLoggedIn $event)\n    {\n        //\n    }\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Explain logging in Laravel?",
        "answer": "Laravel Logging is a way to log information that is happening inside an application. Laravel provides different channels for logging like file and slack. Log messages can be written on to multiple channels at once as well. We can configure the channel to be used for logging in to our environment file or in the config file at config/logging.php. ",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What is Localization in Laravel?",
        "answer": "Localization is a way to serve content concerning the client's language preference. We can create different localization files and use a laravel helper method like this: `__(\u2018auth.error\u2019)` to retrieve translation in the current locale. These localization files are located in the resources/lang/[language] folder.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What are Requests in Laravel?",
        "answer": "Requests in Laravel are a way to interact with incoming HTTP requests along with sessions, cookies, and even files if submitted with the request. The class responsible for doing this is Illuminate\\Http\\Request. When any request is submitted to a laravel route, it goes through to the controller method, and with the help of dependency Injection, the request object is available within the method. We can do all kinds of things with the request like validating or authorizing the request, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. How to do request validation in Laravel?",
        "answer": "Request validation in laravel can be done with the controller method or we can create a request validation class that holds the rules of validation and the error messages associated with it. One example of it can be seen below: /**\n * Store a new blog post.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function store(Request $request)\n{\n    $validated = $request->validate([\n        'title' => 'required|unique:posts|max:255',\n        'body' => 'required',\n    ]);\n\n    // The blog post is valid...\n} /**\n * Store a new blog post.\n *\n * @param  \\Illuminate\\Http\\Request  $request\n * @return \\Illuminate\\Http\\Response\n */\npublic function store(Request $request)\n{\n    $validated = $request->validate([\n        'title' => 'required|unique:posts|max:255',\n        'body' => 'required',\n    ]);\n\n    // The blog post is valid...\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is a Service Container in Laravel?",
        "answer": "Service Container or IoC in laravel is responsible for managing class dependencies meaning not every file needs to be injected in class manually but is done by the Service Container automatically. Service Container is mainly used in injecting class in controllers like Request object is injected. We can also inject a Model based on id in route binding. For example, a route like below: Route::get('/profile/{id}', 'UserController@profile'); Route::get('/profile/{id}', 'UserController@profile'); With the controller like below. public function profile(Request $request, User $id)\n{\n    // \n} public function profile(Request $request, User $id)\n{\n    // \n} In the UserController profile method, the reason we can get the User model as a parameter is because of Service Container as the IoC resolves all the dependencies in all the controllers while booting the server. This process is also called route-model binding.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What is a Service Provider?",
        "answer": "A Service Provider is a way to bootstrap or register services, events, etc before booting the application. Laravel\u2019s own bootstrapping happens using Service Providers as well. Additionally, registers service container bindings, event listeners, middlewares, and even routes using its service providers. If we are creating our application, we can register our facades in provider classes.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What is the register and boot method in the Service Provider class?",
        "answer": "The register method in the Service Provider class is used to bind classes or services to the Service Container. It should not be used to access any other functionality or classes from the application as the service you are accessing may not have loaded yet into the container. The boot method runs after all the dependencies have been included in the container and now we can access any functionality in the boot method. Like you can create routes, create a view composer, etc in the boot method.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. How to define routes in Laravel?",
        "answer": "Laravel Routes are defined in the routes file in routes/web.php for web application routes. Routes can be defined using Illuminate\\Support\\Facades\\Route and calling its static methods such as to get, post, put, delete, etc. use Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/home', function () {\n    return 'Welcome to Home Sweet Home';\n}); use Illuminate\\Support\\Facades\\Route;\n\nRoute::get('/home', function () {\n    return 'Welcome to Home Sweet Home';\n}); A typical closure route looks like the above, where we provide the URI and the closure function to execute when that route is accessed. Route::get('/hello', 'HomeController@index'); Route::get('/hello', 'HomeController@index'); Another way is like above, we can directly give the controller name and the method to call, this can again be resolved using Service Container.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What are named routes?",
        "answer": "A named route is a route definition with the name assigned to it. We can then use that name to call the route anywhere else in the application. Route::get('/hello', 'HomeController@index')->name('index'); Route::get('/hello', 'HomeController@index')->name('index'); This can be accessed in a controller using the following: return redirect()->route('index'); return redirect()->route('index'); ",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What are route groups?",
        "answer": "Route Groups in laravel is used when we need to group route attributes like middlewares, prefixes, etc. we use route groups. It saves us a headache to put each attribute to each route. Syntax: Route::middleware(['throttleMiddleware'])->group(function () {\n    Route::get('/', function () {\n        // Uses throttleMiddleware\n    });\n\n    Route::get('/user/profile', function () {\n        // Uses throttleMiddleware\n    });\n}); Route::middleware(['throttleMiddleware'])->group(function () {\n    Route::get('/', function () {\n        // Uses throttleMiddleware\n    });\n\n    Route::get('/user/profile', function () {\n        // Uses throttleMiddleware\n    });\n});",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. What is Middleware and how to create one in Laravel?",
        "answer": "Middleware gives developers the ability to inspect and filter incoming HTTP requests of our application. One such middleware that ships with laravel are the authentication middleware which checks if the user is authenticated and if the user is authenticated it will go further in the application otherwise it will throw the user back to the login screen. We can always create a new middleware for our purposes. For creating a new middleware we can use the below artisan command: php artisan make:middleware CheckFileIsNotTooLarge php artisan make:middleware CheckFileIsNotTooLarge The above command will create a new middleware file in the app/Http/Middleware folder.",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. How to create a route for resources in laravel?",
        "answer": "For creating a resource route we can use the below command: Route::resource('blogs', BlogController::class); Route::resource('blogs', BlogController::class); This will create routes for six actions index, create, store, show, edit, update and delete.",
        "reference": "interviewbit.com"
    },
    {
        "question": "18. What is dependency Injection in Laravel?",
        "answer": "The Laravel Service Container or IoC resolves all of the dependencies in all controllers. So we can type-hint any dependency in controller methods or constructors. The dependency in methods will be resolved and injected in the method, this injection of resolved classes is called dependency Injection.",
        "reference": "interviewbit.com"
    },
    {
        "question": "19. What are collections?",
        "answer": "Collections in laravel are a wrapper over an array of data in Laravel. All of the responses from Eloquent ORM when we query data from the database are collections (Array of data records). Collections give us handy methods over them to easily work with the data like looping over data or doing some operation on it.",
        "reference": "interviewbit.com"
    },
    {
        "question": "20. What are contracts?",
        "answer": "Laravel Contracts are a set of interfaces with implementation methods to complete the core tasks of Laravel. Laravel Contracts  Laravel Contracts Few examples of contracts in Laravel are Queue and Mailer. Queue contract has an implementation of Queuing jobs while Mailer contract has an implementation to send emails.",
        "reference": "interviewbit.com"
    },
    {
        "question": "21. What are queues in Laravel?",
        "answer": "While building any application we face a situation where some tasks take time to process and our page gets loading until that task is finished. One task is sending an email when a user registers, we can send the email to the user as a background task, so our main thread is responsive all the time. Queues are a way to run such tasks in the background.",
        "reference": "interviewbit.com"
    },
    {
        "question": "22. What are accessors and mutators?",
        "answer": "Accessors are a way to retrieve data from eloquent after doing some operation on the retrieved fields from the database. For example, if we need to combine the first and last names of users but we have two fields in the database, but we want whenever we fetch data from eloquent queries these names need to be combined. We can do that by creating an accessor like below: public function getFullNameAttribute()    \n{    \n    return $this->first_name . \" \" . $this->last_name;    \n} public function getFullNameAttribute()    \n{    \n    return $this->first_name . \" \" . $this->last_name;    \n} What the above code will do is it will give another attribute(full_name) in the collection of the model, so if we need the combined name we can call it like this: `$user->full_name`. Mutators are a way to do some operations on a particular field before saving it to the database. For example, if we wanted the first name to be capitalized before saving it to the database, we can create something like the below: public function setFirstNameAttribute($value)\n{\n    $this->attributes[\u2018first_name\u2019] = strtoupper($value);\n} public function setFirstNameAttribute($value)\n{\n    $this->attributes[\u2018first_name\u2019] = strtoupper($value);\n} So, whenever we are setting this field to be anything: $user->first_name = Input::get('first_name');\n$user->save(); $user->first_name = Input::get('first_name');\n$user->save(); It will change the first_name to be capitalized and it will save to the database. Conclusion Laravel is the most used PHP framework for web development. Laravel interviews consist of questions about a deep understanding of PHP MVC architecture and app development basics like routes, controllers, views, and advanced topics such as Service Container, Dependency Injection, Accessors & Mutators, etc.",
        "reference": "interviewbit.com"
    }
]