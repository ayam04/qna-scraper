[
    {
        "question": "1. What is a helper in CodeIgniter?",
        "answer": "Helpers are the group of functions that are useful in assisting the user to perform specific tasks.\nThere are three types of helper files. They are:\nURL helpers: Used for creating the links.\nText helpers: Used for the formatting of text.\nCookies helpers: Used to read and manage cookies. Helpers are the group of functions that are useful in assisting the user to perform specific tasks. There are three types of helper files. They are:\nURL helpers: Used for creating the links.\nText helpers: Used for the formatting of text.\nCookies helpers: Used to read and manage cookies. URL helpers: Used for creating the links.\nText helpers: Used for the formatting of text.\nCookies helpers: Used to read and manage cookies. URL helpers: Used for creating the links. URL helpers Text helpers: Used for the formatting of text. Text helpers Cookies helpers: Used to read and manage cookies. Cookies helpers  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What are hooks in CodeIgnitor?",
        "answer": "CodeIgniter\u2019s hooks will provide a way to change the internal workings or framework functionalities without any need for hacking the core files. It permits script execution with a particular path within the CodeIgniter.\nWe can globally enable/disable the hooks feature by setting the below-given item in the application/config/config.php file: $config['enable_hooks'] = TRUE;\nIt is defined in application/config/hooks.php file. For example: CodeIgniter\u2019s hooks will provide a way to change the internal workings or framework functionalities without any need for hacking the core files. It permits script execution with a particular path within the CodeIgniter. We can globally enable/disable the hooks feature by setting the below-given item in the application/config/config.php file: $config['enable_hooks'] = TRUE; application/config/config.php $config['enable_hooks'] = TRUE; It is defined in application/config/hooks.php file. For example: application/config/hooks.php $hook[\u2018pre_controller\u2019] = array(\n\u2018class\u2019 => \u2018MyHookClass\u2019,\n\u2018function\u2019 => \u2018Myhookfunction\u2019,\n\u2018filename\u2019 => \u2018MyHookClass.php\u2019,\n\u2018filepath\u2019 => \u2018hooks\u2019,\n\u2018params\u2019 => array(\u2018test\u2019, \u2018test1\u2019, \u2018webs\u2019)\n); $hook[\u2018pre_controller\u2019] = array(\n\u2018class\u2019 => \u2018MyHookClass\u2019,\n\u2018function\u2019 => \u2018Myhookfunction\u2019,\n\u2018filename\u2019 => \u2018MyHookClass.php\u2019,\n\u2018filepath\u2019 => \u2018hooks\u2019,\n\u2018params\u2019 => array(\u2018test\u2019, \u2018test1\u2019, \u2018webs\u2019)\n); In the above code example, the \u2018pre_controller\u2018 hook is called hook point. Various types of hook points are available in CodeIgniter.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What is an inhibitor in CodeIgniter?",
        "answer": "An inhibitor in CodeIgniter is an error handler class. It will make use of PHP\u2019s native functions like set_error_handler, set_exception_handler, register_shutdown_function to handle parse errors, exceptions, and fatal errors. set_error_handler set_exception_handler register_shutdown_function",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How to check the CodeIgniter version?",
        "answer": "There are 2 ways to check the CodeIgniter version. The first method is to run the following code: The first method is to run the following code: <?php \n   echo CI_VERSION; \n?> <?php \n   echo CI_VERSION; \n?> You can echo the constant value of CI_VERSION in the CodeIgniter controller or view file. The second method is to navigate to the system/core/CodeIgniter.php directory which stores the current version number of CodeIgniter in a global constant named \u2018CI_VERSION\u2019. Open the file and have a look at the lines: The second method is to navigate to the system/core/CodeIgniter.php directory which stores the current version number of CodeIgniter in a global constant named \u2018CI_VERSION\u2019. Open the file and have a look at the lines: system/core/CodeIgniter.php /**    \n  * CodeIgniter Version\n  *\n  * @var    string\n  *\n  */\n   define('CI_VERSION', '4.1.3'); /**    \n  * CodeIgniter Version\n  *\n  * @var    string\n  *\n  */\n   define('CI_VERSION', '4.1.3');",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Explain the difference between helper and library in CodeIgniter.",
        "answer": "Helper  Library\nHelper is a collection of common functions which we can use within Models, Views as well as in Controllers. Once we include the helper file, we can get access to the functions. Library is a class that has a set of functions that permits for creating an instance of that class by $this->load->library() function.\nIt is not written in object-oriented format. It is written in an object-oriented format.\nIt can be called in the same manner you call PHP functions. You must create an object of the class to call library functions by using the $this->library_name->method().\nAll built-in helper file names are suffixed with a word _helper (ex: email_helper.php). All built-in library files do not have a specific suffix. Helper  Library\nHelper is a collection of common functions which we can use within Models, Views as well as in Controllers. Once we include the helper file, we can get access to the functions. Library is a class that has a set of functions that permits for creating an instance of that class by $this->load->library() function.\nIt is not written in object-oriented format. It is written in an object-oriented format.\nIt can be called in the same manner you call PHP functions. You must create an object of the class to call library functions by using the $this->library_name->method().\nAll built-in helper file names are suffixed with a word _helper (ex: email_helper.php). All built-in library files do not have a specific suffix. Helper  Library Helper  Library Helper Library Helper is a collection of common functions which we can use within Models, Views as well as in Controllers. Once we include the helper file, we can get access to the functions. Library is a class that has a set of functions that permits for creating an instance of that class by $this->load->library() function.\nIt is not written in object-oriented format. It is written in an object-oriented format.\nIt can be called in the same manner you call PHP functions. You must create an object of the class to call library functions by using the $this->library_name->method().\nAll built-in helper file names are suffixed with a word _helper (ex: email_helper.php). All built-in library files do not have a specific suffix. Helper is a collection of common functions which we can use within Models, Views as well as in Controllers. Once we include the helper file, we can get access to the functions. Library is a class that has a set of functions that permits for creating an instance of that class by $this->load->library() function. Helper is a collection of common functions which we can use within Models, Views as well as in Controllers. Once we include the helper file, we can get access to the functions. Library is a class that has a set of functions that permits for creating an instance of that class by $this->load->library() function. $this->load->library() It is not written in object-oriented format. It is written in an object-oriented format. It is not written in object-oriented format. It is written in an object-oriented format. It can be called in the same manner you call PHP functions. You must create an object of the class to call library functions by using the $this->library_name->method(). It can be called in the same manner you call PHP functions. You must create an object of the class to call library functions by using the $this->library_name->method(). $this->library_name->method() All built-in helper file names are suffixed with a word _helper (ex: email_helper.php). All built-in library files do not have a specific suffix. All built-in helper file names are suffixed with a word _helper (ex: email_helper.php). _helper email_helper.php All built-in library files do not have a specific suffix.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What is routing in CodeIgniter?",
        "answer": "Routing is a technique used in CodeIgniter, by which you can define your URLs based on the requirement instead of using the predefined URLs. So, whenever there is a request made and matches the URL pattern defined by us, it will automatically direct to the specified controller and function.\nA URL string and its corresponding controller class or method are in a one-to-one relationship here. The URI segments usually follow this pattern: example.com/class/function/id/. All routing rules are defined in the application/config/routes.php file of CodeIgniter. Routing is a technique used in CodeIgniter, by which you can define your URLs based on the requirement instead of using the predefined URLs. So, whenever there is a request made and matches the URL pattern defined by us, it will automatically direct to the specified controller and function. A URL string and its corresponding controller class or method are in a one-to-one relationship here. The URI segments usually follow this pattern: example.com/class/function/id/. All routing rules are defined in the application/config/routes.php file of CodeIgniter. example.com/class/function/id/ application/config/routes.php",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What are drivers in CodeIgniter?",
        "answer": "A driver is a type of library that has a parent class and multiple child classes. These child classes can access their parent class, but they can\u2019t access their siblings.\nDrivers can be found in the system/libraries folder.\nThere are three steps for creating a driver:\nMaking file structure\nMaking driver list\nMaking driver(s) A driver is a type of library that has a parent class and multiple child classes. These child classes can access their parent class, but they can\u2019t access their siblings. Drivers can be found in the system/libraries folder. There are three steps for creating a driver:\nMaking file structure\nMaking driver list\nMaking driver(s) Making file structure\nMaking driver list\nMaking driver(s) Making file structure Making driver list Making driver(s)  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. How to link images from a view in CodeIgniter?",
        "answer": "In Codeigniter, you can link images/CSS/JavaScript from a view by using the absolute path to the resources required with respect to the root folder as given below: images/CSS/JavaScript /css/styles.css\n/js/query.php\n/img/news/566.gpg /css/styles.css\n/js/query.php\n/img/news/566.gpg",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Why CodeIgniter is called a loosely based MVC framework?",
        "answer": "Codeigniter is called a loosely based MVC framework because it does not need to obey a strict MVC pattern during application creation. It is not important to create a model, we can use only view and controllers for creating an application. In addition, one can modify CodeIgniter to utilize HMVC(Hierarchical Model View Controller) as well.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is CodeIgniter?",
        "answer": "CodeIgniter is an open-source and MVC-based framework used for web application development on PHP. This framework contains libraries, an easier interface with a logical structure to access these libraries, helpers, plug-ins, and other resources as well. It is easy to use compared to other PHP frameworks.",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. How to pass an array from the controller to view in CodeIgniter?",
        "answer": "A view is a webpage that shows each element of the user interface. It cannot be called directly, you need to load the views via the controller. You can pass an array from the controller to view in CodeIgniter using below given steps: Create a view: Create a view: Create a view: Create a new text file and name it ciblogview.php. Save the created file in the application/views/ directory. Open the ciblogview.php file and add the below-given code to it: ciblogview.php application/views/ ciblogview.php <html>\n<head>\n   <title>Blog</title>\n</head>\n<body>\n   <h1>Welcome to Blog in CodeIgniter</h1>\n</body>\n</html> <html>\n<head>\n   <title>Blog</title>\n</head>\n<body>\n   <h1>Welcome to Blog in CodeIgniter</h1>\n</body>\n</html> Load the view: Load the view: Load the view: Loading a view is executed using the following syntax: $this->load->view('name'); $this->load->view('name'); Where \u2018name\u2019 represents the name of the view. The below code creates a controller named Blog.php. This controller has the method for loading the view. Blog.php <?php\nclass Blog extends CI_Controller \n{\n   public function index()\n   {\n       $this->load->view('ciblogview');\n   }\n}\n?> <?php\nclass Blog extends CI_Controller \n{\n   public function index()\n   {\n       $this->load->view('ciblogview');\n   }\n}\n?> Passing an array from the controller to view: Passing an array from the controller to view: Passing an array from the controller to view: You are allowed to paste the below-given controller code within your controller file or put it in the controller object. $data['mega_header'][] = (object) array('title' => 'image portfolio' , 'img' => 'https://complete_image_path' );\n$this->load->view('multiple_array', $data); $data['mega_header'][] = (object) array('title' => 'image portfolio' , 'img' => 'https://complete_image_path' );\n$this->load->view('multiple_array', $data); Arrays are displayed as a brick[\u2018\u2026\u2019] and objects as an arrow(->). You are allowed to access an array with the brick[\u2018\u2026\u2019] and object using the arrow (->). Therefore, add the below-given code in the view file: <?php\n   if (isset($mega_header)){\n       foreach ($mega_header as $key) {\n           ?>\n           <div class=\"header_item\">\n               <img alt=\"<?php echo($key['title']); ?>\" src=\"<?php echo($key->img); ?>\"/>\n           </div>\n           <?php\n       }\n   }\n?> <?php\n   if (isset($mega_header)){\n       foreach ($mega_header as $key) {\n           ?>\n           <div class=\"header_item\">\n               <img alt=\"<?php echo($key['title']); ?>\" src=\"<?php echo($key->img); ?>\"/>\n           </div>\n           <?php\n       }\n   }\n?> Add dynamic data to views: Add dynamic data to views: Add dynamic data to views: Usually, data transfer from the controller to view is done through an array or an object. The array or the object is passed as the second parameter of the view load method similar to the below-given method: $data = array(\n   'title' => 'TitleValue',\n   'heading' => 'HeadingValue'\n);\n$this->load->view('ciblogview', $data); $data = array(\n   'title' => 'TitleValue',\n   'heading' => 'HeadingValue'\n);\n$this->load->view('ciblogview', $data); The controller will look like this: <?php\n   class Blog extends CI_Controller {\n   public function index()\n   {\n       $data['title'] = \"TitleValue\";\n       $data['heading'] = \"HeadingValue\";\n       $this->load->view('ciblogview', $data);\n   }\n}\n?> <?php\n   class Blog extends CI_Controller {\n   public function index()\n   {\n       $data['title'] = \"TitleValue\";\n       $data['heading'] = \"HeadingValue\";\n       $this->load->view('ciblogview', $data);\n   }\n}\n?> The view file will look like this: <html>\n<head>\n   <title><?php echo $title;?></title>\n</head>\n<body>\n   <h1><?php echo $heading;?></h1>\n</body>\n</html> <html>\n<head>\n   <title><?php echo $title;?></title>\n</head>\n<body>\n   <h1><?php echo $heading;?></h1>\n</body>\n</html>",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What is the difference between Laravel and CodeIgniter?",
        "answer": "Based on  Laravel CodeIgniter\nDatabase model  It is object-oriented. It is relational object-oriented.\nBuilt-in module It comes along with a built-in module. It does not come with a built-in module.\nStructure Follows MVC structure of filing with a command-line tool known as Artisan. Follows the MVC structure but it provides easier boarding based on object-oriented programming.\nDevelopment and Template  It is a good option for front-end developers and it comes along with the Blade template engine. It is easier to use and there is no template engine provided.\nUtilized by  OctoberCMS, Laracasts PyroCMS, Expression engine\nLibraries Provide their own official documentation which is very helpful. Provides a lot of built-in functionality\nRouting  Supports Explicit routing Supports both Explicit and Implicit routing. Based on  Laravel CodeIgniter\nDatabase model  It is object-oriented. It is relational object-oriented.\nBuilt-in module It comes along with a built-in module. It does not come with a built-in module.\nStructure Follows MVC structure of filing with a command-line tool known as Artisan. Follows the MVC structure but it provides easier boarding based on object-oriented programming.\nDevelopment and Template  It is a good option for front-end developers and it comes along with the Blade template engine. It is easier to use and there is no template engine provided.\nUtilized by  OctoberCMS, Laracasts PyroCMS, Expression engine\nLibraries Provide their own official documentation which is very helpful. Provides a lot of built-in functionality\nRouting  Supports Explicit routing Supports both Explicit and Implicit routing. Based on  Laravel CodeIgniter Based on  Laravel CodeIgniter Based on Laravel CodeIgniter Database model  It is object-oriented. It is relational object-oriented.\nBuilt-in module It comes along with a built-in module. It does not come with a built-in module.\nStructure Follows MVC structure of filing with a command-line tool known as Artisan. Follows the MVC structure but it provides easier boarding based on object-oriented programming.\nDevelopment and Template  It is a good option for front-end developers and it comes along with the Blade template engine. It is easier to use and there is no template engine provided.\nUtilized by  OctoberCMS, Laracasts PyroCMS, Expression engine\nLibraries Provide their own official documentation which is very helpful. Provides a lot of built-in functionality\nRouting  Supports Explicit routing Supports both Explicit and Implicit routing. Database model  It is object-oriented. It is relational object-oriented. Database model It is object-oriented. It is relational object-oriented. Built-in module It comes along with a built-in module. It does not come with a built-in module. Built-in module It comes along with a built-in module. It does not come with a built-in module. Structure Follows MVC structure of filing with a command-line tool known as Artisan. Follows the MVC structure but it provides easier boarding based on object-oriented programming. Structure Follows MVC structure of filing with a command-line tool known as Artisan. Follows the MVC structure but it provides easier boarding based on object-oriented programming. Development and Template  It is a good option for front-end developers and it comes along with the Blade template engine. It is easier to use and there is no template engine provided. Development and Template It is a good option for front-end developers and it comes along with the Blade template engine. It is easier to use and there is no template engine provided. Utilized by  OctoberCMS, Laracasts PyroCMS, Expression engine Utilized by OctoberCMS, Laracasts PyroCMS, Expression engine Libraries Provide their own official documentation which is very helpful. Provides a lot of built-in functionality Libraries Provide their own official documentation which is very helpful. Provides a lot of built-in functionality Routing  Supports Explicit routing Supports both Explicit and Implicit routing. Routing Supports Explicit routing Supports both Explicit and Implicit routing.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. List various databases supported by the CodeIgniter framework.",
        "answer": "Following Databases are supported by the CodeIgniter framework: MySQL (version 5.1+) database that uses MySQL (deprecated), mysqli, and PDO drivers\nOracle database that uses oci8 and PDO drivers\nPostgreSQL database that uses Postgre and PDO drivers\nODBC database that uses ODBC and PDO drivers\nSQLite database that uses SQLite version 2, SQLite3 version 3, along with PDO drivers\nMS SQL database that uses Sqlsrv (version 2005 and above), MsSQL, and PDO drivers\nInterbase/Firebird database that uses iBase and PDO drivers\nCUBRID database that uses Cubridand PDO drivers MySQL (version 5.1+) database that uses MySQL (deprecated), mysqli, and PDO drivers Oracle database that uses oci8 and PDO drivers PostgreSQL database that uses Postgre and PDO drivers ODBC database that uses ODBC and PDO drivers SQLite database that uses SQLite version 2, SQLite3 version 3, along with PDO drivers MS SQL database that uses Sqlsrv (version 2005 and above), MsSQL, and PDO drivers Interbase/Firebird database that uses iBase and PDO drivers CUBRID database that uses Cubridand PDO drivers",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. What is the work of anchor tag in CodeIgniter?",
        "answer": "Anchor tag creates a standard HTML anchor link based on the URL of your local site.\nSyntax: Anchor tag creates a standard HTML anchor link based on the URL of your local site. Syntax: Syntax: anchor($uri = '', $title = '', $attributes = '') anchor($uri = '', $title = '', $attributes = '') Here, $uri represents a URI string, $title represents an anchor title and $attributes represents an HTML attributes. It returns an HTML hyperlink (anchor tag) of string type. Here, $uri represents a URI string, $title represents an anchor title and $attributes represents an HTML attributes. It returns an HTML hyperlink (anchor tag) of string type. The first parameter can have any segments you would like to append to the URL. These segments can be a string or an array. The second parameter is the text that will be displayed with a link. The URL will be used in case you leave it blank. The third parameter can contain an attribute list you would like added to the link. The attributes can be a string or an associative array. Example: Example: Example: echo anchor('details/local/123', 'My Details', 'title=\"Details title\"');\n// Prints: <a href=\"http://example.com/index.php/details/local/123\" title=\"Details title\">My Details</a> echo anchor('details/local/123', 'My Details', 'title=\"Details title\"');\n// Prints: <a href=\"http://example.com/index.php/details/local/123\" title=\"Details title\">My Details</a>",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Explain CodeIgniter E-mail library. How to send an E-mail using CodeIgniter?",
        "answer": "Features of Email Class in CodeIgniter are given below:\nMultiple protocols such as Mail, Sendmail, and SMTP\nTLS and SSL Encryption for SMTP\nCC and BCCs\nMultiple recipients\nAttachments\nHTML or Plain-text email\nPriorities\nWord wrapping\nBCC Batch Mode, enabling larger e-mail lists to be broken into smaller BCC batches\nEmail Debugging tools\nSending Email:\nSending an email is a simple process here. You can configure an email on the fly or set your preferences in the app/Config/Email.php file. A basic example for demonstrating how you might send email is given below: Features of Email Class in CodeIgniter are given below:\nMultiple protocols such as Mail, Sendmail, and SMTP\nTLS and SSL Encryption for SMTP\nCC and BCCs\nMultiple recipients\nAttachments\nHTML or Plain-text email\nPriorities\nWord wrapping\nBCC Batch Mode, enabling larger e-mail lists to be broken into smaller BCC batches\nEmail Debugging tools Multiple protocols such as Mail, Sendmail, and SMTP\nTLS and SSL Encryption for SMTP\nCC and BCCs\nMultiple recipients\nAttachments\nHTML or Plain-text email\nPriorities\nWord wrapping\nBCC Batch Mode, enabling larger e-mail lists to be broken into smaller BCC batches\nEmail Debugging tools Multiple protocols such as Mail, Sendmail, and SMTP TLS and SSL Encryption for SMTP CC and BCCs Multiple recipients Attachments HTML or Plain-text email Priorities Word wrapping BCC Batch Mode, enabling larger e-mail lists to be broken into smaller BCC batches Email Debugging tools Sending Email:\nSending an email is a simple process here. You can configure an email on the fly or set your preferences in the app/Config/Email.php file. A basic example for demonstrating how you might send email is given below: Sending Email:  app/Config/Email.php $email = \\Config\\Services::email();\n$email->setFrom('your@interviewbit.com', 'Your Name');\n$email->setTo('someone@interviewbit.com');\n$email->setCC('another@another-example.com');\n$email->setBCC('them@their-example.com');\n$email->setSubject('Email Test');\n$email->setMessage('Testing the email class.');\n$email->send(); $email = \\Config\\Services::email();\n$email->setFrom('your@interviewbit.com', 'Your Name');\n$email->setTo('someone@interviewbit.com');\n$email->setCC('another@another-example.com');\n$email->setBCC('them@their-example.com');\n$email->setSubject('Email Test');\n$email->setMessage('Testing the email class.');\n$email->send();",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. How to deal with Error handling in CodeIgniter?",
        "answer": "CodeIgniter enables you to develop error reporting into your applications by using the below-given functions. Also, it has a class dedicated to error logging that permits messages related to error and debugging to be saved as text files. Functions related to error handling are: This function will display the error message provided by the application/errors/errorgeneral.php template. This function will display the error message provided by the application/errors/errorgeneral.php template. application/errors/errorgeneral.php show_error(\u2018message\u2019 [, int $statuscode= 500 ] ) show_error(\u2018message\u2019 [, int $statuscode= 500 ] ) This function shows the 404 error message supplied to it by using the application/errors/error404.php template. This function shows the 404 error message supplied to it by using the application/errors/error404.php template. application/errors/error404.php show_404(\u2018page\u2019 [, \u2018logerror\u2019]) show_404(\u2018page\u2019 [, \u2018logerror\u2019]) This function permits you to write messages onto your log files. You must provide anyone among three \u201clevels\u201d in the first parameter that indicates the message type (debug, error, info), with the message itself in the second parameter. This function permits you to write messages onto your log files. You must provide anyone among three \u201clevels\u201d in the first parameter that indicates the message type (debug, error, info), with the message itself in the second parameter. log_message(\u2018level\u2019, \u2018message\u2019) log_message(\u2018level\u2019, \u2018message\u2019)",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. Explain the default URL pattern used in CodeIgniter.",
        "answer": "CodeIgniter will make use of a \u201csegment-based\u201d approach instead of a \u201cquery string-based\u201d approach.\nCodeIgniter framework has four main parts in the default URL pattern. First, we have the name of the server, and next, we have the name of the controller class followed by name of the controller function and function parameters at the end. Codeigniter is accessed using the URL helper. The basic URL structure is: CodeIgniter will make use of a \u201csegment-based\u201d approach instead of a \u201cquery string-based\u201d approach. CodeIgniter framework has four main parts in the default URL pattern. First, we have the name of the server, and next, we have the name of the controller class followed by name of the controller function and function parameters at the end. Codeigniter is accessed using the URL helper. The basic URL structure is: http://servername/controllerName/controllerFunction/parameter1/parameter2/.../parametern http://servername/controllerName/controllerFunction/parameter1/parameter2/.../parametern Example: Example: Example: interviewbit.com/user/edit/suresh interviewbit.com/user/edit/suresh Here, interviewbit.com is a server name, a user is a controller class that needs to be invoked, an edit is an action or method, and suresh is an optional action parameter that is passed to controllers. interviewbit.com user edit suresh",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. How you can add or load a model in CodeIgniter?",
        "answer": "In CodeIgniter, models are loaded as well as called inside your controller methods. For loading a model, you must use the below-given method: In CodeIgniter, models are loaded as well as called inside your controller methods. For loading a model, you must use the below-given method: $this->load->model('name_of_the_model'); $this->load->model('name_of_the_model'); Include the relative path from the directory of your model, if your model is placed inside a sub-directory. Consider an example, you have a model which is placed at application/models/blog/AllPosts.php you can load it by using: $this->load->model('blog/AllPosts');\nYou can access the methods provided by the model, once the model gets loaded by using an object which has the same name as your controller: Include the relative path from the directory of your model, if your model is placed inside a sub-directory. Consider an example, you have a model which is placed at application/models/blog/AllPosts.php you can load it by using: $this->load->model('blog/AllPosts'); application/models/blog/AllPosts.php $this->load->model('blog/AllPosts'); You can access the methods provided by the model, once the model gets loaded by using an object which has the same name as your controller: class MyBlogController extends CI_Controller\n{\n   public function MyblogModel()\n   {\n           $this->load->model('blog_model');\n           $data['que'] = $this->blog_model->get_last_five_entries();\n           $this->load->view('blog_model', $data);\n   }\n} class MyBlogController extends CI_Controller\n{\n   public function MyblogModel()\n   {\n           $this->load->model('blog_model');\n           $data['que'] = $this->blog_model->get_last_five_entries();\n           $this->load->view('blog_model', $data);\n   }\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain the CodeIgniter framework.",
        "answer": "The CodeIgniter application is based on the MVC (Model \u2013 View \u2013 Controller) model, which separates the application logic from the presentation view. Because of presentation view separation from the PHP scripting, it allows your web pages for script minimization.   Model:\nGenerally, a model is used for database interaction. When a user raises a request for the specific data from the application, the model takes the accountability to fetch out the records from the database table.\nAlso, a data structure represented by the model can be used to perform several operations like retrieve, insert, update, and delete.\nController:\nThe working of the CodeIgniter application is controlled by the controller. It acts as an intermediary for the communication between the model and the view. Therefore, it has the accountability to receive the user request and handle that request by furnishing a result generated by the model. The appropriate records will be displayed to the user by using the view component. (Note: The Controller file name and class name should be the same and must be in uppercase letters. Example- Main.php)\nView:\nTypically, a view is similar to a web page that has the information displayed to the user. A view can also be an integral part of a web page such as header and footer. The view page can be represented in both RSS(RDF Site Summary) and a user interface. Model:\nGenerally, a model is used for database interaction. When a user raises a request for the specific data from the application, the model takes the accountability to fetch out the records from the database table.\nAlso, a data structure represented by the model can be used to perform several operations like retrieve, insert, update, and delete. Model: Generally, a model is used for database interaction. When a user raises a request for the specific data from the application, the model takes the accountability to fetch out the records from the database table.\nAlso, a data structure represented by the model can be used to perform several operations like retrieve, insert, update, and delete. Generally, a model is used for database interaction. When a user raises a request for the specific data from the application, the model takes the accountability to fetch out the records from the database table. Also, a data structure represented by the model can be used to perform several operations like retrieve, insert, update, and delete. Controller:\nThe working of the CodeIgniter application is controlled by the controller. It acts as an intermediary for the communication between the model and the view. Therefore, it has the accountability to receive the user request and handle that request by furnishing a result generated by the model. The appropriate records will be displayed to the user by using the view component. (Note: The Controller file name and class name should be the same and must be in uppercase letters. Example- Main.php) Controller: The working of the CodeIgniter application is controlled by the controller. It acts as an intermediary for the communication between the model and the view. Therefore, it has the accountability to receive the user request and handle that request by furnishing a result generated by the model. The appropriate records will be displayed to the user by using the view component. (Note: The Controller file name and class name should be the same and must be in uppercase letters. Example- Main.php) The working of the CodeIgniter application is controlled by the controller. It acts as an intermediary for the communication between the model and the view. Therefore, it has the accountability to receive the user request and handle that request by furnishing a result generated by the model. The appropriate records will be displayed to the user by using the view component. (Note: The Controller file name and class name should be the same and must be in uppercase letters. Example- Main.php) View:\nTypically, a view is similar to a web page that has the information displayed to the user. A view can also be an integral part of a web page such as header and footer. The view page can be represented in both RSS(RDF Site Summary) and a user interface. View: Typically, a view is similar to a web page that has the information displayed to the user. A view can also be an integral part of a web page such as header and footer. The view page can be represented in both RSS(RDF Site Summary) and a user interface. Typically, a view is similar to a web page that has the information displayed to the user. A view can also be an integral part of a web page such as header and footer. The view page can be represented in both RSS(RDF Site Summary) and a user interface.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. How to extend the class in CodeIgniter?",
        "answer": "You have to create a file with the name Example.php under application/core/ directory and declare your class with the below code: application/core/ Class Example extends CI_Input {\n     // Write your code here\n} Class Example extends CI_Input {\n     // Write your code here\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Explain how to prevent CodeIgniter from CSRF(Cross Site Request Forgery).",
        "answer": "There are many ways to protect CodeIgniter from CSRF, one method of doing this is to use a hidden field in every form on the website. This hidden field is considered as CSRF token, it is a random value that changes with each HTTP request sent. After gets inserted into the website forms, it will be saved in the user\u2019s session as well. So, when the user submits the form, the website checks whether it is the same as the one that was saved in the session. If it is the same then, the request is authorized.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What are the sessions in CodeIgniter? How to handle sessions in CodeIgniter?",
        "answer": "In CodeIgniter, you are allowed to maintain a user\u2019s \u201cstate\u201d by Session class and keep an eye on their activity while they browse your website. Loading a session in CodeIgniter:\nFor using session, your controller should be loaded with your Session class by using the $this->load->library(\u2018session\u2019);.\nOnce the Session class is loaded, the Session library object can be obtained using $this->session.\nRead session data in CodeIgniter:\n$this->session->userdata(); method of Session class is used to read or obtain session data in CodeIgniter.\nUsage: $this->session->userdata('name_of_user');\nAlso, the below-given method of the Session class can be used to read session data.\nUsage: $this->session->key_item\nWhere an item represents the key name you want to access.\nCreate a session in CodeIgniter:\nThe set_userdata() method that belongs to the Session class is useful in creating a session in CodeIgniter. This method uses an associative array that has the data you want to include in the session.\nAdding session data:\nExample: Loading a session in CodeIgniter:\nFor using session, your controller should be loaded with your Session class by using the $this->load->library(\u2018session\u2019);.\nOnce the Session class is loaded, the Session library object can be obtained using $this->session. Loading a session in CodeIgniter:  $this->load->library(\u2018session\u2019);  $this->session Read session data in CodeIgniter:\n$this->session->userdata(); method of Session class is used to read or obtain session data in CodeIgniter.\nUsage: $this->session->userdata('name_of_user');\nAlso, the below-given method of the Session class can be used to read session data.\nUsage: $this->session->key_item\nWhere an item represents the key name you want to access. Read session data in CodeIgniter:  $this->session->userdata();  $this->session->userdata('name_of_user');   $this->session->key_item  Create a session in CodeIgniter:\nThe set_userdata() method that belongs to the Session class is useful in creating a session in CodeIgniter. This method uses an associative array that has the data you want to include in the session.\nAdding session data:\nExample: Create a session in CodeIgniter:   Adding session data:  $sessiondata = array(\n   'name_of_user'  => 'lekha',\n   'email'     => 'lekha@interviewbit.com',\n   'log_state' => TRUE\n);\n$this->session->set_userdata($sessiondata); $sessiondata = array(\n   'name_of_user'  => 'lekha',\n   'email'     => 'lekha@interviewbit.com',\n   'log_state' => TRUE\n);\n$this->session->set_userdata($sessiondata); If you want to add a single user data at a time, set_userdata() supports this syntax: set_userdata() $this->session->set_userdata('demo_username', 'demo_value'); $this->session->set_userdata('demo_username', 'demo_value'); Remove session data in CodeIgniter:\nThe unset_userdata() method that belongs to the Session class is useful for removing session data in CodeIgniter. Usage examples are given below:\nUnset particular key: Remove session data in CodeIgniter:\nThe unset_userdata() method that belongs to the Session class is useful for removing session data in CodeIgniter. Usage examples are given below:\nUnset particular key: Remove session data in CodeIgniter:   Unset particular key: $this->session->unset_userdata('name_of_user'); $this->session->unset_userdata('name_of_user'); Unset an array of item keys: Unset an array of item keys: $arr_items = array('name_of_user', 'email');\n$this->session->unset_userdata($arr_items); $arr_items = array('name_of_user', 'email');\n$this->session->unset_userdata($arr_items);",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain CodeIgniter folder structure.",
        "answer": "The CodeIgniter folder structure is given below: application: This directory will have your application logic. All of your application codes will be held in this directory. Internal subdirectories in the CodeIgniter directory structure are given below:\ncache \u2013 It stores cached files.\nconfig \u2013 It keeps configuration files.\ncontroller \u2013 All application controllers are defined under this controller.\ncore \u2013 It consists of custom core classes that extend system files. For example, if you create a base controller that other controllers should extend, then you should place it under this directory.\nhelpers \u2013 This directory will be used for user-defined helper functions.\nhooks \u2013 It is used for custom hooks in the CodeIgniter folder structure.\nlanguage \u2013 It is used to store language files for applications that use multiple languages.\nlibraries \u2013 It is used to store custom-created libraries.\nlogs \u2013 Application log files are placed in this directory.\nmodels - All application models must be defined under this directory.\nthird_party \u2013 This is used for custom many packages that are created by you or other developers.\nviews \u2013 application views will be stored in this directory.\nsystem: It consists of the framework core files. It is not advised to make any modifications in this directory or put your own application code into this directory. System subdirectories in CodeIgniter are given below:\ncore \u2013 This is considered to be the heart of the CodeIgniter Framework. All of the core files that construct the framework are located here. If you would like to extend the core file functionality, then you must\ncreate a custom core file in the application directory. After this, you are allowed to override or add new behavior that you wish. You should never make any changes directly in this directory.\ndatabase \u2013 It stores the files such as database drivers, cache, and other files that are needed for database operations.\nfonts \u2013 This directory contains fonts and font-related information.\nhelpers \u2013 This directory consists of helper functions that come out of the box.\nlanguage \u2013 It contains language files that are used by the framework\nlibraries \u2013 It contains the source files for the different libraries that come along with CodeIgniter out of the box.\nuser_guide: This directory consists of a user manual for CodeIgniter. You should not upload this directory during application deployment.\nvendor: This directory consists of composer packages source code. The composer.json and composer.lock are the other two files related to this directory.\nindex.php: This is considered as the entry point into the application. It is placed inside the root directory. application: This directory will have your application logic. All of your application codes will be held in this directory. Internal subdirectories in the CodeIgniter directory structure are given below:\ncache \u2013 It stores cached files.\nconfig \u2013 It keeps configuration files.\ncontroller \u2013 All application controllers are defined under this controller.\ncore \u2013 It consists of custom core classes that extend system files. For example, if you create a base controller that other controllers should extend, then you should place it under this directory.\nhelpers \u2013 This directory will be used for user-defined helper functions.\nhooks \u2013 It is used for custom hooks in the CodeIgniter folder structure.\nlanguage \u2013 It is used to store language files for applications that use multiple languages.\nlibraries \u2013 It is used to store custom-created libraries.\nlogs \u2013 Application log files are placed in this directory.\nmodels - All application models must be defined under this directory.\nthird_party \u2013 This is used for custom many packages that are created by you or other developers.\nviews \u2013 application views will be stored in this directory. application: cache \u2013 It stores cached files.\nconfig \u2013 It keeps configuration files.\ncontroller \u2013 All application controllers are defined under this controller.\ncore \u2013 It consists of custom core classes that extend system files. For example, if you create a base controller that other controllers should extend, then you should place it under this directory.\nhelpers \u2013 This directory will be used for user-defined helper functions.\nhooks \u2013 It is used for custom hooks in the CodeIgniter folder structure.\nlanguage \u2013 It is used to store language files for applications that use multiple languages.\nlibraries \u2013 It is used to store custom-created libraries.\nlogs \u2013 Application log files are placed in this directory.\nmodels - All application models must be defined under this directory.\nthird_party \u2013 This is used for custom many packages that are created by you or other developers.\nviews \u2013 application views will be stored in this directory. cache \u2013 It stores cached files. config \u2013 It keeps configuration files. controller \u2013 All application controllers are defined under this controller. core \u2013 It consists of custom core classes that extend system files. For example, if you create a base controller that other controllers should extend, then you should place it under this directory. helpers \u2013 This directory will be used for user-defined helper functions. hooks \u2013 It is used for custom hooks in the CodeIgniter folder structure. language \u2013 It is used to store language files for applications that use multiple languages. libraries \u2013 It is used to store custom-created libraries. logs \u2013 Application log files are placed in this directory. models - All application models must be defined under this directory. third_party \u2013 This is used for custom many packages that are created by you or other developers. views \u2013 application views will be stored in this directory. system: It consists of the framework core files. It is not advised to make any modifications in this directory or put your own application code into this directory. System subdirectories in CodeIgniter are given below:\ncore \u2013 This is considered to be the heart of the CodeIgniter Framework. All of the core files that construct the framework are located here. If you would like to extend the core file functionality, then you must\ncreate a custom core file in the application directory. After this, you are allowed to override or add new behavior that you wish. You should never make any changes directly in this directory.\ndatabase \u2013 It stores the files such as database drivers, cache, and other files that are needed for database operations.\nfonts \u2013 This directory contains fonts and font-related information.\nhelpers \u2013 This directory consists of helper functions that come out of the box.\nlanguage \u2013 It contains language files that are used by the framework\nlibraries \u2013 It contains the source files for the different libraries that come along with CodeIgniter out of the box. system: core \u2013 This is considered to be the heart of the CodeIgniter Framework. All of the core files that construct the framework are located here. If you would like to extend the core file functionality, then you must\ncreate a custom core file in the application directory. After this, you are allowed to override or add new behavior that you wish. You should never make any changes directly in this directory.\ndatabase \u2013 It stores the files such as database drivers, cache, and other files that are needed for database operations.\nfonts \u2013 This directory contains fonts and font-related information.\nhelpers \u2013 This directory consists of helper functions that come out of the box.\nlanguage \u2013 It contains language files that are used by the framework\nlibraries \u2013 It contains the source files for the different libraries that come along with CodeIgniter out of the box. core \u2013 This is considered to be the heart of the CodeIgniter Framework. All of the core files that construct the framework are located here. If you would like to extend the core file functionality, then you must create a custom core file in the application directory. After this, you are allowed to override or add new behavior that you wish. You should never make any changes directly in this directory. database \u2013 It stores the files such as database drivers, cache, and other files that are needed for database operations. fonts \u2013 This directory contains fonts and font-related information. helpers \u2013 This directory consists of helper functions that come out of the box. language \u2013 It contains language files that are used by the framework libraries \u2013 It contains the source files for the different libraries that come along with CodeIgniter out of the box. user_guide: This directory consists of a user manual for CodeIgniter. You should not upload this directory during application deployment. user_guide: vendor: This directory consists of composer packages source code. The composer.json and composer.lock are the other two files related to this directory. vendor: composer.json composer.lock index.php: This is considered as the entry point into the application. It is placed inside the root directory. index.php:",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What is the security parameter for XSS in CodeIgniter?",
        "answer": "Codeigniter has got a Cross-Site Scripting(XSS) hack prevention filter. This filter either automatically runs or you can run it based on item, to filter all data related to POST and COOKIE.\nThe XSS filter will target the frequently used methods to trigger JavaScript code or other types of code that attempt to hijack cookies or do any other malicious activity. If it identifies anything suspicious or anything disallowed is encountered, then it will convert the data to character entities.\nTo filter data through the XSS filter, we will make use of the xss_clean() method as given below: Codeigniter has got a Cross-Site Scripting(XSS) hack prevention filter. This filter either automatically runs or you can run it based on item, to filter all data related to POST and COOKIE. The XSS filter will target the frequently used methods to trigger JavaScript code or other types of code that attempt to hijack cookies or do any other malicious activity. If it identifies anything suspicious or anything disallowed is encountered, then it will convert the data to character entities. To filter data through the XSS filter, we will make use of the xss_clean() method as given below: $data = $this->security->xss_clean($data); $data = $this->security->xss_clean($data); This function is used only when you are submitting data. The second Boolean parameter is optional and used to check the image files for the XSS attacks. This is very useful for file upload. If its value is true, that means the image is safer and not otherwise.",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What is the default controller in CodeIgniter?",
        "answer": "When the name of the file is not mentioned in the URL then the file will be specified in the default controller that is loaded by default. By default, the file name will be welcome.php, which is known as the first page to be seen after the installation of CodeIgniter.\nlocalhost/codeigniter/  In this case, the welcome.php will be generally loaded as the file name is not mentioned in the provided URL. Generally, the programmers can change the default controller that is present in the application/config/routes.php file as per their needs.\n$route['default_controller'] = ' ';In the above-given syntax, the programmer has to specify the file name that he/she wants to get loaded as the default one. When the name of the file is not mentioned in the URL then the file will be specified in the default controller that is loaded by default. By default, the file name will be welcome.php, which is known as the first page to be seen after the installation of CodeIgniter. welcome.php localhost/codeigniter/  In this case, the welcome.php will be generally loaded as the file name is not mentioned in the provided URL. Generally, the programmers can change the default controller that is present in the application/config/routes.php file as per their needs. localhost/codeigniter/ welcome.php application/config/routes.php $route['default_controller'] = ' ';In the above-given syntax, the programmer has to specify the file name that he/she wants to get loaded as the default one. $route['default_controller'] = ' ';",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. List all the auto-loadable resources available in CodeIgniter.",
        "answer": "The below-given items can be automatically loaded in CodeIgniter:\nClasses obtained in the directory named libraries/\nCustom config files obtained in the directory named config/\nHelper files obtained in the directory named helpers/\nModels obtained in the directory named models/\nLanguage files obtained in the directory named system/language/\nFor resource autoloading, you should open the file application/config/autoload.php and include the item that you want to be get loaded into the array of autoloads. In the file related to each type of item, you can find instructions. The below-given items can be automatically loaded in CodeIgniter:\nClasses obtained in the directory named libraries/\nCustom config files obtained in the directory named config/\nHelper files obtained in the directory named helpers/\nModels obtained in the directory named models/\nLanguage files obtained in the directory named system/language/ Classes obtained in the directory named libraries/\nCustom config files obtained in the directory named config/\nHelper files obtained in the directory named helpers/\nModels obtained in the directory named models/\nLanguage files obtained in the directory named system/language/ Classes obtained in the directory named libraries/ libraries/ Custom config files obtained in the directory named config/ config/ Helper files obtained in the directory named helpers/ helpers/ Models obtained in the directory named models/ models/ Language files obtained in the directory named system/language/ system/language/ For resource autoloading, you should open the file application/config/autoload.php and include the item that you want to be get loaded into the array of autoloads. In the file related to each type of item, you can find instructions. application/config/autoload.php",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. What do you mean by the controller in CodeIgniter?",
        "answer": "The mediator present between the model and the view for processing the HTTP request and is used for generating a web page is called a controller. It is considered as the center of each HTTP request that exists on the web application of the user.\nConsider the following URL in this reference: projectName/index.php/welcome/\nIn this URL, the CodeIgniter is trying to find the welcome.php file and the Welcome class.\nController syntax is given below: The mediator present between the model and the view for processing the HTTP request and is used for generating a web page is called a controller. It is considered as the center of each HTTP request that exists on the web application of the user. Consider the following URL in this reference: projectName/index.php/welcome/\nIn this URL, the CodeIgniter is trying to find the welcome.php file and the Welcome class. projectName/index.php/welcome/  welcome.php Controller syntax is given below: class ControllerName extends CI_Controller\n{\n   public function __construct()\n   {\n       parent::__construct();\n   }\n   public function MethodName()\n   {\n   }\n} class ControllerName extends CI_Controller\n{\n   public function __construct()\n   {\n       parent::__construct();\n   }\n   public function MethodName()\n   {\n   }\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "18. Why is there a need to configure the URL routes?",
        "answer": "Changing the URL routes has many benefits such as: From the SEO(Search Engine Optimization) point of the view, to make URL SEO friendly and obtain more user visits.\nHide some URL elements like controller name, function name, etc. from the users for security purposes.\nProvides different functionality to the specific parts of a system. From the SEO(Search Engine Optimization) point of the view, to make URL SEO friendly and obtain more user visits. Hide some URL elements like controller name, function name, etc. from the users for security purposes. Provides different functionality to the specific parts of a system. Conclusion:\nCodeIgniter has become the predominant choice of interest for developers while creating websites. Even though there are plenty of other choices when considering the right programming framework for the applications, CodeIgniter has gained its own preference in the market. The sole reason that most of the developers are choosing it is because of the several advantages that it offers to the people. Conclusion:  Freedcamp, Nissan, Bonfire, Buffer, etc. are some of the websites that use the CodeIgniter framework. There is a great amount of demand for PHP developers with CodeIgniter skills. This set of interview questions will definitely help you excel in the CodeIgniter job interview. We hope these interview questions and answers on CodeIgniter will assist you to crack the relevant interview. References: References: \u201cProfessional CodeIgniter\u201d by Thomas Myer. \u201cCodeIgniter for Rapid PHP Application Development\u201d by David Upton. Codeigniter Guide Codeigniter Guide Codeigniter Download Codeigniter Download",
        "reference": "interviewbit.com"
    },
    {
        "question": "19. Explain CodeIgniter Architecture.",
        "answer": "CodeIgniter is mainly designed to deliver high performance in less time within a good environment. For achieving this, each developing process is designed in a simplified manner.\nFrom the technical point of view, it is dynamically instantiated (libraries are loaded only on request which makes it light-weighted), has loose coupling (components depend very less on each other), and component singularity (each class and its functions are focused only on their purpose).\nData flow in CodeIgniter: Below image represents that whenever a request is raised from the CodeIgniter application, firstly, it will go to the index.php file.\nindex.php is the default file of CodeIgniter. This file initializes the base resources.\nThe router determines what should be done with the information.\nIf the requested cache file exists, then the information is moved directly to the browser and ignores the further processes.\nIf the page requested by the user does not exist in the caching file, the HTTP request and data submitted will be passed under security check.\nThe application controller will load the models, libraries, helpers, plugins, and scripts required according to the request.\nA view is used for fetching the data from the application controller that will be represented to the user, and they pass the data to the caching file to the fastest access for future requests. CodeIgniter is mainly designed to deliver high performance in less time within a good environment. For achieving this, each developing process is designed in a simplified manner. From the technical point of view, it is dynamically instantiated (libraries are loaded only on request which makes it light-weighted), has loose coupling (components depend very less on each other), and component singularity (each class and its functions are focused only on their purpose). Data flow in CodeIgniter: Below image represents that whenever a request is raised from the CodeIgniter application, firstly, it will go to the index.php file.\nindex.php is the default file of CodeIgniter. This file initializes the base resources.\nThe router determines what should be done with the information.\nIf the requested cache file exists, then the information is moved directly to the browser and ignores the further processes.\nIf the page requested by the user does not exist in the caching file, the HTTP request and data submitted will be passed under security check.\nThe application controller will load the models, libraries, helpers, plugins, and scripts required according to the request.\nA view is used for fetching the data from the application controller that will be represented to the user, and they pass the data to the caching file to the fastest access for future requests. Data flow in CodeIgniter index.php is the default file of CodeIgniter. This file initializes the base resources.\nThe router determines what should be done with the information.\nIf the requested cache file exists, then the information is moved directly to the browser and ignores the further processes.\nIf the page requested by the user does not exist in the caching file, the HTTP request and data submitted will be passed under security check.\nThe application controller will load the models, libraries, helpers, plugins, and scripts required according to the request.\nA view is used for fetching the data from the application controller that will be represented to the user, and they pass the data to the caching file to the fastest access for future requests. index.php is the default file of CodeIgniter. This file initializes the base resources. The router determines what should be done with the information. If the requested cache file exists, then the information is moved directly to the browser and ignores the further processes. If the page requested by the user does not exist in the caching file, the HTTP request and data submitted will be passed under security check. The application controller will load the models, libraries, helpers, plugins, and scripts required according to the request. A view is used for fetching the data from the application controller that will be represented to the user, and they pass the data to the caching file to the fastest access for future requests.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "20. How to load a helper in CodeIgniter?",
        "answer": "You need to load the helper files for using it. Once loaded, it will be globally available to your controller and views. They can be obtained at two places in CodeIgniter. A helper file will be searched by CodeIgniter in the application/helpers folder and if it is not available in that folder then it will check in the system/helpers folder.\nHelper file can be loaded by adding the following code to the constructor of the controller or inside any function that wants to use: $this->load->helper('file_name');\nWrite your file name at the place of file_name.\nTo load URL helper we can use the code given below: $this->load->helper('url');\nYou are allowed to auto-load a helper if your application needs that helper globally by including it in the application/config/autoload.php file.\nLoading multiple helpers is also possible. For doing this, specify them in an array as given below: You need to load the helper files for using it. Once loaded, it will be globally available to your controller and views. They can be obtained at two places in CodeIgniter. A helper file will be searched by CodeIgniter in the application/helpers folder and if it is not available in that folder then it will check in the system/helpers folder. application/helpers system/helpers Helper file can be loaded by adding the following code to the constructor of the controller or inside any function that wants to use: $this->load->helper('file_name');\nWrite your file name at the place of file_name. $this->load->helper('file_name');  To load URL helper we can use the code given below: $this->load->helper('url'); $this->load->helper('url'); You are allowed to auto-load a helper if your application needs that helper globally by including it in the application/config/autoload.php file. application/config/autoload.php Loading multiple helpers is also possible. For doing this, specify them in an array as given below: $this->load->helper(  \n   array('helper1', 'helper2', 'helper3')  \n); $this->load->helper(  \n   array('helper1', 'helper2', 'helper3')  \n);",
        "reference": "interviewbit.com"
    },
    {
        "question": "21. What are the advantages of CodeIgniter?",
        "answer": "Few advantages of using CodeIgniter is given below: Built-in libraries: It comes with various types of default helpers for multiple things including strings, arrays, cookies, directories, file handling, and forms among others.\nData abstraction: You can make use of the CodeIgniter database abstraction layer for creating, adding, deleting, and replacing statements in a hassle-free manner. This framework allows you to manage multiple connections using a single application.\nActive Developer Community: Bigger the community, the better the help you get. Newly graduated developers look forward to the framework\u2019s forum to get their doubts solved and learn about new things in the process. With so many people actively participating in it from around the world, your doubts will be solved within few hours. And due to the same reason, CodeIgniter documentation is 10 times bigger than any other framework.\nCollaboration with Expression Engine: The collaboration permits developers using CodeIgniter to use libraries and everything else provided by Expression Engine and vice versa. Because of this, developers will get few benefits like better parser class, improved built-in user authentication, and easy access to modular applications.\nSecurity: The security strength modification can be done according to your client\u2019s needs. These changes are made when the system is initialized by switching off the magic_quotes_runtime directive irrespective of the register_globals directive. You don\u2019t need to remove the slashes during information retrieval from the database. You can enable encryption of cookies, where you can handle databases and escape SQL queries directly.\nImmigration Features: Database schema update management is easier over different fields by using the migration aspect. It is an easier process to immigrate from the server to the server in Codeigniter.\nEasy to Use: It is easier to use compared to other popular frameworks such as Symfony, Zend framework, and Cake PHP. Built-in libraries: It comes with various types of default helpers for multiple things including strings, arrays, cookies, directories, file handling, and forms among others. Built-in libraries Data abstraction: You can make use of the CodeIgniter database abstraction layer for creating, adding, deleting, and replacing statements in a hassle-free manner. This framework allows you to manage multiple connections using a single application. Data abstraction Active Developer Community: Bigger the community, the better the help you get. Newly graduated developers look forward to the framework\u2019s forum to get their doubts solved and learn about new things in the process. With so many people actively participating in it from around the world, your doubts will be solved within few hours. And due to the same reason, CodeIgniter documentation is 10 times bigger than any other framework. Active Developer Community Collaboration with Expression Engine: The collaboration permits developers using CodeIgniter to use libraries and everything else provided by Expression Engine and vice versa. Because of this, developers will get few benefits like better parser class, improved built-in user authentication, and easy access to modular applications. Collaboration with Expression Engine Security: The security strength modification can be done according to your client\u2019s needs. These changes are made when the system is initialized by switching off the magic_quotes_runtime directive irrespective of the register_globals directive. You don\u2019t need to remove the slashes during information retrieval from the database. You can enable encryption of cookies, where you can handle databases and escape SQL queries directly. Security magic_quotes_runtime register_globals Immigration Features: Database schema update management is easier over different fields by using the migration aspect. It is an easier process to immigrate from the server to the server in Codeigniter. Immigration Features Easy to Use: It is easier to use compared to other popular frameworks such as Symfony, Zend framework, and Cake PHP. Easy to Use",
        "reference": "interviewbit.com"
    },
    {
        "question": "22. Give the list of hooks available in CodeIgniter.",
        "answer": "The list of available hook points are given below: pre_system: It is called initially during system execution.\npre_controller: It is called immediately before any of the controllers being called. Example: pre_system: It is called initially during system execution. pre_system pre_controller: It is called immediately before any of the controllers being called. Example: pre_controller $hook['pre_controller'] = array(\n   'class'    => 'ExampleClass',\n   'function' => 'Examplefunction',\n   'filename' => 'ExampleClass.php',\n   'filepath' => 'hooks',\n   'params'   => array('mango', 'apple', 'orange')\n   ); $hook['pre_controller'] = array(\n   'class'    => 'ExampleClass',\n   'function' => 'Examplefunction',\n   'filename' => 'ExampleClass.php',\n   'filepath' => 'hooks',\n   'params'   => array('mango', 'apple', 'orange')\n   ); post_controller_constructor: It is called soon after instantiating your controller, but before any occurrence of the method call.\npost_controller: It is called immediately after the complete execution of the controller.\ndisplay_override: It overrides the _display() method.\ncache_override: It enables calling of the user-defined method instead of _display_cache() method which is available in the Output Library. This permits you for using your own cache display mechanism.\npost_system: It is called soon after the final rendered page has been submitted to the web browser, at the end of system execution when the final data has been sent to the browser. post_controller_constructor: It is called soon after instantiating your controller, but before any occurrence of the method call. post_controller_constructor post_controller: It is called immediately after the complete execution of the controller. post_controller display_override: It overrides the _display() method. display_override _display() cache_override: It enables calling of the user-defined method instead of _display_cache() method which is available in the Output Library. This permits you for using your own cache display mechanism. cache_override _display_cache() post_system: It is called soon after the final rendered page has been submitted to the web browser, at the end of system execution when the final data has been sent to the browser. post_system",
        "reference": "interviewbit.com"
    },
    {
        "question": "23. What is Command-Line Interface(CLI)? Why we use CLI in Codeigniter?",
        "answer": "Command-Line Interface or CLI is a text-based interface for interacting with computers through a set of commands. We can use CLI in CodeIgniter for: Running your cron-jobs without wget or curl usage\nMake your cron-jobs inaccessible from being loaded in the URL(Uniform Resource Locator) by checking the value returned by is_cli()\nMake interactive \u201ctasks\u201d that can do various things such as set permissions, run backups, prune cache folders, etc.\nIt helps to integrate CodeIgniter with applications in other languages. For example, a random C++ script can call a command and run code in your models. Running your cron-jobs without wget or curl usage wget curl Make your cron-jobs inaccessible from being loaded in the URL(Uniform Resource Locator) by checking the value returned by is_cli() is_cli() Make interactive \u201ctasks\u201d that can do various things such as set permissions, run backups, prune cache folders, etc. It helps to integrate CodeIgniter with applications in other languages. For example, a random C++ script can call a command and run code in your models.",
        "reference": "interviewbit.com"
    },
    {
        "question": "24. What is meant by a library? How can you load a library in CodeIgniter?",
        "answer": "Libraries are packages created in PHP that give higher-level abstractions and thus contribute to faster development. This removes the necessity of focusing on small, minute details by taking care of those by themselves.\nThree methods are available to create a library:\nCreate an entirely new library\nExtend native libraries\nReplace native libraries\nTo load a library in CodeIgniter, you have to include the below code inside a controller: $this->load->library(\u2018class_name\u2019);\nAll pre-defined libraries developed by CodeIgniter can be obtained at the system/libraries directory.\nFor loading multiple libraries at the same time, you can make use of the same code. But replace the parameter with an array for loading multiple libraries. Libraries are packages created in PHP that give higher-level abstractions and thus contribute to faster development. This removes the necessity of focusing on small, minute details by taking care of those by themselves. Three methods are available to create a library:\nCreate an entirely new library\nExtend native libraries\nReplace native libraries Create an entirely new library\nExtend native libraries\nReplace native libraries Create an entirely new library Extend native libraries Replace native libraries To load a library in CodeIgniter, you have to include the below code inside a controller: $this->load->library(\u2018class_name\u2019); $this->load->library(\u2018class_name\u2019); All pre-defined libraries developed by CodeIgniter can be obtained at the system/libraries directory. system/libraries For loading multiple libraries at the same time, you can make use of the same code. But replace the parameter with an array for loading multiple libraries. $this->load->library(array(\u2018library1\u2019, \u2018library2\u2019)); $this->load->library(array(\u2018library1\u2019, \u2018library2\u2019));",
        "reference": "interviewbit.com"
    },
    {
        "question": "25. What is CSRF token in CodeIgniter? How to set CSRF token?",
        "answer": "CSRF(Cross-Site Request Forgery) token is a randomly generated value that gets modified with every HTTP request sent by webform.\nA CSRF attack forces a browser of the logged-on victim for sending a forged HTTP request, including the session cookie of the victim and other information related to authorization, to a web application. A CSRF token is used for setting or activating the protection in CodeIgniter.\nCSRF token is saved in the user\u2019s session when it is added in the website form. When we submit the form, the website compares both submitted tokens and saved tokens in the session. If they are the same, a request is considered valid. When the page gets loaded token value will also be changed each time. Thus it becomes difficult for the hackers to identify the current token.\nTo set CSRF, you have to set the corresponding config value as true in your application/config/config.php file.\nSyntax : $config['csrf_protection'] = TRUE;\nIf you use the form helper, the form_open() method will automatically insert a hidden CSRF field in your forms. CSRF(Cross-Site Request Forgery) token is a randomly generated value that gets modified with every HTTP request sent by webform. A CSRF attack forces a browser of the logged-on victim for sending a forged HTTP request, including the session cookie of the victim and other information related to authorization, to a web application. A CSRF token is used for setting or activating the protection in CodeIgniter. CSRF token is saved in the user\u2019s session when it is added in the website form. When we submit the form, the website compares both submitted tokens and saved tokens in the session. If they are the same, a request is considered valid. When the page gets loaded token value will also be changed each time. Thus it becomes difficult for the hackers to identify the current token. To set CSRF, you have to set the corresponding config value as true in your application/config/config.php file.\nSyntax : $config['csrf_protection'] = TRUE;\nIf you use the form helper, the form_open() method will automatically insert a hidden CSRF field in your forms. application/config/config.php  $config['csrf_protection'] = TRUE; ",
        "reference": "interviewbit.com"
    }
]