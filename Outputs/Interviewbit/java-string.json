[
    {
        "question": "1. What is the difference between str1 == str2 and str1.equals(str2)?",
        "answer": "Java offers both the equals() method and the \"==\" operator for comparing objects. However, here are some differences between the two: Essentially, equals() is a method, while == is an operator.\nThe == operator can be used for comparing references (addresses) and the .equals() method can be used to compare content. To put it simply, == checks if the objects point to the same memory location, whereas .equals() compares the values of the objects. Essentially, equals() is a method, while == is an operator. The == operator can be used for comparing references (addresses) and the .equals() method can be used to compare content. To put it simply, == checks if the objects point to the same memory location, whereas .equals() compares the values of the objects. Example: Example: public class StringComparison\n{\n   public static void main(String[] args)\n   {\n       String str1=new String(\"Scaler\"); \n       String str2=new String(\"Scaler\");    \n       System.out.println(str1 == str2);  \n       System.out.println(str1.equals(str2));\n   }\n} public class StringComparison\n{\n   public static void main(String[] args)\n   {\n       String str1=new String(\"Scaler\"); \n       String str2=new String(\"Scaler\");    \n       System.out.println(str1 == str2);  \n       System.out.println(str1.equals(str2));\n   }\n} public class StringComparison class StringComparison public static void main(String[] args) public static void main (String[] args) new \"Scaler\" new \"Scaler\" Output: false\ntrue false\ntrue In this example, two different String objects are being created, str1 and str2. If str1 and str2 are compared using the == operator, then the result will be false, because both have different addresses in the memory. Both must have the same address in the memory for the result to be true.\nIf you use the equals method, the result is true since it's only comparing the values given to str1 and str2, even though they are different objects. If str1 and str2 are compared using the == operator, then the result will be false, because both have different addresses in the memory. Both must have the same address in the memory for the result to be true. If you use the equals method, the result is true since it's only comparing the values given to str1 and str2, even though they are different objects.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Is String a primitive or derived type in Java?",
        "answer": "Strings are derived data types. Strings are Java objects that represent sequences of characters. String objects are created using the java.lang.String class. There are many functions that need to be called upon when processing a string, such as substring(), indexof(), equals(), toUppercase(), etc, which primitives types do not have.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. State the difference between String in C and String in Java.",
        "answer": "String in C: In C, strings are just arrays of characters, and they are terminated with a /0, which is why we commonly refer to them as \"null-terminated\". Strings in C, like \"abc$%\", actually consist of 6 characters 'a' 'b' 'c' '$' '%' and '/0', but these can be easily manipulated.\nString in Java: Java treats Strings as objects, not arrays. String objects are created using the java.lang.String class. String objects in Java are immutable; you cannot modify their contents. This means whenever we manipulate a String object, the new String is created rather than the original string being modified. String in C: In C, strings are just arrays of characters, and they are terminated with a /0, which is why we commonly refer to them as \"null-terminated\". Strings in C, like \"abc$%\", actually consist of 6 characters 'a' 'b' 'c' '$' '%' and '/0', but these can be easily manipulated. String in C String in Java: Java treats Strings as objects, not arrays. String objects are created using the java.lang.String class. String objects in Java are immutable; you cannot modify their contents. This means whenever we manipulate a String object, the new String is created rather than the original string being modified. String in Java",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Explain String pool in Java.",
        "answer": "String Pool, also known as SCP (String Constant Pool), is a special storage space in Java heap memory that is used to store unique string objects. Whenever a string object is created, it first checks whether the String object with the same string value is already present in the String pool or not, and if it is available, then the reference to the string object from the string pool is returned. Otherwise, the new string object is added to the string pool, and the respective reference will be returned.   As shown in the above image, two Strings s1 and s2 are created with the values \"Apple\" and \"Mango\". Therefore, when the third String s3 containing the value \"Apple\" is created, instead of creating a new object, the existing object reference will be returned. Here, s1==s2 is false both strings s1 and s2 refer to different string values from the string pool i.e. apple and mango. We can see that s1==s3 is true because both strings s1 and s3 refer to a single string value from a string pool i.e., apple.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Is String immutable or final in Java? If so, then what are the benefits of Strings being Immutable?",
        "answer": "Yes, Strings are immutable in Java. Immutable objects mean they can't be changed or altered once they've been created. However, we can only modify the reference to the string object. The String is immutable in Java because of many reasons like security, caching, synchronization and concurrency, and class loading.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What does the string intern() method do in Java?",
        "answer": "If you apply the intern() method to a few strings, you will ensure that all strings having the same content share the same memory. As soon as a String object is invoked with intern(), it first checks if the string value of the String object is already present in the string pool and if it is available, then the reference to that string from the string constant pool is returned. If not, a new string object is added to the string pool, and a reference to it is returned. Example: Example: String str1 = new String(\"Scaler by InterviewBit\").intern();  //Line1  \nString str2 = new String(\"Scaler by InterviewBit\").intern(); //Line2  \nSystem.out.println(str1 == str2); //prints true String str1 = new String(\"Scaler by InterviewBit\").intern();  //Line1  \nString str2 = new String(\"Scaler by InterviewBit\").intern(); //Line2  \nSystem.out.println(str1 == str2); //prints true As you can see, the intern() method is invoked on the String objects. When Line1 is executed, memory is allocated within the SCP. In line 2, no new string objects are created in the SCP because str1 and str2 have the same content. As a result, the reference to the object created in line1 is returned. This means that str1 and str2 both point to the same memory. Therefore, the print statement prints true.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. State the difference between String and StringBuffer.",
        "answer": "String objects in Java are immutable and final, so we can't change their value after they are created. Since strings are commonly used in applications, we need to perform several operations on them such as substring(), equals(), indexof(), toUppercase(), etc. Each time we manipulate a string, a new String object is created, and all previous objects will be garbage, placing a strain on the garbage collector. This is why The Java team developed StringBuffer. A StringBuffer is a mutable object, meaning it can be changed, but the string is an immutable object, so it cannot be changed once it has been created. String String String String Syntax: Syntax: String str1=\"InterviewBit\";\nString str2=new String(\"Scaler\");\nScanner str3=new Scanner(System.in);\nString str4=str3.nextLine(); String str1=\"InterviewBit\";\nString str2=new String(\"Scaler\");\nScanner str3=new Scanner(System.in);\nString str4=str3.nextLine(); Example: Concatenation Example of String. A string class takes longer to perform a concatenation operation than a string buffer class. Example: public class Scanner\n{\n    public static void main(String []args)\n    {\n       StringBuilder stbu=new StringBuilder();\n       //Initial object size\n       System.out.println(stbu.capacity());\n       String str=\"Scaler\";\n       System.out.println(str);\n       String str1 = new String(\"InterviewBit\");\n       System.out.println(str1);\n       str1 += \" Articles\";         //string update\n       System.out.println(str1);\n    }\n} public class Scanner\n{\n    public static void main(String []args)\n    {\n       StringBuilder stbu=new StringBuilder();\n       //Initial object size\n       System.out.println(stbu.capacity());\n       String str=\"Scaler\";\n       System.out.println(str);\n       String str1 = new String(\"InterviewBit\");\n       System.out.println(str1);\n       str1 += \" Articles\";         //string update\n       System.out.println(str1);\n    }\n} public class Scanner class Scanner public static void main(String []args) public static void main (String []args) new //Initial object size \"Scaler\" new \"InterviewBit\" \" Articles\" //string update Output: Output: 16\nScaler\nInterviewBit\nInterviewBit Articles 16\nScaler\nInterviewBit\nInterviewBit Articles 16 StringBuffer StringBuffer StringBuffer StringBuffer Syntax: Syntax: StringBuffer var = new StringBuffer(str); StringBuffer var = new StringBuffer(str); Example: Concatenation Example of StringBuffer. String buffer class perform concatenation operations more quickly than string classes. Example: public class StringBuffer\n{\n    public static void main(String []args)\n    {\n       StringBuilder stbu=new StringBuilder();\n       //Initial object size\n       System.out.println(stbu.capacity());\n       StringBuffer stbr= new StringBuffer(\"InterviewBit\");\n       System.out.println(stbr);\n       stbr.append(\" Articles\");       //string update\n       System.out.println(stbr);\n       stbr=new StringBuffer(\"Scaler\");\n       System.out.println(stbr);\n    }\n} public class StringBuffer\n{\n    public static void main(String []args)\n    {\n       StringBuilder stbu=new StringBuilder();\n       //Initial object size\n       System.out.println(stbu.capacity());\n       StringBuffer stbr= new StringBuffer(\"InterviewBit\");\n       System.out.println(stbr);\n       stbr.append(\" Articles\");       //string update\n       System.out.println(stbr);\n       stbr=new StringBuffer(\"Scaler\");\n       System.out.println(stbr);\n    }\n} public class StringBuffer class StringBuffer public static void main(String []args) public static void main (String []args) new //Initial object size new \"InterviewBit\" \" Articles\" //string update new \"Scaler\" Output: 16\nInterviewBit\nInterviewBit Articles\nScaler 16\nInterviewBit\nInterviewBit Articles\nScaler 16",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. State the difference between StringBuffer and StringBuilder in Java.",
        "answer": "StringBuffer and StringBuilder are two Java classes for manipulating strings. These are mutable objects, i.e., they can be modified, and provide various methods such as insert(), substring(), delete(), and append(), for String manipulation. StringBuffer: The StringBuffer class was created by the Java Team when they realized the need for an editable string object. Nevertheless, StringBuffer has all methods synchronized, meaning they are thread-safe. Therefore, StringBuffer allows only one thread to access a method at once, so it is not possible to call StringBuffer methods from two threads simultaneously, which means it takes more time to access. The StringBuffer class has synchronized methods, making it thread-safe, slower, and less efficient than StringBuilder. The StringBuffer class was introduced in Java 1.0.\nSyntax: StringBuffer: The StringBuffer class was created by the Java Team when they realized the need for an editable string object. Nevertheless, StringBuffer has all methods synchronized, meaning they are thread-safe. Therefore, StringBuffer allows only one thread to access a method at once, so it is not possible to call StringBuffer methods from two threads simultaneously, which means it takes more time to access. The StringBuffer class has synchronized methods, making it thread-safe, slower, and less efficient than StringBuilder. The StringBuffer class was introduced in Java 1.0.\nSyntax: StringBuffer Syntax: Syntax: StringBuffer var = new StringBuffer(str); StringBuffer var = new StringBuffer(str); StringBuilder: It was at that point that the Java Team realized that making all methods of StringBuffer synchronized wasn't the best idea, which led them to introduce StringBuilder. The StringBuilder class has no synchronized methods. Unlike StringBuffer, StringBuilder does not offer synchronized methods, which makes it less thread-safe, faster, and more efficient. StringBuilder was introduced in Java 1.5 in response to StringBuffer's shortcomings.\nSyntax: StringBuilder: It was at that point that the Java Team realized that making all methods of StringBuffer synchronized wasn't the best idea, which led them to introduce StringBuilder. The StringBuilder class has no synchronized methods. Unlike StringBuffer, StringBuilder does not offer synchronized methods, which makes it less thread-safe, faster, and more efficient. StringBuilder was introduced in Java 1.5 in response to StringBuffer's shortcomings.\nSyntax: StringBuilder Syntax: Syntax: StringBuilder var = new StringBuilder(str); StringBuilder var = new StringBuilder(str);",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. In Java, how can two strings be compared?",
        "answer": "In Java, there are several ways for comparing two strings. The following are a few of them: String Equals Method: In this method, the strings are compared based on the values within them. If the values of the two strings are the same, it returns true; otherwise, it returns false. This method is case-sensitive. String Equals Method: In this method, the strings are compared based on the values within them. If the values of the two strings are the same, it returns true; otherwise, it returns false. This method is case-sensitive. String Equals Method Syntax: str1.equals(str2); str1.equals(str2); For example: Input 1= Scaler\nInput 2= InterviewBit\nOutput= false\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= true\n\nInput 1= Scaler\nInput 2= scaler\nOutput= false Input 1= Scaler\nInput 2= InterviewBit\nOutput= false\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= true\n\nInput 1= Scaler\nInput 2= scaler\nOutput= false 1 2 false 1 2 true 1 2 false String Equals Ignore Case: By using this method, the two strings are compared without taking into account the case (upper or lower). It returns true if the two values are the same and not null.\n\nSyntax: String Equals Ignore Case: By using this method, the two strings are compared without taking into account the case (upper or lower). It returns true if the two values are the same and not null.\n\nSyntax: String Equals Ignore Case   str1.equalsIgnoreCase(str2); str1.equalsIgnoreCase(str2); For Example: Input 1= Scaler\nInput 2= InterviewBit\nOutput= false\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= true\n\nInput 1= Scaler\nInput 2= scaler\nOutput= true Input 1= Scaler\nInput 2= InterviewBit\nOutput= false\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= true\n\nInput 1= Scaler\nInput 2= scaler\nOutput= true 1 2 false 1 2 true 1 2 true Object Equals Method: The method returns true if its arguments are equal, otherwise, it returns false. Accordingly, if both arguments are null, the result is true, and if just one argument is null, the result is false. Object Equals Method: The method returns true if its arguments are equal, otherwise, it returns false. Accordingly, if both arguments are null, the result is true, and if just one argument is null, the result is false. Object Equals Method Syntax: Object.equals(str1, str2) Object.equals(str1, str2) For example: Input 1= Scaler\nInput 2= InterviewBit\nOutput= false\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= true\n\nInput 1= Scaler\nInput 2= null\nOutput= false\n\nInput 1= null\nInput 2= null\nOutput= True Input 1= Scaler\nInput 2= InterviewBit\nOutput= false\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= true\n\nInput 1= Scaler\nInput 2= null\nOutput= false\n\nInput 1= null\nInput 2= null\nOutput= True 1 2 false 1 2 true 1 2 null false 1 null 2 null String Compare To Method: This method compares input strings with each other. Upon comparison, the following value is returned: String Compare To Method: This method compares input strings with each other. Upon comparison, the following value is returned: String Compare To Method If (str1>str2), a positive value is returned.\nIf (str1==str2), 0 is returned.\nIf (str1<str2), a negative value is returned. If (str1>str2), a positive value is returned. If (str1==str2), 0 is returned. If (str1<str2), a negative value is returned. Syntax: str1.compareTo(str2) str1.compareTo(str2) Example: Input 1= InterviewBit\nInput 2= Scaler\nOutput= -10\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= 0\n\nInput 1= Scaler\nInput 2= InterviewBit\nOutput= 10 Input 1= InterviewBit\nInput 2= Scaler\nOutput= -10\n\nInput 1= Scaler\nInput 2= Scaler\nOutput= 0\n\nInput 1= Scaler\nInput 2= InterviewBit\nOutput= 10 1 2 10 1 2 0 1 2 10",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. How to declare a string in Java?",
        "answer": "String declaration in Java can be done in two ways: By string literal: Double quotes are used to create Java String literals. \nExample: String str= \"Scaler\";  \nBy new keyword: Keyword \"new\" is used to create a Java string.\nExample: String str=new String (\"Scaler\"); By string literal: Double quotes are used to create Java String literals. \nExample: String str= \"Scaler\"; By string literal Example: String str= \"Scaler\"; Example: String str= \"Scaler\"; String str= \"Scaler\"; By new keyword: Keyword \"new\" is used to create a Java string.\nExample: String str=new String (\"Scaler\"); By new keyword Example: String str=new String (\"Scaler\"); Example: String str=new String (\"Scaler\"); String str=new String (\"Scaler\");",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Is it possible to compare Strings using the == operator? If so, what is the risk involved?",
        "answer": "Yes, you can compare strings using the == operator. One can use == operators for reference comparison (address comparison). The majority of the time, developers compare strings with the == operator, instead of using the equals() method, resulting in an error. Example: public class StringComparison\n{  \n    public static void main(String args[])\n   {  \n       String str1=\"Scaler\";  \n       String str2=\"Scaler\";  \n       String str3=new String(\"Scaler\");  \n       System.out.println(str1==str2);   \n       //true because both points to same memory allocation \n    \n      System.out.println(str1==str3); \n      //false because str3 refers to instance created in heap\n \n      System.out.println(str1.equals(str3));  \n      //true because both share same content \n      //even if both are different string objects \n}  \n} public class StringComparison\n{  \n    public static void main(String args[])\n   {  \n       String str1=\"Scaler\";  \n       String str2=\"Scaler\";  \n       String str3=new String(\"Scaler\");  \n       System.out.println(str1==str2);   \n       //true because both points to same memory allocation \n    \n      System.out.println(str1==str3); \n      //false because str3 refers to instance created in heap\n \n      System.out.println(str1.equals(str3));  \n      //true because both share same content \n      //even if both are different string objects \n}  \n} public class StringComparison class StringComparison public static void main(String args[]) public static void main (String args[]) \"Scaler\" \"Scaler\" new \"Scaler\" //true because both points to same memory allocation //false because str3 refers to instance created in heap //true because both share same content //even if both are different string objects Output: true\nfalse\ntrue true\nfalse\ntrue",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What is the use of the substring() method in Java?",
        "answer": "The substring method is used to return substring from a specified string. This method takes two parameters i.e., beginIndex (the starting index) and endIndex (the ending index). In the case of substring(), method startIndex is inclusive and endIndex is exclusive. Syntax: substring(int beginIndex, int endIndex) substring(int beginIndex, int endIndex) Or substring(int beginIndex) substring(int beginIndex) Here, beginIndex: Index that marks the starting of subsequence and it is inclusive.\nendIndex: Index that marks the ending of subsequence and it is exclusive. beginIndex: Index that marks the starting of subsequence and it is inclusive. beginIndex endIndex: Index that marks the ending of subsequence and it is exclusive. endIndex Example: import java.lang.Math;\npublic class InterviewBit\n{  \n   // driver code\n   public static void main(String args[])\n   {\n        String str = \"Scaler by InterviewBit\";\n       \n       //prints substring from 7th index\n        System.out.print(\"Returns: \");\n        System.out.println(str.substring(7));\n        // prints substring from 0-6, exclusive 6th index\n        System.out.print(\"Returns: \");\n        System.out.println(str.substring(0, 6));\n       // prints the substring from 10-22, exclusive 22th index\n        System.out.print(\"Returns: \");\n        System.out.println(str.substring(10, 22));\n   }\n   } import java.lang.Math;\npublic class InterviewBit\n{  \n   // driver code\n   public static void main(String args[])\n   {\n        String str = \"Scaler by InterviewBit\";\n       \n       //prints substring from 7th index\n        System.out.print(\"Returns: \");\n        System.out.println(str.substring(7));\n        // prints substring from 0-6, exclusive 6th index\n        System.out.print(\"Returns: \");\n        System.out.println(str.substring(0, 6));\n       // prints the substring from 10-22, exclusive 22th index\n        System.out.print(\"Returns: \");\n        System.out.println(str.substring(10, 22));\n   }\n   } import public class InterviewBit class InterviewBit // driver code public static void main(String args[]) public static void main (String args[]) \"Scaler by InterviewBit\" //prints substring from 7th index \"Returns: \" 7 // prints substring from 0-6, exclusive 6th index \"Returns: \" 0 6 // prints the substring from 10-22, exclusive 22th index \"Returns: \" 10 22 Output: Returns: by InterviewBit\nReturns: Scaler\nReturns: InterviewBit Returns: by InterviewBit\nReturns: Scaler\nReturns: InterviewBit",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Can we use a string in the switch case in java?",
        "answer": "Yes, Java allows you to use strings in switch case conditions. Below is a Java program that shows the use of string in switch case. Example: Example: public class StringinSwitchCase  \n{ \n   public static void main(String[] args) \n   { \n       String fruit = \"Apple\"; \n       switch(fruit) \n       { \n           case \"Mango\": \n               System.out.println(\"Sweet\"); \n               break; \n           case \"Apple\": \n               System.out.println(\"Delicious\"); \n               break; \n           case \"Orange\": \n               System.out.println(\"Luscious\"); \n               break; \n           default: \n               System.out.println(\"Not a fruit\"); \n       }   \n   }\n} public class StringinSwitchCase  \n{ \n   public static void main(String[] args) \n   { \n       String fruit = \"Apple\"; \n       switch(fruit) \n       { \n           case \"Mango\": \n               System.out.println(\"Sweet\"); \n               break; \n           case \"Apple\": \n               System.out.println(\"Delicious\"); \n               break; \n           case \"Orange\": \n               System.out.println(\"Luscious\"); \n               break; \n           default: \n               System.out.println(\"Not a fruit\"); \n       }   \n   }\n} public class StringinSwitchCase class StringinSwitchCase public static void main(String[] args) public static void main (String[] args) \"Apple\" switch case \"Mango\" \"Sweet\" break case \"Apple\" \"Delicious\" break case \"Orange\" \"Luscious\" break default \"Not a fruit\" Output: Delicious Delicious",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. Explain the string subSequence method.",
        "answer": "The Java String subSequence() method is a built-in function that returns a charSequence (a subsequence) from a string.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What do you mean by StringJoiner?",
        "answer": "StringJoiner is a Java class that allows you to construct or create a sequence of strings (characters) that are separated by delimiters like a hyphen(-), comma(,), etc. Optionally, you can also pass suffix and prefix to the char sequence. Example: Example: // importing StringJoiner class  \nimport java.util.StringJoiner;  \npublic class ExampleofStringJoiner\n{  \n   public static void main(String[] args) \n   {  \n       StringJoiner joinStrings = new StringJoiner(\",\", \"[\", \"]\");\n       // passing comma(,) and square-brackets as delimiter   \n         \n       // Adding values to StringJoiner  \n       joinStrings.add(\"Scaler\");  \n       joinStrings.add(\"By\");  \n       joinStrings.add(\"InterviewBit\");            \n       System.out.println(joinStrings);  \n   }  \n} // importing StringJoiner class  \nimport java.util.StringJoiner;  \npublic class ExampleofStringJoiner\n{  \n   public static void main(String[] args) \n   {  \n       StringJoiner joinStrings = new StringJoiner(\",\", \"[\", \"]\");\n       // passing comma(,) and square-brackets as delimiter   \n         \n       // Adding values to StringJoiner  \n       joinStrings.add(\"Scaler\");  \n       joinStrings.add(\"By\");  \n       joinStrings.add(\"InterviewBit\");            \n       System.out.println(joinStrings);  \n   }  \n} // importing StringJoiner class import public class ExampleofStringJoiner class ExampleofStringJoiner public static void main(String[] args) public static void main (String[] args) new \",\" \"[\" \"]\" // passing comma(,) and square-brackets as delimiter // Adding values to StringJoiner \"Scaler\" \"By\" \"InterviewBit\" Output: [Scaler,By,InterviewBit] [Scaler,By,InterviewBit]",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. How can a Java string be converted into a byte array?",
        "answer": "The getBytes() method allows you to convert a string to a byte array by encoding or converting the specified string into a sequence of bytes using the default charset of the platform. Below is a Java program to convert a Java String to a byte array. Example: Example: import java.util.Arrays;\npublic class StringToByteArray \n{\n   public static void main(String[] args)         \n   {\n      String str = \"Scaler\";\n byte[] byteArray = str.getBytes();\n  // print the byte[] elements\n     System.out.println(\"String to byte array: \" + Arrays.toString(byteArray));\n   }\n} import java.util.Arrays;\npublic class StringToByteArray \n{\n   public static void main(String[] args)         \n   {\n      String str = \"Scaler\";\n byte[] byteArray = str.getBytes();\n  // print the byte[] elements\n     System.out.println(\"String to byte array: \" + Arrays.toString(byteArray));\n   }\n} import public class StringToByteArray class StringToByteArray public static void main(String[] args) public static void main (String[] args) \"Scaler\" byte // print the byte[] elements \"String to byte array: \" Output: String to byte array: [83, 99, 97, 108, 101, 114] String to byte array: [83, 99, 97, 108, 101, 114] byte 83 99 97 108 101 114",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. In Java, how do you convert a string to an integer and vice versa?",
        "answer": "There is an Integer class in the Java lang package that provides different methods for converting strings to integers and vice versa. The parseInt() method allows you to convert a String into an integer and the toString() method allows you to convert an Integer into a String. Below is a Java program to convert a string to an integer and vice versa. Example: Example: public class StringtoInteger {\n  public static void main(String args[]) \n  {\n     String str1 = \"1296\";\n     int  i= Integer.parseInt(str1);\n     System.out.println(i);\n     String str2 = Integer.toString(i);\n     System.out.println(str2);\n  }\n} public class StringtoInteger {\n  public static void main(String args[]) \n  {\n     String str1 = \"1296\";\n     int  i= Integer.parseInt(str1);\n     System.out.println(i);\n     String str2 = Integer.toString(i);\n     System.out.println(str2);\n  }\n} public class StringtoInteger class StringtoInteger public static void main(String args[]) public static void main (String args[]) \"1296\" int Output: Output: 1296\n1296 1296\n1296 1296 1296",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. How can we convert string to StringBuilder?",
        "answer": "The append() method can be used to convert String to StringBuilder, and the toString() method can be used to convert StringBuilder to String. Below is a Java program to convert a string array to one StringBuilder object using the append method. Example: Example: public class StringToStringBuilder {\n  public static void main(String args[]) {\n     String strs[] = {\"Scaler\", \"by\", \"InterviewBit!\"};\n     StringBuilder sb = new StringBuilder();\n     sb.append(strs[0]);\n     sb.append(\" \"+strs[1]);\n     sb.append(\" \"+strs[2]);\n     System.out.println(sb.toString());\n  }\n} public class StringToStringBuilder {\n  public static void main(String args[]) {\n     String strs[] = {\"Scaler\", \"by\", \"InterviewBit!\"};\n     StringBuilder sb = new StringBuilder();\n     sb.append(strs[0]);\n     sb.append(\" \"+strs[1]);\n     sb.append(\" \"+strs[2]);\n     System.out.println(sb.toString());\n  }\n} public class StringToStringBuilder class StringToStringBuilder public static void main(String args[]) public static void main (String args[]) \"Scaler\" \"by\" \"InterviewBit!\" new 0 \" \" 1 \" \" 2 Output: Output Scaler by InterviewBit! Scaler by InterviewBit!",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. How do you check whether a String is empty in Java?",
        "answer": "The Java String class contains a particular method for determining whether or not a string is empty. The isEmpty() method determines whether or not a string has zero length. In the case where the length of the string is zero, it returns true, or else it returns false. Example: Example: public class StringEmpty\n{  \n   // Function to determine if String is empty\n   public static boolean isStringEmpty(String str)\n   {  \n       //Use the isEmpty() method \n       //to determine if the string is empty.\n       if (str.isEmpty())\n           return true;\n       else\n          return false;\n   }\n   public static void main(String args[])\n   {  \n       String str1=\"InterviewBit\";     //non-empty string\n       String str2=\"\";                 //empty string\n       System.out.println(\"Str1 \\\"\" + str1 + \"\\\" is empty? \" + isStringEmpty(str1));\n       System.out.println(\"Str2 \\\"\" + str2 + \"\\\" is empty? \" + isStringEmpty(str2));\n  }\n} public class StringEmpty\n{  \n   // Function to determine if String is empty\n   public static boolean isStringEmpty(String str)\n   {  \n       //Use the isEmpty() method \n       //to determine if the string is empty.\n       if (str.isEmpty())\n           return true;\n       else\n          return false;\n   }\n   public static void main(String args[])\n   {  \n       String str1=\"InterviewBit\";     //non-empty string\n       String str2=\"\";                 //empty string\n       System.out.println(\"Str1 \\\"\" + str1 + \"\\\" is empty? \" + isStringEmpty(str1));\n       System.out.println(\"Str2 \\\"\" + str2 + \"\\\" is empty? \" + isStringEmpty(str2));\n  }\n} public class StringEmpty class StringEmpty // Function to determine if String is empty public static boolean isStringEmpty(String str) public static boolean isStringEmpty (String str) //Use the isEmpty() method //to determine if the string is empty. if return true else return false public static void main(String args[]) public static void main (String args[]) \"InterviewBit\" //non-empty string \"\" //empty string \"Str1 \\\"\" \"\\\" is empty? \" \"Str2 \\\"\" \"\\\" is empty? \" Output: Output: Str1 \"InterviewBit\" is empty? false\nStr2 \"\" is empty? true Str1 \"InterviewBit\" is empty? false\nStr2 \"\" is empty? true \"InterviewBit\" false \"\" true",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. How many objects will be created for the following codes:",
        "answer": "A. A. String str1 = \"abc\";                            //Line1\nString str2 = new String(\"abc\");                //Line2 String str1 = \"abc\";                            //Line1\nString str2 = new String(\"abc\");                //Line2 \"abc\" //Line1 new \"abc\" //Line2 B. B. String str1 = \"abc\";                            //Line1\nString str2 = \"abc\";                            //Line2 String str1 = \"abc\";                            //Line1\nString str2 = \"abc\";                            //Line2 \"abc\" //Line1 \"abc\" //Line2 C. C. String str1 = new String(\"abc\");                //Line1\nString str2 = new String(\"abc\");                //Line2 String str1 = new String(\"abc\");                //Line1\nString str2 = new String(\"abc\");                //Line2 new \"abc\" //Line1 new \"abc\" //Line2 For A: In this case, two objects will be created. We know that whenever a Java string is created using a new keyword, then two objects will be created i.e. one in the Heap Area and another one in the String constant pool. When the line1 is executed, the new string object str1 gets created and stored in the string constant pool. However, when line2 is executed, only one object is created using a new operator that gets stored in the heap memory (str2). This is because String constant pool already has a String object with the same string value (abc), and therefore, the reference of the string str1 from the string constant pool is returned.\nFor B: In this case, one object will be created. Here, for line1 (str1), one new object will get created in String constant pool, whereas for line 2, string str2 will create a reference to the String str1 because the string constant pool already has a String object str1 with the same string value (abc).\nFor C: In this case, three objects will be created. In the case of line1 (str1), two objects are created, one in the string constant pool and one in the heap memory. As for line 2 (str2), one new object is created and stored in heap memory, but not in the string constant pool because a String constant pool object str1 already has the string object str1 with the same string value (abc). For A: In this case, two objects will be created. We know that whenever a Java string is created using a new keyword, then two objects will be created i.e. one in the Heap Area and another one in the String constant pool. When the line1 is executed, the new string object str1 gets created and stored in the string constant pool. However, when line2 is executed, only one object is created using a new operator that gets stored in the heap memory (str2). This is because String constant pool already has a String object with the same string value (abc), and therefore, the reference of the string str1 from the string constant pool is returned. For A: For B: In this case, one object will be created. Here, for line1 (str1), one new object will get created in String constant pool, whereas for line 2, string str2 will create a reference to the String str1 because the string constant pool already has a String object str1 with the same string value (abc). For B: For C: In this case, three objects will be created. In the case of line1 (str1), two objects are created, one in the string constant pool and one in the heap memory. As for line 2 (str2), one new object is created and stored in heap memory, but not in the string constant pool because a String constant pool object str1 already has the string object str1 with the same string value (abc). For C:",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Why char array is preferred over a String in storing passwords?",
        "answer": "There are various reasons why a char array rather than a string should be used to store passwords. The following are a few of them: Strings are immutable: The content of Strings cannot be modified/overwritten because any modification will result in the creation of a new String. As a result, we should always save sensitive data like passwords, Social Security numbers, and so on in a char[] array rather than a String.\nSecurity: Because String is immutable, storing the password as plain text keeps it in memory until it is cleaned up by the garbage collector. As string uses SCP (String Constant Pool) for re-usability of a string, it's possible that it'll remain in memory for a long time, and anyone with access to the SCP or memory dump can simply identify or retrieve the password in plain text. That's another reason why we should use an encrypted password instead of plain text.\nLogfile safety: With an array, the data can be erased or wiped up, overwritten and the password will not be present anywhere in the system. Whereas, when using plain String, the chances of mistakenly printing the password to monitors, logs, or other insecure locations are substantially higher. Strings are immutable: The content of Strings cannot be modified/overwritten because any modification will result in the creation of a new String. As a result, we should always save sensitive data like passwords, Social Security numbers, and so on in a char[] array rather than a String. Strings are immutable Security: Because String is immutable, storing the password as plain text keeps it in memory until it is cleaned up by the garbage collector. As string uses SCP (String Constant Pool) for re-usability of a string, it's possible that it'll remain in memory for a long time, and anyone with access to the SCP or memory dump can simply identify or retrieve the password in plain text. That's another reason why we should use an encrypted password instead of plain text. Security Logfile safety: With an array, the data can be erased or wiped up, overwritten and the password will not be present anywhere in the system. Whereas, when using plain String, the chances of mistakenly printing the password to monitors, logs, or other insecure locations are substantially higher. Logfile safety",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. What are the different string methods in Java?",
        "answer": "There are various string operations in Java that allow us to work with strings. These methods or operations can be used for string handling in Java as well as string manipulation in Java. Some of such methods are as follows: split(): Split/divide the string at the specified regex.\ncompareTo(): Compares two strings on the basis of the Unicode value of each string character.\ncompareToIgnoreCase(): Similar to compareTo, but it also ignores case differences.\nlength(): Returns the length of the specified string.\nsubstring(): Returns the substring from the specified string.\nequalsIgnoreCase(): Compares two strings ignoring case differences.\ncontains(): Checks if a string contains a substring.\ntrim(): Returns the substring after removing any leading and trailing whitespace from the specified string.\ncharAt(): Returns the character at specified index.\ntoLowerCase(): Converts string characters to lower case.\ntoUpperCase(): Converts string characters to upper case.\nconcat(): Concatenates two strings. split(): Split/divide the string at the specified regex. split() compareTo(): Compares two strings on the basis of the Unicode value of each string character. compareTo() compareToIgnoreCase(): Similar to compareTo, but it also ignores case differences. compareToIgnoreCase() length(): Returns the length of the specified string. length() substring(): Returns the substring from the specified string. substring() equalsIgnoreCase(): Compares two strings ignoring case differences. equalsIgnoreCase() contains(): Checks if a string contains a substring. contains() trim(): Returns the substring after removing any leading and trailing whitespace from the specified string. trim() charAt(): Returns the character at specified index. charAt() toLowerCase(): Converts string characters to lower case. toLowerCase() toUpperCase(): Converts string characters to upper case. toUpperCase() concat(): Concatenates two strings. concat()",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Is String thread-safe in Java?",
        "answer": "Strings are immutable objects, which means they can't be changed or altered once they've been created. As a result, whenever we manipulate a String object, it creates a new String rather than modifying the original string object. In Java, every immutable object is thread-safe, which means String is also thread-safe. As a result, multiple threads can access a string. For instance, if a thread modifies the value of a string, instead of modifying the existing one, a new String is created, and therefore, the original string object that was shared among the threads remains unchanged.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Why is a string used as a HashMap key in Java?",
        "answer": "Basically, the HashMap object can store key-value pairs. When creating a HashMap object and storing a key-value pair in that object, you will notice that while storing, the hash code of the key will be calculated, and its calculated value will be placed as the resultant hash code of the key. Now, when the key is passed to fetch its value, then the hash code of the key is calculated again, and if it's equal to the value of the hash code initially calculated, the initial value placed as the resultant hash code of the key is retrieved or fetched. Let's say we utilized a variable as a key to store data and then changed the value of that variable. In this case, since we have altered the key, the hash code calculated of the current key will not match the hash code at which its value was originally stored. This makes retrieval impossible. String values are immutable, so once they've been created, they can't be changed. As a result, it is recommended to use Strings as HashMap keys.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What is the best way to split a string in Java?",
        "answer": "Split() is a Java method for breaking a string based on a Java string delimiter (specified regex). For example, a space or a comma(,) will usually be used as the Java string split attribute to break or split the string. Syntax: Syntax: string.split(String regex, int limit) string.split(String regex, int limit) Here, regex: String is divided at this specified regex.\nlimit (optional parameter): Controls or limits the number of resulting substrings. Split() returns all potential substrings if the limit parameter is not specified or is 0. regex: String is divided at this specified regex. regex limit (optional parameter): Controls or limits the number of resulting substrings. Split() returns all potential substrings if the limit parameter is not specified or is 0. limit (optional parameter) Example: Example: public class SplitString \n{\n public static void main(String[] args) \n {\n   String str = \"Scaler by InterviewBit\";\n   // split string from space\n   String[] result = str.split(\" \");\n   for (int i=0; i < result.length; i++)\n   {\n     System.out.println(result[i]);\n   }\n }\n} public class SplitString \n{\n public static void main(String[] args) \n {\n   String str = \"Scaler by InterviewBit\";\n   // split string from space\n   String[] result = str.split(\" \");\n   for (int i=0; i < result.length; i++)\n   {\n     System.out.println(result[i]);\n   }\n }\n} public class SplitString class SplitString public static void main(String[] args) public static void main (String[] args) \"Scaler by InterviewBit\" // split string from space \" \" for int 0 Output: Scaler\nby\nInterviewBit Scaler\nby\nInterviewBit",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. Write a program to calculate the total number of characters in the String?",
        "answer": "To find the total count of characters in a specified string, we can use the for loop, while loop, or do while loop. Below is a Java program to calculate the total number of characters in a string using for loop. public class TotatCharacters\n{\n    public static void main(String[] args) \n    {    \n       String str = \"Scaler by InterviewBit\";    \n       int count = 0;    \n       System.out.println(\"Input String: \"+str);    \n      \n       //Count total characters in the given string except space    \n       for(int i = 0; i < str.length(); i++) \n          {    \n             if(str.charAt(i) != ' ')    \n             count++;    \n          }                \n       \n       //Display total number of characters in the given string    \n       System.out.println(\"The total number of characters in the given string: \" + count);    \n    }      \n} public class TotatCharacters\n{\n    public static void main(String[] args) \n    {    \n       String str = \"Scaler by InterviewBit\";    \n       int count = 0;    \n       System.out.println(\"Input String: \"+str);    \n      \n       //Count total characters in the given string except space    \n       for(int i = 0; i < str.length(); i++) \n          {    \n             if(str.charAt(i) != ' ')    \n             count++;    \n          }                \n       \n       //Display total number of characters in the given string    \n       System.out.println(\"The total number of characters in the given string: \" + count);    \n    }      \n} public class TotatCharacters class TotatCharacters public static void main(String[] args) public static void main (String[] args) \"Scaler by InterviewBit\" int 0 \"Input String: \" //Count total characters in the given string except space for int 0 if ' ' //Display total number of characters in the given string \"The total number of characters in the given string: \" Output: Input String: Scaler by InterviewBit\nThe total number of characters in the given string: 20 Input String: Scaler by InterviewBit\nThe total number of characters in the given string: 20 20",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. How to print all permutations of string in Java?",
        "answer": "The term \"permutation of the string\" refers to all of the conceivable new strings that can be created by swapping the positions of the given string's characters. For example, the string CAT has a total of 6 permutations i.e., [CAT, CTA, ACT, ATC, TCA, TAC]. Below is a Java program to print all permutations of a given string. public class InterviewBit {\n\n   // Function to display all permutations of the string str\n   static void printallPermutns(String str, String str2)\n   {\n       // check if string is empty or null\n       if (str.length() == 0) \n         {\n           System.out.print(str2 + \" \");\n           return;\n         }\n      \n       for (int i = 0; i < str.length(); i++) \n         { \n           // ith character of str\n           char ch = str.charAt(i); \n           // Rest of the string after excluding\n           // the ith character\n           String str3 = str.substring(0, i) + str.substring(i + 1);\n           // Recursive call\n           printallPermutns(str3, str2 + ch);\n        }\n   } \n   // Driver code\n   public static void main(String[] args)\n   {\n       String s = \"cat\";\n       printallPermutns(s, \"\");\n   }\n} public class InterviewBit {\n\n   // Function to display all permutations of the string str\n   static void printallPermutns(String str, String str2)\n   {\n       // check if string is empty or null\n       if (str.length() == 0) \n         {\n           System.out.print(str2 + \" \");\n           return;\n         }\n      \n       for (int i = 0; i < str.length(); i++) \n         { \n           // ith character of str\n           char ch = str.charAt(i); \n           // Rest of the string after excluding\n           // the ith character\n           String str3 = str.substring(0, i) + str.substring(i + 1);\n           // Recursive call\n           printallPermutns(str3, str2 + ch);\n        }\n   } \n   // Driver code\n   public static void main(String[] args)\n   {\n       String s = \"cat\";\n       printallPermutns(s, \"\");\n   }\n} public class InterviewBit class InterviewBit // Function to display all permutations of the string str static void printallPermutns(String str, String str2) static void printallPermutns (String str, String str2) // check if string is empty or null if 0 \" \" return for int 0 // ith character of str char // Rest of the string after excluding // the ith character 0 1 // Recursive call // Driver code public static void main(String[] args) public static void main (String[] args) \"cat\" \"\" Output: cat cta act atc tca tac cat cta act atc tca tac",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. How to reverse a string in Java?",
        "answer": "There are different ways to reverse a string in Java-like using CharAt() method, StringBuilder/StringBuffer Class, Reverse Iteration, etc. The reverse() method is available in both the StringBuilder and StringBuffer classes and is commonly used to reverse a string. The reverse () method simply reverses the order of the characters. Below is a Java program to reverse a string using the StringBuilder class. public class ReverseString\n{\n     // function to reverse a string using StringBuilder\n     public static String revstr(String str)\n     {\n          return new StringBuilder(str).reverse().toString();\n     }\n     public static void main(String[] args)\n     {\n         String str= \"Scaler by InterviewBit\"; \n         str= revstr(str);\n         System.out.println(\"Result after reversing a string is: \"+ str);\n    }\n} public class ReverseString\n{\n     // function to reverse a string using StringBuilder\n     public static String revstr(String str)\n     {\n          return new StringBuilder(str).reverse().toString();\n     }\n     public static void main(String[] args)\n     {\n         String str= \"Scaler by InterviewBit\"; \n         str= revstr(str);\n         System.out.println(\"Result after reversing a string is: \"+ str);\n    }\n} public class ReverseString class ReverseString // function to reverse a string using StringBuilder public static String revstr(String str) public static revstr (String str) return new public static void main(String[] args) public static void main (String[] args) \"Scaler by InterviewBit\" \"Result after reversing a string is: \" Output: Result after reversing a string is: tiBweivretnI yb relacS Result after reversing a string is: tiBweivretnI yb relacS",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How to convert an Array to String in Java?",
        "answer": "An array can be converted to a string in four different ways such as Arrays.toString() method, String.Join() method, StringBuilder.append() method, and Collectors.joining() method. Here, we will see an example of the Array.toString() method. Arrays.toString() returns a string representation of the array contents. The string represents the array's elements as a list, enclosed in square brackets (\"[]\"). The characters \", \" (a comma) followed by a space are used to separate adjacent elements. It returns \u201cnull\u201d if the array is null. import java.util.Arrays;\npublic class ArrayToString \n{\n     public static void main(String[] args) \n     {\n          String[] strArray = { \"Scaler\", \"by\", \"InterviewBit\"};\n          String str1 = ConvertArraytoString(strArray);\n       System.out.println(\"An array converted to a string: \" + str1);\n     }\n     // Using the Arrays.toString() method\n     public static String ConvertArraytoString(String[] strArray) \n     {\n       return Arrays.toString(strArray);\n     }\n} import java.util.Arrays;\npublic class ArrayToString \n{\n     public static void main(String[] args) \n     {\n          String[] strArray = { \"Scaler\", \"by\", \"InterviewBit\"};\n          String str1 = ConvertArraytoString(strArray);\n       System.out.println(\"An array converted to a string: \" + str1);\n     }\n     // Using the Arrays.toString() method\n     public static String ConvertArraytoString(String[] strArray) \n     {\n       return Arrays.toString(strArray);\n     }\n} import public class ArrayToString class ArrayToString public static void main(String[] args) public static void main (String[] args) \"Scaler\" \"by\" \"InterviewBit\" \"An array converted to a string: \" // Using the Arrays.toString() method public static String ConvertArraytoString(String[] strArray) public static ConvertArraytoString (String[] strArray) return Output: An array converted to a string: [Scaler, by, InterviewBit] An array converted to a string: [Scaler, by, InterviewBit]",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Is it possible to count the number of times a given character appears in a String?",
        "answer": "The charAt() method of the String class can be used to find out the number of times a specified character appears in a string. Below is a Java program to check the occurrences of a specified character in a string. public class CkeckforOccurences\n{\n     public static void main(String[] args) \n     {\n         String str= \"InterviewBit\";\n         char ch = 'e';  //character to look for occurrences is e\n         int count = 0; \n         for (int i = 0; i < str.length(); i++) \n           {\n           if (str.charAt(i) == ch) \n               {\n               count++;\n               }\n           }\n      System.out.println(\"The character '\" + ch + \"' appears \" + count + \" times in the given string '\" + str + \"'.\");\n      }\n} public class CkeckforOccurences\n{\n     public static void main(String[] args) \n     {\n         String str= \"InterviewBit\";\n         char ch = 'e';  //character to look for occurrences is e\n         int count = 0; \n         for (int i = 0; i < str.length(); i++) \n           {\n           if (str.charAt(i) == ch) \n               {\n               count++;\n               }\n           }\n      System.out.println(\"The character '\" + ch + \"' appears \" + count + \" times in the given string '\" + str + \"'.\");\n      }\n} public class CkeckforOccurences class CkeckforOccurences public static void main(String[] args) public static void main (String[] args) \"InterviewBit\" char 'e' //character to look for occurrences is e int 0 for int 0 if \"The character '\" \"' appears \" \" times in the given string '\" \"'.\" Output: The character 'e' appears 2 times in the given string 'InterviewBit'. The character 'e' appears 2 times in the given string 'InterviewBit'. 'e' 2 'InterviewBit' As you can see, the above program checks how many times the character ch occurs in the string str. Whenever we encounter the character ch in the string, we increase the count by one. Finally, we print the total character count at the end.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. In what way should two strings be compared to determine whether they are anagrams?",
        "answer": "If two strings contain the same characters but in a different order, they can be said to be anagrams. Consider dusty and study. In this case, dusty's characters can be formed into a study, or study's characters can be formed into dusty. Below is a java program to check if two strings are anagrams or not. import java.util.Arrays;\npublic class CheckAngagram \n{\n   public static void main(String[] args) \n    {\n        String str1 = \"Bored\";\n        String str2 = \"Robed\";\n        \n        //Convert strings to lowercase\n        str1 = str1.toLowerCase();\n        str2 = str2.toLowerCase();\n        // Check to see if the lengths are the same\n        if(str1.length() == str2.length()) \n        {\n             // convert strings into char array\n             char[] str1charArray = str1.toCharArray();\n             char[] str2charArray = str2.toCharArray();\n             // sort the char array\n             Arrays.sort(str1charArray);\n             Arrays.sort(str2charArray);\n             // if the sorted char arrays are same or identical\n             // then the strings are anagram\n             boolean result = Arrays.equals(str1charArray, str2charArray);\n             if(result) \n             {\n                System.out.println(str1 + \" and \" + str2 + \" are anagrams of each other.\");\n              }\n             else {\n                System.out.println(str1 + \" and \" + str2 + \" are not anagrams of each other.\");\n              }\n        }\n        else {\n           System.out.println(str1 + \" and \" + str2 + \" are not anagrams of each other.\");\n        }\n    }\n} import java.util.Arrays;\npublic class CheckAngagram \n{\n   public static void main(String[] args) \n    {\n        String str1 = \"Bored\";\n        String str2 = \"Robed\";\n        \n        //Convert strings to lowercase\n        str1 = str1.toLowerCase();\n        str2 = str2.toLowerCase();\n        // Check to see if the lengths are the same\n        if(str1.length() == str2.length()) \n        {\n             // convert strings into char array\n             char[] str1charArray = str1.toCharArray();\n             char[] str2charArray = str2.toCharArray();\n             // sort the char array\n             Arrays.sort(str1charArray);\n             Arrays.sort(str2charArray);\n             // if the sorted char arrays are same or identical\n             // then the strings are anagram\n             boolean result = Arrays.equals(str1charArray, str2charArray);\n             if(result) \n             {\n                System.out.println(str1 + \" and \" + str2 + \" are anagrams of each other.\");\n              }\n             else {\n                System.out.println(str1 + \" and \" + str2 + \" are not anagrams of each other.\");\n              }\n        }\n        else {\n           System.out.println(str1 + \" and \" + str2 + \" are not anagrams of each other.\");\n        }\n    }\n} import public class CheckAngagram class CheckAngagram public static void main(String[] args) public static void main (String[] args) \"Bored\" \"Robed\" //Convert strings to lowercase // Check to see if the lengths are the same if // convert strings into char array char char // sort the char array // if the sorted char arrays are same or identical // then the strings are anagram boolean if \" and \" \" are anagrams of each other.\" else \" and \" \" are not anagrams of each other.\" else \" and \" \" are not anagrams of each other.\" Output: bored and robed are anagrams of each other. bored and robed are anagrams of each other. In the above program, there are two strings i.e., str1 and str2. Here, we are comparing str1 and str2 to determine if they are anagrams. The strings are first converted to lowercase since Java is case-sensitive and B and b are two different characters in Java. Here, str1.toCharArray(): Convert or transform the string into a char array.\nArrays.sort(): It sorts the char arrays.\nArrays.equals(): Checks or verifies if sorted char arrays are equal. str1.toCharArray(): Convert or transform the string into a char array. str1.toCharArray() Arrays.sort(): It sorts the char arrays. Arrays.sort() Arrays.equals(): Checks or verifies if sorted char arrays are equal. Arrays.equals() In the case where sorted arrays are equal, the strings are anagrams.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. How can we remove a specific character from a String?",
        "answer": "There are several ways to remove a character from a string, such as removing the character at the beginning of the string, the end of the string, or at a specific position. It is possible to remove a specific character from a string using the replace() method. You can also use remove() with different variations like replaceFirst(), replaceAll(), etc. Below is a Java program that uses replace(), replaceFirst(), and replaceAll() methods to remove characters from a String. public class RemoveCharacter\n{\n  public static void main(String args[]) \n    {\n      String str = \"Scaler by InterviewBit\";\n     \n      //remove the specified character.\n      System.out.println(\"String after removing 'e' = \"+str.replace(\"e\", \"\"));    \n     //remove the first occurrence of the specified character.\n     System.out.println(\"String after removing First 'e' = \"+str.replaceFirst(\"e\", \"\"));   \n\n    //remove all occurrences of the specified character.\n  System.out.println(\"String after replacing all small letters = \"+str.replaceAll(\"([A-Z])\", \"\")); \n  }\n} public class RemoveCharacter\n{\n  public static void main(String args[]) \n    {\n      String str = \"Scaler by InterviewBit\";\n     \n      //remove the specified character.\n      System.out.println(\"String after removing 'e' = \"+str.replace(\"e\", \"\"));    \n     //remove the first occurrence of the specified character.\n     System.out.println(\"String after removing First 'e' = \"+str.replaceFirst(\"e\", \"\"));   \n\n    //remove all occurrences of the specified character.\n  System.out.println(\"String after replacing all small letters = \"+str.replaceAll(\"([A-Z])\", \"\")); \n  }\n} public class RemoveCharacter class RemoveCharacter public static void main(String args[]) public static void main (String args[]) \"Scaler by InterviewBit\" //remove the specified character. \"String after removing 'e' = \" \"e\" \"\" //remove the first occurrence of the specified character. \"String after removing First 'e' = \" \"e\" \"\" //remove all occurrences of the specified character. \"String after replacing all small letters = \" \"([A-Z])\" \"\" Output: String after removing 'e' = Scalr by IntrviwBit\nString after removing First 'e' = Scalr by InterviewBit\nString after replacing all small letters = caler by nterviewit String after removing 'e' = Scalr by IntrviwBit\nString after removing First 'e' = Scalr by InterviewBit\nString after replacing all small letters = caler by nterviewit 'e' 'e'",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Write a program to check whether the given input string is a palindrome.",
        "answer": "When a string is the same when read right to left or left to right, it is called a palindrome. To assess whether a string is a palindrome or not, we first reverse the string and then compare the reversed string with the original one. Below is a Java program that will check if a string is a palindrome. public class PalindromeChecker \n{\n    public static void main (String[] args) \n    {\n       String str1 = \"rotator\";                         \n       String revstr = reverseString(str1); //revstr=reverse string\n       if (str1.equals(revstr)) \n          {\n              System.out.println(\"The string\" + str1 + \" is a Palindrome String.\");\n          } \n        else \n          {\n           System.out.println(\"The string\" + str1 + \" is not a Palindrome String.\");\n          }\n    }\n    // a method for reversing a string\n    public static String reverseString(String str2) \n    {\n        String revstr = \"\";\n        for (int i = str2.length() - 1; i >= 0; i--) \n         {\n            revstr += str2.charAt(i);\n         }\n            return revstr;\n     }\n} public class PalindromeChecker \n{\n    public static void main (String[] args) \n    {\n       String str1 = \"rotator\";                         \n       String revstr = reverseString(str1); //revstr=reverse string\n       if (str1.equals(revstr)) \n          {\n              System.out.println(\"The string\" + str1 + \" is a Palindrome String.\");\n          } \n        else \n          {\n           System.out.println(\"The string\" + str1 + \" is not a Palindrome String.\");\n          }\n    }\n    // a method for reversing a string\n    public static String reverseString(String str2) \n    {\n        String revstr = \"\";\n        for (int i = str2.length() - 1; i >= 0; i--) \n         {\n            revstr += str2.charAt(i);\n         }\n            return revstr;\n     }\n} public class PalindromeChecker class PalindromeChecker public static void main (String[] args) public static void main (String[] args) \"rotator\" //revstr=reverse string if \"The string\" \" is a Palindrome String.\" else \"The string\" \" is not a Palindrome String.\" // a method for reversing a string public static String reverseString(String str2) public static reverseString (String str2) \"\" for int 1 0 return Output: The string rotator is a Palindrome String. The string rotator is a Palindrome String. As shown in the above example, we have a string \"Rotator\" stored in string object \"str1\" and another string object \"revstr\" to store the reverse of str1. To check whether two strings are equal or not, we have used the equals() method.",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. What will be the output of the below program?",
        "answer": "String str1 = \"scaler\";                          //Line1\nString str2 = new String(\"scaler\");      //Line2\nstr2.intern();                                       //Line 3\nSystem.out.println(str1 == str2); String str1 = \"scaler\";                          //Line1\nString str2 = new String(\"scaler\");      //Line2\nstr2.intern();                                       //Line 3\nSystem.out.println(str1 == str2); \"scaler\" //Line1 new \"scaler\" //Line2 //Line 3 The output of the above program is false. We know that when the intern() method is executed or invoked on a string object, then it checks whether the String pool already has a same string value (scaler) or not, and if it is available, then the reference to the that string from the string constant pool is returned. In the above example, the intern method is invoked on str2. However, since we didn't assign it back to str2, str2 remains unchanged and therefore, both str1 and str2 have different references. If we change the code in line 3 to str2 = str2.intern(), then the output will be true.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is the output of the below program?",
        "answer": "public class StringTest \n{\npublic static void main(String[] args) \n         {\n String str1 = new String(\"interviewbit\");\n String str2 = new String(\"INTERVIEWBIT\");\n System.out.println(str1 = str2);\n}\n} public class StringTest \n{\npublic static void main(String[] args) \n         {\n String str1 = new String(\"interviewbit\");\n String str2 = new String(\"INTERVIEWBIT\");\n System.out.println(str1 = str2);\n}\n} public class StringTest class StringTest public static void main(String[] args) public static void main (String[] args) new \"interviewbit\" new \"INTERVIEWBIT\" This program prints \"INTERVIEWBIT\" since str2 String is assigned to str1 String. The comparison operator \u201c==\u201d should not be confused with the assignment operator \u201c=\u201d. Conclusion Here's everything you need to know about Java String interview questions and answers. To summarize, there are many specifics related to String that every Java programmer needs to be familiar with and these String questions will not just help you prepare better for Java interviews, but will also open a new door to learning more about String. The more familiar you are with these frequently asked interview questions, the greater your chances of getting hired. Hopefully, we were able to answer any questions or concerns you had. Wishing you luck in your future endeavours. Recommended Interview Preparation Resources Java Projects With Source Code\nJava MCQ With Answers\nJava Interview Questions for 5 years Experience\nJava Developer Salary\nHow to Become a Java Developer\nTechnical Interview Questions\nCoding Interview Questions\nInterviewBit Blog\nDSA Java Projects With Source Code Java Projects With Source Code Java MCQ With Answers Java MCQ With Answers Java Interview Questions for 5 years Experience Java Interview Questions for 5 years Experience Java Developer Salary Java Developer Salary How to Become a Java Developer How to Become a Java Developer Technical Interview Questions Technical Interview Questions Coding Interview Questions Coding Interview Questions InterviewBit Blog InterviewBit Blog DSA DSA",
        "reference": "interviewbit.com"
    }
]