[
    {
        "question": "1. Why choose SAS over other data analytical tools?",
        "answer": "Listed below are a few reasons to choose SAS over other data analysis tools: Learning and using SAS is very easy as compared to other analytics software tools. It has a better and more stable Graphic User Interface (GUI) and offers an easy option (PROC SQL) for users who are already familiar with SQL.\nEvery day, data is growing and securing data becomes more complicated. SAS is very capable of storing and organizing large amounts of data smoothly and reliably.\nIn the corporate world and large companies, SAS is often used, as it is more professional and easier to use compared to other languages. SAS jobs abound all over the market.\nSAS provides adequate graphical functionality. However, it provides limited customization options.\nSince SAS is licensed software and its updates are released in a controlled environment, all of its features have been thoroughly tested. As a result, there are fewer chances of errors.\nThe customer service and technical support provided by SAS are outstanding. In any case, if a user runs into technical difficulties during installation, they will receive immediate assistance from the team.\nWith its high level of security in terms of data privacy, SAS is a recognized and trusted name in the enterprise market. Learning and using SAS is very easy as compared to other analytics software tools. It has a better and more stable Graphic User Interface (GUI) and offers an easy option (PROC SQL) for users who are already familiar with SQL. Every day, data is growing and securing data becomes more complicated. SAS is very capable of storing and organizing large amounts of data smoothly and reliably. In the corporate world and large companies, SAS is often used, as it is more professional and easier to use compared to other languages. SAS jobs abound all over the market. SAS provides adequate graphical functionality. However, it provides limited customization options. Since SAS is licensed software and its updates are released in a controlled environment, all of its features have been thoroughly tested. As a result, there are fewer chances of errors. The customer service and technical support provided by SAS are outstanding. In any case, if a user runs into technical difficulties during installation, they will receive immediate assistance from the team. With its high level of security in terms of data privacy, SAS is a recognized and trusted name in the enterprise market.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What are some common mistakes that people make while writing programs in SAS?",
        "answer": "The following are some of the most common programming errors in SAS: common programming errors If a semicolon is missing from a statement, SAS will misinterpret not only that statement but potentially several that follow.\nA number of errors will result from unclosed quotes and unclosed comments because SAS may fail to read the subsequent statements correctly.\nData and procedure steps have very different functions in SAS, so statements that are valid in one will probably cause errors in the other.\nData is not sorted before using a statement that requires a sort\nSubmitted programs are not checked for log entries.\nThe quotation marks are not matched.\nThe dataset option is invalid or the statement option is invalid.\nDebugging techniques are not used. If a semicolon is missing from a statement, SAS will misinterpret not only that statement but potentially several that follow. A number of errors will result from unclosed quotes and unclosed comments because SAS may fail to read the subsequent statements correctly. Data and procedure steps have very different functions in SAS, so statements that are valid in one will probably cause errors in the other. Data is not sorted before using a statement that requires a sort Submitted programs are not checked for log entries. The quotation marks are not matched. The dataset option is invalid or the statement option is invalid. Debugging techniques are not used.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What are different ways to exclude or include specific variables in a dataset?",
        "answer": "DROP and KEEP statements can be used to exclude or include specific variables from a data set. Drop Statement: This instructs SAS which variables to remove from the data set.\nKeep Statement: The variables in the data set to be retained are specified using this statement. Drop Statement: This instructs SAS which variables to remove from the data set. Drop Statement Keep Statement: The variables in the data set to be retained are specified using this statement. Keep Statement: Example: Consider the following data set: Example: DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; The following DROP statement instructs SAS to drop variables score1 and score2. DROP data readin; \nset outdata; \ntotalsum = sum(score1,score2); \ndrop score1, score2; \nrun; data readin; \nset outdata; \ntotalsum = sum(score1,score2); \ndrop score1, score2; \nrun; Output: Output: Gender  Section   totalsum \nF          A        37 \nF          B        42 \nF          C        27\nM          D        46 Gender  Section   totalsum \nF          A        37 \nF          B        42 \nF          C        27\nM          D        46 The following KEEP statement instructs SAS to retain score1 in the data set. data readin1; \nset readin; \nkeep score1; \nrun; data readin1; \nset readin; \nkeep score1; \nrun; Output: Output: Gender  Section  score1    totalsum \nF         A       17         37 \nF         B       25         42 \nF         C       12         27 \nM         D       21         46 Gender  Section  score1    totalsum \nF         A       17         37 \nF         B       25         42 \nF         C       12         27 \nM         D       21         46",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Explain _N_ and _ERROR_ in SAS.",
        "answer": "In a SAS Data Step, there are two variables that are automatically created, namely, the _ERROR_ variable and the _N_ variable. _N_: Typically, this variable is used to keep track of the number of times a data step has been iterated. It is set to 1 by default. The variable _N_ increases every time the data step of a data statement is iterated.\n_ERROR_: The value is 0 by default and gives information about any errors that occur during execution. Whenever there is an error, such as an input data error, a math error, or a conversion error, the value is set to 1. This variable can be used to locate errors in data records and to display an error message in the SAS log. _N_: Typically, this variable is used to keep track of the number of times a data step has been iterated. It is set to 1 by default. The variable _N_ increases every time the data step of a data statement is iterated. _N_: _ERROR_: The value is 0 by default and gives information about any errors that occur during execution. Whenever there is an error, such as an input data error, a math error, or a conversion error, the value is set to 1. This variable can be used to locate errors in data records and to display an error message in the SAS log. _ERROR_:",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What do you mean by the \"+\" operator and sum function?",
        "answer": "In SAS, summation or addition is performed either with the \u201csum\u201d function or by using the \u201c+\u201d operator. Function \"Sum\" returns the sum of arguments that are present (non-missing arguments), whereas \"+\" operator returns a missing value if one or more arguments are not present or missing. Example: Consider a data set containing three variables a, b, and c. Example: data variabledata; \ninput a b c; \ncards; \n1      2     3 \n34     3     4 \n.      3     2 \n53     .     3 \n54     4     . \n45     4     2 \n; \nrun; data variabledata; \ninput a b c; \ncards; \n1      2     3 \n34     3     4 \n.      3     2 \n53     .     3 \n54     4     . \n45     4     2 \n; \nrun; There are missing values for all variables and we wish to compute the sum of all variables. data sumofvariables; \nset variabledata; \nx=sum(a,b,c); \ny=a+b+c; \nrun; data sumofvariables; \nset variabledata; \nx=sum(a,b,c); \ny=a+b+c; \nrun; Output: Output: x        y \n6        6 \n41       41 \n5        . \n56       . \n58       . \n51       51 x        y \n6        6 \n41       41 \n5        . \n56       . \n58       . \n51       51 The value of y is missing for the 3rd, 4th, and 5th observations in the output.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Name different data types that SAS support.",
        "answer": "SAS supports two data types, i.e., Character and Numeric. Dates are also considered characters despite the fact that there are implicit functions that can be performed on them. Character Numeric",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. State the difference between using the drop = data set option in the set statement and data statement.",
        "answer": "In SAS, the drop= option is used to exclude variables from processing or from the output data set. This option tells SAS which variables you wish to remove from a data set. drop= option The drop= option in the set statement can be used if you do not wish to process certain variables or do not want to have them included in the new data set.\nHowever, if you want to process certain variables but don't want them to be included in the new data set, then choose drop= in the data statement. The drop= option in the set statement can be used if you do not wish to process certain variables or do not want to have them included in the new data set. However, if you want to process certain variables but don't want them to be included in the new data set, then choose drop= in the data statement. Syntax: DROP=variable(s); Syntax: DROP=variable(s); In this case, variable(s) lists one or more names of variables. Variables can be listed in any format SAS supports. Example: Consider the following data set: Example: DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; DATA outdata;  \nINPUT gender $ section score1 score2;  \nDATALINES;  \nF   A  17  20 \nF   B  25  17  \nF   C  12  15 \nM   D  21  25 \n; \nproc print; \nrun; The following DROP= data set option command SAS to drop variables score1 and score2. DROP= data set option data readin; \nset outdata (drop = score1 score2); \ntotalsum = sum(score1, score2); \nrun; data readin; \nset outdata (drop = score1 score2); \ntotalsum = sum(score1, score2); \nrun; Output: Output: Gender  Section    score1     score2    totalsum \n F       A          .          .          . \n F       B          .          .          .     \n F       C          .          .          .        \n M       D          .          .          . Gender  Section    score1     score2    totalsum \n F       A          .          .          . \n F       B          .          .          .     \n F       C          .          .          .        \n M       D          .          .          .",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What is the meaning of STOP and OUTPUT statements in SAS?",
        "answer": "STOP Statement: Using STOP, SAS immediately stops processing the current DATA step and resumes processing statements after the current DATA step ends. In other words, the STOP statement halts the execution of all statements containing it, including DO statements and looping statements. STOP Statement: Using STOP, SAS immediately stops processing the current DATA step and resumes processing statements after the current DATA step ends. In other words, the STOP statement halts the execution of all statements containing it, including DO statements and looping statements. STOP Statement Syntax:  STOP; Syntax: STOP; Example: As demonstrated in this example, STOP is used to avoid an infinite loop when using a random access method within a DATA step: Example: data sample;  \ndo developerobs=1 to engineeringobs by 10;  \nset master.research point=developerobs nobs=engineeringobs;  \n output;  \nend;  \nstop;  \nrun; data sample;  \ndo developerobs=1 to engineeringobs by 10;  \nset master.research point=developerobs nobs=engineeringobs;  \n output;  \nend;  \nstop;  \nrun; OUTPUT Statement: Output tells SAS to write the current observation immediately to a SAS data set, not at the end of the DATA step. The current observation will be written to all data sets named in the DATA statement if there is no data set name specified in the OUTPUT statement. OUTPUT Statement: Output tells SAS to write the current observation immediately to a SAS data set, not at the end of the DATA step. The current observation will be written to all data sets named in the DATA statement if there is no data set name specified in the OUTPUT statement. OUTPUT Statement: Syntax: OUTPUT <data-set-name(s)>; Syntax: OUTPUT <data-set-name(s)>; Example: Each line of input data can be used to create two or more observations. As given below, for each observation in the data set Scaler, three observations are created in the SAS data set Result. Example: data Result(drop=time4-time6);  \nset Scaler;  \ntime=time4;  \noutput;  \ntime=time5;  \noutput;  \ntime=time6;  \noutput;  \nrun; data Result(drop=time4-time6);  \nset Scaler;  \ntime=time4;  \noutput;  \ntime=time5;  \noutput;  \ntime=time6;  \noutput;  \nrun;",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain what is first and last in SAS?",
        "answer": "SAS Programming always uses the BY and SET statements to group data based on the order of grouping. When both BY and SET statements are used together, SAS automatically creates two temporary variables, FIRST. and LAST. 'SAS' identifies the first and last observations of a group based on the values of the FIRST. and LAST. variables. These variables are always 1 or 0, depending on the following conditions: FIRST.variable = 1 if an observation of a group is the first one in a BY group.\nFIRST.variable = 0 if observation of group is not the first one in a BY group.\nLAST.variable = 1 if observation of group is the last one in a BY group.\nLAST.variable = 0 if observation of group is not the last one in a BY group. FIRST.variable = 1 if an observation of a group is the first one in a BY group. FIRST.variable FIRST.variable = 0 if observation of group is not the first one in a BY group. FIRST.variable LAST.variable = 1 if observation of group is the last one in a BY group. LAST.variable LAST.variable = 0 if observation of group is not the last one in a BY group. LAST.variable Essentially, SAS stores FIRST.variable and LAST.variable in a program data vector (PDV). As a result, they become available for DATA step processing. However, SAS will not add them to the output data set since they are temporary. Example: In the following example, ID is a grouping variable containing duplicate entries. When FIRST.variable = 1 and LAST.variable = 1, it means that there is only a single value in the group like ID=4, ID=6 and ID=8 as shown below: Example:  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Consider the following expression stored in the variable address: 9/4 Infantry Marg Mhow CITY, MP, 453441",
        "answer": "In the following scenario, what would the scan function return? In the following scenario, what would the scan function return? x=scan(address,3); x=scan(address,3); In the above program, we have used the scan function to read the 3rd word in the address string. The following output will the returned by the scan function: x=Marg; x=Marg;",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What do you mean by the Scan function in SAS and write its usage?",
        "answer": "The Scan() function is typically used to extract words from a value marked by delimiters (characters or special signs that separate words in a text string). The SCAN function selects individual words from text or variables containing text and stores them in new variables. Syntax: Syntax: scan(argument,n,delimiters) scan(argument,n,delimiters) In this case, Argument: It specifies the character variable or text to be scanned.\nN: The number n indicates which word to read.\nDelimiters: These are characters values or special signs in a text string. Argument: It specifies the character variable or text to be scanned. Argument: N: The number n indicates which word to read. N: Delimiters: These are characters values or special signs in a text string. Delimiters: Example: Example: Consider that we would like to extract the first word from a sentence 'Hello, Welcome to Scaler!'. In this case, the delimiter used is a blank. data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nfirst_word=scan(string, 1, ' ' ); \nput first_word =; \nrun; data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nfirst_word=scan(string, 1, ' ' ); \nput first_word =; \nrun; First_word returns the word 'hello' since it's the first word in the above sentence. Now, consider that we would like to extract the last word from a sentence 'Hello, Welcome to Scaler!'. In this case, the delimiter used is a blank. data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nlast_word=scan(string, -1, ' ' ); \nput last_word =; \nrun; data _null_; \nstring=\"Hello, Welcome to Scaler!\"; \nlast_word=scan(string, -1, ' ' ); \nput last_word =; \nrun; Last_word returns 'Scaler!' As Scaler is the last word in the above sentence.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. State difference between Missover and Truncover in SAS.",
        "answer": "Missover: The INPUT statement does not jump to the next line when the Missover option is used on the INFILE statement. If the INPUT statement cannot read the entire field specified due to the field length, it will set the value to missing. The variables with no values assigned are set to missing when an INPUT statement reaches the end of an input data record. Missover: The INPUT statement does not jump to the next line when the Missover option is used on the INFILE statement. If the INPUT statement cannot read the entire field specified due to the field length, it will set the value to missing. The variables with no values assigned are set to missing when an INPUT statement reaches the end of an input data record. Missover: Example: An external file with variable-length records, for example, contains the following records: Example: Example: 1 \n22 \n333  \n4444 \n55555 1 \n22 \n333  \n4444 \n55555 Following are the steps to create a SAS data set using these data. The numeric informat 5 is used for this data step and the informatted length of the variable NUM is matched by only one input record. data readin;  \ninfile 'external-file' missover;  \ninput NUM 5.;  \nrun;  \nproc print data=readin;  \nrun; data readin;  \ninfile 'external-file' missover;  \ninput NUM 5.;  \nrun;  \nproc print data=readin;  \nrun; Output: Output: Output: Obs    ID  \n1      .  \n2      . \n3      . \n4      . \n5      55555 Obs    ID  \n1      .  \n2      . \n3      . \n4      . \n5      55555 Those values that were read from input records that were too short have been set to missing. This problem can be corrected by using the TRUNCOVER option in the INFILE statement: Truncover: This option assigns the raw data value to the variable, even if it is shorter than what the INPUT statement expects. Truncover: This option assigns the raw data value to the variable, even if it is shorter than what the INPUT statement expects. Truncover: Example: Example: Example: An external file with variable-length records, for example, contains the following records: 1 \n22 \n333  \n4444\n55555 1 \n22 \n333  \n4444\n55555 Following are the steps to create a SAS data set using these data. The numeric informat 5 is used for this data step. data readin;  \ninfile 'external-file' truncover;  \ninput NUM 5.; \nrun;  \nproc print data=readin;  \nrun; data readin;  \ninfile 'external-file' truncover;  \ninput NUM 5.; \nrun;  \nproc print data=readin;  \nrun; Output: Output: Output: Obs    ID  \n1      1  \n2      22  \n3      333  \n4      4444 \n5      55555 Obs    ID  \n1      1  \n2      22  \n3      333  \n4      4444 \n5      55555 Those values that were read from input records that were too short are not set to missing.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. What is PDV (Program Data Vector)?",
        "answer": "Logical areas of memory where SAS builds data sets, one observation at a time are called Program data vectors (PDVs). Whenever a program is executed, SAS usually reads data values from the input buffer or generates them based on SAS language statements and assigns these data values to specific or respective variables in the program data vector. The program data vector also includes two automatic variables i.e., _N_ and _ERROR_ variable. _N_ _ERROR_",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What is the use of Retain in SAS?",
        "answer": "SAS, at the start of each iteration of the data step, reads the data statement and puts the missing values of variables (assigned either through an INPUT statement or via an assignment statement within the data step) into the program data vector (logical areas of memory). RETAIN statements override this default. In other words, a RETAIN statement instructs SAS not to set variables to missing when moving from one iteration of the data step to another. The variables are instead retained. Syntax: Syntax: RETAIN variable1 variable2 ... variablen; RETAIN variable1 variable2 ... variablen; There are no limits to the number of variables you can specify. When you do not specify variable names, SAS retains the values of every variable that was created in INPUT or assignment statement by default.",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. Write down some capabilities of SAS Framework.",
        "answer": "SAS Framework has the following four capabilities:   Access Data: Data accessibility is a powerful SAS capability. In other words, data can be accessed from different sources including raw databases, excel files, Oracle databases, SAS datasets, etc.\nManage Data: SAS offers additional capabilities including data management. Data accessed from a variety of sources can thus be managed easily in order to generate useful insights. The process of managing data can include creating variables, validating data, cleaning data, creating subsets, etc. SAS manages the existing data to provide the data that you need.\nAnalyze Data: SAS will analyze the data once it has been managed to perform simple evaluations like frequency and averages, along with more complex evaluations like forecasting, regression, etc.\nPresent: The analyzed data can be saved and stored as a graphic report, a list, and overall statistics that can be printed or published. They can also be saved into a data file. Access Data: Data accessibility is a powerful SAS capability. In other words, data can be accessed from different sources including raw databases, excel files, Oracle databases, SAS datasets, etc. Access Data: Manage Data: SAS offers additional capabilities including data management. Data accessed from a variety of sources can thus be managed easily in order to generate useful insights. The process of managing data can include creating variables, validating data, cleaning data, creating subsets, etc. SAS manages the existing data to provide the data that you need. Manage Data Analyze Data: SAS will analyze the data once it has been managed to perform simple evaluations like frequency and averages, along with more complex evaluations like forecasting, regression, etc. Analyze Data: Present: The analyzed data can be saved and stored as a graphic report, a list, and overall statistics that can be printed or published. They can also be saved into a data file. Present:",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. What are the essential features of SAS?",
        "answer": "SAS has the following essential features:   SAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools,\nSAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools.\nFurthermore, SAS is a platform-independent software, which means it can run on almost any operating system, including Linux, Windows, Mac, and Ubuntu.\nIt provides very fine control over data manipulation and analysis, which is its USP.\nThe SAS package provides a complete data analysis solution, ranging from simple figures to advanced analysis. One of the best features of SAS software is its Inbuilt Library, which contains all the necessary packages for data analysis and reporting.\nThe reports can be visualized in the form of graphs that range from simple scatter plots and bar graphs to complex multi-page classification panels.\nAnother feature of SAS is its support for multiple data formats. With SAS, you can read data from a variety of file types, formats, and even from files with missing data.\nSince SAS is a 4GL (4 Generation Programming Language), it has an easy-to-learn syntax, which makes it an essential feature. SAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools, SAS offers extensive support for programmatically transforming and analyzing data in comparison to other BI (Business Intelligence) tools. Furthermore, SAS is a platform-independent software, which means it can run on almost any operating system, including Linux, Windows, Mac, and Ubuntu. It provides very fine control over data manipulation and analysis, which is its USP. The SAS package provides a complete data analysis solution, ranging from simple figures to advanced analysis. One of the best features of SAS software is its Inbuilt Library, which contains all the necessary packages for data analysis and reporting. The reports can be visualized in the form of graphs that range from simple scatter plots and bar graphs to complex multi-page classification panels. Another feature of SAS is its support for multiple data formats. With SAS, you can read data from a variety of file types, formats, and even from files with missing data. Since SAS is a 4GL (4 Generation Programming Language), it has an easy-to-learn syntax, which makes it an essential feature.",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. What do you mean by SAS Macros and why to use them?",
        "answer": "Macro is a group of SAS statements (program) that automates repetitive tasks. With SAS's Macros feature, we can avoid repeating sections of code and use them again and again when needed without having to type them again and it increases readability also. Automation makes your work faster because you don't have to write the same lines of code every day. %MACRO and %MEND are the start and end statements of a macro program. These can be reused multiple times. The SAS program declares them at the beginning and then calls them out during the body of the program when needed. %MACRO %MEND Macro variables contain a value that will be used over and over again by SAS programs. With a maximum of 65534 characters, macro variables are one of SAS's most powerful tools. They can be either global or local in scope. The % Local macro variable is a variable that can be defined and accessed inside macro programs only. The %Global macro variable is defined in open code (outside of the macro program) and can be accessed from any SAS program running in the SAS environment. Syntax: The local variables are declared in the following syntax. Syntax: In the following program, we have created the Macro variable in which we pass the parameters comma-separated and then we have written the Macro statement followed by the %MEND statement. After that, we have called the macro program by passing the parameters. # Creating a Macro program. \n%MACRO <macro name>(Param1, Param2,....Paramn);  \nMacro Statements; \n%MEND; \n# Calling a Macro program. \n%MacroName (Value1, Value2,.....Valuen); # Creating a Macro program. \n%MACRO <macro name>(Param1, Param2,....Paramn);  \nMacro Statements; \n%MEND; \n# Calling a Macro program. \n%MacroName (Value1, Value2,.....Valuen);",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What do you mean by %Include and %Eval?",
        "answer": "%Include: If you run a program containing the %INCLUDE statement, the SAS System executes any statements or data lines that you bring into the program. Statements are executed immediately. %Include: Syntax: Syntax: %INCLUDE source(s)\n</<SOURCE2> <S2=length> <option-list> >; %INCLUDE source(s)\n</<SOURCE2> <S2=length> <option-list> >; Here, Source(s) specify the location of the information that you wish to access with the %INCLUDE statement.\nSOURCE2 causes the SAS log to show the source statements being used in your SAS program.\nS2=length specifies the length of the input record.\nOption-list specifies options that can be included in %INCLUDE. Source(s) specify the location of the information that you wish to access with the %INCLUDE statement. Source(s) SOURCE2 causes the SAS log to show the source statements being used in your SAS program. SOURCE2 S2=length specifies the length of the input record. S2=length Option-list specifies options that can be included in %INCLUDE. Option-list %Eval: Integer arithmetic is used to evaluate arithmetic or logical expressions. %EVAL accepts only integers as operands in arithmetic expressions. Operands with floating-point values cannot be used in %EVAL arithmetic calculations. %SYSEVALF can be used in these cases. %Eval: Syntax: %EVAL(arithmetic/logical-expression) Syntax: %EVAL(arithmetic/logical-expression) Example: Example: %let d=%eval(13+23); %let d=%eval(13+23); Conclusion Have you been preparing for a SAS interview and wondering how you can succeed?  This useful guide can help you prepare for it. We've compiled a list of the top 30+ SAS interview questions and answers that you're likely to be asked during your interviews. The questions have been specifically designed to familiarize you with the type of questions you might encounter during the interview.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Explain what is INPUT and INFILE Statement.",
        "answer": "In SAS programming, using an INFILE statement identifies an external file containing the data, whereas using an INPUT statement describes the variables used. Syntax of INFILE: INFILE 'filename'; Syntax of INFILE: INFILE 'filename'; Syntax of INPUT: INPUT 'varname1' 'varname2'; Syntax of INPUT: INPUT 'varname1' 'varname2'; Example: Example: DATA readin \nINFILE Test; \nINPUT ID Gender Score; \nRun; DATA readin \nINFILE Test; \nINPUT ID Gender Score; \nRun;",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Name the command used for sorting in SAS programs?",
        "answer": "The PROC SORT command can be used to sort data in SAS. The command can be used for multiple variables within a program. It creates a new dataset with sorting and keeps the original dataset unchanged. Syntax: Syntax: PROC SORT DATA=original OUT=Sorted;   \nBY variable_name; PROC SORT DATA=original OUT=Sorted;   \nBY variable_name; Here, Variable_name represents the column name on which sorting happens.\nOriginal represents the dataset name to be sorted.\nSorted represents the dataset name after it is sorted. Variable_name represents the column name on which sorting happens. Variable_name Original represents the dataset name to be sorted. Original Sorted represents the dataset name after it is sorted. Sorted",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What do you mean by NODUP and NODUPKEY options and write difference between them?",
        "answer": "PROC SORT in SAS enables the removal of duplicate values from a table primarily by utilizing two options: NODUP\nNODUPKEY NODUP NODUPKEY NODUP vs NODUPKEY - NODUP vs NODUPKEY NODUP  NODUPKEY \nEach variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement.  \nNODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. \nSyntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; NODUP  NODUPKEY \nEach variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement.  \nNODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. \nSyntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; NODUP  NODUPKEY NODUP  NODUPKEY NODUP NODUPKEY Each variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement.  \nNODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. \nSyntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; Each variable in the data set can be compared with it.   NODUPKEY only compares the variables that are listed in the BY statement. Each variable in the data set can be compared with it. NODUPKEY only compares the variables that are listed in the BY statement. NODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. NODUP removes duplicate observations where the same values are repeated across all variables. When NODUPKEY is selected, the duplicate observations are removed where the values of a variable listed in the BY statement are the same. Syntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; \nSyntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; Syntax:\nPROC SORT DATA=readin NODUP; \nBy varname; \nrun; Syntax: Syntax: Syntax: PROC SORT DATA=readin NODUP; \nBy varname; \nrun; PROC SORT DATA=readin NODUP; \nBy varname; \nrun; Syntax: \nPROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; Syntax: Syntax: Syntax: PROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun; PROC SORT DATA=readin NODUPKEY; \nBy varname; \nrun;",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Explain different ways to remove duplicate values in SAS.",
        "answer": "Below are two ways to delete duplicate values in SAS: The use of nodups in the procedure: The use of nodups in the procedure: The NODUPRECS (or NODUPREC or NODUP) option of PROC SORT identifies observations with identical values for all columns and removes them from the output data set. Proc sort data=SAS-Dataset nodups; \nBy varname; \nrun; Proc sort data=SAS-Dataset nodups; \nBy varname; \nrun; The use of PROC SQL in the procedure: The use of PROC SQL in the procedure: PROC SQL can be used to remove duplicates. The DISTINCT keyword is used in the select clause to account for duplicate observations. proc sql;  \ncreate table New_dataset as select distinct * from Old_dataset where var=distinct(var); \nquit; proc sql;  \ncreate table New_dataset as select distinct * from Old_dataset where var=distinct(var); \nquit;",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. Explain the usage of trailing @@.",
        "answer": "Occasionally, multiple observations need to be created from a single record of raw data. In order to specify how SAS will read such a record, you can use the double trailing at-sign (@@ or \"double trailing @\").  By using a double trailing @@, SAS is told to \"hold the line more strongly\". A double trailing sign (@@) directs SAS not to advance to another input record, but to hold the current input record for the next input statement. It is important to note that the single trailing @ does not hold an input record for subsequent Iterations of the data step. A trailing \"@\" indicates that an input record will only be held for this iteration of the data step (until the processing returns or gets back to the top of the data step), or that it will be passed to the next INPUT statement without a single trailing \"@\".",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. How do you specify the number of iterations and specific conditions within a single do loop?",
        "answer": "The code below illustrates how to specify the number of iterations and specific conditions within a single do loop. The iterative DO statement executes the DO loop until the Sum is greater than or equal to 50000, or until the DO loop has executed 10 times, whichever comes first. data Scaler; \ndo i=1 to 50 until (Sum>=50000); \nYear+1; \nSum+5000; \nSum+Sum*.10; \nend; \nrun; data Scaler; \ndo i=1 to 50 until (Sum>=50000); \nYear+1; \nSum+5000; \nSum+Sum*.10; \nend; \nrun;",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. What is the importance of the Tranwrd function in SAS.",
        "answer": "TRANRWD, when applied to a character string, replaces or eliminates all occurrences of a substring. By using TRANWRD, you can scan for words (or patterns of characters) and replace them with a second word (or pattern of characters). Syntax: Syntax: TRANWRD(source, target, replacement) TRANWRD(source, target, replacement) Here, The source is a character constant, variable, or expression you wish to translate.\nThe target is an expression, constant, or variable searched in the source.\nReplacement specifies an expression, constant, or variable that will replace target. The source is a character constant, variable, or expression you wish to translate. The target is an expression, constant, or variable searched in the source. Replacement specifies an expression, constant, or variable that will replace target. Example:    \nname : Mrs. Johny Lever  \nname=tranwrd(name, \"Mrs.\", \"Ms.\");   \nResult : Ms. Johny Lever Example:   ",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Explain what you mean by SYMGET and SYMPUT.",
        "answer": "In a data step, SYMGET returns a macro variable's value. Conversely, the primary function of SYMPUT is to store the value of the data set in a macro variable. Syntax of Symput: Syntax of Symput: CALL SYMPUT(macro-variable, value); CALL SYMPUT(macro-variable, value); Syntax of SYMGET: Syntax of SYMGET: SYMGET(argument) SYMGET(argument) Example: In the following program we have created a macro variable and then we have used the symput function to put the value where our key is 'avar' and then we have used the symget function to get the micro variable value. Example: * Create a macro variable.  \ndata dataset; \nset sashelp.class; \nif _N_ = 1 then do; \ncall symput('avar', name); \nend; \nrun; \n%put &avar; \n* Get macro variable value in a dataset; \ndata needit; \nvar1=symget('avar'); \nrun; * Create a macro variable.  \ndata dataset; \nset sashelp.class; \nif _N_ = 1 then do; \ncall symput('avar', name); \nend; \nrun; \n%put &avar; \n* Get macro variable value in a dataset; \ndata needit; \nvar1=symget('avar'); \nrun;",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Identify the error in the following code.",
        "answer": "proc mixed data=SASHELP.IRIS plots=all; \nmodel petallength= /; \nclass species; \nrun; proc mixed data=SASHELP.IRIS plots=all; \nmodel petallength= /; \nclass species; \nrun; Basically, it is a syntax error. In all cases, the MODEL statement must appear after the CLASS statement.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What do you mean by functions and procedures in SAS?",
        "answer": "SAS Procedures: They process data in SAS data sets to create statistics, tables, reports, charts, and plots, as well as to perform other analyses and operations on the data. All types of statistical analysis can be performed using SAS procedures. Execution of a procedure is triggered by the keyword PROC, which starts the step. Here are some SAS PROCs: SAS Procedures: PROC SORT\nPROC MEAN\nPROC SQL\nPROC COMPARE\nPROC REPORT\nPROC FREQ, etc. PROC SORT PROC MEAN PROC SQL PROC COMPARE PROC REPORT PROC FREQ, etc. SAS Functions: There are many built-in functions in SAS that aid in the analysis and processing of data. You use them in DATA statements. Different functions take different numbers of arguments. Here is a list of SAS functions: SAS Functions: SCAN()\nNPUT()\nSUBSTR()\nCOUNTC()\nCOMPRESS(), etc. SCAN() NPUT() SUBSTR() COUNTC() COMPRESS(), etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. State the difference between PROC MEANS and PROC SUMMARY.",
        "answer": "Proc SUMMARY and Proc MEANS are essentially the same methods for calculating descriptive statistics, such as mean, count, sum, median, etc. Also, it is capable of calculating several other metrics such as percentiles, quartiles, variances, standard deviations, and t-tests. N, MIN, MAX, MEAN, and STD DEV are the default statistics produced by PROC MEANS. They differ mainly in the output type they produce by default. Unlike PROC SUMMARY, PROC MEANS by default prints output in the LISTING window or other open destination. When the print option is included in the Proc SUMMARY statement, the results will be printed to the output window.\nBy default, PROC MEANS takes into account all of the numerical variables in the statistical analysis. PROC SUMMARY, on the other hand, takes into account all of the variables described in the VAR statement in the statistical analysis. They differ mainly in the output type they produce by default. Unlike PROC SUMMARY, PROC MEANS by default prints output in the LISTING window or other open destination. When the print option is included in the Proc SUMMARY statement, the results will be printed to the output window. By default, PROC MEANS takes into account all of the numerical variables in the statistical analysis. PROC SUMMARY, on the other hand, takes into account all of the variables described in the VAR statement in the statistical analysis.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. Name some SAS system options that are used to debug SAS Micros.",
        "answer": "There are a number of SAS System options that users can use to troubleshoot macro problems and issues. Macro-option results are automatically shown in the SAS Log. MEMRPT: Displays memory usage statistics in the SAS logs.\nMERROR: SAS will issue a warning if we attempt to invoke a macro that SAS does not recognize. Whenever there is a misspelling or if a macro is not defined, warning messages are displayed.\nMLOGIC: SAS prints details about the macro execution in its log. In short, it identifies and displays micro logic.\nMPRINT: When you execute a macro code, SAS doesn't show it in the LOG file, but when you use the MPRINT option it displays all the SAS statements of the resolved macro code. With the MPRINT option, one statement per line is printed along with the corrected macro code.\nSYMBOLGEN: It prints a message in the LOG file about how a macro variable is resolved. Specifically, a message is printed in the LOG whenever a macro variable is resolved. MEMRPT: Displays memory usage statistics in the SAS logs. MEMRPT: MERROR: SAS will issue a warning if we attempt to invoke a macro that SAS does not recognize. Whenever there is a misspelling or if a macro is not defined, warning messages are displayed. MERROR: MLOGIC: SAS prints details about the macro execution in its log. In short, it identifies and displays micro logic. MLOGIC: MPRINT: When you execute a macro code, SAS doesn't show it in the LOG file, but when you use the MPRINT option it displays all the SAS statements of the resolved macro code. With the MPRINT option, one statement per line is printed along with the corrected macro code. MPRINT: SYMBOLGEN: It prints a message in the LOG file about how a macro variable is resolved. Specifically, a message is printed in the LOG whenever a macro variable is resolved. SYMBOLGEN:",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. Explain how %Let and macro parameters can be used to create micro variables in SAS programming?",
        "answer": "%LET: %Let is generally used to create micro variables and assign values to them. You can define it inside or outside a macro. %LET: Syntax: %LET macro-variable-name = value; Syntax: %LET macro-variable-name = value; Any number, text or date can be entered in the Value field, depending on what the program requires. How to use the Micro Variable? How to use the Micro Variable? Whenever referencing macro variables, an ampersand (&) is used followed by the macro variable name as shown below: & <Macro variable Name> & <Macro variable Name> Macro Parameters: Macros have variables called parameters whose values you set when you invoke the macro. The parameters are added to a macro by naming them in parenthesis in %macro. Macro Parameters: Syntax: Syntax: %MACRO macro-name (parameter-1= , parameter-2= , ......parameter-n = ); \nMacro Statements; \n%MEND; %MACRO macro-name (parameter-1= , parameter-2= , ......parameter-n = ); \nMacro Statements; \n%MEND; How to call a Macro? How to call a Macro? To call/use micro variables, we use % followed by the macro variable name and then pass parameters.\n%macro_name(par1,par2,....parn);  %macro_name(par1,par2,....parn);",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. Write different ways to create micro variables in SAS Programming?",
        "answer": "The following are some ways to create macro variables: %Let\n%Global\nCall Symput\nProc SQl into clause\nMacro Parameters %Let %Global Call Symput Proc SQl into clause Macro Parameters",
        "reference": "interviewbit.com"
    }
]