[
    {
        "question": "1. How to implement Forms authentication in ASP.NET MVC?",
        "answer": "Authentication means providing access to the user for a particular service through verification of his/her identity using his/her credentials such as email-id and password or username and password. It will make sure that the correct user will be authenticated or logged in for a particular service and the right service will be given to the specific user depending on their role. Forms authentication in ASP.NET will be done after the completion of IIS(Internet Information Services) authentication. It is possible to configure forms authentication with the help of the forms element in the file web.config of your application. web.config The forms authentication default attribute values are given below: <system.web>\n   <authenticationmode=\"Forms\">\n       <formsloginUrl=\"Login.aspx\" protection=\"All\" timeout=\"30\" name=\".ASPXAUTH\" path=\"/\" requireSSL=\"false\" slidingExpiration=\"true\" defaultUrl=\"default.aspx\" cookieless=\"UseDeviceProfile\" enableCrossAppRedirects=\"false\" />\n   </authentication>\n</system.web> <system.web>\n   <authenticationmode=\"Forms\">\n       <formsloginUrl=\"Login.aspx\" protection=\"All\" timeout=\"30\" name=\".ASPXAUTH\" path=\"/\" requireSSL=\"false\" slidingExpiration=\"true\" defaultUrl=\"default.aspx\" cookieless=\"UseDeviceProfile\" enableCrossAppRedirects=\"false\" />\n   </authentication>\n</system.web> The FormsAuthentication class will automatically create the authentication cookie when it calls the methods RedirectFromLoginPage() or SetAuthCookie(). The value of an authentication cookie will be having the string representation for the signed and encrypted FormsAuthenticationTicket object. RedirectFromLoginPage() SetAuthCookie()",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What are the advantages of using Scaffolding in ASP.NET MVC?",
        "answer": "Scaffolding is a code generation framework used for ASP.NET web applications that will be helpful in effectively generating the code for CRUD(Create, Read, Update, and Delete) operations against your database. The Advantages of Scaffolding are as follows: Advantages of Scaffolding Minimal or no code for the creation of data-driven Web applications\nPages will be completely functional and will have various functionalities such as insert, edit, display, delete, paging, and sorting\nFaster development time\nFilters will be created for every boolean or foreign key field\nThe database schema based built-in data validation. Minimal or no code for the creation of data-driven Web applications Pages will be completely functional and will have various functionalities such as insert, edit, display, delete, paging, and sorting Faster development time Filters will be created for every boolean or foreign key field The database schema based built-in data validation.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Explain state management in ASP.NET MVC.",
        "answer": "The collection of input values(example: city, mobile number, e-mail id, etc.) of a specific web page is called as state of that page. By default, it is not possible to retain the values(states) provided on a single page of a web application, when you navigate to another web page. This nature of a web page is known as stateless behaviour. You can make use of different state management techniques for retaining the values(state) across the web pages. The below-given common state management techniques will be supported by the ASP.NET MVC: Session: It is a state management technique on the server-side that enables you for setting and read the user-specific values when the user navigates through different pages in a web application. These state variables will be stored by default in the host application\u2019s main memory. It is also possible to configure this session variable to store on a SQL server database. The Session.Clear() method, can be used for removing the session variable from memory.\nQuery String: It is a state management technique on the client-side that is used for storing the values along with URL(Uniform Resource Locator). It cannot be used for storing the composite type values and also for storing confidential data such as passwords, as a query string area will be visible as part of the URL.\nCookies: It is a state management technique on the client-side that stores data in browsers memory. Based on settings, a few browsers may not be able to accept cookies. Session: It is a state management technique on the server-side that enables you for setting and read the user-specific values when the user navigates through different pages in a web application. These state variables will be stored by default in the host application\u2019s main memory. It is also possible to configure this session variable to store on a SQL server database. The Session.Clear() method, can be used for removing the session variable from memory. Session: Session: Query String: It is a state management technique on the client-side that is used for storing the values along with URL(Uniform Resource Locator). It cannot be used for storing the composite type values and also for storing confidential data such as passwords, as a query string area will be visible as part of the URL. Query String: Query String: Cookies: It is a state management technique on the client-side that stores data in browsers memory. Based on settings, a few browsers may not be able to accept cookies. Cookies: Cookies:",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. What are Action filters in ASP.NET MVC?",
        "answer": "Action filters are the additional attributes in the ASP.NET MVC framework, that we can apply to either a section of the controller or to the entire controller for modifying the approach in which action will be executed. Action filter attributes are said to be special .NET classes as they are derived from the System.Attribute class and they can be attached to classes, properties, methods, and fields. System.Attribute The following action filters are provided by ASP.NET MVC: Output Cache: This action filter will cache the controller action output for a specified time.\nHandle Error: This action filter will handle the errors raised during the execution of a controller action.\nAuthorize: This action filter will enable you for restricting to a particular role or user. Output Cache: This action filter will cache the controller action output for a specified time. Output Cache: Handle Error: This action filter will handle the errors raised during the execution of a controller action. Handle Error Authorize: This action filter will enable you for restricting to a particular role or user. Authorize The below-given code will apply Output cache filter on an ActionFilterExampleController (Here, ActionFilterExampleController is just used as an example, You can apply action filters on any of the controllers). It specifies that the return value should be cached for 20 seconds. public class ActionFilterExampleController: Controller\n{\n   [HttpGet]\n   OutputCache(Duration = 20)]\n   public string Index()\n   {\n       return DateTime.Now.ToString(\"T\");\n   }\n} public class ActionFilterExampleController: Controller\n{\n   [HttpGet]\n   OutputCache(Duration = 20)]\n   public string Index()\n   {\n       return DateTime.Now.ToString(\"T\");\n   }\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What are the three main components of an ASP.NET MVC application?",
        "answer": "In the below-given figure, you can see three main components of the MVC architecture in ASP.NET and interaction among them. three main components   The 3 main components of an ASP.NET MVC application are model, view, and controller. Model: Model objects will implement the logic for the data domain of an application and has all the classes that handle data and business logic. Usually, model objects will retrieve and store the model state in the database.\nViews: View is a component used for displaying the User Interface(UI) of an application. Generally, this UI will be created using the model data.\nControllers: The controller is a component used for handling the user interaction, model-related work, and selecting a view for rendering to display the UI. In an MVC application, for displaying the information the view will be responsible, for handling and responding to user input and interaction the controller will be responsible. Model: Model objects will implement the logic for the data domain of an application and has all the classes that handle data and business logic. Usually, model objects will retrieve and store the model state in the database. Model: Views: View is a component used for displaying the User Interface(UI) of an application. Generally, this UI will be created using the model data. Views: Controllers: The controller is a component used for handling the user interaction, model-related work, and selecting a view for rendering to display the UI. In an MVC application, for displaying the information the view will be responsible, for handling and responding to user input and interaction the controller will be responsible. Controllers:",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Explain about ASP.NET MVC 5.",
        "answer": "The ASP.NET MVC 5 framework is the newest evolution of the ASP.NET web platform by Microsoft. A highly effective programming model will be provided by ASP.MVC 5, which promotes powerful extensibility, cleaner code architecture, test-driven development, in addition to all the ASP.NET benefits.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What is Routing in ASP.NET MVC?",
        "answer": "Routing in ASP.NET MVC is a pattern matching system that maps the incoming requests from the browser to specified actions of the MVC controller. When the application of ASP.NET MVC gets started, it registers one or multiple patterns with the framework route table so that it can inform the routing engine that what has to be done with the requests that are matching with those patterns. When a request is received by the routing engine during runtime, it matches that URL of the request against its registered URL patterns and provides the response based on a pattern match. The URL pattern in routing will be considered based on the domain name part in the URL. For example, the URL pattern \"{controller}/{action}/{id}\" will look similar to localhost:1234/{controller}/{action}/{id}. Anything that comes after the\"localhost:1234/\" will be considered as the name of the controller. In the same manner, anything that comes after the controller name will be considered as the name of the action and then comes the id parameter value. \"{controller}/{action}/{id}\" localhost:1234/{controller}/{action}/{id} \"localhost:1234/\"   If the URL has nothing after the domain name, then the request will be handled by the default controller and action method. For example, the URL http://localhost:1234 will be handled by the Index() method and by the HomeController as per the default parameter configuration. http://localhost:1234 The below-given route table will show which Controllers, Action methods, and Id parameters will be handling the various URLs according to the above-provided default route.   The below figure shows request processing by routing engine and response sent by it. It provides a response based on URL match in the route table. When the URL of the request matches any of the route patterns that are registered in the route table then the request will be forwarded by the routing engine to the suitable handler for that request. Later the route will be processed and obtain a view on the UI. When the URL of the request doesn\u2019t match with any of the route patterns that are registered, the routing engine will indicate that it can\u2019t determine how to do request handling by returning an HTTP status code 404.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. When to use Attribute Routing?",
        "answer": "By using attribute routing, you can easily define some of the URI patterns that are most common in RESTful APIs. For example, resources will usually have child resources such as movies have actors, Clients will have orders, books have authors, etc. So it\u2019s obvious to create URIs that reflect these kinds of relations such as /clients/1/orders. It is difficult to create these kinds of URIs using convention-based routing. With the help of attribute routing, it becomes easier for defining a route to this URI. /clients/1/orders You need to add an attribute to the controller action as given below: [Route(\"clients/{cId}/orders\")]\npublic IEnumerable<Order> ObtainOrdersByClient(int cId)\n{\n    //Statements\n} [Route(\"clients/{cId}/orders\")]\npublic IEnumerable<Order> ObtainOrdersByClient(int cId)\n{\n    //Statements\n} To enable attribute routing in ASP.NET MVC 5 application, you need to add a call to the method routes.MapMvcAttributeRoutes() within the RegisterRoutes() method of RouteConfig.cs file. routes.MapMvcAttributeRoutes() RegisterRoutes() RouteConfig.cs",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. What is the Action Method in MVC?",
        "answer": "The action methods in ASP.NET MVC will help for executing the request and generating a response to it. Every public method of the MVC Controller is considered an action method. If you want the public method to act as a non-action method, then it is possible to decorate the action method by using the attribute \u201cNonAction\u201d. This will restrict an action method from rendering on the browser. A few points to be remembered while working with action methods are: The action method is the public and non-static method\nIt cannot be the protected or private method\nIt cannot be an extension method\nIt can\u2019t have ref and out parameters\nIt cannot be overloaded The action method is the public and non-static method It cannot be the protected or private method It cannot be an extension method It can\u2019t have ref and out parameters It cannot be overloaded It is possible to create action methods that will return an object of any type like an integer, a Boolean value, or a string. These return types will be wrapped in an ActionResult type that is appropriate before they are being rendered onto the response stream. Any return type that is not an action result will be converted into a string by the ASP.NET MVC and the string will be rendered into the browser. We can create a simple controller as per the code given below: public class HomeController : Controller  \n{  \n   public ActionResult HelloInterviewbit()  \n   {  \n       ViewData[\"SayInterviewbit\"] = \"Interviewbit\";  \n       return View();  \n   }  \n   public string SayInterviewbit()  \n   {  \n       return \"This is from 'SayInterviewbit'.\";  \n   }  \n \n} public class HomeController : Controller  \n{  \n   public ActionResult HelloInterviewbit()  \n   {  \n       ViewData[\"SayInterviewbit\"] = \"Interviewbit\";  \n       return View();  \n   }  \n   public string SayInterviewbit()  \n   {  \n       return \"This is from 'SayInterviewbit'.\";  \n   }  \n \n} We must create a view for running SayInterviewbit() as it will return the View as views\\home\\SayInterviewbit.cshtml. For executing the second action method, it does not require the creation of a view. In the browser, the string will be rendered. It is possible for an void public method to act as an action method. This implies that any public method can become an action method. views\\home\\SayInterviewbit.cshtml",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is Area in ASP.NET MVC?",
        "answer": "The area will permit to divide the larger application into smaller units where every unit will have an MVC folder structure separately, exactly like the default MVC folder structure. Consider an example of a large enterprise application that might have different modules such as HR, finance, admin, marketing, etc. So for all these modules, an Area can have a separate MVC folder structure.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What is JsonResultType (JavaScript Object Notation Result Type) in ASP.NET MVC?",
        "answer": "Action methods on controllers will return JsonResult that will be used within an AJAX application. From the \u201cActionResult\u201d abstract class, this JsonResult class will be inherited. Here Json will be supplied with a single argument that must be serializable. The JSONResult object will serialize the specified object into JSON format. Example: Example: public JsonResult JsonResultExample()\n{\n   return Json(\"Hello InterviewBit!!\");\n} public JsonResult JsonResultExample()\n{\n   return Json(\"Hello InterviewBit!!\");\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. Explain about ASP.NET MVC filters.",
        "answer": "The five types of Filters in ASP.NET MVC and order of their execution are as follows: Filters in ASP.NET MVC Authentication Filters: It executes before the execution of any other filter or action method. Authentication filter will make sure about whether you are a valid or invalid user. These filters will implement the interface IAuthenticationFilter.\nAuthorization Filters: It is responsible for checking User Access and is useful in implementing the authentication as well as authorization for controller actions. These authorization filters will implement the interface IAuthorizationFilterinterface. Examples of an Authorization filter are:\n   - AuthorizeAttribute: It restricts access by optionally authorization and authentication.\n   - RequireHttpsAttribute: It forces HTTP(HyperText Transfer Protocol) requests that are unsecured to be resent over HTTPS (HyperText Transfer Protocol Secure).\nAction Filters: It is an attribute that can be applied to a controller action or a complete controller. It will be called before the execution of action begins and after the execution of action comes to end. These action filters will implement the interface IActionFilter in the framework, which has OnActionExecuting and OnActionExecuted methods. OnActionExecuting method executes before the Action and provides an opportunity for Action call cancelling. Since action filters are executed before and after a controller action executes, they can also be used for modifying the view data that is returned by a controller action.\nResult Filters: It contains a logic that is to be executed before and after the execution of a view result. That means if you wish to modify a view result exactly before the rendering of view to the browser. These result filters are implemented from the IResultFilter interface in the framework, which has two methods namely OnResultExecuting and OnResultExecuted. An example of a result Filter is OutputCacheAttribute class which will provide output caching.\nExceptionFilters: It can be used for handling the errors that are raised by the controller actions or by the results of controller actions. The exception filters will implement the IExceptionFilter interface in the framework. It is very helpful during the execution pipeline where any unhandled exceptions might be thrown. An example for ExceptionFilter is HandleErrorAttribute class which will specify the way for handling an exception thrown by an action method. Authentication Filters: It executes before the execution of any other filter or action method. Authentication filter will make sure about whether you are a valid or invalid user. These filters will implement the interface IAuthenticationFilter. Authentication Filters: IAuthenticationFilter Authorization Filters: It is responsible for checking User Access and is useful in implementing the authentication as well as authorization for controller actions. These authorization filters will implement the interface IAuthorizationFilterinterface. Examples of an Authorization filter are:\n   - AuthorizeAttribute: It restricts access by optionally authorization and authentication.\n   - RequireHttpsAttribute: It forces HTTP(HyperText Transfer Protocol) requests that are unsecured to be resent over HTTPS (HyperText Transfer Protocol Secure). Authorization Filters: IAuthorizationFilterinterface  AuthorizeAttribute:  RequireHttpsAttribute: Action Filters: It is an attribute that can be applied to a controller action or a complete controller. It will be called before the execution of action begins and after the execution of action comes to end. These action filters will implement the interface IActionFilter in the framework, which has OnActionExecuting and OnActionExecuted methods. OnActionExecuting method executes before the Action and provides an opportunity for Action call cancelling. Since action filters are executed before and after a controller action executes, they can also be used for modifying the view data that is returned by a controller action. Action Filters: IActionFilter Result Filters: It contains a logic that is to be executed before and after the execution of a view result. That means if you wish to modify a view result exactly before the rendering of view to the browser. These result filters are implemented from the IResultFilter interface in the framework, which has two methods namely OnResultExecuting and OnResultExecuted. An example of a result Filter is OutputCacheAttribute class which will provide output caching. Result Filters: IResultFilter ExceptionFilters: It can be used for handling the errors that are raised by the controller actions or by the results of controller actions. The exception filters will implement the IExceptionFilter interface in the framework. It is very helpful during the execution pipeline where any unhandled exceptions might be thrown. An example for ExceptionFilter is HandleErrorAttribute class which will specify the way for handling an exception thrown by an action method. ExceptionFilters: IExceptionFilter It is possible to override the methods in your controller class if you wish to do so.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. What is ASP.NET MVC?",
        "answer": "ASP.NET MVC is a lightweight framework for developing web and mobile applications. This framework divides an application into the three main components that make up MVC(Model, View, and Controller). In this MVC pattern for websites, action performance or data retrieval will be done when requests will be sent to a Controller that is in co-ordinance with the Model for doing such tasks. The model will retrieve the data and also store it in the database. The Controller selects the View for displaying and provides it along with the Model. The final page will be rendered by the View based on the data present in the Model. MVC along with ASP.NET will give you a powerful and patterns-based way of developing dynamic websites as it enables a separation of concerns.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What are the Advantages of ASP.NET MVC?",
        "answer": "Following are a few advantages of ASP.NET MVC: Separation of Concerns: The ASP.NET MVC framework will give you a clean separation of the User Interface(UI), Business Logic, Model/Data. That means it will give you a complete separation of Program logic from the UI.\nLightweight: The ASP.NET MVC framework will not make use of View State, it will result in bandwidth reduction of the requests to some extent.\nTestability: The ASP.NET MVC framework will provide you with better Web application testability and will also give you very good support for test-driven development.\nMore Control: The ASP.NET MVC framework will support having control over JavaScript, CSS, and HTML in comparison with the traditional WebForms.\nAll features of ASP.NET: ASP.NET MVC framework is built on the top of ASP.NET framework, thus almost all the ASP.NET features such as roles, membership providers, etc., can be still used. Separation of Concerns: The ASP.NET MVC framework will give you a clean separation of the User Interface(UI), Business Logic, Model/Data. That means it will give you a complete separation of Program logic from the UI. Separation of Concerns: Lightweight: The ASP.NET MVC framework will not make use of View State, it will result in bandwidth reduction of the requests to some extent. Lightweight: Testability: The ASP.NET MVC framework will provide you with better Web application testability and will also give you very good support for test-driven development. Testability: More Control: The ASP.NET MVC framework will support having control over JavaScript, CSS, and HTML in comparison with the traditional WebForms. More Control: All features of ASP.NET: ASP.NET MVC framework is built on the top of ASP.NET framework, thus almost all the ASP.NET features such as roles, membership providers, etc., can be still used. All features of ASP.NET:",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What is ViewBag and ViewData in ASP.NET MVC?",
        "answer": "ViewBag: ViewBag: It is a Wrapper developed around ViewData and is a dynamic property that uses dynamic features of C# 4.0.\nViewBag is mainly used for the passing of value from the Controller to View where it does not require to Type Caste the data during data retrieval.\nThis ViewBag is available only for the Current Request and will be destructed on re-direction.\nExample:\nIn the below given example, a string value will be set by the ViewBag object in Controller and later it will be displayed with the help of View. It is a Wrapper developed around ViewData and is a dynamic property that uses dynamic features of C# 4.0. ViewBag is mainly used for the passing of value from the Controller to View where it does not require to Type Caste the data during data retrieval. This ViewBag is available only for the Current Request and will be destructed on re-direction. Example:\nIn the below given example, a string value will be set by the ViewBag object in Controller and later it will be displayed with the help of View.  Controller: Controller: public class ExampleController : Controller\n{\n    public ActionResult Index()\n    {\n        ViewBag.Message = \"This is about ViewBag ASP.NET MVC!!\";\n        return View();\n    }\n} public class ExampleController : Controller\n{\n    public ActionResult Index()\n    {\n        ViewBag.Message = \"This is about ViewBag ASP.NET MVC!!\";\n        return View();\n    }\n} View: View: <html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width\"/>\n    <title>IndexDisplay</title>\n</head>\n<body>\n    <div>\n        @ViewBag.Message\n    </div>\n</body>\n</html> <html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width\"/>\n    <title>IndexDisplay</title>\n</head>\n<body>\n    <div>\n        @ViewBag.Message\n    </div>\n</body>\n</html> ViewData: ViewData: It is derived from the class ViewDataDictionary and is originally a Dictionary object, which means it has Keys and Values where Keys represents the String and Values will be objects. Data will be stored in the form of Objects in ViewData.\nViewData is mainly used for the passing of value from the Controller to View. During retrieval of data, it needs to typecast the data into its original type since the data will be stored in the form of objects and it also needs NULL checks during data retrieval.\nSimilar to viewBag, this viewData is available only for Current Request and will be destructed upon redirection.\nExample:\nIn the below-given code, a string value will be set by the ViewData object in the Controller and later it will be displayed by the View. It is derived from the class ViewDataDictionary and is originally a Dictionary object, which means it has Keys and Values where Keys represents the String and Values will be objects. Data will be stored in the form of Objects in ViewData. ViewDataDictionary ViewData is mainly used for the passing of value from the Controller to View. During retrieval of data, it needs to typecast the data into its original type since the data will be stored in the form of objects and it also needs NULL checks during data retrieval. Similar to viewBag, this viewData is available only for Current Request and will be destructed upon redirection. Example:\nIn the below-given code, a string value will be set by the ViewData object in the Controller and later it will be displayed by the View.  Controller: Controller: public class ExampleController : Controller\n{\n    public ActionResult Index()\n    {\n        ViewData[\"Message\"] = \"This is about ViewData in ASP.NET MVC!!!\";\n        return View();\n    }\n} public class ExampleController : Controller\n{\n    public ActionResult Index()\n    {\n        ViewData[\"Message\"] = \"This is about ViewData in ASP.NET MVC!!!\";\n        return View();\n    }\n} View: View: <html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width\"/>\n    <title>Index</title>\n</head>\n<body>\n    <div>\n        @ViewData[\"Message\"]\n    </div>\n</body>\n</html> <html>\n<head>\n    <meta name=\"viewport\" content=\"width=device-width\"/>\n    <title>Index</title>\n</head>\n<body>\n    <div>\n        @ViewData[\"Message\"]\n    </div>\n</body>\n</html>",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. What are bundling and minification in ASP.NET MVC?",
        "answer": "Bundling and minification are two techniques used for your web application in the ASP.NET MVC framework for improving the performance of the page load. Bundling will combine several files into a single file. Minification will perform different types of code optimizations to CSS and scripts, which will result in smaller payloads. With the help of bundling and minification, we can improve the performance of load time by reducing the requested assets(like JavaScript and CSS files) size and by reducing the number of requests to the server.",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. What is View Engine?",
        "answer": "A View Engine is an MVC subsystem and has its own markup syntax. It will convert the template from the server-side into HTML markup and then render it to the browser. In the beginning, ASP.NET MVC was having a single view engine i.e., web forms(ASPX), from ASP.NET MVC 3 a Razor view engine Razor has been introduced. You can also make use of other view engines such as NHaml, Spark, etc., in ASP.NET MVC.",
        "reference": "interviewbit.com"
    },
    {
        "question": "18. What is Razor View Engine in ASP.NET MVC?",
        "answer": "Razor View Engine in ASP.NET MVC is a simple-syntax view engine used for creating a view of an application. It was released in January 2011 for Microsoft Visual Studio as a part of ASP.NET MVC 3. Razor will make use of C# syntax for the purpose of embedding code in a page without the usage of ASP.NET delimiters: <%= %>. The file extension of Razor is \u201ccshtml\u201d for the C# programming language. It supports Test Driven Development(TDD) as it will not be dependent on the System.Web.UI.Page class. <%= %> System.Web.UI.Page",
        "reference": "interviewbit.com"
    },
    {
        "question": "19. Explain about TempData in ASP.NET MVC.",
        "answer": "TempData is a dictionary object useful for the temporary storage of data. It is an instance of the Controller base class. It is useful in storing the data for the duration of an HTTP request, or we can say that it can store live data between two consecutive requests of HTTP. It is also useful in passing the state between action methods. TempData can be used only with the subsequent and current requests. It will make use of a session variable for storing the data. TempData needs typecasting during data retrieval. Example: In the below-given code, employee details will be temporarily stored by TempData. Example: public ActionResult FirstRequest()\n{\n   List<string> TempDataDemo = new List<string>();\n   TempDataDemo.Add(\"Harish\");\n   TempDataDemo.Add(\"Nagesh\");\n   TempDataDemo.Add(\"Rakshith\");\n   TempData[\"EmployeeName\"] = TempDataDemo;\n   return View();\n}\npublic ActionResult ConsecutiveRequest()\n{\n   List<string> modelData = TempData[\"EmployeeName\"] as List<string> ;\n   TempData.Keep();\n   return View(modelData);\n} public ActionResult FirstRequest()\n{\n   List<string> TempDataDemo = new List<string>();\n   TempDataDemo.Add(\"Harish\");\n   TempDataDemo.Add(\"Nagesh\");\n   TempDataDemo.Add(\"Rakshith\");\n   TempData[\"EmployeeName\"] = TempDataDemo;\n   return View();\n}\npublic ActionResult ConsecutiveRequest()\n{\n   List<string> modelData = TempData[\"EmployeeName\"] as List<string> ;\n   TempData.Keep();\n   return View(modelData);\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "20. Explain TDD(Test Driven Development) in ASP.NET MVC.",
        "answer": "TDD or Test Driven Development is an approach where a test will be written before the completion of production code writing for the purpose of refactoring and fulfilling the test. TDD is also known as the Red-Green-Refactor method of development. The Workflow of TDD is given below: Workflow of TDD Requirement identification\nWrite a test case for automation\nTests will be executed and you need to make sure that the newer tests fail(red colour)\nWrite the complete production code\nAll tests have to be executed and passed.\nRefactoring will be performed\nThe process should be repeated. Requirement identification Write a test case for automation Tests will be executed and you need to make sure that the newer tests fail(red colour) Write the complete production code All tests have to be executed and passed. Refactoring will be performed The process should be repeated.",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. Discuss a few necessary namespaces used in ASP.NET MVC.",
        "answer": "Few significant namespaces that are used in ASP.NET MVC applications are: System.Web.Mvc: It includes classes and interfaces that support the MVC pattern for Web applications in ASP.NET. It also has classes that represent controller factories, views, partial views, controllers, model binders, and action results.\nSystem.Web.Mvc.Ajax: It consists of classes that support Ajax scripting within an application in ASP.NET MVC.\nSystem.Web.Mvc.Html: It consists of classes that help to render HTML controls in an ASP.NET MVC application. Also, it has classes that will support partial views, validation, forms, links, and input controls. System.Web.Mvc: It includes classes and interfaces that support the MVC pattern for Web applications in ASP.NET. It also has classes that represent controller factories, views, partial views, controllers, model binders, and action results. System.Web.Mvc System.Web.Mvc.Ajax: It consists of classes that support Ajax scripting within an application in ASP.NET MVC. System.Web.Mvc.Ajax System.Web.Mvc.Html: It consists of classes that help to render HTML controls in an ASP.NET MVC application. Also, it has classes that will support partial views, validation, forms, links, and input controls. System.Web.Mvc.Html",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Explain about ASP.NET MVC life cycle.",
        "answer": "A Life cycle refers to a sequence of events or steps used for handling some kind of request or modifying the state of an application. ASP.NET MVC has two life cycles. They are: ASP.NET MVC The Application Life Cycle: The ASP.NET application life cycle begins when a request is raised by a user. It refers to the time when the application process starts running IIS(Internet Information Services) till the time it ends. This is identified as the start and end events of an application in the startup file of your application. On Application Start, the application_start() method will be executed by the webserver. All global variables will be set to default values using this method. On the Application End, the application_end() method will be executed and this will be the final part of the application. The application will be unloaded from the memory in this part. The Application Life Cycle: The ASP.NET application life cycle begins when a request is raised by a user. It refers to the time when the application process starts running IIS(Internet Information Services) till the time it ends. This is identified as the start and end events of an application in the startup file of your application. On Application Start, the application_start() method will be executed by the webserver. All global variables will be set to default values using this method. On the Application End, the application_end() method will be executed and this will be the final part of the application. The application will be unloaded from the memory in this part. The Application Life Cycle:   The Request Life Cycle: It refers to the series of events that will be executed each time when an HTTP request has been handled by the application. Routing is considered to be an entry point for each MVC application. After the request is received by the ASP.NET platform, it finds out how the request has to be handled with the help of the URL Routing Module. Modules are the components of a .NET that can be attached to the application life cycle. The routing module is helpful in matching the incoming URL(Uniform Resource Locator) to the routes that are defined in our application. All routes will be having a route handler associated with them and this route handler is considered to be an entry point to the MVC framework. The Request Life Cycle: It refers to the series of events that will be executed each time when an HTTP request has been handled by the application. Routing is considered to be an entry point for each MVC application. After the request is received by the ASP.NET platform, it finds out how the request has to be handled with the help of the URL Routing Module. Modules are the components of a .NET that can be attached to the application life cycle. The routing module is helpful in matching the incoming URL(Uniform Resource Locator) to the routes that are defined in our application. All routes will be having a route handler associated with them and this route handler is considered to be an entry point to the MVC framework. The Request Life Cycle:   The route data will be converted by the MVC framework into a concrete controller that is capable of handling the requests. The major task after the creation of a controller is Action Execution. An action invoker component will find and select the suitable Action method for invoking the controller. The next stage after the preparation of the action result is Result Execution. MVC will separate result declaration from result execution. If the result is of view, then it will find and render our view by calling the View Engine. If the result is not a view type, the action result will be executed on its own. This Result Execution will generate an original response to the actual HTTP request.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Explain RenderSection() in detail.",
        "answer": "The RenderSection() method belongs to the WebPageBase class and is used for rendering the content of the defined section. The RenderSection() method\u2019s first parameter will be the section name we wish to render at that particular location in the layout template. The second parameter will enable us for defining whether the rendering section is needed or not and this parameter is optional. If it is a \u201crequired\u201d section, then an error will be thrown by the Razor if that section has not been implemented within a view template. It returns the HTML content for rendering purposes. For example, a section named \u201cnote\u201d in a layout page can be defined as follows: @section note{\n<h1>Header Content</h1>\n} @section note{\n<h1>Header Content</h1>\n} The above-defined section can be rendered on the content page by using the below code: @RenderSection(\"note\") @RenderSection(\"note\") All sections are compulsory by default. To make the sections optional, you need to provide the value of the second parameter as a boolean value false. <div id=\"body\">\n   @RenderSection(\"note\", false)  //used for injecting the content in the defined section\n   <section class=\"content-wrapper main-content clear-fix\">\n       @RenderBody()\n   </section>\n</div> <div id=\"body\">\n   @RenderSection(\"note\", false)  //used for injecting the content in the defined section\n   <section class=\"content-wrapper main-content clear-fix\">\n       @RenderBody()\n   </section>\n</div> Using the above code, the section named \u201cnote\u201d will be rendered on the content page. Here, the RenderBody method can be used for rendering the child page/view.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. What are HTML Helper methods?",
        "answer": "Helper methods are useful in rendering the HTML in the view. These methods will generate an HTML output as a part of the view. They need less coding as it can be reused across the views, so it is advantageous over HTML elements. The different built-in helper methods are available that can be used for generating the HTML for a few most commonly used HTML elements such as dropdown list, form, checkbox, etc. Along with this, it is also possible to create our own helper methods for custom HTML generation. A few standard helper methods in MVC are given-below: BeginForm: Used for rendering the HTML form tag\nTextArea: Used for rendering the text area\nTextBox: Used for rendering the text box\nCheckBox: Used for rendering the check box\nListBox: Used for rendering the list box\nDropDownList: Used for rendering the drop-down list\nPassword: Used for rendering the textBox for password input\nHidden: Used for rendering the hidden field\nRadioButton: Used for rendering the radio button\nActionLink: Used for rendering the anchor. BeginForm: Used for rendering the HTML form tag BeginForm: TextArea: Used for rendering the text area TextArea: TextBox: Used for rendering the text box TextBox: CheckBox: Used for rendering the check box CheckBox: ListBox: Used for rendering the list box ListBox: DropDownList: Used for rendering the drop-down list DropDownList: Password: Used for rendering the textBox for password input Password: Hidden: Used for rendering the hidden field Hidden: RadioButton: Used for rendering the radio button RadioButton: ActionLink: Used for rendering the anchor. ActionLink:",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What is the use of Validation Summary?",
        "answer": "The Validation Summary helper method is useful in unordered list(UL element) generation that belongs to validation messages present in the object of Model State Dictionary.\nIt can be used for displaying all error messages related to all the fields. Also, it can be used for displaying custom error messages.\nValidationSummary will not only display the first message for any property instead it displays all error messages on the page. If you pass the first parameter value as true to ValidationSummary, only the messages having String.Empty as their name will be displayed. The Validation Summary helper method is useful in unordered list(UL element) generation that belongs to validation messages present in the object of Model State Dictionary. It can be used for displaying all error messages related to all the fields. Also, it can be used for displaying custom error messages. ValidationSummary will not only display the first message for any property instead it displays all error messages on the page. If you pass the first parameter value as true to ValidationSummary, only the messages having String.Empty as their name will be displayed. For example, the below-given code will display a heading \u201cPlease fix the problem:\u201d for a list of all the String.Empty messages. @Html.ValidationSummary(True, \"Please fix the problem:\") @Html.ValidationSummary(True, \"Please fix the problem:\")",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What is a glimpse in ASP.NET MVC?",
        "answer": "Glimpse is a web debugging and diagnostics tool that can be used with your ASP.NET or ASP.NET MVC applications for finding the information related to performance, debugging, and diagnostic. It helps you to obtain information regarding model binding, timelines, environment, routes, etc. It is possible to integrate Glimpse with insights into an application. An intuitive user interface will be provided by Glimpse for examining the performance data of an application. Glimpse adds a widget to the web pages for viewing the performance-related data as you browse through the application web pages.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. How to use multiple models to a single view in ASP.NET MVC?",
        "answer": "ASP.NET MVC will permit only a single model to be bound to each view, but there are many workarounds for this. For example, the class ExpandoObject in the ASP.NET framework is a dynamic model which will be passed to a view. Another common solution is the usage of ViewModel class(a class with several models), ViewBag(a property of the ControllerBase class which is dynamic), or ViewData(a dictionary object). It is also possible to use Tuple, JSON, and RenderAction. In the example given below, you can get to know about how to use multiple models in a single view with the help of the ViewModel class. Here, ViewModel has two properties namely Managers and Employees that acts as a model. ViewModel class: ViewModel class: public class ViewModel\n{\n   public IEnumerable<Manager> Managers { get; set; }\n   public IEnumerable<Employee> Employees { get; set; }\n} public class ViewModel\n{\n   public IEnumerable<Manager> Managers { get; set; }\n   public IEnumerable<Employee> Employees { get; set; }\n} Controller code: Controller code: public ActionResult IndexViewModel()\n{\n   ViewBag.Message = \"Welcome to my example program!\";\n   ViewModel demomodel = new ViewModel();\n   demomodel.Managers = GetManagers();\n   demomodel.Employees = GetEmployees();\n   return View(demomodel);\n} public ActionResult IndexViewModel()\n{\n   ViewBag.Message = \"Welcome to my example program!\";\n   ViewModel demomodel = new ViewModel();\n   demomodel.Managers = GetManagers();\n   demomodel.Employees = GetEmployees();\n   return View(demomodel);\n} View code: View code: @using MultipleModelInOneView;\n@model ViewModel\n@{\n   ViewBag.Title = \"Home Page\";\n}\n<h2>@ViewBag.Message</h2>\n<p><b>Manager List</b></p>\n<table>\n   <tr>\n       <th>ManagerId</th>\n       <th>Department</th>\n       <th>Name</th>\n   </tr>\n   @foreach (Manager manager in Model.Managers)\n   {\n       <tr>\n           <td>@manager.ManagerId</td>\n           <td>@manager.Department</td>\n           <td>@manager.Name</td>\n       </tr>\n   }\n</table>\n<p><b>Employee List</b></p>\n<table>\n   <tr>\n       <th>EmployeeId</th>\n       <th>Name</th>\n       <th>Designation</th>\n   </tr>\n   @foreach (Employee employee in Model.Employees)\n   {\n       <tr>\n           <td>@employee.EmployeeId</td>\n           <td>@employee.Name</td>\n           <td>@employee.Designation</td>\n       </tr>\n   }\n</table> @using MultipleModelInOneView;\n@model ViewModel\n@{\n   ViewBag.Title = \"Home Page\";\n}\n<h2>@ViewBag.Message</h2>\n<p><b>Manager List</b></p>\n<table>\n   <tr>\n       <th>ManagerId</th>\n       <th>Department</th>\n       <th>Name</th>\n   </tr>\n   @foreach (Manager manager in Model.Managers)\n   {\n       <tr>\n           <td>@manager.ManagerId</td>\n           <td>@manager.Department</td>\n           <td>@manager.Name</td>\n       </tr>\n   }\n</table>\n<p><b>Employee List</b></p>\n<table>\n   <tr>\n       <th>EmployeeId</th>\n       <th>Name</th>\n       <th>Designation</th>\n   </tr>\n   @foreach (Employee employee in Model.Employees)\n   {\n       <tr>\n           <td>@employee.EmployeeId</td>\n           <td>@employee.Name</td>\n           <td>@employee.Designation</td>\n       </tr>\n   }\n</table>",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What is the purpose of \u201dbeforeRender()\u201d, \u201cbeforeFilter()\u201d, and \u201cafterFilter()\u201d functions in Controller?",
        "answer": "beforeFilter(): This function will be executed before each action in the controller. It will inspect user permissions or check for an active session.\nbeforeRender(): This function will be executed before the rendering of the view and immediately after controller action logic. This function will not be frequently used, but it might be needed if you manually call the render() function before the end of a given action.\nafterFilter(): This function will be called after each controller action, and also after the completion of rendering. It is the last method in the controller to run. beforeFilter(): This function will be executed before each action in the controller. It will inspect user permissions or check for an active session. beforeFilter() beforeRender(): This function will be executed before the rendering of the view and immediately after controller action logic. This function will not be frequently used, but it might be needed if you manually call the render() function before the end of a given action. beforeRender() afterFilter(): This function will be called after each controller action, and also after the completion of rendering. It is the last method in the controller to run. afterFilter()",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain different development approaches with the Entity framework.",
        "answer": "Three different development approaches will be provided by the Entity framework while dealing with the database and data access layer in the application according to the need of the project. They are: Database-First Approach: This approach will be used if there is an already existing database schema. Here, context and entities will be generated for the existing database using the EDM(Entity Data Model) wizard. This approach is considered to be the best for applications that will make use of an already existing database. Database-First Approach The Database-First approach is useful in the following cases: While working with a legacy database.\nWhile working on an application that is data-centric.\nIn scenarios such as the database design is carried out by another team and the development of the application begins only when the database is ready. While working with a legacy database. While working on an application that is data-centric. In scenarios such as the database design is carried out by another team and the development of the application begins only when the database is ready.   Code-First Approach: This approach is used when the existing database is not present for your application. In this approach, you will write the entities(domain classes) and context classes, then the database will be created from these classes with the help of migration commands. Code-First Approach: This approach is considered to be the best for highly domain-centric applications and that will create the domain model classes in the beginning. Here, the database will be required only as a persistence mechanism for these newly created domain models. That implies, if a developer is following the principles of Domain-Driven Design(DDD), they will start the coding with the creation of domain classes and then the database required will be generated for persisting their data. The Code First approach is useful in the following situations: When there is an absence of logic in the database\nWhen there is no context code and auto-generated model\nIf there is no manual modification of the database When there is an absence of logic in the database When there is no context code and auto-generated model If there is no manual modification of the database   Model-First Approach: In this approach, the entities, inheritance hierarchies, and relationships will be created directly on the visual designer and then can generate context class, database script, and entities using the visual model. Model-First Approach: The Model-First approach is useful in the situation: When we want to make use of the Visual Entity Designer. When we want to make use of the Visual Entity Designer.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is a postback?",
        "answer": "A postback will occur when clients make a request for a server response from their viewing page. Consider a simple example of a form completion by the user and hitting the \u201csubmit\u201d button. In this case, the property IsPostBack will be true, so the request will be processed by the server and a response will be sent back to the client. A postback helps to refresh the entire page when a data retrieval request has been made with a callback without completely refreshing the page.",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. Consider that you are developing an application that uses forms authentication in ASP.NET MVC.",
        "answer": "A user named AdminLibrary is present in the user database. You will have the requirements as follows: - All users must be allowed to access the obtainBook() method. - Access to the modifyBook() method must be restricted for the AdminLibrary user. The controller must be implemented to meet the requirements. Which code segment will be used by you? A user named AdminLibrary is present in the user database. You will have the requirements as follows: - All users must be allowed to access the obtainBook() method. - Access to the modifyBook() method must be restricted for the AdminLibrary user. The controller must be implemented to meet the requirements. Which code segment will be used by you? [Authorize]\npublic class LibraryControllerDemo:Controller\n{\n   [Allowanonymous] \n   public actionresult obtainBook()\n   {\n       return view();\n   }\n   [Authorize(\"AdminLibrary\")]\n   public actionresult modifyBook()\n   {\n       return view();\n   }\n} [Authorize]\npublic class LibraryControllerDemo:Controller\n{\n   [Allowanonymous] \n   public actionresult obtainBook()\n   {\n       return view();\n   }\n   [Authorize(\"AdminLibrary\")]\n   public actionresult modifyBook()\n   {\n       return view();\n   }\n} [Allowanonymous] - It will allow all users to access the obtainBook() method.\n[Authorize(\"AdminLibrary\")]- It will restrict the AdminLibrary user from accessing the modifyBook() method. [Allowanonymous]  [Authorize(\"AdminLibrary\")]",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Consider you want to restrict the users from requesting the method or Action directly in the URL of the browser. How it can be done?",
        "answer": "Two of the methods to achieve the result for this scenario are: Option 1: Option 1: The ChildActionMethod will permit you for restricting access to action methods that you don\u2019t want users to directly request in the URL of the browser. [ChildActionOnly]\n  public ActionResult demoPiper()\n  {  \n       return View();\n  } [ChildActionOnly]\n  public ActionResult demoPiper()\n  {  \n       return View();\n  } Now, the demoPiper() action method cannot be directly requested by the user through the URL of the browser. Option 2: Option 2: In ASP.NET MVC, each controller\u2019s method is accessed through a URL, and in case you don\u2019t want an action created by you to be accessible through URL then you need to protect your action method with the help of the NonAction attribute provided by the MVC. [NonAction]\npublic ActionResult demoPiper()\n   {    \n       return \"demoPiper.com\";\n   } [NonAction]\npublic ActionResult demoPiper()\n   {    \n       return \"demoPiper.com\";\n   } After the demoPiper() method is declared as NonAction, if you try to access the method or action through URL, then HTTP 404 Not Found error will be returned.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Can we overload the action methods?",
        "answer": "It is possible to overload the action methods by passing the name of the method in the ActionName attribute as given below: [ActionName(\"ActionMethodExample\")]\npublic ActionResult getInfo(int id)\n{\n   return \"\";\n} [ActionName(\"ActionMethodExample\")]\npublic ActionResult getInfo(int id)\n{\n   return \"\";\n} Another action method with the same name can be declared as given below: public ActionResult getInfo()\n{\n   return \"\";\n} public ActionResult getInfo()\n{\n   return \"\";\n} Now, these two getInfo() methods can be overloaded as they are having the same function name but differ in the number of arguments. getInfo()",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How do you manage unhandled exceptions in the Action method?",
        "answer": "The HandleError attribute is used to manage the unhandled exceptions in the action method of the ASP.NET MVC application. Consider that the HandleError is not used in the application, and in case an unhandled exception is thrown by an action method then the default error page with sensitive information will be displayed to everybody. It requires enabling custom errors in the web.config file, before the usage of HandleError. <system.web>\n   <customErrors mode=\"On\" defaultRedirect=\"Error\" />\n</system.web> <system.web>\n   <customErrors mode=\"On\" defaultRedirect=\"Error\" />\n</system.web> Few properties of HandleError can be used for handling the exception. They are: ExceptionType\nMaster\nView\nOrder. ExceptionType Master View Order.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Explain how to create an ASP.NET MVC project with source code.",
        "answer": "The following steps will explain how to create an ASP.NET MVC-based web application using Visual Studio 2019 IDE. Creating a Web Project: Open the Visual Studio and click on the menu bar, then select the new option for creating a new project. You can see how to create a new project in the below-given image: Creating a Web Project:   Select Project Type: Select the project type as an ASP.NET Web Application(.NET framework) and click on the Next button. Select Project Type:   Provide Project Name: The name of the project should be provided in the following window and then click on Create button. Provide Project Name:   Select MVC Template: Now, select the MVC web template from the list of templates available, as we are implementing the MVC project. Then click on Create. Select MVC Template:   MVC Web Application Project Structure: The following image represents the project structure of the project created by us. MVC Web Application Project Structure:   You can see that the Project structure is having three folders namely Model, View, and Controller. The default controller for the created application is the HomeController. By default, the HomeController consists of the following code: // HomeController.vb\nPublic Class HomeController\n   Inherits System.Web.Mvc.Controller\n   Function Index() As ActionResult\n       Return View()\n   End Function\n   Function About() As ActionResult\n       ViewData(\"Message\") = \"Your application description page.\"\n       Return View()\n   End Function\n   Function Contact() As ActionResult\n       ViewData(\"Message\") = \"Your contact page.\"\n       Return View()\n   End Function\nEnd Class // HomeController.vb\nPublic Class HomeController\n   Inherits System.Web.Mvc.Controller\n   Function Index() As ActionResult\n       Return View()\n   End Function\n   Function About() As ActionResult\n       ViewData(\"Message\") = \"Your application description page.\"\n       Return View()\n   End Function\n   Function Contact() As ActionResult\n       ViewData(\"Message\") = \"Your contact page.\"\n       Return View()\n   End Function\nEnd Class The Index file in the views folder will be the default file for the home controller. // index.vbhtml\n@Code\n   ViewData(\"Title\") = \"Home Page\"\nEnd Code\n<div class=\"jumbotron\">\n   <h1>ASP.NET</h1>\n   <p class=\"lead\">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>\n   <p><a href=\"https://asp.net\" class=\"btn btn-primary btn-lg\">Learn more \u00bb</a></p>\n</div>\n<div class=\"row\">\n   <div class=\"col-md-4\">\n       <h2>Getting started</h2>\n       <p>\n           ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that\n           enables a clean separation of concerns and gives you full control over markup\n           for enjoyable, agile development.\n       </p>\n       <p><a class=\"btn btn-default\" href=\"https://go.microsoft.com/fwlink/?LinkId=301865\">Learn more \u00bb</a></p>\n   </div>\n   <div class=\"col-md-4\">\n       <h2>Get more libraries</h2>\n       <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>\n       <p><a class=\"btn btn-default\" href=\"https://go.microsoft.com/fwlink/?LinkId=301866\">Learn more \u00bb</a></p>\n   </div>\n   <div class=\"col-md-4\">\n       <h2>Web Hosting</h2>\n       <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>\n       <p><a class=\"btn btn-default\" href=\"https://go.microsoft.com/fwlink/?LinkId=301867\">Learn more \u00bb</a></p>\n   </div>\n</div> // index.vbhtml\n@Code\n   ViewData(\"Title\") = \"Home Page\"\nEnd Code\n<div class=\"jumbotron\">\n   <h1>ASP.NET</h1>\n   <p class=\"lead\">ASP.NET is a free web framework for building great Web sites and Web applications using HTML, CSS and JavaScript.</p>\n   <p><a href=\"https://asp.net\" class=\"btn btn-primary btn-lg\">Learn more \u00bb</a></p>\n</div>\n<div class=\"row\">\n   <div class=\"col-md-4\">\n       <h2>Getting started</h2>\n       <p>\n           ASP.NET MVC gives you a powerful, patterns-based way to build dynamic websites that\n           enables a clean separation of concerns and gives you full control over markup\n           for enjoyable, agile development.\n       </p>\n       <p><a class=\"btn btn-default\" href=\"https://go.microsoft.com/fwlink/?LinkId=301865\">Learn more \u00bb</a></p>\n   </div>\n   <div class=\"col-md-4\">\n       <h2>Get more libraries</h2>\n       <p>NuGet is a free Visual Studio extension that makes it easy to add, remove, and update libraries and tools in Visual Studio projects.</p>\n       <p><a class=\"btn btn-default\" href=\"https://go.microsoft.com/fwlink/?LinkId=301866\">Learn more \u00bb</a></p>\n   </div>\n   <div class=\"col-md-4\">\n       <h2>Web Hosting</h2>\n       <p>You can easily find a web hosting company that offers the right mix of features and price for your applications.</p>\n       <p><a class=\"btn btn-default\" href=\"https://go.microsoft.com/fwlink/?LinkId=301867\">Learn more \u00bb</a></p>\n   </div>\n</div> The above default code in the project will produce the below-given output when it is viewed in the browser: Conclusion The MVC pattern of ASP.NET has various advantages because of the separation between business logic, input logic, and user interface(UI) logic. But it has a few drawbacks such as it is completely controlled by JavaScript, HTML, and CSS, also it cannot be easily learned without any experiments. To become industry competent, apart from learning the ASP.NET MVC, one must learn the commonly used C# programming language, SQL Server, OOPs, and some of the front-end technologies such as JavaScript, HTML, JQuery, etc. Useful Interview Resources: Useful Interview Resources: .NET Interview Questions\nOOPs Interview Questions\nC# Interview Questions\nSQL Interview Questions .NET Interview Questions .NET Interview Questions OOPs Interview Questions OOPs Interview Questions C# Interview Questions C# Interview Questions SQL Interview Questions SQL Interview Questions",
        "reference": "interviewbit.com"
    }
]