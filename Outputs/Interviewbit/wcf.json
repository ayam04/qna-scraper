[
    {
        "question": "1. What do you mean by WCF service endpoints?",
        "answer": "Endpoints generally provide WCF with instructions on how to construct communication channels at runtime to send and receive messages. It provides the necessary configuration to set up the communication and to create the complete WCF service application. \nEndpoint consist of the following three elements:    Address: The address identifies the endpoint and tells potential customers where to find it. In the WCF object model, it is represented by the EndpointAddress class.\nBinding: Bindings describe how clients can communicate with an endpoint. Furthermore, it specifies what transport protocol to use, which message format to use, and which web service protocols to use for a particular endpoint. \nContract: Contracts specify what functionality the endpoint provides the client. Furthermore, it provides information about the structure of the various message contents that are intended to be used by the various operations that are exposed to specific endpoints. Address: The address identifies the endpoint and tells potential customers where to find it. In the WCF object model, it is represented by the EndpointAddress class. Address: Binding: Bindings describe how clients can communicate with an endpoint. Furthermore, it specifies what transport protocol to use, which message format to use, and which web service protocols to use for a particular endpoint. Binding: Contract: Contracts specify what functionality the endpoint provides the client. Furthermore, it provides information about the structure of the various message contents that are intended to be used by the various operations that are exposed to specific endpoints. Contract:  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What are the benefits of WCF?",
        "answer": "WCF has the following benefits: Performs better than other Microsoft specifications.   \nSecure communication, data transmission, or even speed optimization can be achieved. \nDecrease the latency by exchanging data in binary format.  \nComparatively more reliable and secure than ASMX Web services.  \nUsing the security model and altering the binding does not require a lot of coding changes.  \nA few changes to the configuration file will meet your needs.   \nEnsures interoperability between services.   \nMultiple hosting options are available such as IIS, WAS, self-Hosting. Performs better than other Microsoft specifications. Secure communication, data transmission, or even speed optimization can be achieved. Decrease the latency by exchanging data in binary format. Comparatively more reliable and secure than ASMX Web services. Using the security model and altering the binding does not require a lot of coding changes. A few changes to the configuration file will meet your needs. Ensures interoperability between services. Multiple hosting options are available such as IIS, WAS, self-Hosting.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Write some WCF features?",
        "answer": "WCF features include: Offers support for service-oriented architecture.  \nSupports multiple transport methods and encoding options.\nProvide support for multiple message patterns.\nSimpler configuration files.\nProvide UDP endpoint support.\nProvides support for publishing service metadata using industry-standard formats such as XML Schema, WS-Policy, WSDL, etc.\nProvides support for data contracts.\nSupport the creation of durable messages.\nProvide Reliable and queued messages.\nSupport for Ajax and Rest. \nUses modern interface standards for web service interoperability. Offers support for service-oriented architecture. Supports multiple transport methods and encoding options. Provide support for multiple message patterns. Simpler configuration files. Provide UDP endpoint support. Provides support for publishing service metadata using industry-standard formats such as XML Schema, WS-Policy, WSDL, etc. Provides support for data contracts. Support the creation of durable messages. Provide Reliable and queued messages. Support for Ajax and Rest. Uses modern interface standards for web service interoperability.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Write the core components of WCF?",
        "answer": "The three core components of WCF are as follows:   Service class: In the runtime layer, you will find the behaviors that occur only when a service is actually running, i.e., the runtime behaviors of the service. Throttling is used to control the number of messages processed that can be altered if the service grows to a preset limit. \nEndpoint: WCF Service makes available a set of endpoints. All Endpoints are portals through which users are able to communicate with the outside world. Endpoints are composed of three components: Address, Binding, and Contract.  \nHosting Environment: It is the host application that is responsible for controlling the service's lifetime. Self-Hosting or management of services can be done by the existing hosting process. Service class: In the runtime layer, you will find the behaviors that occur only when a service is actually running, i.e., the runtime behaviors of the service. Throttling is used to control the number of messages processed that can be altered if the service grows to a preset limit. Service class Endpoint: WCF Service makes available a set of endpoints. All Endpoints are portals through which users are able to communicate with the outside world. Endpoints are composed of three components: Address, Binding, and Contract. Endpoint Hosting Environment: It is the host application that is responsible for controlling the service's lifetime. Self-Hosting or management of services can be done by the existing hosting process. Hosting Environmen",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Write the difference between WCF and Web Services",
        "answer": "WCF Web Services\nDataContractSerializer is used by WCF to determine which fields are serialized into XML. XMLSerializer is used by Web services that do not determine which fields are serialized into XML. \nHTTP, TCP, and MSMQ are other protocols supported by WCF that can be extended to provide a comprehensive solution, ensure transactions, and provide a reliable experience.  HTTP and HTTPS during communication is the only protocol supported by Web services.\nMTOM, XML, and Binary message encoding are supported. XML and MTOM (Message Transmission Optimization Mechanism) message encoding is supported.  \nHosting options include IIS, Windows activation services, self-hosting, and Windows services.  Hosting is only possible in IIS. \nCompared to Web Services, WCF is faster and more reliable. WCF is faster and more reliable than Web Services.\nWCF services are defined by the ServiceContract and OperationContract attributes.  Web services are defined by WebService and WebMethod attributes.\nRESTFUL service is supported, but with limitations.  It is perfect for building RESTFUL services. WCF Web Services\nDataContractSerializer is used by WCF to determine which fields are serialized into XML. XMLSerializer is used by Web services that do not determine which fields are serialized into XML. \nHTTP, TCP, and MSMQ are other protocols supported by WCF that can be extended to provide a comprehensive solution, ensure transactions, and provide a reliable experience.  HTTP and HTTPS during communication is the only protocol supported by Web services.\nMTOM, XML, and Binary message encoding are supported. XML and MTOM (Message Transmission Optimization Mechanism) message encoding is supported.  \nHosting options include IIS, Windows activation services, self-hosting, and Windows services.  Hosting is only possible in IIS. \nCompared to Web Services, WCF is faster and more reliable. WCF is faster and more reliable than Web Services.\nWCF services are defined by the ServiceContract and OperationContract attributes.  Web services are defined by WebService and WebMethod attributes.\nRESTFUL service is supported, but with limitations.  It is perfect for building RESTFUL services. WCF Web Services WCF Web Services WCF Web Services DataContractSerializer is used by WCF to determine which fields are serialized into XML. XMLSerializer is used by Web services that do not determine which fields are serialized into XML. \nHTTP, TCP, and MSMQ are other protocols supported by WCF that can be extended to provide a comprehensive solution, ensure transactions, and provide a reliable experience.  HTTP and HTTPS during communication is the only protocol supported by Web services.\nMTOM, XML, and Binary message encoding are supported. XML and MTOM (Message Transmission Optimization Mechanism) message encoding is supported.  \nHosting options include IIS, Windows activation services, self-hosting, and Windows services.  Hosting is only possible in IIS. \nCompared to Web Services, WCF is faster and more reliable. WCF is faster and more reliable than Web Services.\nWCF services are defined by the ServiceContract and OperationContract attributes.  Web services are defined by WebService and WebMethod attributes.\nRESTFUL service is supported, but with limitations.  It is perfect for building RESTFUL services. DataContractSerializer is used by WCF to determine which fields are serialized into XML. XMLSerializer is used by Web services that do not determine which fields are serialized into XML. DataContractSerializer is used by WCF to determine which fields are serialized into XML. XMLSerializer is used by Web services that do not determine which fields are serialized into XML. HTTP, TCP, and MSMQ are other protocols supported by WCF that can be extended to provide a comprehensive solution, ensure transactions, and provide a reliable experience.  HTTP and HTTPS during communication is the only protocol supported by Web services. HTTP, TCP, and MSMQ are other protocols supported by WCF that can be extended to provide a comprehensive solution, ensure transactions, and provide a reliable experience. HTTP and HTTPS during communication is the only protocol supported by Web services. MTOM, XML, and Binary message encoding are supported. XML and MTOM (Message Transmission Optimization Mechanism) message encoding is supported. MTOM, XML, and Binary message encoding are supported. XML and MTOM (Message Transmission Optimization Mechanism) message encoding is supported. Hosting options include IIS, Windows activation services, self-hosting, and Windows services.  Hosting is only possible in IIS. Hosting options include IIS, Windows activation services, self-hosting, and Windows services. Hosting is only possible in IIS. Compared to Web Services, WCF is faster and more reliable. WCF is faster and more reliable than Web Services. Compared to Web Services, WCF is faster and more reliable. WCF is faster and more reliable than Web Services. WCF services are defined by the ServiceContract and OperationContract attributes.  Web services are defined by WebService and WebMethod attributes. WCF services are defined by the ServiceContract and OperationContract attributes. Web services are defined by WebService and WebMethod attributes. RESTFUL service is supported, but with limitations.  It is perfect for building RESTFUL services. RESTFUL service is supported, but with limitations. It is perfect for building RESTFUL services.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Explain the WCF Contract.",
        "answer": "Basically, WCF contracts are standardized, platform-neutral descriptions of what the service does.  Contracts mainly serve to enable clients and services to agree on what sort of operations and structures they will use for communication. One of the components of a WCF endpoint is the contract, which contains information about the service. In addition, the contract helps serialize service information.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What are the types of contracts in WCF?",
        "answer": "The WCF includes five types of contracts as follows: Service contract: It describes what operations the service exposes to the outside world. This is the interface to the WCF service and it lets the outside world know what the service can do. Service contract: It describes what operations the service exposes to the outside world. This is the interface to the WCF service and it lets the outside world know what the service can do. Service contract: Example: Example: [ServiceContract]\ninterface IMyContract\n{\n[OperationContract]\nstring MyMethod();\n}\n\nclass MyService : IMyContract\n{\npublic string MyMethod()\n{\nreturn \"Namaste\";\n} [ServiceContract]\ninterface IMyContract\n{\n[OperationContract]\nstring MyMethod();\n}\n\nclass MyService : IMyContract\n{\npublic string MyMethod()\n{\nreturn \"Namaste\";\n} Operation contract: It specifies the method by which client and server exchange information. It also states what functionality the client will receive, such as adding, subtracting, etc. Operation contract: It specifies the method by which client and server exchange information. It also states what functionality the client will receive, such as adding, subtracting, etc. Operation contract: Example: Example: [ServiceContract]    \ninterface ICustomer    \n{   \n   [OperationContract]    \n   Response AddNew(string customername);    \n   Response Delete(int customerID);    \n} [ServiceContract]    \ninterface ICustomer    \n{   \n   [OperationContract]    \n   Response AddNew(string customername);    \n   Response Delete(int customerID);    \n} Data contract: It is a formal agreement between the server and the client that involves high-level security for the exchange of data between the two. Format, structure, and type of data exchanged between parties are defined by it. Serialization and deserialization of data are also described. Data contract: It is a formal agreement between the server and the client that involves high-level security for the exchange of data between the two. Format, structure, and type of data exchanged between parties are defined by it. Serialization and deserialization of data are also described. Data contract:   Example: Example: [DataContract]\nclass Person\n{\n    [DataMember]\n    public string ID;\n    [DataMember]\n    public string Name;\n}\n\n   [ServiceContract]\n   interface IMyContract\n{\n      [OperationContract]\n      Person GetPerson(int ID);\n} [DataContract]\nclass Person\n{\n    [DataMember]\n    public string ID;\n    [DataMember]\n    public string Name;\n}\n\n   [ServiceContract]\n   interface IMyContract\n{\n      [OperationContract]\n      Person GetPerson(int ID);\n} Message contract: A message contract specifies the structure of the message and how the serialization should be performed. With it, you control everything from the content of the SOAP header to the structure of the SOAP body. Message contract: A message contract specifies the structure of the message and how the serialization should be performed. With it, you control everything from the content of the SOAP header to the structure of the SOAP body. Message contract:   Example: Example: [ServiceContract]    \ninterface ICuboidService    \n{  \n   [OperationContract]    \n   [FaultContract(typeof(CuboidFaultException))]    \n   CuboidDetailResponse CalculateDetails1(CuboidInfoRequest cInfo);    \n     \n   [OperationContract]    \n   [FaultContract(typeof(CuboidFaultException))]    \n   CuboidDetail CalculateDetails2(CuboidInfo cInfo);    \n    \n   [OperationContract]    \n   [FaultContract(typeof(CuboidFaultException))]    \n   CuboidDetail CalculateDetails3(int nID, CuboidDimension cInfo);    \n} [ServiceContract]    \ninterface ICuboidService    \n{  \n   [OperationContract]    \n   [FaultContract(typeof(CuboidFaultException))]    \n   CuboidDetailResponse CalculateDetails1(CuboidInfoRequest cInfo);    \n     \n   [OperationContract]    \n   [FaultContract(typeof(CuboidFaultException))]    \n   CuboidDetail CalculateDetails2(CuboidInfo cInfo);    \n    \n   [OperationContract]    \n   [FaultContract(typeof(CuboidFaultException))]    \n   CuboidDetail CalculateDetails3(int nID, CuboidDimension cInfo);    \n} Fault contract: It generally specifies how errors or defaults that are raised by the service are handled and propagated to clients. There can be zero or more fault contracts associated with an operation contract. Fault contract: It generally specifies how errors or defaults that are raised by the service are handled and propagated to clients. There can be zero or more fault contracts associated with an operation contract. Fault contract: Example: Example: [ServiceContract]\ninterface IMyContract\n{\n   [FaultContract(typeof(MyFaultContract1))]\n   [FaultContract(typeof(MyFaultContract2))]\n   [OperationContract]\n   string MyMethod();\n\n   [OperationContract]\n   string MyShow();\n} [ServiceContract]\ninterface IMyContract\n{\n   [FaultContract(typeof(MyFaultContract1))]\n   [FaultContract(typeof(MyFaultContract2))]\n   [OperationContract]\n   string MyMethod();\n\n   [OperationContract]\n   string MyShow();\n}",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Write different ways of hosting a WCF service.",
        "answer": "The following are the different methods of hosting WCF services:   Self-Hosting: It refers to hosting a WCF service within a managed application. The lifecycle of Host processes is always managed by developers. In order to implement self-hosting, we must include the System.Service.Model.ServiceHost namespace. \nWindows Services Hosting: It refers to hosting a WCF service within Windows service. WCF Service lifecycle can be controlled by Service Control Manager. It can, however, be hosted on any version of Windows. \nIIS (Internet Information Service Hosting):  Hosting our service under IIS allows us to use all of its features, such as process recycling, ideal shutdown, etc. HTTP transport is the only mechanism supported by IIS-hosted services. \nWAS (Windows Activation Service Hosting): It is a generalization of IIS features that supports transport protocols other than HTTP. Through the listener adapter interface, WCF communicates activation requests received over non-HTTP protocols supported by WCF, like TCP, named pipes, and Message Queuing. Self-Hosting: It refers to hosting a WCF service within a managed application. The lifecycle of Host processes is always managed by developers. In order to implement self-hosting, we must include the System.Service.Model.ServiceHost namespace. Self-Hosting: Windows Services Hosting: It refers to hosting a WCF service within Windows service. WCF Service lifecycle can be controlled by Service Control Manager. It can, however, be hosted on any version of Windows. Windows Services Hosting: IIS (Internet Information Service Hosting):  Hosting our service under IIS allows us to use all of its features, such as process recycling, ideal shutdown, etc. HTTP transport is the only mechanism supported by IIS-hosted services. IIS (Internet Information Service Hosting): WAS (Windows Activation Service Hosting): It is a generalization of IIS features that supports transport protocols other than HTTP. Through the listener adapter interface, WCF communicates activation requests received over non-HTTP protocols supported by WCF, like TCP, named pipes, and Message Queuing. WAS (Windows Activation Service Hosting):",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain Concurrency management.",
        "answer": "In WCF, concurrency issues can occur when multiple threads access the same resource simultaneously. One request can be handled at a time by the WCF service. With WCF concurrency management, you can control multiple threads within an InstanceContext at any given time using System.ServiceModel.ServiceBehaviorAttribute. It also helps you to configure the number of service instances that can serve multiple concurrent requests. \nWCF 4.0 supports three types of concurrency:  Single Concurrency Mode: In this scenario, the WCF service object is accessible to one request at a time. As a result, only one request can be processed at any given time.\nMultiple Concurrency Mode:  In this scenario, the WCF service object can handle multiple requests at any given time in this scenario. In simple words, multiple threads are spawned on the WCF server object to processing requests at the same time.\nReentrant Concurrency Mode: As described here, the WCF service object is accessible to only one request thread, but this thread may exit the WCF service to invoke another WCF service or may utilize a callback to invoke a WCF client and then reenter without deadlock. Single Concurrency Mode: In this scenario, the WCF service object is accessible to one request at a time. As a result, only one request can be processed at any given time. Single Concurrency Mode: Multiple Concurrency Mode:  In this scenario, the WCF service object can handle multiple requests at any given time in this scenario. In simple words, multiple threads are spawned on the WCF server object to processing requests at the same time. Multiple Concurrency Mode: Reentrant Concurrency Mode: As described here, the WCF service object is accessible to only one request thread, but this thread may exit the WCF service to invoke another WCF service or may utilize a callback to invoke a WCF client and then reenter without deadlock. Reentrant Concurrency Mode:",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Why should one use WCF services?",
        "answer": "Here are some reasons to use WCF services:   Easy to use, and is flexible as well.  \nWindows activation service, IIS, and self-hosting options are available. \nProvides support for multiple protocols including HTTP, WS-HTTP, TCP, P2P, MSMQ, and named pipes.   \nUse remote service to exchange messages in binary format using TCP protocol for maximizing the performance.  \nUses chat to communicate with people or to exchange data. \nTo monitor the service, it provides data such as a traffic report.   \nSecurity services that process the transaction.   \nUsed to exchange messages in XML format via an HTTP protocol in order to maintain interoperability.  \nReal-time data exchange using secure networks. Easy to use, and is flexible as well. Windows activation service, IIS, and self-hosting options are available. Provides support for multiple protocols including HTTP, WS-HTTP, TCP, P2P, MSMQ, and named pipes. Use remote service to exchange messages in binary format using TCP protocol for maximizing the performance. Uses chat to communicate with people or to exchange data. To monitor the service, it provides data such as a traffic report. Security services that process the transaction. Used to exchange messages in XML format via an HTTP protocol in order to maintain interoperability. Real-time data exchange using secure networks.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Name the isolation levels that are provided in WCF",
        "answer": "WCF offers the following isolation or transaction levels: Read Uncommitted: This is also called the Dirty isolation level. It states that the data can be both read and modified during the transaction. This is the lowest level of isolation.  \nRead Committed: It is commonly referred to as the default. It states that data may be modified, but it may not be read during the transaction. \nRepeatable Read: This stops the use of dirt reads and non-repeatable reads. It states that Data can be read but not modified during the transaction. However, new data can be added.  \nSerializable: It is also considered a restrictive level. It states that data can be read, but there are no modifications or additions of new data allowed until the transaction has been completed. Read Uncommitted: This is also called the Dirty isolation level. It states that the data can be both read and modified during the transaction. This is the lowest level of isolation. Read Uncommitted: Read Committed: It is commonly referred to as the default. It states that data may be modified, but it may not be read during the transaction. Read Committed: Repeatable Read: This stops the use of dirt reads and non-repeatable reads. It states that Data can be read but not modified during the transaction. However, new data can be added. Repeatable Read: Serializable: It is also considered a restrictive level. It states that data can be read, but there are no modifications or additions of new data allowed until the transaction has been completed. Serializable:",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What do you mean by service proxy?",
        "answer": "WCF proxy classes enable client applications to communicate with services by sending and receiving messages. Communication involves exchanging messages in the form of requests and responses. This will include details such as the Service Path, Protocol Details, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain Tracing in WCF.",
        "answer": "Using WCF tracing, you can diagnose data, fault messages, and analyze them. Tracing offers better insight into the application's behavior and flows than debugging. It gives you a detailed account of all application components including faults, code exceptions, system events, and operation calls. By default, WCF tracing is not enabled, therefore it must be enabled by configuring it with the switch value and tracelistener. \nWCF Tracing basically involves the following four steps:   ",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What do you mean by Security Implementation?",
        "answer": "Since, WCF's support various protocols, such as TCP, HTTP, and MSMQ, the user must ensure that the necessary steps are taken to safeguard messages, and also establish security policies for authenticating and authorizing calls. WCF provides an easy and rich configuration environment for secure messaging. WCF supports the following security models: Message Security: This application uses the WS-Security specification to encrypt messages. Messages are now securely encrypted using certificates and can be sent over any port using plain HTTP.  \nTransport Security: This is a protocol that implements security, so it only works point to point. Since security is protocol-dependent, security support is limited and confined to the standard protocol security limitations.\nTransportWithMessageCredential: It can be referred to as a mixture of both Message and Transport security implementation. Credentials are sent with the message, and the transport layer provides message protection and server authentication. Message Security: This application uses the WS-Security specification to encrypt messages. Messages are now securely encrypted using certificates and can be sent over any port using plain HTTP. Message Security: Transport Security: This is a protocol that implements security, so it only works point to point. Since security is protocol-dependent, security support is limited and confined to the standard protocol security limitations. Transport Security: TransportWithMessageCredential: It can be referred to as a mixture of both Message and Transport security implementation. Credentials are sent with the message, and the transport layer provides message protection and server authentication. TransportWithMessageCredential:",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. Name three different types of transaction managers supported by WCF.",
        "answer": "Three different types of transaction managers supported by WCF include: Light Weight \nWS- Atomic Transaction \nOLE Transaction Light Weight WS- Atomic Transaction OLE Transaction",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. What do you mean by SOA?",
        "answer": "An SOA (Service-oriented architecture) is an architecture style that enables different applications to be organized as Services. In essence, it determines how communication is possible between two computing entities and how one entity performs functions on behalf of another entity. Rather than being a specific technology or language, SOA is a way to design systems. The purpose of this architecture model is to enhance an enterprise's efficiency, agility, and productivity.",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. Name the different ways to create a WCF client.",
        "answer": "There are two different ways to call a WCF service or create a WCF client: WCF Proxy \nChannel factory WCF Proxy Channel factory",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. What do you mean by Streaming?",
        "answer": "Images, .pdf files, and large documents can all be transferred using WCF.  Streaming is the best and most common method of achieving this. Streaming allows the recipient of a message (either a client or a service) to begin processing the message before it has completed receiving the entire message. With streamed transfers, there's no need to keep large memory buffers in the background, so scalability is improved.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What do you mean by Instance Management?",
        "answer": "WCF uses an Instance Management approach to bind a set of messages (client requests) to a set of service instances. The need for Instance Management is crucial since the demands of applications vary too much in terms of scalability, throughput, transactions, queues, and performance. Therefore, one solution does not fit all applications.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Name different instance modes in WCF.",
        "answer": "WCF provides three ways to control WCF instance creation as follows:   Per Call: A new instance will be created for each request from the same client or a new one, which means that every request will be a new request. Although this mode is most efficient in terms of memory, a session still needs to be maintained.  \nPer Session: A new instance would be created for each new client session, and the scope of that object would correspond to the scope of that session.  \nSingle Instance: For each service object, only one instance will be created for all requests, regardless of whether they are coming from the same client or not. This is the least efficient instance mode in terms of memory usage. Per Call: A new instance will be created for each request from the same client or a new one, which means that every request will be a new request. Although this mode is most efficient in terms of memory, a session still needs to be maintained. Per Call: Per Session: A new instance would be created for each new client session, and the scope of that object would correspond to the scope of that session. Per Session: Single Instance: For each service object, only one instance will be created for all requests, regardless of whether they are coming from the same client or not. This is the least efficient instance mode in terms of memory usage. Single Instance:",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Name the namespace that is especially required to have access to the WCF service.",
        "answer": "To access WCF service, \u201cSystem.ServiceModel\u201d is used. It provides classes that relate to service models. The namespace contains the types necessary for building WCF services and client applications.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What do you mean by WCF Binding?",
        "answer": "WCF bindings consist of a number of binding elements, which specify how service and client will communicate. Clients use bindings based on their needs. Therefore, binding is basically a way for clients and services to communicate in accordance with the client's needs. It supports a variety of protocol types that can be used for communication with clients and different types of encodings for transmitting data over the internet.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What are the different types of binding available in WCF?",
        "answer": "There are several types of binding available in WCF, including: Basic HTTP Binding \nNetTcp Binding \nWSHttp Binding \nNetMsmq Binding \nNetNamedPipeBinding \nWSDualHttp Binding \nMsmqIntegration Binding \nNetMsmq Binding \nWSFederationHttp Binding \nNetPeerTcp Binding Basic HTTP Binding NetTcp Binding WSHttp Binding NetMsmq Binding NetNamedPipeBinding WSDualHttp Binding MsmqIntegration Binding NetMsmq Binding WSFederationHttp Binding NetPeerTcp Binding",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. Explain Data Contract Serializer.",
        "answer": "WCF uses the DataContractSerializer class as its default serializer. Other serialization purposes can be served by this serializer. Using the DataContractAttribute and DataMemberAttribute attributes, we can also explicitly create a data contract.   Example: \nDataContractSerializer dataContractSerializer = new  DataContractSerializer(typeof(MyTestClassType)); Example: ",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What are the different address formats of WCF?",
        "answer": "Different address format of WCF include: HTTP Address Format: http:// localhost: \nTCP Address Format: net.tcp://localhost: \nMSMQ Address Format: net.msmq://localhost: HTTP Address Format: http:// localhost: TCP Address Format: net.tcp://localhost: MSMQ Address Format: net.msmq://localhost:",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain WCF throttling.",
        "answer": "Throttling is derived from the keyword throughput, which means work that is performed at specific intervals of time. We can limit the number of instances or sessions created at the application level using the properties like maxConcurrentCalls, maxConcurrentInstances, and maxConcurrentSessions provided by WCF throttling. Performance is boosted by using it.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What are transactions in WCF?",
        "answer": "In WCF, a transaction is a set of operations that follow certain properties, collectively referred to as ACID. In the case of a single failure, the entire system falls apart. A transaction occurs when an order is placed online. Atomic and long-running transactions are two types of transactions.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What is the goal of transport-level security in WCF?",
        "answer": "In WCF, the transport security mechanisms are dependent on the binding and transport that is used. It ensures the message passes securely from the client to the service over a transport medium. This point-to-point security is established using SSL (Secure Socket Layer). Integrity, privacy, and authentication are the goals of transport-level security.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. Explain MEPs in WCF.",
        "answer": "MEP (Message Exchange Pattern) is a way of communicating between clients and servers in WCF. MEP is one of the greatest features of WCF. The three types of MEPs supported by WCF are as follows: Request-Reply: Request-Reply is WCF's default communication pattern. \nOne-way: Using this pattern means you don't expect to receive a response back from the service after it performs a certain operation.  \nDuplex: Duplex is a two-way communication way. The duplex MEP is applicable when the client initiates a long-running process with the service and the service requires notification. Request-Reply: Request-Reply is WCF's default communication pattern. Request-Reply: One-way: Using this pattern means you don't expect to receive a response back from the service after it performs a certain operation. One-way: Duplex: Duplex is a two-way communication way. The duplex MEP is applicable when the client initiates a long-running process with the service and the service requires notification. Duplex:",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain MSMQ.",
        "answer": "In essence, MSMQ (Microsoft Messaging Queue) is a technology used for asynchronous communications. MSMQ is also capable of inter-process communication. MSMQ is very useful when two processes wish to communicate in a \"Fire and Forget\" manner.  MSMQ is basically developed by Microsoft and is deployed in the Windows operating system. It facilitates communication across heterogeneous networks and systems that might be a bit offline from time to time.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What do you mean by WCF data service?",
        "answer": "WCF Data Services is basically a platform for what Microsoft calls Data Services. Tabular data can be exposed as a set of REST APIs, allowing standard HTTP verbs such as GET, POST, PUT, and DELETE to be used. The OData protocol is used by WCF Data Services for addressing and updating resources.",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What are different ways of exception handling in WCF?",
        "answer": "For troubleshooting unexpected problems in applications, exception handling is essential. Exception handling is a feature of object programming languages and it is an error that occurs during execution. In WCF, there are three ways to handle exceptions:   returnUnknownExceptionsAsFaults: Debugging Mode  \nFaultException: Best Option  \nIErrorHandler: Only when Fault cannot handle the exception returnUnknownExceptionsAsFaults:  FaultException:  IErrorHandler:",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. Explain the term impersonation.",
        "answer": "Services often use a technique called impersonation to restrict client access to a service domain's resources. In WCF, impersonation is disabled by default, and services are accessed via the process identity of the WCF service.",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. Name different transport schemas that are supported by WCF.",
        "answer": "Different transport schemas supported by WCF include: HTTP\nTCP\nPeer network\nIPC\nMSMQ HTTP TCP Peer network IPC MSMQ Conclusion: WCF is a unified programming model designed by Microsoft to build service-oriented applications. The framework allows developers to develop secure, reliable, transacted solutions which can be integrated across platforms and interoperated with existing ones. The above-given questions are crucial for understanding WCF (Windows communication foundation). You will also find an overview of WCF's important features, pros, and cons, which will help you prepare better. The goal is to help you get your dream job in your next interview. Recommended Resources: Web Services Interview Web Services Interview Web API Interview Web API Interview",
        "reference": "interviewbit.com"
    }
]