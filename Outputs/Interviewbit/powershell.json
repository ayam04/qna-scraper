[
    {
        "question": "1. Briefly explain what is PowerShell",
        "answer": "PowerShell is a cross-platform task automation solution composed of a scripting language, command-line shell, and a configuration management framework. PowerShell operates on Windows, Linux, and macOS. In 2006, when PowerShell was released, this effective tool effectively substituted Command Prompt as the default way to ensue automatic batch processes and develop personalized system management tools. Multiple system administrators, such as MSPs (managed services providers) depend on Powershell's 130 plus command-line tools to simplify and scale tasks in remote and systems. Its abilities have been integrated into several other interfaces. It has always been crucial for MSPs to comprehend how PowerShell functions, what it is employed for, and how to make management tasks automatic, which will optimise time and effort.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Explain briefly what are Help and comments in PowerShell.",
        "answer": "PowerShell allows the accumulation of help topics for modules, scripts, and individual commands. To look at all the help topics, you can use the Get-Help command. While importing a module into a session, PowerShell transfers the help topics for that module automatically. In case of no help topics for a module, the Get-Help command demonstrates autogenerated help. There are three types of help content that exist in PowerShell: external help, comment-based help, and updatable help. Comment-based help indicates comments contained with a script or command for Get-Help to read. External help allows the author to describe help content in an external XML file documented in XAML. Updatable help utilizes external help but allows users to download the new help content with the Update-Help command.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What are language constructs?",
        "answer": "PowerShell offers a number of language constructs that allow you to manage the flow of your script and let you make decisions about what it should do. A few of the language constructs have conditionals, switches, loops, and variables. Conditionals: This language construct is utilized to assess a conditional expression. If the conditional expression is true, a script block is accomplished: Conditionals: This language construct is utilized to assess a conditional expression. If the conditional expression is true, a script block is accomplished: Conditionals: if ( $i -eq 1)\n{\n   ## Do something\n}\nElse\n{\n   ## Do something\n} if ( $i -eq 1)\n{\n   ## Do something\n}\nElse\n{\n   ## Do something\n} Switch: The switch statement lets you deliver a variable and a list of potential values. If the value matches the variable, then its script block is completed.. Switch: The switch statement lets you deliver a variable and a list of potential values. If the value matches the variable, then its script block is completed.. Switch: switch  ($i)  {\n    0\n    {\n       Write-Host \u201cI is 0\u201d\n    }\n    1\n    {\n       Write-Host \u201cI is 0\u201d\n     }\n     Default\n     {\n       Write-Host \u201cI is 0\u201d\n      }\n  } switch  ($i)  {\n    0\n    {\n       Write-Host \u201cI is 0\u201d\n    }\n    1\n    {\n       Write-Host \u201cI is 0\u201d\n     }\n     Default\n     {\n       Write-Host \u201cI is 0\u201d\n      }\n  } Loops: What while statement does is repeat a block of code  as long as the below mentioned conditional expression is working: Loops: What while statement does is repeat a block of code  as long as the below mentioned conditional expression is working: Loops: while ($i -eq 0)  {\n         ## do something\n} while ($i -eq 0)  {\n         ## do something\n} The do loop is identical to the while loop. The only distinction is PowerShell runs the do loop at the end of the loop. do  {\n     ## do something\n  }  while  ($i -lt 0) do  {\n     ## do something\n  }  while  ($i -lt 0) When you employ a foreach loop, PowerShell repeats the code for every item cited in the script. $array = ( \u2018item1\u2019 , \u2018item2\u2019 , \u2018item3\u2019)\n  foreach ($item in $array)  {\n} $array = ( \u2018item1\u2019 , \u2018item2\u2019 , \u2018item3\u2019)\n  foreach ($item in $array)  {\n} Make use of a for loop to execute statements constantly till a condition is met. for ($i = 0; $i -lt 5; $i++)\n  {\n     $i\n   } for ($i = 0; $i -lt 5; $i++)\n  {\n     $i\n   }",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Is Windows PowerShell similar to Command Prompt?",
        "answer": "Though Windows Powershell 1.0 was released as a substitute for Command Prompt, it\u2019s incorrect to assume PowerShell as just a recent version of the classic command-line interpreter. As a matter of fact, both programs still live on Windows 10, although PowerShell is much more effective. Some intermediate-level consumers may select to utilize Command Prompt if they are already acquainted with the language\u2014its interface performs simple DOS commands, and for some consumers, that is enough. But the many benefits of PowerShell make it a more engaging tool for MSPs who desire true control over a network. By offering cmdlets that can go into registry management and WMI, PowerShell provides you access to additional system administration tasks than Command Prompt, particularly as PowerShell is not only meant for Windows but it is an open-source mechanism for Linux and Mac OS X as well. SolarWinds\u00ae Remote Monitoring & Management (RMM) delivers all the benefits of PowerShell without needing MSPs to even utilize PowerShell scripts. With the help of RMM, you can employ an easy drag-and-drop object to effortlessly devise a broad range of automated functions. This type of automation is required for busy MSPs eyeing effective, scalable business practices. RMM\u2019s user-friendly interface allows you to leverage all the advantages of Windows PowerShell, faster.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Mention the types of Powershell Scopes.",
        "answer": "The four types of PowerShell scopes are Global, Local, Script, Private. Global:\nThe scope that is in effect while PowerShell runs or when you start a new session or run space.\nVariables and functions that are included when PowerShell begins have been designed in the global scope. This contains preference variables and automatic variables.\nThis also comprises functions, variables, aliases that are within your PowerShell profile.\nLocal:\n   The current scope. The local scope can be the global scope or any other scope.\nScript:\nThe scope is built while a script file runs. Just the commands in the script operate in the script scope. To the commands in a script, the script scope is the local scope.\nPrivate:\nYou cannot see the items in private scope outside of the current scope. You can utilize the private scope to build a private version of an item having the exact name in another scope. Global:\nThe scope that is in effect while PowerShell runs or when you start a new session or run space.\nVariables and functions that are included when PowerShell begins have been designed in the global scope. This contains preference variables and automatic variables.\nThis also comprises functions, variables, aliases that are within your PowerShell profile. Global The scope that is in effect while PowerShell runs or when you start a new session or run space.\nVariables and functions that are included when PowerShell begins have been designed in the global scope. This contains preference variables and automatic variables.\nThis also comprises functions, variables, aliases that are within your PowerShell profile. The scope that is in effect while PowerShell runs or when you start a new session or run space. Variables and functions that are included when PowerShell begins have been designed in the global scope. This contains preference variables and automatic variables. This also comprises functions, variables, aliases that are within your PowerShell profile. Local:\n   The current scope. The local scope can be the global scope or any other scope. Local The current scope. The local scope can be the global scope or any other scope. The current scope. The local scope can be the global scope or any other scope. Script:\nThe scope is built while a script file runs. Just the commands in the script operate in the script scope. To the commands in a script, the script scope is the local scope. Script: The scope is built while a script file runs. Just the commands in the script operate in the script scope. To the commands in a script, the script scope is the local scope. The scope is built while a script file runs. Just the commands in the script operate in the script scope. To the commands in a script, the script scope is the local scope. Private:\nYou cannot see the items in private scope outside of the current scope. You can utilize the private scope to build a private version of an item having the exact name in another scope. Private You cannot see the items in private scope outside of the current scope. You can utilize the private scope to build a private version of an item having the exact name in another scope. You cannot see the items in private scope outside of the current scope. You can utilize the private scope to build a private version of an item having the exact name in another scope.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Explain the difference between CIM (Common Information Model) vs WMI (Windows Management Instrumentation).",
        "answer": "CIM Old WMI New WMI\nCIM is a Vendor-neutral and industry-standard designed way of manifestation of management information. Old WMI is Microsoft\u2019s initial incorporation of CIM. New WMI was released alongside WMF v3 in the year 2012 and it was compliant to the latest CIM standards.\nIt is designed by another company named the DMTF It is designed by Microsoft It is designed by Microsoft as well.\nIt not available It is available in PowerShell v1 It is available in PowerShell v3.\nIt employs  WSMan which is a standard developed by DMTF. It used DCOM and RPCs Remote Procedure Calls.    It employs WSMan and no more DCOM errors are possible with this.\nIt can work on any platform. Works on Windows only. Works on Windows only.\nIt owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for its purpose. It has RPC port- 135 for use It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for use. CIM Old WMI New WMI\nCIM is a Vendor-neutral and industry-standard designed way of manifestation of management information. Old WMI is Microsoft\u2019s initial incorporation of CIM. New WMI was released alongside WMF v3 in the year 2012 and it was compliant to the latest CIM standards.\nIt is designed by another company named the DMTF It is designed by Microsoft It is designed by Microsoft as well.\nIt not available It is available in PowerShell v1 It is available in PowerShell v3.\nIt employs  WSMan which is a standard developed by DMTF. It used DCOM and RPCs Remote Procedure Calls.    It employs WSMan and no more DCOM errors are possible with this.\nIt can work on any platform. Works on Windows only. Works on Windows only.\nIt owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for its purpose. It has RPC port- 135 for use It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for use. CIM Old WMI New WMI CIM Old WMI New WMI CIM Old WMI New WMI CIM is a Vendor-neutral and industry-standard designed way of manifestation of management information. Old WMI is Microsoft\u2019s initial incorporation of CIM. New WMI was released alongside WMF v3 in the year 2012 and it was compliant to the latest CIM standards.\nIt is designed by another company named the DMTF It is designed by Microsoft It is designed by Microsoft as well.\nIt not available It is available in PowerShell v1 It is available in PowerShell v3.\nIt employs  WSMan which is a standard developed by DMTF. It used DCOM and RPCs Remote Procedure Calls.    It employs WSMan and no more DCOM errors are possible with this.\nIt can work on any platform. Works on Windows only. Works on Windows only.\nIt owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for its purpose. It has RPC port- 135 for use It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for use. CIM is a Vendor-neutral and industry-standard designed way of manifestation of management information. Old WMI is Microsoft\u2019s initial incorporation of CIM. New WMI was released alongside WMF v3 in the year 2012 and it was compliant to the latest CIM standards. CIM is a Vendor-neutral and industry-standard designed way of manifestation of management information. Old WMI is Microsoft\u2019s initial incorporation of CIM. New WMI was released alongside WMF v3 in the year 2012 and it was compliant to the latest CIM standards. It is designed by another company named the DMTF It is designed by Microsoft It is designed by Microsoft as well. It is designed by another company named the DMTF It is designed by Microsoft It is designed by Microsoft as well. It not available It is available in PowerShell v1 It is available in PowerShell v3. It not available It is available in PowerShell v1 It is available in PowerShell v3. It employs  WSMan which is a standard developed by DMTF. It used DCOM and RPCs Remote Procedure Calls.    It employs WSMan and no more DCOM errors are possible with this. It employs  WSMan which is a standard developed by DMTF. It used DCOM and RPCs Remote Procedure Calls. It employs WSMan and no more DCOM errors are possible with this. It can work on any platform. Works on Windows only. Works on Windows only. It can work on any platform. Works on Windows only. Works on Windows only. It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for its purpose. It has RPC port- 135 for use It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for use. It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for its purpose. It has RPC port- 135 for use It owns WSMan Port \u2013 5985 (HTTP) and 5986(HTTPS) for use.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. Distinguish between the notion of WMI between old and new ideas.",
        "answer": "Old WMI Old WMI Employs the old-style native code providers and a repository.\nAccessible only on Windows as mentioned.\nIt has been more or less deprecated which means it\u2019s is not focused on further advancement or development but can be used.. Employs the old-style native code providers and a repository. Accessible only on Windows as mentioned. It has been more or less deprecated which means it\u2019s is not focused on further advancement or development but can be used.. New WMI New WMI Backs old-style native code providers and a repository, along with new-style MI providers.\nAccessible only on Windows as mentioned. It has a stateless relationship with the remote machine.\nThe main attraction of the new WMI is that it employs WSMan and no more DCOM errors are possible with this. Backs old-style native code providers and a repository, along with new-style MI providers. Accessible only on Windows as mentioned. It has a stateless relationship with the remote machine. The main attraction of the new WMI is that it employs WSMan and no more DCOM errors are possible with this.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Explain how would you place a registry value with PowerShell?",
        "answer": "Registry values are properties of keys and, as such, cannot be directly browsed. This requires us to understand that there are no registry-specific cmdlets, so we have to utilize the registry provider and Set-ItemProperty. You can also utilize the New-ItemProperty cmdlet to build the registry entry and its value and then make use of Set-ItemProperty to modify the value. The registry has been an essential part of Windows forever, thus this is hardly area-specific knowledge.",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Mention the two important differences between Bash and PowerShell?",
        "answer": "This question is a great opportunity to get an understanding of the candidate's knowledge of PowerShell core concepts and his/her favourite PowerShell features. For instance, one of the most essential distinctions between PowerShell and bash is that PowerShell is object-oriented whereas bash is text-oriented. PowerShell treats input and output as an object and Bash always considers input and output as a text structure. PowerShell's user interface is a graphical command-line interface CLI. whereas Bash's user interface shell is a text-based command-line interface. PowerShell can run on any version of Windows ranging from Windows 97 to Windows 10. Bash is specifically designed for Linux and Unix operating systems from the first day.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Why should developers use PowerShell?",
        "answer": "PowerShell is a famous instrument for many MSPs as its scalability allows to streamline management tasks and develop insights into instruments, specifically over medium or large networks. Here\u2019s how PowerShell's usefulness can change your workflow: Automate time-consuming tasks: With the help of Automate time-consuming tasks provided by PowerShell, you don\u2019t have to complete the identical task again and again or even take the time for manual configuration. For example, you can employ cmdlets like Get-Command to look for other cmdlets, Get-Help to find these cmdlets\u2019 syntax and benefits, and Invoke-Command to drive a common script remotely or locally even with batch control.\nOffer network-wide workarounds: Making use of PowerShell allows you to get around the limitations of software or program, particularly on a business-wide scale. For example, PowerShell can be employed to reconfigure the default settings of a program over an entire network. This could be helpful if a company wishes to roll out a certain protocol to all its customers\u2014say, convincing users to employ two-factor authentication (2FA) or modify their password every other month.\nTake your endeavours across various devices: PowerShell serves as a lifesaver if your script requires to be run across countless systems, especially if some of them are remote devices.If you\u2019re attempting to incorporate a solution on quite a few devices or servers at once, you don\u2019t want to log in individually into devices. In minutes PowerShell can assist you to collect information about numerous devices, as compared to the endless time it would require to scan each device manually. Once you allow PowerShell remoting, you\u2019ll be able to enable your scripts to reach several machines at once, letting you install updates, settings configuration, compile information, and more importantly, cutting down hours of work and travel time.\nThe benefit of command-line interfaces: The added advantage of command-line interfaces such as PowerShell is the access they give you to a system's file system. PowerShell constructs the Windows Registry, hard-to-find data in files, and digital signature certificates visible even though it is housed on many systems. This information can then be exported for the purpose of reporting. Automate time-consuming tasks: With the help of Automate time-consuming tasks provided by PowerShell, you don\u2019t have to complete the identical task again and again or even take the time for manual configuration. For example, you can employ cmdlets like Get-Command to look for other cmdlets, Get-Help to find these cmdlets\u2019 syntax and benefits, and Invoke-Command to drive a common script remotely or locally even with batch control. Automate time-consuming tasks Offer network-wide workarounds: Making use of PowerShell allows you to get around the limitations of software or program, particularly on a business-wide scale. For example, PowerShell can be employed to reconfigure the default settings of a program over an entire network. This could be helpful if a company wishes to roll out a certain protocol to all its customers\u2014say, convincing users to employ two-factor authentication (2FA) or modify their password every other month. Offer network-wide workarounds: Take your endeavours across various devices: PowerShell serves as a lifesaver if your script requires to be run across countless systems, especially if some of them are remote devices.If you\u2019re attempting to incorporate a solution on quite a few devices or servers at once, you don\u2019t want to log in individually into devices. In minutes PowerShell can assist you to collect information about numerous devices, as compared to the endless time it would require to scan each device manually. Once you allow PowerShell remoting, you\u2019ll be able to enable your scripts to reach several machines at once, letting you install updates, settings configuration, compile information, and more importantly, cutting down hours of work and travel time. Take your endeavours across various devices: The benefit of command-line interfaces: The added advantage of command-line interfaces such as PowerShell is the access they give you to a system's file system. PowerShell constructs the Windows Registry, hard-to-find data in files, and digital signature certificates visible even though it is housed on many systems. This information can then be exported for the purpose of reporting. The benefit of command-line interfaces: Ultimately, as every Windows 10 computer should have pre-installed it, it\u2019s not challenging to understand PowerShell. As an MSP, comprehending PowerShell not only places you a step ahead of your peers but offers you a broad range of useful capabilities. If you are aware of scripting cmdlets for PowerShell, it\u2019s that much uncomplicated for you to heighten your efforts and deliver precise, adjustable, and quick service to customers.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What are PowerShell modules?",
        "answer": "A PowerShell module is a conjoined portion of PowerShell functions or grouped code. All PowerShell cmdlets and providers are incorporated by a module or a snap-in. The receivers of these modules can add the commands included in the module to their PowerShell sessions to use them like built-in commands. The most uncomplicated method to build a PowerShell module is to save the script as a PSM1 file. A PowerShell module includes 4 fundamental elements: A PSM file, being the module;\nHelp files or scripts required by the module;\nA manifest file that defines the module\nA directory that accumulates the content. A PSM file, being the module; Help files or scripts required by the module; A manifest file that defines the module A directory that accumulates the content. There are four types of PowerShell modules: Script module: A PSM1 file that includes different functions to allow admins to execute management functions, import, and export.\nBinary module: A .NET framework assembly (DLL file) that includes saved code. Programmers generally utilize a binary module to build cmdlets with strong features not easily done with a PowerShell script.\nManifest module: A module (PSM1) file with an associated PSD1 file (manifest).\nDynamic module: A dynamic module is dynamically built on demand by a script. It isn't reserved or loaded to persistent storage. Script module: A PSM1 file that includes different functions to allow admins to execute management functions, import, and export. Script module: Binary module: A .NET framework assembly (DLL file) that includes saved code. Programmers generally utilize a binary module to build cmdlets with strong features not easily done with a PowerShell script. Binary module: Manifest module: A module (PSM1) file with an associated PSD1 file (manifest). Manifest module Dynamic module: A dynamic module is dynamically built on demand by a script. It isn't reserved or loaded to persistent storage. Dynamic module:",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. Define PowerShell Integrated Scripting Environment (ISE).",
        "answer": "PowerShell ISE(Integrated Scripting Environment), released by Microsoft in PowerShell version 2.0, is a PowerShell host application utilized to document, test, and debug scripts or compose commands in a Windows graphical user interface (GUI). PowerShell ISE is packed with numerous components, including syntax colouring, multiline editing, context-sensitive assistance, and tab completion. PowerShell ISE contains refined characteristics that Windows users are familiar with. For example, a customer can emphasize and copy a part of a PowerShell command with the help of a mouse or can opt for the Shift + Arrow hotkey combination. Also, the user can paste the content at any place in the editor window. Another beneficial attribute is the capacity to keep various versions of a command in the editor and execute commands you require in the PowerShell ISE. A command is directly launched by the F5 key from the editor. To run a certain line, choose it and press F8. The context-sensitive help exhibits matching cmdlets when the customer begins to enter a command. A command add-on displays a list of cmdlets to opt from. PowerShell ISE enables tabs to work on numerous administrative tasks. PowerShell ISE facilitates speedy switching from the CLI to scripting mode.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. What are the key PowerShell features?",
        "answer": "Microsoft implements updates and the latest features separately for the PowerShell version, but let us look at the list of the primary features and characteristics of PowerShell:   Discoverability: Consumers can uncover PowerShell's attributes with the help of cmdlets including Get-Command, which constructs a list of all the commands, like cmdlets and functions, accessible on a particular computer. Parameters can be utilized to limit the scope of the search.\nRemote commands: Admins can execute remote operations on one or numerous computers, taking the benefit of technologies like WS-Management and Windows Management Instrumentation. For example, the WS-Management protocol, allows the customer to execute PowerShell scripts and commands on remote computers.\nPipelining: Owing to PowerShell, commands can be connected together via the pipe operator, represented as |. This approach permits the output from a particular command to turn into the input for the subsequent command in the pipeline sequence. The PowerShell pipeline allows objects, instead of flowing from one cmdlet to another and text strings.\nTab expansion: Tab expansion is an execution of auto-completion, which executes the cmdlets, properties, and parameter names by pushing the Tab key once. Discoverability: Consumers can uncover PowerShell's attributes with the help of cmdlets including Get-Command, which constructs a list of all the commands, like cmdlets and functions, accessible on a particular computer. Parameters can be utilized to limit the scope of the search. Discoverability: Remote commands: Admins can execute remote operations on one or numerous computers, taking the benefit of technologies like WS-Management and Windows Management Instrumentation. For example, the WS-Management protocol, allows the customer to execute PowerShell scripts and commands on remote computers. Remote commands: Pipelining: Owing to PowerShell, commands can be connected together via the pipe operator, represented as |. This approach permits the output from a particular command to turn into the input for the subsequent command in the pipeline sequence. The PowerShell pipeline allows objects, instead of flowing from one cmdlet to another and text strings. Pipelining: Tab expansion: Tab expansion is an execution of auto-completion, which executes the cmdlets, properties, and parameter names by pushing the Tab key once. Tab expansion:",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What are cmdlets?",
        "answer": "  A cmdlet is a lightweight command that is utilised in the PowerShell environment. The PowerShell runtime conjures these cmdlets in the context of automation scripts that are given at the command line. You can see the entire inventory of these commands by executing \u201cGet-Command-Type Cmdlet\u201d in PowerShell. Cmdlets can be USED individually, but they are more effective when conjoined\u2014cmdlets can be used within scripts, then package scripts into more exhaustive modules. These are effective mechanisms largely as PowerShell is created on an underlying .NET framework, which lets PowerShell work more like a programming language rather than an easy command-line program. The program makes use of objects, which are a sort of manifestation of properties (attributes) or methods (instructions). With the help of PowerShell, you can utilize \u201cpipes\u201d that let you pass output of cmdlet to another cmdlet\u2019s input as an object, letting numerous cmdlets operate jointly to configure the identical data. This is the basic change that has made PowerShell such a strong tool for Windows configuration.",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What does PowerShell do?",
        "answer": "Microsoft created PowerShell to make system tasks automatic, like batch processing, to build system management mechanisms for generally implemented processes. The PowerShell language is quite similar to Perl and delivers different ways to automate tasks: One way is with cmdlets, which are miniature in nature .NET classes emerge as system commands;\nAnother way is with scripts, these are an amalgamation of cmdlets and associated logic;\nIt can be done with executables, these are stand-alone mechanisms\nAlso with the embodiment of standard .NET classes. One way is with cmdlets, which are miniature in nature .NET classes emerge as system commands; Another way is with scripts, these are an amalgamation of cmdlets and associated logic; It can be done with executables, these are stand-alone mechanisms Also with the embodiment of standard .NET classes. Admins can employ PowerShell to manage a broad range of activities like it can pull information on Operating Systems, as the particular version and service pack levels. \"PowerShell providers\" are programs that enable data included in specialized data stocks available at the command line. Those data stores contain Windows file system drives. PowerShell also acts as the substitute for Microsoft's Command Prompt, which goes way back to DOS. For example, Microsoft turned PowerShell the default command-line interface (CLI) for Windows 10 as of build 14791. PowerShell's function as a command-line shell is how most consumers become familiarized with the technology.",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. Define variables in PowerShell.",
        "answer": "A variable is a unit of memory where values are stored. In PowerShell, variables are depicted by text strings that begin with a dollar sign ($), such as $a, $process, or $my_var. PowerShell variables are way more effective as those can be mapped to underlying classes in the framework of .NET. PowerShell considers variables as .NET objects, which implies they can save data and control data in numerous ways. Variable names in PowerShell start with a dollar sign and include a mix of numbers, letters, symbols, and spaces. For example, $var=\"HELLO\" saves the string HELLO in the $var variable. Variables can also possess various scopes, including global, local, script, private, and numbered scopes.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Explain PowerShell\u2019s comparison operators?",
        "answer": "Comparison Operators compares the value in PowerShell. There are four kinds of comparison operators that are used, namely equality, match, containment and replace. In PowerShell, one of the essential comparison operators is \u2013eq that is utilized inplace of \u201c=\u201d sign for declaring variables. Similarly, there are other operators like \u2013ne for \u201cnot equal\u201d , -gt ( greater than ) or \u2013lt (less than). Conclusion PowerShell is securely incorporated into nearly all of Microsoft\u2019s products. There are specific actions in popular products like Microsoft 365 and Server 2016 that cannot be accomplished with a GUI and can solely be accomplished with PowerShell. It is 100% required for certain tasks, the capability to automate with PowerShell makes comprehending it a worthwhile skill for numerous IT professionals. Once you begin to understand, all that can be accomplished with PowerShell, it unlocks a whole new set of capabilities. From fundamental automation to advanced scripting, PowerShell can deliver a lot of opportunities for streamlining tasks and saving time. The above-mentioned question and answers will help ace the interview.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What is pipeline in PowerShell?",
        "answer": "The concept of linking together commands with pipeline operator ( | ) is termed as a pipeline in PowerShell. That indicates the outcome from the first command is further sent down the pipeline as input to the second command for processing and the outcome of the second command is sent down to the pipeline as input to the third command and it goes on.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Tell about PowerShell\u2019s Get-ServiceStatus function?",
        "answer": "The functions of Get-ServiceStatus allow filtering of window services. PowerShell documents the services that are both \u2018Running\u2019, and \u2018Stopped\u2019 during scripting. By default, when Get-Service is operated without parameters, all the local computer's services are returned. You can control this cmdlet to obtain only certain services by selecting the service name or the display name of the services, or you can pipe service objects to this cmdlet. Example 1: Get all services on the computer\nThis example fetches all of the services on the computer. It acts as though you typed Get-Service *. The default display displays the status, service name, and display name of each service.\nGet-Service\nExample 2: Get services that commence with a search string\nThis example recovers services with service names that start with WMI (Windows Management Instrumentation).\nGet-Service \"wmi*\" Example 1: Get all services on the computer\nThis example fetches all of the services on the computer. It acts as though you typed Get-Service *. The default display displays the status, service name, and display name of each service.\nGet-Service   Example 2: Get services that commence with a search string\nThis example recovers services with service names that start with WMI (Windows Management Instrumentation).\nGet-Service \"wmi*\"  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Describe what is the benefit of Array in PowerShell?",
        "answer": "The usage of Array in PowerShell is to execute a script against remote computers. To build an array, you have to construct a variable and assign the array. Arrays are defined by \u201c@\u201dsymbol, they are portrayed as hashtable but are not followed by curly braces. To utilize an array in a program, you must call a variable to reference the array, and you can define the kind of array the variable can reference. Mentioned below is the syntax for declaring an array variable: $A = 1, 2, 3, 4\nOr\n$A = 1..4 $A = 1, 2, 3, 4\nOr\n$A = 1..4 Note \u2212 By default type of object of the array is System.Object. GetType() method returns the type of the array. Type can be passed. Note \u2212 By default type of object of the array is System.Object. GetType() method returns the type of the array. Type can be passed. Example: The mentioned code snippets are examples of this syntax \u2212 [int32[]]$intA = 1500,2230,3350,4000\n$A = 1, 2, 3, 4\n$A.getType() [int32[]]$intA = 1500,2230,3350,4000\n$A = 1, 2, 3, 4\n$A.getType()",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What is the benefit of the hashtable in PowerShell?",
        "answer": "A hash table is also called the dictionary. It is a collection that lets you accumulate data in a \u201ckey-value\u201d pair association. The \u201ckey\u201d and \u201cvalue\u201d can be of any data and length. To display a hash table you will have to make use of @ followed by curly braces. The syntax of a hash table is as follows: PowerShellCopy\n@{ <name> = <value>; [<name> = <value> ] ...} PowerShellCopy\n@{ <name> = <value>; [<name> = <value> ] ...}",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What is your take on Variable Interpolation?",
        "answer": "When a variable is incorporated into double-quoted strings, then PowerShell transforms the name of that variable via its value. Generally, this feature in PowerShell is emanated as variable interpolation. It provides a more readable, easier-to-read, and convenient syntax to create a formatted string.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Describe what is Powershell Get-command?",
        "answer": "The Get-Command cmdlet acquires all commands that are performed on the computer, such as functions, cmdlets, aliases, applications, filters, and scripts. Get-Command fetches the commands from PowerShell commands and modules that were imported from other sessions. Example: Get commands in the current session Example: Get commands in the current session This command utilizes the ListImported parameter to obtain only the commands in the current session. PowerShellCopy\nGet-Command -ListImported PowerShellCopy\nGet-Command -ListImported",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Do you make PowerShell scripts to deploy components in SharePoint?",
        "answer": "If you construct a web part with the help of VS 2010 then, you can deploy it utilizing cntrl+f5. To activate the web part component you can document a PowerShell script (.ps1) and run it after deployment.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Why is scripting debugging important?",
        "answer": "Scripting debugging is an essential attribute to comprehend how to use PowerShell. Concentrate on how scripting debugging can enhance your workflow and the entire project. Scripting debugging is necessary as it permits IT professionals to quickly scan the scripts, functions, expressions, and commands while executing. This allows us to determine possible errors, maintain model scripts and improve performance.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Describe what is Powershell Pipeline used for?",
        "answer": "PowerShell pipeline is utilized for combining two statements like when the output of a statement becomes the input of the second statement. For example, Command-1 | Command-2 | Command-3 Command-1 | Command-2 | Command-3 In this example, the objects that Command-1 emits are sent to Command-2. Command-2 processes the objects and sends them to Command-3. Command-3 processes the objects and sends them down the pipeline. As there are no more commands in the pipeline, the results are displayed at the console.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. Describe the various types of execution policies in PowerShell?",
        "answer": "PowerShell utilizes execution policies to regulate how it loads configuration files and runs scripts. Implementation of these policies only happens on Windows platforms. The PowerShell execution policies are mentioned below:   AllSigned:\nThe scripts can run.\nNeeds that all scripts and configuration files be signed by a reliable publisher, which includes scripts that you compose on the local computer.\nEncourages you before executing scripts from publishers that are still not categorized as untrusted or trusted.\nRisks running signed, but vicious, scripts.\nBypass:\nNothing is stopped and there are no alerts or prompts generated.\nThe Bypass execution policy is created for configurations in which a PowerShell script is constructed into a larger application or for configurations in which PowerShell is the basis for a program that possesses its security model.\nDefault:\nRestricted for Windows clients.\nRemoteSigned for Windows servers.\nRemoteSigned:\nThe default execution policy for the Windows system.\nScripts can run.\nA digital signature from an authorized publisher is required on internet downloaded scripts and configuration files. It contains email and instant messaging programs.\nIt doesn't need digital signatures on scripts that are not downloaded from the internet and composed on the local computer.\nIt executes internet downloaded scripts that are not signed if the scripts are unblocked, like utilizing the Unblock-File cmdlet.\nRisks executing unsigned scripts from sources except for the internet and signed scripts that could be malicious in nature.\nRestricted:\nThe default implementation policy for Windows client computers.\nAllows individual commands, but does not permit scripts.\nStops operating all script files, including configuration files (.ps1xml), PowerShell profiles (.ps1), and module script files (.psm1) formatting\nUndefined:\nThere is no implementation policy specified in the current scope.\nThe execution policy is Restricted for Windows clients and RemoteSigned for Windows Server if the implementation policy in all scopes is Undefined.\nUnrestricted:\nThe default execution policy for non-Windows systems and cannot be modified.\nUnsigned scripts can operate. There is a chance of running malicious scripts.\nAlerts the customer before running scripts and configuration files that do not belong from the Local intranet zone. AllSigned:\nThe scripts can run.\nNeeds that all scripts and configuration files be signed by a reliable publisher, which includes scripts that you compose on the local computer.\nEncourages you before executing scripts from publishers that are still not categorized as untrusted or trusted.\nRisks running signed, but vicious, scripts. AllSigned The scripts can run.\nNeeds that all scripts and configuration files be signed by a reliable publisher, which includes scripts that you compose on the local computer.\nEncourages you before executing scripts from publishers that are still not categorized as untrusted or trusted.\nRisks running signed, but vicious, scripts. The scripts can run. Needs that all scripts and configuration files be signed by a reliable publisher, which includes scripts that you compose on the local computer. Encourages you before executing scripts from publishers that are still not categorized as untrusted or trusted. Risks running signed, but vicious, scripts. Bypass:\nNothing is stopped and there are no alerts or prompts generated.\nThe Bypass execution policy is created for configurations in which a PowerShell script is constructed into a larger application or for configurations in which PowerShell is the basis for a program that possesses its security model. Bypass Nothing is stopped and there are no alerts or prompts generated.\nThe Bypass execution policy is created for configurations in which a PowerShell script is constructed into a larger application or for configurations in which PowerShell is the basis for a program that possesses its security model. Nothing is stopped and there are no alerts or prompts generated. The Bypass execution policy is created for configurations in which a PowerShell script is constructed into a larger application or for configurations in which PowerShell is the basis for a program that possesses its security model. Default:\nRestricted for Windows clients.\nRemoteSigned for Windows servers. Default: Restricted for Windows clients.\nRemoteSigned for Windows servers. Restricted for Windows clients. RemoteSigned for Windows servers. RemoteSigned:\nThe default execution policy for the Windows system.\nScripts can run.\nA digital signature from an authorized publisher is required on internet downloaded scripts and configuration files. It contains email and instant messaging programs.\nIt doesn't need digital signatures on scripts that are not downloaded from the internet and composed on the local computer.\nIt executes internet downloaded scripts that are not signed if the scripts are unblocked, like utilizing the Unblock-File cmdlet.\nRisks executing unsigned scripts from sources except for the internet and signed scripts that could be malicious in nature. RemoteSigned: The default execution policy for the Windows system.\nScripts can run.\nA digital signature from an authorized publisher is required on internet downloaded scripts and configuration files. It contains email and instant messaging programs.\nIt doesn't need digital signatures on scripts that are not downloaded from the internet and composed on the local computer.\nIt executes internet downloaded scripts that are not signed if the scripts are unblocked, like utilizing the Unblock-File cmdlet.\nRisks executing unsigned scripts from sources except for the internet and signed scripts that could be malicious in nature. The default execution policy for the Windows system. Scripts can run. A digital signature from an authorized publisher is required on internet downloaded scripts and configuration files. It contains email and instant messaging programs. It doesn't need digital signatures on scripts that are not downloaded from the internet and composed on the local computer. It executes internet downloaded scripts that are not signed if the scripts are unblocked, like utilizing the Unblock-File cmdlet. Risks executing unsigned scripts from sources except for the internet and signed scripts that could be malicious in nature. Restricted:\nThe default implementation policy for Windows client computers.\nAllows individual commands, but does not permit scripts.\nStops operating all script files, including configuration files (.ps1xml), PowerShell profiles (.ps1), and module script files (.psm1) formatting Restricted: The default implementation policy for Windows client computers.\nAllows individual commands, but does not permit scripts.\nStops operating all script files, including configuration files (.ps1xml), PowerShell profiles (.ps1), and module script files (.psm1) formatting The default implementation policy for Windows client computers. Allows individual commands, but does not permit scripts. Stops operating all script files, including configuration files (.ps1xml), PowerShell profiles (.ps1), and module script files (.psm1) formatting Undefined:\nThere is no implementation policy specified in the current scope.\nThe execution policy is Restricted for Windows clients and RemoteSigned for Windows Server if the implementation policy in all scopes is Undefined. Undefined: There is no implementation policy specified in the current scope.\nThe execution policy is Restricted for Windows clients and RemoteSigned for Windows Server if the implementation policy in all scopes is Undefined. There is no implementation policy specified in the current scope. The execution policy is Restricted for Windows clients and RemoteSigned for Windows Server if the implementation policy in all scopes is Undefined. Unrestricted:\nThe default execution policy for non-Windows systems and cannot be modified.\nUnsigned scripts can operate. There is a chance of running malicious scripts.\nAlerts the customer before running scripts and configuration files that do not belong from the Local intranet zone. Unrestricted The default execution policy for non-Windows systems and cannot be modified.\nUnsigned scripts can operate. There is a chance of running malicious scripts.\nAlerts the customer before running scripts and configuration files that do not belong from the Local intranet zone. The default execution policy for non-Windows systems and cannot be modified. Unsigned scripts can operate. There is a chance of running malicious scripts. Alerts the customer before running scripts and configuration files that do not belong from the Local intranet zone.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain the importance of PowerShell brackets?",
        "answer": "Parenthesis Brackets(): These brackets are utilized for required arguments.\nSquare Brackets[]: These sorts of brackets are used to specify the optional items.\nBraces Brackets{}: These kinds of brackets are utilized in blocked statements. Parenthesis Brackets(): These brackets are utilized for required arguments. Parenthesis Brackets() Square Brackets[]: These sorts of brackets are used to specify the optional items. Square Brackets[] Braces Brackets{}: These kinds of brackets are utilized in blocked statements. Braces Brackets{}",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What are Automatic variables?",
        "answer": "The automatic variables are defined as those variables that save store state information for PowerShell. These variables will include the details of a customer and the system, default and runtime variables, and PowerShell settings. These variables can be designed and handled by Windows PowerShell. A few of the very popular Automatic Variables are mentioned below: $: This variable includes the last token available in the last line that is received by the session.\n$?: This variable may include the completion status of the last operation. If the last operation succeeded, its value is TRUE and FALSE if it has failed.\n$^: It may include the first token of the last line obtained by the session.\n$Args: Includes a collection of the undeclared parameters or parameter values. These are handed over to a script, script block, or function. When you construct a function, you can display the parameters by making use of the param keyword or by incorporating a comma-separated list of parameters in parentheses just after the function name.\n$Error: This variable includes an array of error objects that represent the most recent errors. The current mistake is the first error object in the array ($Error[0]).\n$ForEach: This variable includes the enumerator (not the resulting values) of a ForEach loop. You can make use of the properties and processes of enumerators on the value of the $ForEach variable. This variable lives only while the ForEach loop is operating; it gets deleted post the completion of the loop.\n$Home \u2013 This variable includes the full path of the customer\u2019s home directory. This variable is the counterpart of the %homedrive%%homepath% environment variables, commonly known as C:\\Users<UserName>.\n$OFS \u2013 $OFS is a remarkable variable that saves a string (Series of characters) that you wish to utilize as an output field separator. Employ this variable when you are transforming an array into a string. By default, the value of $OFS is \u201d \u201c, but you can modify the value of $OFS in your session, by just typing $OFS=\u201d<value>\u201d. If you are anticipating the default value of \u201d \u201d in your module, script, or configuration output, be mindful that the $OFS default value has not been modified anywhere in your code. $: This variable includes the last token available in the last line that is received by the session. $ $?: This variable may include the completion status of the last operation. If the last operation succeeded, its value is TRUE and FALSE if it has failed. $? $^: It may include the first token of the last line obtained by the session. $^ $Args: Includes a collection of the undeclared parameters or parameter values. These are handed over to a script, script block, or function. When you construct a function, you can display the parameters by making use of the param keyword or by incorporating a comma-separated list of parameters in parentheses just after the function name. $Args: $Error: This variable includes an array of error objects that represent the most recent errors. The current mistake is the first error object in the array ($Error[0]). $Error: $ForEach: This variable includes the enumerator (not the resulting values) of a ForEach loop. You can make use of the properties and processes of enumerators on the value of the $ForEach variable. This variable lives only while the ForEach loop is operating; it gets deleted post the completion of the loop.\n$Home \u2013 This variable includes the full path of the customer\u2019s home directory. This variable is the counterpart of the %homedrive%%homepath% environment variables, commonly known as C:\\Users<UserName>. $ForEach  $Home $OFS \u2013 $OFS is a remarkable variable that saves a string (Series of characters) that you wish to utilize as an output field separator. Employ this variable when you are transforming an array into a string. By default, the value of $OFS is \u201d \u201c, but you can modify the value of $OFS in your session, by just typing $OFS=\u201d<value>\u201d. If you are anticipating the default value of \u201d \u201d in your module, script, or configuration output, be mindful that the $OFS default value has not been modified anywhere in your code. $OFS",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. Explain what is a \"while loop\" in PowerShell?",
        "answer": "IT professionals make use of loops when they require to complete a block of commands numerous times. Example: An entry-controlled loop, a \"while loop\" runs commands consecutively as long as the provided condition is true. A bunch of IT professionals prefers to employ \"while loops\" rather than \"for statements\" as the syntax is less complex.\" Example:   The following example prints the values from 1 to 5 using the while loop: PS C:\\> while($count -le 5)\n>> {\n>> echo $count\n>> $count +=1\n>> } PS C:\\> while($count -le 5) >> { >> echo $count >> $count +=1 >> } Output:\n1\n2\n3\n4\n5 Output:      In this instance, the condition ($count is less than equal to 5) is true while $count = 1, 2, 3, 4, 5. Every time through the loop, the value of a variable $count is incremented by 1 utilizing the (+=) arithmetic assignment operator. When $count equals 6, the condition statement assesses to false, and the loop exits.",
        "reference": "interviewbit.com"
    }
]