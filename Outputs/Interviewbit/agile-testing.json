[
    {
        "question": "1. What is Agile testing?",
        "answer": "Agile software development and provides fast feedback to ensure better and faster project outcomes. The basis for Agile Testing is continuous integration between development and testing from the beginning of the project. As opposed to being sequential (e.g. executed only after coding is complete), Agile testing is continuous. The product is enhanced with every new release, resulting in seamless management and higher satisfaction for customers. Agile testing focuses on finding and fixing errors as soon as possible, rather than waiting until the end of the project, and reducing the costs associated with fixing errors. By delivering high-quality products on time, this approach also results in a customer-centric approach.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What does the term Taskboard mean in Agile?",
        "answer": "Basically, task boards are physical displays in which the user stories that make up the sprint backlog are displayed, along with their constituent tasks. Task boards are used by individuals, teams, and organizations to represent the work being done and to track its progress towards completion. Since they are so flexible, task boards are becoming a classic tool for project management. As illustrated below, it includes tasks in progress, completed tasks, as well as new upcoming tasks that may have been added to the backlog.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Explain Continuous testing.",
        "answer": "Continuous testing (CT) is a methodology used in software development, where applications are continuously tested during the entire software development life cycle (SDLC) to determine whether a new release entails risks. CT is designed to provide critical feedback earlier on in the software development life cycle and to enable high-quality and faster deliveries. It extends and develops test automation strategies to address the increasing complexity and pace of development and delivery of modern applications.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Why is it important to conduct daily stand-up meetings?",
        "answer": "As a team's huddle, daily stand-ups are the basis for Agile project management. Often referred to as the daily scrum, it keeps everyone on top of the team's progress and landscape by focusing on \"we\". Agile teams have daily standup meetings as part of their daily activities. They set a mutually convenient time for team meetings and meet every day to stay on top of all the pertinent information for improving project coordination.   This facilitates effective communication between team members. Integrating effective communication concepts with face-to-face interaction into the team's culture fosters greater agility.\nMoreover, it aids in ascertaining roles and responsibilities in a concise and clear manner and prevents silos throughout the organization. Each team member is aware of the other's work and progress continuously, allowing transparency about project\u2019s progress.\nBy holding daily stand-ups, companies can adapt to changes and address issues that arise during the day-to-day operations of an organization or during the course of a project.\nIt leads to a sense of shared goals, which is a key element to the team since, without shared objectives, there is only a group of individuals working together.\nFurthermore, regular team meetings facilitate knowledge transfer within the organization. This facilitates effective communication between team members. Integrating effective communication concepts with face-to-face interaction into the team's culture fosters greater agility. Moreover, it aids in ascertaining roles and responsibilities in a concise and clear manner and prevents silos throughout the organization. Each team member is aware of the other's work and progress continuously, allowing transparency about project\u2019s progress. By holding daily stand-ups, companies can adapt to changes and address issues that arise during the day-to-day operations of an organization or during the course of a project. It leads to a sense of shared goals, which is a key element to the team since, without shared objectives, there is only a group of individuals working together. Furthermore, regular team meetings facilitate knowledge transfer within the organization.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Explain Epic, User Stories, and Tasks.",
        "answer": "Epic: An epic is usually a large story that is difficult to accomplish in a single sprint. An epic is usually accomplished over the course of months. Epics are usually very broad in scope, lack details, and must be broken into smaller user stories before the story can be developed. Epic is often viewed as being the pinnacle of the work hierarchy. In cases where multiple epics share a common goal, they can be grouped into a still-broader business objective, called a theme.\nUser Story: Basically, a User Story is a list of what needs to be done within a project. It's similar to a to-do list and is owned by the Scrum Product Owner. It provides the Scrum team with enough to get a sense of what the finished product should be like and to calculate an estimate for completion.\nTasks: Each epic is followed by a set of user stories, and for these stories to become workable components, the Scrum team needs to identify and sort tasks. Depending on the complexity of the task, it can take a few hours to several hours (typically up to 12 hours). The task will be assigned to team members with the relevant skills and expertise. A story can only be considered complete when all tasks associated with it have been completed. Epic: An epic is usually a large story that is difficult to accomplish in a single sprint. An epic is usually accomplished over the course of months. Epics are usually very broad in scope, lack details, and must be broken into smaller user stories before the story can be developed. Epic is often viewed as being the pinnacle of the work hierarchy. In cases where multiple epics share a common goal, they can be grouped into a still-broader business objective, called a theme. Epic: User Story: Basically, a User Story is a list of what needs to be done within a project. It's similar to a to-do list and is owned by the Scrum Product Owner. It provides the Scrum team with enough to get a sense of what the finished product should be like and to calculate an estimate for completion. User Story: Tasks: Each epic is followed by a set of user stories, and for these stories to become workable components, the Scrum team needs to identify and sort tasks. Depending on the complexity of the task, it can take a few hours to several hours (typically up to 12 hours). The task will be assigned to team members with the relevant skills and expertise. A story can only be considered complete when all tasks associated with it have been completed. Tasks:  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Explain Velocity in Agile Methodology.",
        "answer": "In Agile Methodology, Velocity is a measure of the amount of work a team can accomplish during an iteration, and is frequently used by development teams to build accurate and effective timeframes. It is a simple calculation that measures how many units of work have been completed in a given period of time. There are several ways to measure units of work, such as story points, user stories, and engineer hours.   From the chart above, it's clear that Sprint 5 was exceptionally productive - almost 40 story points were produced. Their average velocity is approximately 10 story points.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What is the story point in Agile?",
        "answer": "Agile story points are a metric for measuring the difficulty of implementing a user story, and therefore reflect the level of effort involved in implementing it. Story points are measures of the difficulty level of a story. It can be related to the risks, complexities, and efforts involved. An increasing number of story points will result in a greater effort. One popular method for estimating agile story points is to use Fibonacci sequences. In this series, each number represents the sum of the two preceding ones. The Fibonacci sequence begins with 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89... and so forth.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What is Sprint in Agile Methodology?",
        "answer": "A sprint is defined as a short, time-limited period in which an agile team completes specific amounts of tasks or deliverables. Getting sprints right will help your agile team deliver better software with fewer headaches, since sprints are the basis of the scrum and agile methodologies.  Typically, sprints don't last longer than a month. While some teams may prefer to work in two-week sprints, others may prefer working in weekly sprints.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. When should we use Agile Scrum Methodology?",
        "answer": "Agile Scrum Methodology can be used in the following situations: When the client isn't clear on what exactly they need.\nWhen the client expects a quick delivery of the product.\nWhen the client does not provide all the requirements at once.\nFor projects where requirements fluctuate frequently. When the client isn't clear on what exactly they need. When the client expects a quick delivery of the product. When the client does not provide all the requirements at once. For projects where requirements fluctuate frequently.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is an Agile test plan?",
        "answer": "Agile test plans are very important documents that cover a variety of testing types carried out within an iteration, such as test data requirements, test environments, test infrastructure, and test results. In an agile model, test plans are written and updated for each new release. A typical agile test plan consists of the following: Scope of Testing.\nTest requirements, sprint objectives, and the scope of the task.\nNew functionalities that are being tested.\nTesting levels or types based on feature complexity.\nPerformance testing and load testing.\nConsiderations related to infrastructure.\nPlan for mitigating or reducing risks.\nResource allocation.\nDefining milestones and deliverables. Scope of Testing. Test requirements, sprint objectives, and the scope of the task. New functionalities that are being tested. Testing levels or types based on feature complexity. Performance testing and load testing. Considerations related to infrastructure. Plan for mitigating or reducing risks. Resource allocation. Defining milestones and deliverables.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What is agile methodology in software development? Write its types.",
        "answer": "Known as Agile development methodologies, Agile is an iterative approach to software development projects. It focuses on delivering value to customers faster and with fewer headaches than traditional ways. In contrast to risking everything on one big launch, agile teams deliver work in incremental, but consumable, stages over time. Continuous evaluation of requirements, plans, and results allows teams to implement changes quickly. This approach aligns with the principles and values outlined in the Agile Manifesto. Below is a diagram that illustrates different types of Agile methodologies:  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What are the characteristics of a good Agile tester?",
        "answer": "Good agile test leads lay a strong foundation for fostering an agile working culture in any organization through the application of good agile practices. An Agile tester should possess the following qualities: Focus on company goals and mission.\nEffectively sharing project ideas.\nA better understanding of requirements and risks associated with changing requirements.\nAbility to prioritize work based on requirements.\nCommunicate effectively with business associates and developers.\nUnderstand the results of testing and examine them for specific product or application behaviour.\nTesters must have coding skills.\nAn analytical mindset for improving testing methods and varying scenarios.\nDemonstrating information clearly and concisely. Focus on company goals and mission. Effectively sharing project ideas. A better understanding of requirements and risks associated with changing requirements. Ability to prioritize work based on requirements. Communicate effectively with business associates and developers. Understand the results of testing and examine them for specific product or application behaviour. Testers must have coding skills. An analytical mindset for improving testing methods and varying scenarios. Demonstrating information clearly and concisely.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain the role and responsibilities of Agile testers.",
        "answer": "Agile testers are tasked with the following responsibilities: Understand, implement, and update Agile test strategies.\nMeasure and report test coverage.\nAssure proper testing tool usage.\nSet up, manage, and use testing environments.\nWrite and execute automated tests and report results to the team.\nIdentify defects and resolve them with the team.\nProvide coaching and training to other team members.\nSchedule appropriate testing activities during release and iteration planning.\nDevelop clear requirements for testability, consistency, and completeness through collaboration with developers and stakeholders.\nActive participation in daily stand-up meetings, story grooming sessions, and retrospective meetings of the teams.\nPropose and implement improvements.\nAssessing new agile metrics such as velocity, sprint burndowns, release burndowns, etc. Understand, implement, and update Agile test strategies. Measure and report test coverage. Assure proper testing tool usage. Set up, manage, and use testing environments. Write and execute automated tests and report results to the team. Identify defects and resolve them with the team. Provide coaching and training to other team members. Schedule appropriate testing activities during release and iteration planning. Develop clear requirements for testability, consistency, and completeness through collaboration with developers and stakeholders. Active participation in daily stand-up meetings, story grooming sessions, and retrospective meetings of the teams. Propose and implement improvements. Assessing new agile metrics such as velocity, sprint burndowns, release burndowns, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. Describe the Agile testing life cycle.",
        "answer": "Unlike traditional development methodologies, agile development gives users flexibility through its iterative approach. An agile testing life cycle consists of the following five phases:   Impact Assessment: The impact assessment process is probably the most important phase of an agile testing life cycle, as during this process, the agile testers are expected to gather all the necessary information from all stakeholders involved in the project.\nAgile Testing Planning: Stakeholders and testers collaborate at this stage to schedule the testing process and deliverables.\nRelease Readiness: Agile testers must test the feature in this phase to see if it meets our clients' expectations and is ready to go live.\nDaily Scrums: This will probably include a morning meeting to check the progress of testing and set goals for the day ahead.\nTest Agility Review: Test Agility Review is the final phase of the project in which a meeting is held with the stakeholders to assess the progress of the project and to determine whether the milestones have been reached or not. Impact Assessment: The impact assessment process is probably the most important phase of an agile testing life cycle, as during this process, the agile testers are expected to gather all the necessary information from all stakeholders involved in the project. Impact Assessment: Agile Testing Planning: Stakeholders and testers collaborate at this stage to schedule the testing process and deliverables. Agile Testing Planning: Release Readiness: Agile testers must test the feature in this phase to see if it meets our clients' expectations and is ready to go live. Release Readiness: Daily Scrums: This will probably include a morning meeting to check the progress of testing and set goals for the day ahead. Daily Scrums: Test Agility Review: Test Agility Review is the final phase of the project in which a meeting is held with the stakeholders to assess the progress of the project and to determine whether the milestones have been reached or not. Test Agility Review:",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What are the principles of Agile testing?",
        "answer": "Eight main principles underlie agile testing. They are as follows: Practice of continuous testing: Agile teams continuously test their products to ensure that they are improving. It is carried out alongside development.\nFeedback on an ongoing basis: Agile testing provides team members with ongoing feedback and ensures that the product meets its business objectives. Feedback is primarily focused on quality rather than requirements.\nParticipation of the entire team: In agile methodologies, developers, business analysts, and testers all take part in the testing process.\nSpeeding up feedback: Agile involves the business team during each iteration, resulting in faster feedback and a lower cost associated with repairing errors.\nQuality comes from clean code: Testing the software regularly allows issues and vulnerabilities to be detected and fixed during the same iteration, maintaining code integrity.\nFewer Documentations: Agile testers use reusable checklists rather than long, bloated documents and concentrate on the essence of the test rather than on the incidental details.\nTest-Driven: Unlike conventional methodologies, agile testing involves testing during the actual implementation process.\nClient satisfaction: The client can see their product being developed and make changes and updates to it as it evolves. The test procedures can be updated to fit the current requirements. Practice of continuous testing: Agile teams continuously test their products to ensure that they are improving. It is carried out alongside development. Practice of continuous testing: Feedback on an ongoing basis: Agile testing provides team members with ongoing feedback and ensures that the product meets its business objectives. Feedback is primarily focused on quality rather than requirements. Feedback on an ongoing basis: Participation of the entire team: In agile methodologies, developers, business analysts, and testers all take part in the testing process. Participation of the entire team: Speeding up feedback: Agile involves the business team during each iteration, resulting in faster feedback and a lower cost associated with repairing errors. Speeding up feedback: Quality comes from clean code: Testing the software regularly allows issues and vulnerabilities to be detected and fixed during the same iteration, maintaining code integrity. Quality comes from clean code: Fewer Documentations: Agile testers use reusable checklists rather than long, bloated documents and concentrate on the essence of the test rather than on the incidental details. Fewer Documentations: Test-Driven: Unlike conventional methodologies, agile testing involves testing during the actual implementation process. Test-Driven: Client satisfaction: The client can see their product being developed and make changes and updates to it as it evolves. The test procedures can be updated to fit the current requirements. Client satisfaction:",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. What is Scrumban in Agile?",
        "answer": "Scrumban, as its name implies, is a hybrid Agile methodology that combines Scrum and Kanban (Scrum+Kanban = Scrumban). Hybrid project methodologies like Scruban allow teams to be flexible in adapting to stakeholders and production requirements without being overburdened by their project methodologies. Scrumban combines the structure of Scrum with flow-based methods and the flexibility of Kanban, making it an extremely versatile way of managing workflows. It increases team agility, efficiency, and productivity.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Explain build-breaker.",
        "answer": "Software developers sometimes make inadvertent mistakes that halt the build process, produce undesirable warnings, or fail automated tests. This type of error is known as a 'Build Breaker'. As soon as the developer is aware of the problem, he/she must take immediate action to get the build back to its normal state. The tester must address these issues quickly and equitably to bring the software development back to a normal/standard state by resolving the bugs. Conclusion Agile testing offers many career prospects to people seeking employment with leading organizations; however, it is crucial that employees work hard and consistently in order to achieve employment. \nAgile testing facilitates closer collaboration between developers and testers, leading to a higher level of quality. Agile tester has to list out the corrective feedback and provide it to the developer's team as part of the continuous update cycle. Essentially, this is a continuous integration of Agile development and testing methodologies to achieve the desired results. Those preparing for Agile scrum interviews should read in-depth about this topic.  For those who are preparing to attend an interview in this niche, the above-mentioned Agile interview questions for experienced, as well as those who are new to the field, will send you straight to the top. Candidates should have a strong grasp of concepts but also have the ability to speak confidently and decisively. Practising mock interviews can help you develop your self-confidence and prepare you for different interview scenarios. You can easily pass this interview with good preparation and a little bit of cleverness. Additional Resources https://www.interviewbit.com/blog/agile-model/\nhttps://www.interviewbit.com/blog/agile-principles/\nhttps://www.interviewbit.com/blog/difference-between-agile-and-scrum/\nhttps://www.interviewbit.com/blog/agile-vs-waterfall/\nhttps://www.interviewbit.com/software-testing-interview-questions/\nhttps://www.interviewbit.com/performance-testing-interview-questions/\nhttps://www.interviewbit.com/scrum-master-interview-questions/\nhttps://www.interviewbit.com/automation-testing-interview-questions/\nhttps://www.interviewbit.com/sdlc-interview-questions/\nhttps://www.interviewbit.com/sdet-interview-questions/\nhttps://www.interviewbit.com/technical-interview-questions/\nhttps://www.interviewbit.com/software-testing-mcq/ https://www.interviewbit.com/blog/agile-model/ https://www.interviewbit.com/blog/agile-model/ https://www.interviewbit.com/blog/agile-principles/ https://www.interviewbit.com/blog/agile-principles/ https://www.interviewbit.com/blog/difference-between-agile-and-scrum/ https://www.interviewbit.com/blog/difference-between-agile-and-scrum/ https://www.interviewbit.com/blog/agile-vs-waterfall/ https://www.interviewbit.com/software-testing-interview-questions/ https://www.interviewbit.com/software-testing-interview-questions/ https://www.interviewbit.com/performance-testing-interview-questions/ https://www.interviewbit.com/performance-testing-interview-questions/ https://www.interviewbit.com/scrum-master-interview-questions/ https://www.interviewbit.com/scrum-master-interview-questions/ https://www.interviewbit.com/automation-testing-interview-questions/ https://www.interviewbit.com/automation-testing-interview-questions/ https://www.interviewbit.com/sdlc-interview-questions/ https://www.interviewbit.com/sdlc-interview-questions/ https://www.interviewbit.com/sdet-interview-questions/ https://www.interviewbit.com/sdet-interview-questions/ https://www.interviewbit.com/technical-interview-questions/ https://www.interviewbit.com/technical-interview-questions/ https://www.interviewbit.com/software-testing-mcq/ https://www.interviewbit.com/software-testing-mcq/",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. How can keeping an iteration length consistent throughout benefit the project?",
        "answer": "Here are some advantages of keeping iteration lengths consistent throughout the project: It can serve as a consistent way of measuring the velocity of the team.\nEstablishing a consistent delivery pattern becomes more straightforward using it.\nIt is inefficient to decide the iteration length at the beginning of each iteration. Test a few lengths, come to a decision, then stick with it until there is a reason to change.\nHaving a consistent iteration length, be it one week, three weeks, or somewhere in between, helps teams settle into the pace that works best for them. It can serve as a consistent way of measuring the velocity of the team. Establishing a consistent delivery pattern becomes more straightforward using it. It is inefficient to decide the iteration length at the beginning of each iteration. Test a few lengths, come to a decision, then stick with it until there is a reason to change. Having a consistent iteration length, be it one week, three weeks, or somewhere in between, helps teams settle into the pace that works best for them.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. What are some impediments that a scrum master should remove?",
        "answer": "Agile development teams continuously strive to improve their production processes. However, certain impediments may reduce the value produced, thus slowing down the development process. Impediments are factors that prevent the Development Team from producing useful software in a Sprint or impede the team from achieving its intrinsic goals. The Scrum Master's main role is to remove all impediments that prevent the Development team from moving forward. Given the self-organizing nature of the team, the Scrum Master should assist the team in trying to solve their own problems. Or better still, prevent obstacles from becoming impediments. There are many types of impediments that may arise, as you can see below. Illness among the team members\nUnforeseen changes team composition\nTool issues for the Development Team\nLack of skilled personnel\nSupplier issues\nProduct owner's absence\nUnnecessary meetings for the Development Team\nRestrictions on teamwork.\nConflict among team members, etc. Illness among the team members Unforeseen changes team composition Tool issues for the Development Team Lack of skilled personnel Supplier issues Product owner's absence Unnecessary meetings for the Development Team Restrictions on teamwork. Conflict among team members, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. In what ways can QA benefit an agile team?",
        "answer": "QA (Quality Assurance) analysts have myriad responsibilities in agile development, as follows: Quality Assurance Quality Assurance Since QA works closely with the software development team from the beginning, QA is capable of identifying potential risks. As QA analysts participate in daily scrums, they can update the team with known and critical issues, so they can stay focused on the bug and speed up their planning.\nQA estimates the testing effort required for each user story in the sprint planning session.\nQA acts as a proxy product owner in the absence of a Product Owner. Additionally, they can discuss the business requirements with the Product Owner.\nFor the ongoing enhancement of user stories, QA analysts provide the product owner with feedback from their past testing experiences and the experiences of their team members during each sprint.\nDevelopers and QA analysts engage in quick handoff demonstrations for every new feature. QA will be able to see how the newly developed feature works, allowing them to raise questions to the development team. Since QA works closely with the software development team from the beginning, QA is capable of identifying potential risks. As QA analysts participate in daily scrums, they can update the team with known and critical issues, so they can stay focused on the bug and speed up their planning. QA estimates the testing effort required for each user story in the sprint planning session. QA acts as a proxy product owner in the absence of a Product Owner. Additionally, they can discuss the business requirements with the Product Owner. For the ongoing enhancement of user stories, QA analysts provide the product owner with feedback from their past testing experiences and the experiences of their team members during each sprint. Developers and QA analysts engage in quick handoff demonstrations for every new feature. QA will be able to see how the newly developed feature works, allowing them to raise questions to the development team.",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Can you explain why Continuous Integration is important for Agile?",
        "answer": "Continuous Integration (CI) is considered one of the cornerstones of Agile development. This method of developing software requires small components of code to be integrated continuously into the main code following all the phases of the software development lifecycle (SDLC). The following are some of the benefits of CI in agile: New features can be easily enhanced after the initial version has been released. It reduces the time required to develop new features while ensuring product stability.\nContinuous integration ensures that code stays robust enough to be utilized by customers or other stakeholders at any time. Overall, this will speed up the development process.\nMoreover, it spurs more feedback between developers and customers, assisting the development team in getting things right before meeting iteration deadlines.\nBy combining Agile and Continuous Integration, the SDLC can be transformed and many of its shortcomings eliminated. Ultimately, this leads to an efficient and faster deployment process.\nEffective CI assures that integration never becomes an issue as your code only reflects slight deviations from the codebase. As long as the team continuously deals with small divergences, it does not have to deal with scary divergences. New features can be easily enhanced after the initial version has been released. It reduces the time required to develop new features while ensuring product stability. Continuous integration ensures that code stays robust enough to be utilized by customers or other stakeholders at any time. Overall, this will speed up the development process. Moreover, it spurs more feedback between developers and customers, assisting the development team in getting things right before meeting iteration deadlines. By combining Agile and Continuous Integration, the SDLC can be transformed and many of its shortcomings eliminated. Ultimately, this leads to an efficient and faster deployment process. Effective CI assures that integration never becomes an issue as your code only reflects slight deviations from the codebase. As long as the team continuously deals with small divergences, it does not have to deal with scary divergences.",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What is Application Binary Interface?",
        "answer": "In the field of computer software, ABI stands for Application Binary Interface. It's primarily an interface between two binary program modules, one of which is a library or system facility, and the other is a user program. In essence, ABI deals with the implementation details of programs, i.e., what the code turns into after it has been compiled. API covers calling convention, data types, alignment, size, as well as how an application should handle system calls to the operating system.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What is Test stub?",
        "answer": "In Agile, a test stub is a small piece of code (modules) that simulates an component/element in the system being tested and can replace it. Top-down integration testing often involves the use of stubs to simulate or mimic the behavior of lower-level modules that have not been integrated. Stubs are temporary replacements for a called module, and produce the same output as the actual product.",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain Tracer Bullet.",
        "answer": "This spike is designed to integrate with the current architecture, current technology, and a set of best practices that will result in high-quality production code. This might seem like a very narrow implementation of the functionality, but it is not junk code. In fact, this code is of production quality, and as such, it will probably be utilized in future iterations of the project. Therefore, the next iterations can build upon this base code.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What is Exploratory Testing and Scripted Testing?",
        "answer": "There are two different testing methods that can be employed to test software release schedules, namely exploratory testing and scripted testing. Exploratory Testing Scripted Testing\nAn exploratory testing approach allows testers to rely on their instincts, skills, and experience to perform individual tests in-depth. The scripted testing process requires testers to follow a set of guidelines specifically designed to make sure that the actual results are as intended.\nIn-depth domain knowledge is required for this type of testing. Without proper domain expertise, tests cannot be conducted. It is possible to overcome the lack of domain knowledge during the test design phase. They can analyze the document along with learning from the subject matter experts.\nOften, documentation is lacking in exploratory environments. Documentation is essential in Scripted Testing.\nNo preparation is required, and no overhead is associated with reading the documentation. Prior to executing tests, it is very important to prepare test scripts and create documentation.\nTesting involves comparing the application to the tester's expectations and understanding how the application should behave. An application is verified against the specifications of the document.\nLearning and adaptability are key components of this approach. Prediction and decision-making are important aspects of this approach.\nIt is challenging to manage test coverage. It is easier to manage test coverage.\nAutomation is not possible. Automation is possible.\nAs testers examine an application without any proper test documentation, it is very difficult to identify any missing requirements. It helps identify any missing requirements from the requirements specification document.\nThere may be some learning curve for new testers, especially when complex applications are being developed. A new tester can readily begin testing the system since he/she has a series of steps to follow. Exploratory Testing Scripted Testing\nAn exploratory testing approach allows testers to rely on their instincts, skills, and experience to perform individual tests in-depth. The scripted testing process requires testers to follow a set of guidelines specifically designed to make sure that the actual results are as intended.\nIn-depth domain knowledge is required for this type of testing. Without proper domain expertise, tests cannot be conducted. It is possible to overcome the lack of domain knowledge during the test design phase. They can analyze the document along with learning from the subject matter experts.\nOften, documentation is lacking in exploratory environments. Documentation is essential in Scripted Testing.\nNo preparation is required, and no overhead is associated with reading the documentation. Prior to executing tests, it is very important to prepare test scripts and create documentation.\nTesting involves comparing the application to the tester's expectations and understanding how the application should behave. An application is verified against the specifications of the document.\nLearning and adaptability are key components of this approach. Prediction and decision-making are important aspects of this approach.\nIt is challenging to manage test coverage. It is easier to manage test coverage.\nAutomation is not possible. Automation is possible.\nAs testers examine an application without any proper test documentation, it is very difficult to identify any missing requirements. It helps identify any missing requirements from the requirements specification document.\nThere may be some learning curve for new testers, especially when complex applications are being developed. A new tester can readily begin testing the system since he/she has a series of steps to follow. Exploratory Testing Scripted Testing Exploratory Testing Scripted Testing Exploratory Testing Scripted Testing An exploratory testing approach allows testers to rely on their instincts, skills, and experience to perform individual tests in-depth. The scripted testing process requires testers to follow a set of guidelines specifically designed to make sure that the actual results are as intended.\nIn-depth domain knowledge is required for this type of testing. Without proper domain expertise, tests cannot be conducted. It is possible to overcome the lack of domain knowledge during the test design phase. They can analyze the document along with learning from the subject matter experts.\nOften, documentation is lacking in exploratory environments. Documentation is essential in Scripted Testing.\nNo preparation is required, and no overhead is associated with reading the documentation. Prior to executing tests, it is very important to prepare test scripts and create documentation.\nTesting involves comparing the application to the tester's expectations and understanding how the application should behave. An application is verified against the specifications of the document.\nLearning and adaptability are key components of this approach. Prediction and decision-making are important aspects of this approach.\nIt is challenging to manage test coverage. It is easier to manage test coverage.\nAutomation is not possible. Automation is possible.\nAs testers examine an application without any proper test documentation, it is very difficult to identify any missing requirements. It helps identify any missing requirements from the requirements specification document.\nThere may be some learning curve for new testers, especially when complex applications are being developed. A new tester can readily begin testing the system since he/she has a series of steps to follow. An exploratory testing approach allows testers to rely on their instincts, skills, and experience to perform individual tests in-depth. The scripted testing process requires testers to follow a set of guidelines specifically designed to make sure that the actual results are as intended. An exploratory testing approach allows testers to rely on their instincts, skills, and experience to perform individual tests in-depth. The scripted testing process requires testers to follow a set of guidelines specifically designed to make sure that the actual results are as intended. In-depth domain knowledge is required for this type of testing. Without proper domain expertise, tests cannot be conducted. It is possible to overcome the lack of domain knowledge during the test design phase. They can analyze the document along with learning from the subject matter experts. In-depth domain knowledge is required for this type of testing. Without proper domain expertise, tests cannot be conducted. It is possible to overcome the lack of domain knowledge during the test design phase. They can analyze the document along with learning from the subject matter experts. Often, documentation is lacking in exploratory environments. Documentation is essential in Scripted Testing. Often, documentation is lacking in exploratory environments. Documentation is essential in Scripted Testing. No preparation is required, and no overhead is associated with reading the documentation. Prior to executing tests, it is very important to prepare test scripts and create documentation. No preparation is required, and no overhead is associated with reading the documentation. Prior to executing tests, it is very important to prepare test scripts and create documentation. Testing involves comparing the application to the tester's expectations and understanding how the application should behave. An application is verified against the specifications of the document. Testing involves comparing the application to the tester's expectations and understanding how the application should behave. An application is verified against the specifications of the document. Learning and adaptability are key components of this approach. Prediction and decision-making are important aspects of this approach. Learning and adaptability are key components of this approach. Prediction and decision-making are important aspects of this approach. It is challenging to manage test coverage. It is easier to manage test coverage. It is challenging to manage test coverage. It is easier to manage test coverage. Automation is not possible. Automation is possible. Automation is not possible. Automation is possible. As testers examine an application without any proper test documentation, it is very difficult to identify any missing requirements. It helps identify any missing requirements from the requirements specification document. As testers examine an application without any proper test documentation, it is very difficult to identify any missing requirements. It helps identify any missing requirements from the requirements specification document. There may be some learning curve for new testers, especially when complex applications are being developed. A new tester can readily begin testing the system since he/she has a series of steps to follow. There may be some learning curve for new testers, especially when complex applications are being developed. A new tester can readily begin testing the system since he/she has a series of steps to follow.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What do you mean by Spike and Zero sprint in Agile?",
        "answer": "Sprint Zero: The Sprint Zero is the initial sprint of a team, which occurs before the formal start of the project, before official documentation, and/or before the team's inception. Sprints are intended for the Development Team to develop a minimum number of User Stories, story mapping, a project skeleton, and develop a full-fledged product. As part of sprint zero, the team answers the following questions:\nWhat is the duration of sprints?\nWhen is a sprint considered completed?\nWhat tools do we use, and how should they be used?\nHow should we work? Would it be best to formalize our agreement in writing?\nSpike: This shorthand term refers to \"spike solutions\". It represents the initial investigation or research of a software solution (which could be a feature, a bug fix, a migration task, etc.). Instead of documenting what needs to be done, try to construct a quick, throwaway solution to get a better sense of the scope of work (by validating the technical assumptions). Ideally, spikes should be scheduled along with all other features (bugs, fixes, etc.) during sprints. If a team is unable to agree on an estimate, it may realize the need for a spike. Sprint Zero: The Sprint Zero is the initial sprint of a team, which occurs before the formal start of the project, before official documentation, and/or before the team's inception. Sprints are intended for the Development Team to develop a minimum number of User Stories, story mapping, a project skeleton, and develop a full-fledged product. As part of sprint zero, the team answers the following questions:\nWhat is the duration of sprints?\nWhen is a sprint considered completed?\nWhat tools do we use, and how should they be used?\nHow should we work? Would it be best to formalize our agreement in writing? Sprint Zero: What is the duration of sprints?\nWhen is a sprint considered completed?\nWhat tools do we use, and how should they be used?\nHow should we work? Would it be best to formalize our agreement in writing? What is the duration of sprints? When is a sprint considered completed? What tools do we use, and how should they be used? How should we work? Would it be best to formalize our agreement in writing? Spike: This shorthand term refers to \"spike solutions\". It represents the initial investigation or research of a software solution (which could be a feature, a bug fix, a migration task, etc.). Instead of documenting what needs to be done, try to construct a quick, throwaway solution to get a better sense of the scope of work (by validating the technical assumptions). Ideally, spikes should be scheduled along with all other features (bugs, fixes, etc.) during sprints. If a team is unable to agree on an estimate, it may realize the need for a spike. Spike:",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What are the benefits of refactoring?",
        "answer": "Refactoring offers the following benefits: Refactoring code to make it less complex and easier to understand.\nStreamline the source code design to speed up the creation of new features.\nReduce messy and unrefined code, which may otherwise require additional rework.\nReducing the cost of code maintenance and making it more modular and readable.\nEnhancing the architecture of software without affecting its behavior.\nImproved modularity to increase reusability. Refactoring code to make it less complex and easier to understand. Streamline the source code design to speed up the creation of new features. Reduce messy and unrefined code, which may otherwise require additional rework. Reducing the cost of code maintenance and making it more modular and readable. Enhancing the architecture of software without affecting its behavior. Improved modularity to increase reusability.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain refactoring.",
        "answer": "The word 'refactoring' describes the process of improving the internal structure, the operation, or the aesthetics of a code or component without changing/affecting its external behavior. Teams working in Agile are responsible for maintaining and enhancing their code on an incremental basis, Sprint by Sprint. Without refactoring, an Agile project will end up with poor code quality, such as unhealthy dependencies between classes, too many responsibilities per method, improper design of class responsibilities, and multiple forms of confusion and clutter.  Code refactoring helps to simplify ambiguous and complex code by removing chaos. In the following example, it can be seen that the 5th module is a refactor. A refactor (5th) is usually broken down into several sequential micro-refactors, and each of those micro-refactors must be tested to ensure they are free from errors.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. What is Acceptance Testing in Agile?",
        "answer": "An acceptance test is a test conducted to evaluate whether or not the requirements of a software specification have been met. Testing involves comparing new features, functionality, or systems against predefined acceptance criteria. Acceptance testing is an integral part of agile development and is not merely an afterthought. The intent, however, remains the same: ensuring that software meets customer and end-user expectations.",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What sets Agile Testing apart from other traditional Software Testing Models?",
        "answer": "There are various factors that set Agile testing apart from other traditional Software testing methodologies.   Agile Testing Traditional Software Testing\nAgile testing involves performing tests alongside software development in order to ensure greater transparency of the development process. Traditional testing takes place after the entire phase of software development has been completed. The testing process comes after the development cycle is complete, and it could take a long time.\nIn contrast, agile testing enables the team to \"move forward (release) with working components while addressing defects in subsequent iterations\". It emphasizes on \"Fix Defect Then Release\".\nIt requires regular interaction with customers. Customer interaction is not mandatory on a daily or weekly basis.\nThis process, however, is based on continuous improvement; changes are made in the next iteration of the testing cycle. The traditional approach allows for any necessary modifications to be made only during the next release. \nIt is more suitable for projects where the requirements fluctuate frequently. Specifically, it is best suited for situations where the requirements are little or never likely to change.\nThe business team is involved in each iteration of Agile testing. Continual feedback reduces the amount of time required to provide feedback for software development work. User feedback is not obtained until the testing has been completed.\nAgility follows a risk-prevention approach that is timely and efficient. In comparison, the traditional method is a risk-averse methodology.\nBy using an incremental and iterative approach, agile  testing reduces the overall time taken to define test requirements and validate the results. This leads to more rapid release of products without delays. As with traditional testing, it is a time-consuming process that is expensive both financially and in terms of effort.\nContinuous interaction between team members is of utmost importance. Testing is done in phases, thus limiting interaction among team members. Agile Testing Traditional Software Testing\nAgile testing involves performing tests alongside software development in order to ensure greater transparency of the development process. Traditional testing takes place after the entire phase of software development has been completed. The testing process comes after the development cycle is complete, and it could take a long time.\nIn contrast, agile testing enables the team to \"move forward (release) with working components while addressing defects in subsequent iterations\". It emphasizes on \"Fix Defect Then Release\".\nIt requires regular interaction with customers. Customer interaction is not mandatory on a daily or weekly basis.\nThis process, however, is based on continuous improvement; changes are made in the next iteration of the testing cycle. The traditional approach allows for any necessary modifications to be made only during the next release. \nIt is more suitable for projects where the requirements fluctuate frequently. Specifically, it is best suited for situations where the requirements are little or never likely to change.\nThe business team is involved in each iteration of Agile testing. Continual feedback reduces the amount of time required to provide feedback for software development work. User feedback is not obtained until the testing has been completed.\nAgility follows a risk-prevention approach that is timely and efficient. In comparison, the traditional method is a risk-averse methodology.\nBy using an incremental and iterative approach, agile  testing reduces the overall time taken to define test requirements and validate the results. This leads to more rapid release of products without delays. As with traditional testing, it is a time-consuming process that is expensive both financially and in terms of effort.\nContinuous interaction between team members is of utmost importance. Testing is done in phases, thus limiting interaction among team members. Agile Testing Traditional Software Testing Agile Testing Traditional Software Testing Agile Testing Traditional Software Testing Agile testing involves performing tests alongside software development in order to ensure greater transparency of the development process. Traditional testing takes place after the entire phase of software development has been completed. The testing process comes after the development cycle is complete, and it could take a long time.\nIn contrast, agile testing enables the team to \"move forward (release) with working components while addressing defects in subsequent iterations\". It emphasizes on \"Fix Defect Then Release\".\nIt requires regular interaction with customers. Customer interaction is not mandatory on a daily or weekly basis.\nThis process, however, is based on continuous improvement; changes are made in the next iteration of the testing cycle. The traditional approach allows for any necessary modifications to be made only during the next release. \nIt is more suitable for projects where the requirements fluctuate frequently. Specifically, it is best suited for situations where the requirements are little or never likely to change.\nThe business team is involved in each iteration of Agile testing. Continual feedback reduces the amount of time required to provide feedback for software development work. User feedback is not obtained until the testing has been completed.\nAgility follows a risk-prevention approach that is timely and efficient. In comparison, the traditional method is a risk-averse methodology.\nBy using an incremental and iterative approach, agile  testing reduces the overall time taken to define test requirements and validate the results. This leads to more rapid release of products without delays. As with traditional testing, it is a time-consuming process that is expensive both financially and in terms of effort.\nContinuous interaction between team members is of utmost importance. Testing is done in phases, thus limiting interaction among team members. Agile testing involves performing tests alongside software development in order to ensure greater transparency of the development process. Traditional testing takes place after the entire phase of software development has been completed. The testing process comes after the development cycle is complete, and it could take a long time. Agile testing involves performing tests alongside software development in order to ensure greater transparency of the development process. Traditional testing takes place after the entire phase of software development has been completed. The testing process comes after the development cycle is complete, and it could take a long time. In contrast, agile testing enables the team to \"move forward (release) with working components while addressing defects in subsequent iterations\". It emphasizes on \"Fix Defect Then Release\". In contrast, agile testing enables the team to \"move forward (release) with working components while addressing defects in subsequent iterations\". It emphasizes on \"Fix Defect Then Release\". It requires regular interaction with customers. Customer interaction is not mandatory on a daily or weekly basis. It requires regular interaction with customers. Customer interaction is not mandatory on a daily or weekly basis. This process, however, is based on continuous improvement; changes are made in the next iteration of the testing cycle. The traditional approach allows for any necessary modifications to be made only during the next release. This process, however, is based on continuous improvement; changes are made in the next iteration of the testing cycle. The traditional approach allows for any necessary modifications to be made only during the next release. It is more suitable for projects where the requirements fluctuate frequently. Specifically, it is best suited for situations where the requirements are little or never likely to change. It is more suitable for projects where the requirements fluctuate frequently. Specifically, it is best suited for situations where the requirements are little or never likely to change. The business team is involved in each iteration of Agile testing. Continual feedback reduces the amount of time required to provide feedback for software development work. User feedback is not obtained until the testing has been completed. The business team is involved in each iteration of Agile testing. Continual feedback reduces the amount of time required to provide feedback for software development work. User feedback is not obtained until the testing has been completed. Agility follows a risk-prevention approach that is timely and efficient. In comparison, the traditional method is a risk-averse methodology. Agility follows a risk-prevention approach that is timely and efficient. In comparison, the traditional method is a risk-averse methodology. By using an incremental and iterative approach, agile  testing reduces the overall time taken to define test requirements and validate the results. This leads to more rapid release of products without delays. As with traditional testing, it is a time-consuming process that is expensive both financially and in terms of effort. By using an incremental and iterative approach, agile  testing reduces the overall time taken to define test requirements and validate the results. This leads to more rapid release of products without delays. As with traditional testing, it is a time-consuming process that is expensive both financially and in terms of effort. Continuous interaction between team members is of utmost importance. Testing is done in phases, thus limiting interaction among team members. Continuous interaction between team members is of utmost importance. Testing is done in phases, thus limiting interaction among team members.",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. How do you handle continuous changes in requirements as an Agile Tester?",
        "answer": "In cases where requirements are constantly changing, agile testers are advised to follow the following approach: Prepare generic test cases and test plans focused on the intent of the requirement rather than its details.\nProduct Owners and teams must work together to understand and minimize the impact of requirements changes.\nDevelop contingency plans to address the risks of changing requirements at the end of the iteration.\nIt is best to automate a feature only after the feature has been stabilized and the requirements are finalized.\nUse Agile Task Boards for better project management as they help arrange development tasks into various categories like To-Do, In Progress, and Done. With this categorization, team members can see where they stand in their progress, as well as which parts of the project are in need of attention. \nA daily stand-up meeting with clients is highly beneficial because any changes that clients suggest can be discussed right away. Changes in requirements, timeframe, effort, and overall project schedule can all be discussed at a higher level and agreed upon during these meetings.\nLet your customer participate in all stages of the project, from the initial stage of identifying requirements to the final phase of implementation. The customer may change requirements during each interaction. Prepare generic test cases and test plans focused on the intent of the requirement rather than its details. Product Owners and teams must work together to understand and minimize the impact of requirements changes. Develop contingency plans to address the risks of changing requirements at the end of the iteration. It is best to automate a feature only after the feature has been stabilized and the requirements are finalized. Use Agile Task Boards for better project management as they help arrange development tasks into various categories like To-Do, In Progress, and Done. With this categorization, team members can see where they stand in their progress, as well as which parts of the project are in need of attention. A daily stand-up meeting with clients is highly beneficial because any changes that clients suggest can be discussed right away. Changes in requirements, timeframe, effort, and overall project schedule can all be discussed at a higher level and agreed upon during these meetings. Let your customer participate in all stages of the project, from the initial stage of identifying requirements to the final phase of implementation. The customer may change requirements during each interaction.",
        "reference": "interviewbit.com"
    }
]