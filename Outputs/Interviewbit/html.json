[
    {
        "question": "1. Can we display a web page inside a web page or Is nesting of webpages possible?",
        "answer": "Yes, we can display a web page inside another HTML web page. HTML provides a tag <iframe> using which we can achieve this functionality. <iframe src=\u201durl of the web page to embed\u201d /> <iframe src=\u201durl of the web page to embed\u201d /> <iframe src=\u201durl of the web page to embed\u201d /> iframe src \u201durl of the web page to embed",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What are tags and attributes in HTML?",
        "answer": "Tags are the primary component of the HTML that defines how the content will be structured/ formatted, whereas Attributes are used along with the HTML tags to define the characteristics of the element. For example, <p align=\u201d center\u201d>Interview questions</p>, in this the \u2018align\u2019 is the attribute using which we will align the paragraph to show in the center of the view.",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What are void elements in HTML?",
        "answer": "HTML elements which do not have closing tags or do not need to be closed are Void elements. For Example <br />, <img />, <hr />, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. What is the advantage of collapsing white space?",
        "answer": "In HTML, a blank sequence of whitespace characters is treated as a single space character, Because the browser collapses multiple spaces into a single space character and this helps a developer to indent lines of text without worrying about multiple spaces and maintain readability and understandability of HTML codes.",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. What are HTML Entities?",
        "answer": "In HTML some characters are reserved like \u2018<\u2019, \u2018>\u2019, \u2018/\u2019, etc. To use these characters in our webpage we need to use the character entities called HTML Entities. Below are a few mapping between the reserved character and its respective entity character to be used. Character Entity Name Entity Number\n< &lt; &#60;\n> &gt; &#62;\n& &amp; &#38;\n(non-breaking space) Eg. 10  PM &nbsp; Eg. <p>10&nbsp&nbspPM</p> &#160; Character Entity Name Entity Number\n< &lt; &#60;\n> &gt; &#62;\n& &amp; &#38;\n(non-breaking space) Eg. 10  PM &nbsp; Eg. <p>10&nbsp&nbspPM</p> &#160; Character Entity Name Entity Number Character Entity Name Entity Number Character Entity Name Entity Number < &lt; &#60;\n> &gt; &#62;\n& &amp; &#38;\n(non-breaking space) Eg. 10  PM &nbsp; Eg. <p>10&nbsp&nbspPM</p> &#160; < &lt; &#60; < &lt; &#60; > &gt; &#62; > &gt; &#62; & &amp; &#38; & &amp; &#38; (non-breaking space) Eg. 10  PM &nbsp; Eg. <p>10&nbsp&nbspPM</p> &#160; (non-breaking space) Eg. 10  PM &nbsp; Eg. <p>10&nbsp&nbspPM</p> &#160;",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What are different types of lists in HTML?",
        "answer": " ",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What is the \u2018class\u2019 attribute in HTML?",
        "answer": "The class attribute is used to specify the class name for an HTML element. Multiple elements in HTML can have the same class value. Also, it is mainly used to associate the styles written in the stylesheet with the HTML elements.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What is the difference between the \u2018id\u2019 attribute and the \u2018class\u2019 attribute of HTML elements?",
        "answer": "Multiple elements in HTML can have the same class value, whereas a value of id attribute of one element cannot be associated with another HTML element.",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Define multipart form data?",
        "answer": "Multipart form data is one of the values of the enctype attribute. It is used to send the file data to the server-side for processing. The other valid values of the enctype attribute are text/plain and application/x-www-form-urlencoded.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Describe HTML layout structure.",
        "answer": "Every web page has different components to display the intended content and a specific UI. But still, there are few things which are templated and are globally accepted way to structure the web page, such as: <header>: Stores the starting information about the web page.\n<footer>: Represents the last section of the page.\n<nav>: The navigation menu of the HTML page.\n<article>: It is a set of information.\n<section>: It is used inside the article block to define the basic structure of a page.\n<aside>: Sidebar content of the page. <header>: Stores the starting information about the web page. <header> <footer>: Represents the last section of the page. <footer> <nav>: The navigation menu of the HTML page. <nav> <article>: It is a set of information. <article> <section>: It is used inside the article block to define the basic structure of a page. <section> <aside>: Sidebar content of the page. <aside>",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. How to optimize website assets loading?",
        "answer": "To optimize website load time we need to optimize its asset loading and for that: CDN hosting - A CDN or content delivery network is geographically distributed servers to help reduce latency.\nFile compression - This is a method that helps to reduce the size of an asset to reduce the data transfer\nFile concatenation - This reduces the number of HTTP calls\nMinify scripts - This reduces the overall file size of js and CSS files\nParallel downloads - Hosting assets in multiple subdomains can help to bypass the download limit of 6 assets per domain of all modern browsers. This can be configured but most general users never modify these settings.\nLazy Loading - Instead of loading all the assets at once, the non-critical assets can be loaded on a need basis. CDN hosting - A CDN or content delivery network is geographically distributed servers to help reduce latency. CDN hosting File compression - This is a method that helps to reduce the size of an asset to reduce the data transfer File compression File concatenation - This reduces the number of HTTP calls File concatenation Minify scripts - This reduces the overall file size of js and CSS files Minify scripts Parallel downloads - Hosting assets in multiple subdomains can help to bypass the download limit of 6 assets per domain of all modern browsers. This can be configured but most general users never modify these settings. Parallel downloads Lazy Loading - Instead of loading all the assets at once, the non-critical assets can be loaded on a need basis. Lazy Loading",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What are the various formatting tags in HTML?",
        "answer": "HTML has various formatting tags: <b> - makes text bold\n<i> - makes text italic\n<em> - makes text italic but with added semantics importance\n<big> - increases the font size of the text by one unit\n<small> - decreases the font size of the text by one unit\n<sub> - makes the text a subscript\n<sup> - makes the text a superscript\n<del> - displays as strike out text\n<strong> - marks the text as important\n<mark> - highlights the text\n<ins> - displays as added text <b> - makes text bold <b> <i> - makes text italic <i> <em> - makes text italic but with added semantics importance <em> <big> - increases the font size of the text by one unit <big> <small> - decreases the font size of the text by one unit <small> <sub> - makes the text a subscript <sub> <sup> - makes the text a superscript <sup> <del> - displays as strike out text <del> <strong> - marks the text as important <strong> <mark> - highlights the text <mark> <ins> - displays as added text <ins>",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. What are the different kinds of Doctypes available?",
        "answer": "The three kinds of Doctypes which are available: Strict Doctype \nTransitional Doctype\nFrameset Doctype Strict Doctype Transitional Doctype Frameset Doctype",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. Please explain how to indicate the character set being used by a document in HTML?",
        "answer": "The character set is defined in <meta> tag inside <head> element. <!DOCTYPE html>\n<html>\n <head>\n   <meta charset=\"UTF-8\">\n   ...\n   ...\n </head>\n ...\n</html> <!DOCTYPE html>\n<html>\n <head>\n   <meta charset=\"UTF-8\">\n   ...\n   ...\n </head>\n ...\n</html> <!DOCTYPE html> html <html> html <head> head <meta charset=\"UTF-8\"> meta charset \"UTF-8\" </head> head </html> html",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What is the difference between <strong>, <b> tags and <em>, <i> tags?",
        "answer": "The effect on a normal webpage of the tags <strong>, <b>  and <em>, <i> is the same. <b> and <i> tags stands for bold and italic. These two tags only apply font styling and bold tag <b>, just adds more ink to the text, these tags don't say anything about the text. Whereas, <strong> and <em> tags represent that the span of text is of strong importance or more importance and emphatic stress respectively than the rest of the text. These tags have semantic meaning.",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. What is the significance of <head> and <body> tag in HTML?",
        "answer": "<head> tag provides the information about the document. It should always be enclosed in the <html> tag. This tag contains the metadata about the webpage and the tags which are enclosed by head tag like <link>, <meta>, <style>, <script>, etc. are not displayed on the web page. Also, there can be only 1 <head> tag in the entire Html document and will always be before the <body> tag. <body> tag defines the body of the HTML document. It should always be enclosed in the <html> tag. All the contents which needs to be displayed on the web page like images, text, audio, video, contents, using elements like <p>, <img>, <audio>, <heading>, <video>, <div>, etc. will always be enclosed by the <body> tag. Also, there can be only 1 body element in an HTML document and will always be after the <head> tag.",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. Are the HTML tags and elements the same thing?",
        "answer": "No. HTML elements are defined by a starting tag, may contain some content and a closing tag.For example, <h1>Heading 1</h1> is a HTML element but just <h1> is a starting tag and </h1> is a closing tag.",
        "reference": "interviewbit.com"
    },
    {
        "question": "18. How is Cell Padding different from Cell Spacing?",
        "answer": "Cell Spacing is the space or gap between two consecutive cells. Whereas, Cell Padding is the space or gap between the text/ content of the cell and the edge/ border of the cell. Please refer to the above figure example to find the difference.",
        "reference": "interviewbit.com"
    },
    {
        "question": "19. How can we club two or more rows or columns into a single row or column in an HTML table?",
        "answer": "HTML provides two table attributes \u201crowspan\u201d and \u201ccolspan\u201d to make a cell span to multiple rows and columns respectively.",
        "reference": "interviewbit.com"
    },
    {
        "question": "20. Is it possible to change an inline element into a block level element?",
        "answer": "Yes, it is possible using the \u201cdisplay\u201d property with its value as \u201cblock\u201d, to change the inline element into a block-level element.",
        "reference": "interviewbit.com"
    },
    {
        "question": "21. In how many ways can we position an HTML element? Or what are the permissible values of the position attribute?",
        "answer": "There are mainly 7 values of position attribute that can be used to position an HTML element: static: Default value. Here the element is positioned according to the normal flow of the document.\nabsolute: Here the element is positioned relative to its parent element. The final position is determined by the values of left, right, top, bottom.\nfixed: This is similar to absolute except here the elements are positioned relative to the <html> element.\nrelative: Here the element is positioned according to the normal flow of the document and positioned relative to its original/ normal position.\ninitial: This resets the property to its default value.\ninherit: Here the element inherits or takes the property of its parent. static: Default value. Here the element is positioned according to the normal flow of the document. static absolute: Here the element is positioned relative to its parent element. The final position is determined by the values of left, right, top, bottom. absolute fixed: This is similar to absolute except here the elements are positioned relative to the <html> element. fixed relative: Here the element is positioned according to the normal flow of the document and positioned relative to its original/ normal position. relative initial: This resets the property to its default value. initial inherit: Here the element inherits or takes the property of its parent. inherit",
        "reference": "interviewbit.com"
    },
    {
        "question": "22. In how many ways you can display HTML elements?",
        "answer": "inline: Using this we can display any block-level element as an inline element. The height and width attribute values of the element will not affect.\nblock: using this, we can display any inline element as a block-level element. \ninline-block: This property is similar to inline, except by using the display as inline-block, we can actually format the element using height and width values.\nflex: It displays the container and element as a flexible structure. It follows flexbox property.\ninline-flex: It displays the flex container as an inline element while its content follows the flexbox properties.\ngrid: It displays the HTML elements as a grid container.\nnone: Using this property we can hide the HTML element. inline: Using this we can display any block-level element as an inline element. The height and width attribute values of the element will not affect. inline block: using this, we can display any inline element as a block-level element. block inline-block: This property is similar to inline, except by using the display as inline-block, we can actually format the element using height and width values. inline-block flex: It displays the container and element as a flexible structure. It follows flexbox property. flex inline-flex: It displays the flex container as an inline element while its content follows the flexbox properties. inline-flex grid: It displays the HTML elements as a grid container. grid none: Using this property we can hide the HTML element. none Below are some of the display types which are rarely used: table\ninline-table\ntable-cell\ntable-column\ntable-row\ninline-grid\nlist-item\ninherit\ninitial\ntable-caption table inline-table table-cell table-column table-row inline-grid list-item inherit initial table-caption",
        "reference": "interviewbit.com"
    },
    {
        "question": "23. What is the difference between \u201cdisplay: none\u201d and \u201cvisibility: hidden\u201d, when used as attributes to the HTML element.",
        "answer": "When we use the attribute \u201cvisibility: hidden\u201d for an HTML element then that element will be hidden from the webpage but still takes up space. Whereas, if we use the \u201cdisplay: none\u201d attribute for an HTML element then the element will be hidden, and also it won\u2019t take up any space on the webpage.",
        "reference": "interviewbit.com"
    },
    {
        "question": "24. How to specify the link in HTML and explain the target attribute?",
        "answer": "HTML provides a hyperlink - <a> tag to specify the links in a webpage. The \u2018href\u2019 attribute is used to specify the link and the \u2018target\u2019 attribute is used to specify, where do we want to open the linked document. The \u2018target\u2019 attribute can have the following values: _self: This is a default value. It opens the document in the same window or tab as it was clicked.\n_blank: It opens the document in a new window or tab.\n_parent: It opens the document in a parent frame.\n_top: It opens the document in a full-body window. _self: This is a default value. It opens the document in the same window or tab as it was clicked. _self _blank: It opens the document in a new window or tab. _blank _parent: It opens the document in a parent frame. _parent _top: It opens the document in a full-body window. _top",
        "reference": "interviewbit.com"
    },
    {
        "question": "25. In how many ways can we specify the CSS styles for the HTML element?",
        "answer": "There are three ways in which we can specify the styles for HTML elements: Inline: Here we use the \u2018style\u2019 attribute inside the HTML element.\nInternal: Here we use the <style> tag inside the <head> tag. To apply the style we bind the elements using \u2018id\u2019 or \u2018class\u2019 attributes.\nExternal: Here we use the <link> tag inside <head> tag to reference the CSS file into our HTML code. Again the binding between elements and styles is done using \u2018id\u2019 or \u2018class\u2019 attributes. Inline: Here we use the \u2018style\u2019 attribute inside the HTML element. Inline Internal: Here we use the <style> tag inside the <head> tag. To apply the style we bind the elements using \u2018id\u2019 or \u2018class\u2019 attributes. Internal: External: Here we use the <link> tag inside <head> tag to reference the CSS file into our HTML code. Again the binding between elements and styles is done using \u2018id\u2019 or \u2018class\u2019 attributes. External  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "26. Difference between link tag <link> and anchor tag <a>?",
        "answer": "The anchor tag <a> is used to create a hyperlink to another webpage or to a certain part of the webpage and these links are clickable, whereas, link tag <link> defines a link between a document and an external resource and these are not clickable.",
        "reference": "interviewbit.com"
    },
    {
        "question": "27. How to include javascript code in HTML?",
        "answer": "HTML provides a <script> tag using which we can run the javascript code and make our HTML page more dynamic. <!DOCTYPE html>\n<html>\n   <body>\n    <h1>\n          <span>This is a demo for </span>\n          <u><span id=\"demo\"></span></u>\n   </h1>\n   <script>\n       document.getElementById(\"demo\").innerHTML = \"script Tag\"\n   </script>\n   </body>\n</html> <!DOCTYPE html>\n<html>\n   <body>\n    <h1>\n          <span>This is a demo for </span>\n          <u><span id=\"demo\"></span></u>\n   </h1>\n   <script>\n       document.getElementById(\"demo\").innerHTML = \"script Tag\"\n   </script>\n   </body>\n</html> <!DOCTYPE html> html <html> html <body> body <h1> h1 <span> span </span> span <u> u <span id=\"demo\"> span id \"demo\" </span> span </u> u </h1> h1 <script> script document.getElementById(\"demo\").innerHTML = \"script Tag\" document \"demo\" \"script Tag\" </script> script </body> body </html> html",
        "reference": "interviewbit.com"
    },
    {
        "question": "28. When to use scripts in the head and when to use scripts in the body?",
        "answer": "If the scripts contain some event-triggered functions or jquery library then we should use them in the head section. If the script writes the content on the page or is not inside a function then it should be placed inside the body section at the bottom. In short, follow below three points: Place library scripts or event scripts in the head section.\nPlace normal scripts that do not write anything on the page, in the head section until there is any performance issue.\nPlace scripts that render something on the web page at the bottom of the body section. Place library scripts or event scripts in the head section. Place normal scripts that do not write anything on the page, in the head section until there is any performance issue. Place scripts that render something on the web page at the bottom of the body section.",
        "reference": "interviewbit.com"
    },
    {
        "question": "29. What are forms and how to create forms in HTML?",
        "answer": "The HTML form is used to collect the user inputs. HTML provides a <form> tag to create forms. To take input from the user we use the <input> tag inside the form so that all collected user data can be sent to the server for processing. There are different input types like \u2018button\u2019, \u2018checkbox\u2019, \u2018number\u2019, \u2018text\u2019, \u2018password\u2019, \u2018submit\u2019 etc. <form action=\"/submit_data.php\">\n   <label>Enter your name: </label>\n   <input type=\"text\" name=\"name\" /> \n   <label>Enter Mobile number </label>\n   <input type=\"number\" name=\"mobile_no\"/>\n   <input type=\"submit\" value=\"Submit\">\n</form> <form action=\"/submit_data.php\">\n   <label>Enter your name: </label>\n   <input type=\"text\" name=\"name\" /> \n   <label>Enter Mobile number </label>\n   <input type=\"number\" name=\"mobile_no\"/>\n   <input type=\"submit\" value=\"Submit\">\n</form> <form action=\"/submit_data.php\"> form action \"/submit_data.php\" <label> label </label> label <input type=\"text\" name=\"name\" /> input type \"text\" name \"name\" <label> label </label> label <input type=\"number\" name=\"mobile_no\"/> input type \"number\" name \"mobile_no\" <input type=\"submit\" value=\"Submit\"> input type \"submit\" value \"Submit\" </form> form",
        "reference": "interviewbit.com"
    },
    {
        "question": "30. How to handle events in HTML?",
        "answer": "HTML allows event trigger actions in browsers using javascript or JQuery. There are a lot of events like \u2018onclick\u2019, \u2018ondrag\u2019, \u2018onchange\u2019, etc. <!DOCTYPE html>\n<html>\n   <body style=\"padding-top:50px\">\n       <h3 id=\"event_demo\">0</h3>\n       <input type=\"button\" onclick=\"myFunction()\" value=\"Click Me\" />\n       <input type=\"reset\" onclick=\"reset()\" value=\"Reset\" />\n   </body>\n   \n   <script>\n       function myFunction() {\n           var value = document.getElementById(\"event_demo\").innerHTML\n           value = parseInt(value) + 1;\n           document.getElementById(\"event_demo\").innerHTML = value;\n       }\n       function reset() {\n           document.getElementById(\"event_demo\").innerHTML = 0;\n       }\n   </script>\n</html> <!DOCTYPE html>\n<html>\n   <body style=\"padding-top:50px\">\n       <h3 id=\"event_demo\">0</h3>\n       <input type=\"button\" onclick=\"myFunction()\" value=\"Click Me\" />\n       <input type=\"reset\" onclick=\"reset()\" value=\"Reset\" />\n   </body>\n   \n   <script>\n       function myFunction() {\n           var value = document.getElementById(\"event_demo\").innerHTML\n           value = parseInt(value) + 1;\n           document.getElementById(\"event_demo\").innerHTML = value;\n       }\n       function reset() {\n           document.getElementById(\"event_demo\").innerHTML = 0;\n       }\n   </script>\n</html> <!DOCTYPE html> html <html> html <body style=\"padding-top:50px\"> body style \"padding-top:50px\" <h3 id=\"event_demo\"> h3 id \"event_demo\" </h3> h3 <input type=\"button\" onclick=\"myFunction()\" value=\"Click Me\" /> input type \"button\" onclick \"myFunction()\" value \"Click Me\" <input type=\"reset\" onclick=\"reset()\" value=\"Reset\" /> input type \"reset\" onclick \"reset()\" value \"Reset\" </body> body <script> script function myFunction() {\n           var value = document.getElementById(\"event_demo\").innerHTML\n           value = parseInt(value) + 1;\n           document.getElementById(\"event_demo\").innerHTML = value;\n       }\n       function reset() {\n           document.getElementById(\"event_demo\").innerHTML = 0;\n       } function myFunction() function myFunction  var document \"event_demo\" parseInt 1 document \"event_demo\" function reset() function reset  document \"event_demo\" 0 </script> script </html> html",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. What is new about the relationship between the <header> and <h1> tags in HTML5?",
        "answer": "As HTML5 was all about better semantics and arrangements of the tags and elements, the <header> tag specifies the header section of the webpage. Unlike in previous version there was one <h1> element for the entire webpage, now this is the header for one section such as <article> or <section>. According to the HTML5 specification, each <header> element must at least have one <h1> tag.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Inline and block elements in HTML5?",
        "answer": "Inline Block\nInline elements just take up the space that is absolutely necessary for the content and does not start from a new line.\nExample:- <span>, <a>, <strong>, <img>, <button>, <em>, <select>, <abbr>, <label>, <sub>, <cite>, <abbr>, <script>, <label>, <i>, <input>, <output>, <q>, etc. Block elements start on a new line and consume the full width of the page available.\nExample:- <div>, <p>, <header>, <footer>, <h1>...<h6>, <form>, <table>, <canvas>, <video>, <blockquote>, <pre>, <ul>, <ol>, <figcaption>, <figure>, <hr>, <article>, <section>, etc. Inline Block\nInline elements just take up the space that is absolutely necessary for the content and does not start from a new line.\nExample:- <span>, <a>, <strong>, <img>, <button>, <em>, <select>, <abbr>, <label>, <sub>, <cite>, <abbr>, <script>, <label>, <i>, <input>, <output>, <q>, etc. Block elements start on a new line and consume the full width of the page available.\nExample:- <div>, <p>, <header>, <footer>, <h1>...<h6>, <form>, <table>, <canvas>, <video>, <blockquote>, <pre>, <ul>, <ol>, <figcaption>, <figure>, <hr>, <article>, <section>, etc. Inline Block Inline Block Inline Block Inline elements just take up the space that is absolutely necessary for the content and does not start from a new line.\nExample:- <span>, <a>, <strong>, <img>, <button>, <em>, <select>, <abbr>, <label>, <sub>, <cite>, <abbr>, <script>, <label>, <i>, <input>, <output>, <q>, etc. Block elements start on a new line and consume the full width of the page available.\nExample:- <div>, <p>, <header>, <footer>, <h1>...<h6>, <form>, <table>, <canvas>, <video>, <blockquote>, <pre>, <ul>, <ol>, <figcaption>, <figure>, <hr>, <article>, <section>, etc. Inline elements just take up the space that is absolutely necessary for the content and does not start from a new line.\nExample:- <span>, <a>, <strong>, <img>, <button>, <em>, <select>, <abbr>, <label>, <sub>, <cite>, <abbr>, <script>, <label>, <i>, <input>, <output>, <q>, etc. Block elements start on a new line and consume the full width of the page available.\nExample:- <div>, <p>, <header>, <footer>, <h1>...<h6>, <form>, <table>, <canvas>, <video>, <blockquote>, <pre>, <ul>, <ol>, <figcaption>, <figure>, <hr>, <article>, <section>, etc. Inline elements just take up the space that is absolutely necessary for the content and does not start from a new line.\nExample:- <span>, <a>, <strong>, <img>, <button>, <em>, <select>, <abbr>, <label>, <sub>, <cite>, <abbr>, <script>, <label>, <i>, <input>, <output>, <q>, etc.  Block elements start on a new line and consume the full width of the page available.\nExample:- <div>, <p>, <header>, <footer>, <h1>...<h6>, <form>, <table>, <canvas>, <video>, <blockquote>, <pre>, <ul>, <ol>, <figcaption>, <figure>, <hr>, <article>, <section>, etc.   ",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What is the difference between <figure> tag and <img> tag?",
        "answer": "The <figure> tag specifies the self-contained content, like diagrams, images, code snippets, etc. <figure> tag is used to semantically organize the contents of an image like image, image caption, etc., whereas the <img> tag is used to embed the picture in the HTML5 document.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How to specify the metadata in HTML5?",
        "answer": "To specify we can use <meta> tag which is a void tag,i.e., it does not have a closing tag. Some of the attributes used with meta tags are name, content, http-equiv, etc. The below image tells how to specify the metadata.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Is the <datalist> tag and <select> tag same?",
        "answer": "No. The <datalist> tag and <select> tag are different. In the case of <select> tag a user will have to choose from a list of options, whereas <datalist> when used along with the <input> tag provides a suggestion that the user selects one of the options given or can enter some entirely different value.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. Define Image Map?",
        "answer": "Image Map lets a developer map/link different parts of images with the different web pages. It can be achieved by the <map> tag in HTML5, using which we can link images with clickable areas. <img  src=\u201dimage_url\u201d ,  usemap=\u201d#workspace\u201d />\n<map  name=\u201dworkspace\u201d>\n     <area shape=\u201drect\u201d  coords=\u201d34, 44, 270, 350\u201d ,  href=\u201dxyz.html\u201d />\n     <area shape=\u201drect\u201d  coords=\u201d10, 120, 250, 360\u201d ,  href=\u201dxyz.html\u201d />\n</map> <img  src=\u201dimage_url\u201d ,  usemap=\u201d#workspace\u201d />\n<map  name=\u201dworkspace\u201d>\n     <area shape=\u201drect\u201d  coords=\u201d34, 44, 270, 350\u201d ,  href=\u201dxyz.html\u201d />\n     <area shape=\u201drect\u201d  coords=\u201d10, 120, 250, 360\u201d ,  href=\u201dxyz.html\u201d />\n</map> <img  src=\u201dimage_url\u201d ,  usemap=\u201d#workspace\u201d /> img src \u201dimage_url\u201d usemap \u201d#workspace\u201d <map  name=\u201dworkspace\u201d> map name \u201dworkspace\u201d <area shape=\u201drect\u201d  coords=\u201d34, 44, 270, 350\u201d ,  href=\u201dxyz.html\u201d /> area shape \u201drect\u201d coords \u201d34, 44 270 350 href \u201dxyz.html\u201d <area shape=\u201drect\u201d  coords=\u201d10, 120, 250, 360\u201d ,  href=\u201dxyz.html\u201d /> area shape \u201drect\u201d coords \u201d10, 120 250 360 href \u201dxyz.html\u201d </map> map",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What are Semantic Elements?",
        "answer": "Semantic elements are those which describe the particular meaning to the browser and the developer. Elements like <form>, <table>, <article>, <figure>, etc., are semantic elements.",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Convert the below data into Tabular format in HTML5?",
        "answer": "S.no., Language, Mostly used for 1, HTML, FrontEnd 2, CSS, FrontEnd 3, Python, BackEnd  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. What is the difference between <meter> tag and <progress> tag?",
        "answer": "<progress> tag should be used when we want to show the completion progress of a task, whereas if we just want a scalar measurement within a known range or fraction value. Also, we can specify multiple extra attributes for <meter> tags like \u2018form\u2019, \u2018low\u2019, \u2018high\u2019, \u2018min\u2019, etc.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Is drag and drop possible using HTML5 and how?",
        "answer": "Yes, in HTML5 we can drag and drop an element. This can be achieved using the drag and drop-related events to be used with the element which we want to drag and drop.",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. Difference between SVG and Canvas HTML5 element?",
        "answer": "SVG Canvas\nSVG is a vector based i.e., composed of shapes.  It is Raster based i.e., composed of pixels.\nSVG works better with a larger surface. Canvas works better with a smaller surface.\nSVG can be modified using CSS and scripts. Canvas can only be modified using scripts.\nSVG is highly scalable. So we can print at high quality with high resolution. It is less scalable. SVG Canvas\nSVG is a vector based i.e., composed of shapes.  It is Raster based i.e., composed of pixels.\nSVG works better with a larger surface. Canvas works better with a smaller surface.\nSVG can be modified using CSS and scripts. Canvas can only be modified using scripts.\nSVG is highly scalable. So we can print at high quality with high resolution. It is less scalable. SVG Canvas SVG Canvas SVG Canvas SVG is a vector based i.e., composed of shapes.  It is Raster based i.e., composed of pixels.\nSVG works better with a larger surface. Canvas works better with a smaller surface.\nSVG can be modified using CSS and scripts. Canvas can only be modified using scripts.\nSVG is highly scalable. So we can print at high quality with high resolution. It is less scalable. SVG is a vector based i.e., composed of shapes.  It is Raster based i.e., composed of pixels. SVG is a vector based i.e., composed of shapes. It is Raster based i.e., composed of pixels. SVG works better with a larger surface. Canvas works better with a smaller surface. SVG works better with a larger surface. Canvas works better with a smaller surface. SVG can be modified using CSS and scripts. Canvas can only be modified using scripts. SVG can be modified using CSS and scripts. Canvas can only be modified using scripts. SVG is highly scalable. So we can print at high quality with high resolution. It is less scalable. SVG is highly scalable. So we can print at high quality with high resolution. It is less scalable.",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. What type of audio files can be played using HTML5?",
        "answer": "HTML5 supports the following three types of audio file formats: Mp3\nWAV\nOgg Mp3 WAV Ogg",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. What are the significant goals of the HTML5 specification?",
        "answer": "These were the target area of the HTML5 specs: Introduction of new element tags to better structure the web page such as <header> tag.\nForming a standard in cross-browser behavior and support for different devices and platforms\nBackward compatible with the older version HTML web pages\nIntroduction of basic interactive elements without the dependency of plugins such as <video> tag instead of the flash plugin. Introduction of new element tags to better structure the web page such as <header> tag. Forming a standard in cross-browser behavior and support for different devices and platforms Backward compatible with the older version HTML web pages Introduction of basic interactive elements without the dependency of plugins such as <video> tag instead of the flash plugin.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. Explain the concept of web storage in HTML5.",
        "answer": "This web storage helps in storing some of the static data in the local storage of the browser so that we do not need to fetch it from the server every time we need it. There is a size limit based on different browsers. This helps in decreasing the load time and a smooth user experience. There are two types of web storage that are used to store data locally in HTML5: Local Storage - This helps in storing data that will be retained even though the user reopens the browser. It is stored for each webapp on different browsers.\nSession Storage - This is used for one session only. After the user closes the browser this gets deleted. Local Storage - This helps in storing data that will be retained even though the user reopens the browser. It is stored for each webapp on different browsers. Local Storage Session Storage - This is used for one session only. After the user closes the browser this gets deleted. Session Storage",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. What is Microdata in HTML5?",
        "answer": "It is used to help extract data for site crawlers and search engines. It is basically a group of name-value pairs. The groups are called items, and each name-value pair is a property. Most of the search engines like Google, Microsoft, Yandex, etc follow schema.org vocabulary to extract this microdata. <div itemscope itemtype=\"http://schema.org/SoftwareApplication\">\n <span itemprop=\"name\">Interviewbit Games</span> -\n REQUIRES <span itemprop=\"operatingSystem\">ANDROID</span><br>\n <link itemprop=\"applicationCategory\" href=\"http://schema.org/GameApplication\"/>\n <div itemprop=\"aggregateRating\" itemscope itemtype=\"http://schema.org/AggregateRating\">\nRATING:\n<span itemprop=\"ratingValue\">4.6</span> (\n<span itemprop=\"ratingCount\">8864</span> ratings )\n </div>\n <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\">\nPrice: Rs.<span itemprop=\"price\">1.00</span>\n<meta itemprop=\"priceCurrency\" content=\"INR\" />\n </div>\n</div> <div itemscope itemtype=\"http://schema.org/SoftwareApplication\">\n <span itemprop=\"name\">Interviewbit Games</span> -\n REQUIRES <span itemprop=\"operatingSystem\">ANDROID</span><br>\n <link itemprop=\"applicationCategory\" href=\"http://schema.org/GameApplication\"/>\n <div itemprop=\"aggregateRating\" itemscope itemtype=\"http://schema.org/AggregateRating\">\nRATING:\n<span itemprop=\"ratingValue\">4.6</span> (\n<span itemprop=\"ratingCount\">8864</span> ratings )\n </div>\n <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\">\nPrice: Rs.<span itemprop=\"price\">1.00</span>\n<meta itemprop=\"priceCurrency\" content=\"INR\" />\n </div>\n</div> <div itemscope itemtype=\"http://schema.org/SoftwareApplication\"> div itemscope itemtype \"http://schema.org/SoftwareApplication\" <span itemprop=\"name\"> span itemprop \"name\" </span> span <span itemprop=\"operatingSystem\"> span itemprop \"operatingSystem\" </span> span <br> br <link itemprop=\"applicationCategory\" href=\"http://schema.org/GameApplication\"/> link itemprop \"applicationCategory\" href \"http://schema.org/GameApplication\" <div itemprop=\"aggregateRating\" itemscope itemtype=\"http://schema.org/AggregateRating\"> div itemprop \"aggregateRating\" itemscope itemtype \"http://schema.org/AggregateRating\" <span itemprop=\"ratingValue\"> span itemprop \"ratingValue\" </span> span <span itemprop=\"ratingCount\"> span itemprop \"ratingCount\" </span> span </div> div <div itemprop=\"offers\" itemscope itemtype=\"http://schema.org/Offer\"> div itemprop \"offers\" itemscope itemtype \"http://schema.org/Offer\" <span itemprop=\"price\"> span itemprop \"price\" </span> span <meta itemprop=\"priceCurrency\" content=\"INR\" /> meta itemprop \"priceCurrency\" content \"INR\" </div> div </div> div itemid \u2013 The unique, global identifier of an item.\nitemprop \u2013 Used to add properties to an item.\nitemref \u2013 Provides a list of element ids with additional properties.\nitemscope \u2013 It defines the scope of the itemtype associated with it.\nitemtype \u2013 Specifies the URL of the vocabulary that will be used to define itemprop. itemid \u2013 The unique, global identifier of an item. itemid itemprop \u2013 Used to add properties to an item. itemprop itemref \u2013 Provides a list of element ids with additional properties. itemref itemscope \u2013 It defines the scope of the itemtype associated with it. itemscope itemtype \u2013 Specifies the URL of the vocabulary that will be used to define itemprop. itemtype The above example will be parsed by Google as  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. Which tag is used for representing the result of a calculation? Explain its attributes.",
        "answer": "The <output> tag is used for representing the result of a calculation. It has the following attributes: for - It defines the relationship between the elements used in calculation and result.\nform - This is used to define the form the output element belongs to.\nname - The name of the output element. for - It defines the relationship between the elements used in calculation and result. for form - This is used to define the form the output element belongs to. form name - The name of the output element. name <form oninput = \"result.value=parseInt(n1.value)+parseInt(n2.value)\">\n     <input type = \"number\" name = \"n1\" value = \"1\" /> +\n     <input type = \"number\" name = \"n2\" value = \"2\" /><br />\n     The output is: <output name = \"result\"></output>\n</form> <form oninput = \"result.value=parseInt(n1.value)+parseInt(n2.value)\">\n     <input type = \"number\" name = \"n1\" value = \"1\" /> +\n     <input type = \"number\" name = \"n2\" value = \"2\" /><br />\n     The output is: <output name = \"result\"></output>\n</form> <form oninput = \"result.value=parseInt(n1.value)+parseInt(n2.value)\"> form oninput \"result.value=parseInt(n1.value)+parseInt(n2.value)\" <input type = \"number\" name = \"n1\" value = \"1\" /> input type \"number\" name \"n1\" value \"1\" <input type = \"number\" name = \"n2\" value = \"2\" /> input type \"number\" name \"n2\" value \"2\" <br /> br <output name = \"result\"> output name \"result\" </output> output </form> form The above example looks like  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. How can we include audio or video in a webpage?",
        "answer": "HTML5 provides two tags: <audio> and <video> tags using which we can add the audio or video directly in the webpage.",
        "reference": "interviewbit.com"
    },
    {
        "question": "18. Explain HTML5 Graphics.",
        "answer": "HTML5 supports two kinds of graphics: Canvas - It is like drawing on a whitepaper or a blank webpage. We can add different graphic designs on web pages with available methods for drawing various geometrical shapes. Canvas - It is like drawing on a whitepaper or a blank webpage. We can add different graphic designs on web pages with available methods for drawing various geometrical shapes. Canvas <!DOCTYPE HTML>\n<html>\n <head>\n </head>\n <body>\n   <canvas width=\"300\" height=\"100\" style=\"border:2px solid;\"></canvas>  \n </body>\n</html> <!DOCTYPE HTML>\n<html>\n <head>\n </head>\n <body>\n   <canvas width=\"300\" height=\"100\" style=\"border:2px solid;\"></canvas>  \n </body>\n</html> <!DOCTYPE HTML> HTML <html> html <head> head </head> head <body> body <canvas width=\"300\" height=\"100\" style=\"border:2px solid;\"> canvas width \"300\" height \"100\" style \"border:2px solid;\" </canvas> canvas </body> body </html> html SVG - Scalable Vector Graphics are used mostly for diagrams or icons. It follows the XML format. SVG - Scalable Vector Graphics are used mostly for diagrams or icons. It follows the XML format. SVG <!DOCTYPE html>\n<html>\n <body>\n   <svg width=\"400\" height=\"110\">\n     <rect width=\"300\" height=\"100\" style=\"fill:#FFF;stroke-width:2;stroke:#000\" />\n   </svg>\n </body>\n</html> <!DOCTYPE html>\n<html>\n <body>\n   <svg width=\"400\" height=\"110\">\n     <rect width=\"300\" height=\"100\" style=\"fill:#FFF;stroke-width:2;stroke:#000\" />\n   </svg>\n </body>\n</html> <!DOCTYPE html> html <html> html <body> body <svg width=\"400\" height=\"110\"> svg width \"400\" height \"110\" <rect width=\"300\" height=\"100\" style=\"fill:#FFF;stroke-width:2;stroke:#000\" /> rect width \"300\" height \"100\" style \"fill:#FFF;stroke-width:2;stroke:#000\" </svg> svg </body> body </html> html Both of the above examples produce this output and represent two different approaches provided by HTML5 to implement graphical aspects in the webpage.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "19. Explain new input types provided by HTML5 for forms?",
        "answer": "Following are the significant new data types offered by HTML5: Date - Only select date by using type = \"date\"\nWeek - Pick a week by using type = \"week\"\nMonth - Only select month by using type = \"month\"\nTime - Only select time by using type = \"time\".\nDatetime - Combination of date and time by using type = \"datetime\"\nDatetime-local - Combination of  date and time by using type = \"datetime-local.\" but ignoring the timezone\nColor - Accepts multiple colors using type = \"color\"\nEmail - Accepts one or more email addresses using type = \"email\"\nNumber - Accepts a numerical value with additional checks like min and max using type = \"number\"\nSearch - Allows searching queries by inputting text using type = \"search\"\nTel - Allows different phone numbers by using type = \"tel\"\nPlaceholder - To display a short hint in the input fields before entering a value using type = \"placeholder\"\nRange - Accepts a numerical value within a specific range using type = \"range\"\nUrl - Accepts a web address using type = \"url\u201d Date - Only select date by using type = \"date\" Week - Pick a week by using type = \"week\" Month - Only select month by using type = \"month\" Time - Only select time by using type = \"time\". Datetime - Combination of date and time by using type = \"datetime\" Datetime-local - Combination of  date and time by using type = \"datetime-local.\" but ignoring the timezone Color - Accepts multiple colors using type = \"color\" Email - Accepts one or more email addresses using type = \"email\" Number - Accepts a numerical value with additional checks like min and max using type = \"number\" Search - Allows searching queries by inputting text using type = \"search\" Tel - Allows different phone numbers by using type = \"tel\" Placeholder - To display a short hint in the input fields before entering a value using type = \"placeholder\" Range - Accepts a numerical value within a specific range using type = \"range\" Url - Accepts a web address using type = \"url\u201d <form>  \n        <div>\n            <label>Date:</label>\n            <input type=\"date\" id=\"date\" />\n            <br>\n            <label>Week:</label>\n            <input type=\"week\" id=\"week\" />\n            <br>\n            <label>Month:</label>\n            <input type=\"month\" id=\"month\" />\n            <br>\n            <label>Time:</label>\n            <input type=\"time\" id=\"time\" />\n            <br>\n            <label>Datetime:</label>\n            <input type=\"datetime\" id=\"datetime\" />\n            <br>\n            <label>Datetime Local:</label>\n            <input type=\"datetime-local\" id=\"datetime-local\" />\n            <br>\n            <label>Color:</label>\n            <input type=\"color\" id=\"color\"/>\n            <br>\n            <label>Email:</label>\n            <input type=\"email\" id=\"email\" placeholder=\"email address\" />\n            <br>\n            <label>Number:</label>\n            <input type=\"number\" id=\"number\" />\n            <br>\n            <label>Search:</label>\n            <input type=\"search\" id=\"search\" />\n            <br>\n            <label>Phone:</label>\n            <input type=\"tel\" id=\"phone\" placeholder=\"Phone Number\" pattern=\"\\d{10}$\" />\n            <br>\n            <label>Range:</label>\n            <input type=\"range\" id=\"range\" />\n            <br>\n            <label>URL:</label>\n            <input type=\"url\" id=\"url\"/>\n        </div>  \n    </form> <form>  \n        <div>\n            <label>Date:</label>\n            <input type=\"date\" id=\"date\" />\n            <br>\n            <label>Week:</label>\n            <input type=\"week\" id=\"week\" />\n            <br>\n            <label>Month:</label>\n            <input type=\"month\" id=\"month\" />\n            <br>\n            <label>Time:</label>\n            <input type=\"time\" id=\"time\" />\n            <br>\n            <label>Datetime:</label>\n            <input type=\"datetime\" id=\"datetime\" />\n            <br>\n            <label>Datetime Local:</label>\n            <input type=\"datetime-local\" id=\"datetime-local\" />\n            <br>\n            <label>Color:</label>\n            <input type=\"color\" id=\"color\"/>\n            <br>\n            <label>Email:</label>\n            <input type=\"email\" id=\"email\" placeholder=\"email address\" />\n            <br>\n            <label>Number:</label>\n            <input type=\"number\" id=\"number\" />\n            <br>\n            <label>Search:</label>\n            <input type=\"search\" id=\"search\" />\n            <br>\n            <label>Phone:</label>\n            <input type=\"tel\" id=\"phone\" placeholder=\"Phone Number\" pattern=\"\\d{10}$\" />\n            <br>\n            <label>Range:</label>\n            <input type=\"range\" id=\"range\" />\n            <br>\n            <label>URL:</label>\n            <input type=\"url\" id=\"url\"/>\n        </div>  \n    </form> <form> form <div> div <label> label </label> label <input type=\"date\" id=\"date\" /> input type \"date\" id \"date\" <br> br <label> label </label> label <input type=\"week\" id=\"week\" /> input type \"week\" id \"week\" <br> br <label> label </label> label <input type=\"month\" id=\"month\" /> input type \"month\" id \"month\" <br> br <label> label </label> label <input type=\"time\" id=\"time\" /> input type \"time\" id \"time\" <br> br <label> label </label> label <input type=\"datetime\" id=\"datetime\" /> input type \"datetime\" id \"datetime\" <br> br <label> label </label> label <input type=\"datetime-local\" id=\"datetime-local\" /> input type \"datetime-local\" id \"datetime-local\" <br> br <label> label </label> label <input type=\"color\" id=\"color\"/> input type \"color\" id \"color\" <br> br <label> label </label> label <input type=\"email\" id=\"email\" placeholder=\"email address\" /> input type \"email\" id \"email\" placeholder \"email address\" <br> br <label> label </label> label <input type=\"number\" id=\"number\" /> input type \"number\" id \"number\" <br> br <label> label </label> label <input type=\"search\" id=\"search\" /> input type \"search\" id \"search\" <br> br <label> label </label> label <input type=\"tel\" id=\"phone\" placeholder=\"Phone Number\" pattern=\"\\d{10}$\" /> input type \"tel\" id \"phone\" placeholder \"Phone Number\" pattern \"\\d{10}$\" <br> br <label> label </label> label <input type=\"range\" id=\"range\" /> input type \"range\" id \"range\" <br> br <label> label </label> label <input type=\"url\" id=\"url\"/> input type \"url\" id \"url\" </div> div </form> form  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "20. What are the New tags in Media Elements in HTML5?",
        "answer": "<audio> - Used for sounds, audio streams, or music, embed audio content without any additional plug-in.\n<video> - Used for video streams, embed video content etc.\n<source> - Used for multiple media resources in media elements, such as audio, video, etc.\n<embed> - Used for an external application or embedded content.\n<track> - Used for subtitles in the media elements such as video or audio. <audio> - Used for sounds, audio streams, or music, embed audio content without any additional plug-in. <audio> <video> - Used for video streams, embed video content etc. <video> <source> - Used for multiple media resources in media elements, such as audio, video, etc. <source> <embed> - Used for an external application or embedded content. <embed> <track> - Used for subtitles in the media elements such as video or audio. <track> <label>\n       Video:\n   </label>\n    <video width=\"320\" height=\"240\" controls>\n        <source src=\"video.mp4\" type=\"video/mp4\">\n        <track src=\"subtitles.vtt\" kind=\"subtitles\" srclang=\"en\" label=\"English\">\n    </video>\n    <br>\n    <label>\n        Embed:\n    </label>\n    <embed type=\"video/webm\" src=\"https://www.youtube.com/embed/MpoE6s2psCw\" width=\"400\" height=\"300\">\n    <br>\n    <label>\n        Audio:\n    </label>\n    <audio controls>\n        <source src=\"audio.mp3\" type=\"audio/mpeg\">\n    </audio> <label>\n       Video:\n   </label>\n    <video width=\"320\" height=\"240\" controls>\n        <source src=\"video.mp4\" type=\"video/mp4\">\n        <track src=\"subtitles.vtt\" kind=\"subtitles\" srclang=\"en\" label=\"English\">\n    </video>\n    <br>\n    <label>\n        Embed:\n    </label>\n    <embed type=\"video/webm\" src=\"https://www.youtube.com/embed/MpoE6s2psCw\" width=\"400\" height=\"300\">\n    <br>\n    <label>\n        Audio:\n    </label>\n    <audio controls>\n        <source src=\"audio.mp3\" type=\"audio/mpeg\">\n    </audio> <label> label </label> label <video width=\"320\" height=\"240\" controls> video width \"320\" height \"240\" controls <source src=\"video.mp4\" type=\"video/mp4\"> source src \"video.mp4\" type \"video/mp4\" <track src=\"subtitles.vtt\" kind=\"subtitles\" srclang=\"en\" label=\"English\"> track src \"subtitles.vtt\" kind \"subtitles\" srclang \"en\" label \"English\" </video> video <br> br <label> label </label> label <embed type=\"video/webm\" src=\"https://www.youtube.com/embed/MpoE6s2psCw\" width=\"400\" height=\"300\"> embed type \"video/webm\" src \"https://www.youtube.com/embed/MpoE6s2psCw\" width \"400\" height \"300\" <br> br <label> label </label> label <audio controls> audio controls <source src=\"audio.mp3\" type=\"audio/mpeg\"> source src \"audio.mp3\" type \"audio/mpeg\" </audio> audio  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "21. Why do you think the addition of drag-and-drop functionality in HTML5 is important? How will you make an image draggable in HTML5?",
        "answer": "The drag and drop functionality is a very intuitive way to select local files. This is similar to what most of the OS have copy functionality thus making it very easy for the user to comprehend. Before the native drag and drop API, this was achievable by writing complex Javascript programming or external frameworks like jQuery. To enable this functionality there is a draggable attribute in the <img> tag and need to set ondrop and ondragover attribute to an eventhandler available in scripts. <!DOCTYPE HTML>\n<html>\n <head>\n   <script>\n     function allowDrop(ev) {\n       ev.preventDefault();\n     }\n     function drop(ev) {\n       ...\n     }\n   </script>\n </head>\n <body>\n   ...\n   <div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" style=\"border: 1px solid #aaaaaa; width:350px; height: 70px;\"></div>\n   <br>\n   <img id=\"drag1\" src=\"img_logo.gif\" draggable=\"true\" width=\"336\" height=\"69\">\n    ...\n </body>\n</html> <!DOCTYPE HTML>\n<html>\n <head>\n   <script>\n     function allowDrop(ev) {\n       ev.preventDefault();\n     }\n     function drop(ev) {\n       ...\n     }\n   </script>\n </head>\n <body>\n   ...\n   <div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" style=\"border: 1px solid #aaaaaa; width:350px; height: 70px;\"></div>\n   <br>\n   <img id=\"drag1\" src=\"img_logo.gif\" draggable=\"true\" width=\"336\" height=\"69\">\n    ...\n </body>\n</html> <!DOCTYPE HTML> HTML <html> html <head> head <script> script function allowDrop(ev) {\n       ev.preventDefault();\n     }\n     function drop(ev) {\n       ...\n     } function allowDrop(ev) function allowDrop ev function drop(ev) function drop ev </script> script </head> head <body> body <div id=\"div1\" ondrop=\"drop(event)\" ondragover=\"allowDrop(event)\" style=\"border: 1px solid #aaaaaa; width:350px; height: 70px;\"> div id \"div1\" ondrop \"drop(event)\" ondragover \"allowDrop(event)\" style \"border: 1px solid #aaaaaa; width:350px; height: 70px;\" </div> div <br> br <img id=\"drag1\" src=\"img_logo.gif\" draggable=\"true\" width=\"336\" height=\"69\"> img id \"drag1\" src \"img_logo.gif\" draggable \"true\" width \"336\" height \"69\" </body> body </html> html",
        "reference": "interviewbit.com"
    },
    {
        "question": "22. Why do we need the MathML element in HTML5?",
        "answer": "MathML stands for Mathematical Markup Language. It is used for displaying mathematical expressions on web pages. For this <math> tag is used. <!DOCTYPE HTML>\n<html>\n <head>\n </head>\n <body>\n<math>\n  <mrow>\n    <mrow>\n      <msup>\n        <mi> a </mi>\n        <mn> 2 </mn>\n      </msup>\n      <mo> + </mo>\n      <msup>\n        <mi> b </mi>\n        <mn> 2 </mn>\n      </msup>\n      <mo> + </mo>\n      <mn> 2 </mn>\n      <mn> a </mn>\n      <mn> b </mn>\n    </mrow>\n    <mo> = </mo>\n    <mn> 0 </mn>\n  </mrow>\n</math>\n </body>\n</html> <!DOCTYPE HTML>\n<html>\n <head>\n </head>\n <body>\n<math>\n  <mrow>\n    <mrow>\n      <msup>\n        <mi> a </mi>\n        <mn> 2 </mn>\n      </msup>\n      <mo> + </mo>\n      <msup>\n        <mi> b </mi>\n        <mn> 2 </mn>\n      </msup>\n      <mo> + </mo>\n      <mn> 2 </mn>\n      <mn> a </mn>\n      <mn> b </mn>\n    </mrow>\n    <mo> = </mo>\n    <mn> 0 </mn>\n  </mrow>\n</math>\n </body>\n</html> <!DOCTYPE HTML> HTML <html> html <head> head </head> head <body> body <math> math <mrow> mrow <mrow> mrow <msup> msup <mi> mi </mi> mi <mn> mn </mn> mn </msup> msup <mo> mo </mo> mo <msup> msup <mi> mi </mi> mi <mn> mn </mn> mn </msup> msup <mo> mo </mo> mo <mn> mn </mn> mn <mn> mn </mn> mn <mn> mn </mn> mn </mrow> mrow <mo> mo </mo> mo <mn> mn </mn> mn </mrow> mrow </math> math </body> body </html> html This displays the equation a2 + b2 + 2ab = 0.",
        "reference": "interviewbit.com"
    },
    {
        "question": "23. What are the server-sent events in HTML5?",
        "answer": "The events pushed from the webserver to the browsers are called server-sent events. DOM elements can be continuously updated using these events. This has a major advantage over straight-up polling. In polling, there is a lot of overhead since every time it is establishing an HTTP connection and tearing it down whereas, in server-sent events, there is one long-lived HTTP connection. To use a server-sent event, <eventsource> element is used. The src attribute of this element specifies the URL from which sends a data stream having the events. <eventsource src = \"/cgi-bin/myfile.cgi\" /> <eventsource src = \"/cgi-bin/myfile.cgi\" /> <eventsource src = \"/cgi-bin/myfile.cgi\" /> eventsource src \"/cgi-bin/myfile.cgi\"",
        "reference": "interviewbit.com"
    },
    {
        "question": "24. What are Web Workers?",
        "answer": "These are added to bring parallelism and async capability. It runs in the background to do the computationally expensive tasks without yielding to make the page responsive. It is achieved by starting a separate thread for such tasks. These are not meant to perform UI operations. There are three types of web workers: Dedicated Workers - These are workers that are utilized by a single script.\nShared Workers -These are workers that are utilized by multiple scripts running in different windows, IFrames, etc.\nService Workers - These act as proxy servers between web applications, the browser, and the network. Mostly used for push notifications and sync APIs. Dedicated Workers - These are workers that are utilized by a single script. Dedicated Workers Shared Workers -These are workers that are utilized by multiple scripts running in different windows, IFrames, etc. Shared Workers Service Workers - These act as proxy servers between web applications, the browser, and the network. Mostly used for push notifications and sync APIs. Service Workers <p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nvar w;\nfunction startWorker() {\n if(typeof(Worker) !== \"undefined\") {\nif(typeof(w) == \"undefined\") {\n  w = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\n  document.getElementById(\"result\").innerHTML = event.data;\n};\n }\n}\nfunction stopWorker() {\n w.terminate();\n w = undefined;\n}\n</script> <p>Count numbers: <output id=\"result\"></output></p>\n<button onclick=\"startWorker()\">Start Worker</button>\n<button onclick=\"stopWorker()\">Stop Worker</button>\n<script>\nvar w;\nfunction startWorker() {\n if(typeof(Worker) !== \"undefined\") {\nif(typeof(w) == \"undefined\") {\n  w = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\n  document.getElementById(\"result\").innerHTML = event.data;\n};\n }\n}\nfunction stopWorker() {\n w.terminate();\n w = undefined;\n}\n</script> <p> p <output id=\"result\"> output id \"result\" </output> output </p> p <button onclick=\"startWorker()\"> button onclick \"startWorker()\" </button> button <button onclick=\"stopWorker()\"> button onclick \"stopWorker()\" </button> button <script> script var w;\nfunction startWorker() {\n if(typeof(Worker) !== \"undefined\") {\nif(typeof(w) == \"undefined\") {\n  w = new Worker(\"demo_workers.js\");\n}\nw.onmessage = function(event) {\n  document.getElementById(\"result\").innerHTML = event.data;\n};\n }\n}\nfunction stopWorker() {\n w.terminate();\n w = undefined;\n} var function startWorker() function startWorker  if typeof \"undefined\" if typeof \"undefined\" new \"demo_workers.js\" function(event) function event document \"result\" function stopWorker() function stopWorker  undefined </script> script  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "25. What is the usage of a novalidate attribute for the form tag that is introduced in HTML5?",
        "answer": "Its value is a boolean type that indicates whether or not the data being submitted by the form will be validated beforehand. By making this false, forms can be submitted without validation which helps users to resume later also. <form action = \"\" method = \"get\" novalidate>\n        Name:<br><input type=\"name\" name=\"sname\"><br>\n       Doubt:<br><input type=\"number\" name=\"doubt\"><br>\n        <input type=\"submit\" value=\"Submit\">\n</form> <form action = \"\" method = \"get\" novalidate>\n        Name:<br><input type=\"name\" name=\"sname\"><br>\n       Doubt:<br><input type=\"number\" name=\"doubt\"><br>\n        <input type=\"submit\" value=\"Submit\">\n</form> <form action = \"\" method = \"get\" novalidate> form action \"\" method \"get\" novalidate <br> br <input type=\"name\" name=\"sname\"> input type \"name\" name \"sname\" <br> br <br> br <input type=\"number\" name=\"doubt\"> input type \"number\" name \"doubt\" <br> br <input type=\"submit\" value=\"Submit\"> input type \"submit\" value \"Submit\" </form> form",
        "reference": "interviewbit.com"
    },
    {
        "question": "26. What are raster images and vector images?",
        "answer": "Raster Images - The raster image is defined by the arrangement of pixels in a grid with exactly what color the pixel should be. Few raster file formats include PNG(.png), JPEG(.jpg), etc.\nVector Images - The vector image is defined using algorithms with shape and path definitions that can be used to render the image on-screen written in a similar markup fashion. The file extension is .svg Raster Images  Vector Images",
        "reference": "interviewbit.com"
    },
    {
        "question": "27. How to support SVG in old browsers?",
        "answer": "To support old browsers instead of defining the resource of svg in src attribute of <img> tag, it should be defined in srcset attribute and in src the fallback png file should be defined. <img src=\"circle.png\" alt=\"circle\" srcset=\"circle.svg\"> <img src=\"circle.png\" alt=\"circle\" srcset=\"circle.svg\"> <img src=\"circle.png\" alt=\"circle\" srcset=\"circle.svg\"> img src \"circle.png\" alt \"circle\" srcset \"circle.svg\"",
        "reference": "interviewbit.com"
    },
    {
        "question": "28. What are different approaches to make an image responsive?",
        "answer": "Art direction - Using <picture> element the landscape image fully shown in desktop layout can be zoomed in with the main subject in focus for a portrait layout. Art direction - Using <picture> element the landscape image fully shown in desktop layout can be zoomed in with the main subject in focus for a portrait layout. Art direction <picture>\n <source media=\"(min-width: 650px)\" srcset=\"img_cup.jpg\">\n <img src=\"img_marsh.jpg\" style=\"width:auto;\">\n</picture> <picture>\n <source media=\"(min-width: 650px)\" srcset=\"img_cup.jpg\">\n <img src=\"img_marsh.jpg\" style=\"width:auto;\">\n</picture> <picture> picture <source media=\"(min-width: 650px)\" srcset=\"img_cup.jpg\"> source media \"(min-width: 650px)\" srcset \"img_cup.jpg\" <img src=\"img_marsh.jpg\" style=\"width:auto;\"> img src \"img_marsh.jpg\" style \"width:auto;\" </picture> picture Bigger Screen (>650px) Bigger Screen (>650px) Bigger Screen (>650px)   For any other screen For any other screen For any other screen   Resolution switching - Instead of zoom and crop the images can be scaled accordingly using vector graphics. Also, this can be further optimized to serve different pixel density screens as well. Resolution switching - Instead of zoom and crop the images can be scaled accordingly using vector graphics. Also, this can be further optimized to serve different pixel density screens as well. Resolution switching For example SVG For example SVG For example SVG <svg width=\"100\" height=\"100\">\n <circle cx=\"50\" cy=\"50\" r=\"40\"\n stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg> <svg width=\"100\" height=\"100\">\n <circle cx=\"50\" cy=\"50\" r=\"40\"\n stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" />\n</svg> <svg width=\"100\" height=\"100\"> svg width \"100\" height \"100\" <circle cx=\"50\" cy=\"50\" r=\"40\"\n stroke=\"green\" stroke-width=\"4\" fill=\"yellow\" /> circle cx \"50\" cy \"50\" r \"40\" stroke \"green\" stroke-width \"4\" fill \"yellow\" </svg> svg  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "29. What is a manifest file in HTML5?",
        "answer": "The manifest file is used to list down resources that can be cached. Browsers use this information to make the web page load faster than the first time. There are 3 sections in the manifest file CACHE Manifest - Files needs to be cached\nNetwork - File never to be cached, always need a network connection.\nFallback - Fallback files in case a page is inaccessible CACHE Manifest - Files needs to be cached CACHE Manifest Network - File never to be cached, always need a network connection. Network Fallback - Fallback files in case a page is inaccessible Fallback CACHE MANIFEST\n# 2012-06-16 v1.0.0\n/style.css\n/logo.gif\n/main.js\nNETWORK:\nlogin.php\nFALLBACK:\n/html/ /offline.html CACHE MANIFEST\n# 2012-06-16 v1.0.0\n/style.css\n/logo.gif\n/main.js\nNETWORK:\nlogin.php\nFALLBACK:\n/html/ /offline.html <!DOCTYPE HTML>\n<html manifest=\"tutorial.appcache\">\n...\n...\n</html> <!DOCTYPE HTML>\n<html manifest=\"tutorial.appcache\">\n...\n...\n</html> <!DOCTYPE HTML> HTML <html manifest=\"tutorial.appcache\"> html manifest \"tutorial.appcache\" </html> html",
        "reference": "interviewbit.com"
    },
    {
        "question": "30. What is the Geolocation API in HTML5?",
        "answer": "Geolocation API is used to share the physical location of the client with websites. This helps in serving locale-based content and a unique experience to the user, based on their location. This works with a new property of the global navigator object and most of the modern browsers support this. var geolocation = navigator.geolocation; var geolocation = navigator.geolocation; var",
        "reference": "interviewbit.com"
    },
    {
        "question": "31. Write HTML5 code to demonstrate the use of Geolocation API.",
        "answer": "<!DOCTYPE html>\n<html>\n  <body>\n     <p>Click \"try it\" button to get your coordinates.</p>\n     <button onclick=\"getLocation()\">Try It</button>\n     <p id=\"demo\"></p>\n     <script>\n        var x = document.getElementById(\"demo\");\n        \n        function getLocation() {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(showPosition);\n          } else { \n            x.innerHTML = \"Geolocation functionality is not supported by this browser.\";\n          }\n        }\n        \n        function showPosition(position) {\n          x.innerHTML = \"Latitude: \" + position.coords.latitude + \n          \"<br>Longitude: \" + position.coords.longitude;\n        }\n     </script>\n  </body>\n</html> <!DOCTYPE html>\n<html>\n  <body>\n     <p>Click \"try it\" button to get your coordinates.</p>\n     <button onclick=\"getLocation()\">Try It</button>\n     <p id=\"demo\"></p>\n     <script>\n        var x = document.getElementById(\"demo\");\n        \n        function getLocation() {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(showPosition);\n          } else { \n            x.innerHTML = \"Geolocation functionality is not supported by this browser.\";\n          }\n        }\n        \n        function showPosition(position) {\n          x.innerHTML = \"Latitude: \" + position.coords.latitude + \n          \"<br>Longitude: \" + position.coords.longitude;\n        }\n     </script>\n  </body>\n</html> <!DOCTYPE html> html <html> html <body> body <p> p </p> p <button onclick=\"getLocation()\"> button onclick \"getLocation()\" </button> button <p id=\"demo\"> p id \"demo\" </p> p <script> script var x = document.getElementById(\"demo\");\n        \n        function getLocation() {\n          if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(showPosition);\n          } else { \n            x.innerHTML = \"Geolocation functionality is not supported by this browser.\";\n          }\n        }\n        \n        function showPosition(position) {\n          x.innerHTML = \"Latitude: \" + position.coords.latitude + \n          \"<br>Longitude: \" + position.coords.longitude;\n        } var document \"demo\" function getLocation() function getLocation  if else \"Geolocation functionality is not supported by this browser.\" function showPosition(position) function showPosition position \"Latitude: \" \"<br>Longitude: \" </script> script </body> body </html> html The above example asks for user permission for accessing the location data via geolocation API and after clicking the button the coordinates of the physical location of the client get displayed.  ",
        "reference": "interviewbit.com"
    },
    {
        "question": "32. Explain Web Components and it\u2019s usage.",
        "answer": "These are used to create reusable custom elements which are very difficult in traditional HTML. It consists of three technologies: Custom elements - These are JavaScript APIs that help in defining custom elements and their behavior.\nShadow DOM - These are JavaScript APIs that attach an encapsulated shadow DOM tree to an element to keep the element\u2019s features private and unaffected by other parts. Custom elements - These are JavaScript APIs that help in defining custom elements and their behavior. Custom elements Shadow DOM - These are JavaScript APIs that attach an encapsulated shadow DOM tree to an element to keep the element\u2019s features private and unaffected by other parts. Shadow DOM <!DOCTYPE html>\n<html>\n <head>\n<meta charset=\"utf-8\">\n<title>composed and composedPath demo</title>\n<script src=\"main.js\" defer></script>\n </head>\n <body>\n<h1><code>composed</code> and <code>composedPath</code> demo</h1>\n<open-shadow text=\"I have an open shadow root\"></open-shadow>\n<closed-shadow text=\"I have a closed shadow root\"></closed-shadow>\n </body>\n</html> <!DOCTYPE html>\n<html>\n <head>\n<meta charset=\"utf-8\">\n<title>composed and composedPath demo</title>\n<script src=\"main.js\" defer></script>\n </head>\n <body>\n<h1><code>composed</code> and <code>composedPath</code> demo</h1>\n<open-shadow text=\"I have an open shadow root\"></open-shadow>\n<closed-shadow text=\"I have a closed shadow root\"></closed-shadow>\n </body>\n</html> <!DOCTYPE html> html <html> html <head> head <meta charset=\"utf-8\"> meta charset \"utf-8\" <title> title </title> title <script src=\"main.js\" defer> script src \"main.js\" defer </script> script </head> head <body> body <h1> h1 <code> code </code> code <code> code </code> code </h1> h1 <open-shadow text=\"I have an open shadow root\"> open-shadow text \"I have an open shadow root\" </open-shadow> open-shadow <closed-shadow text=\"I have a closed shadow root\"> closed-shadow text \"I have a closed shadow root\" </closed-shadow> closed-shadow </body> body </html> html customElements.define('open-shadow',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const pElem = document.createElement('p');\n  pElem.textContent = this.getAttribute('text');\n  const shadowRoot = this.attachShadow({mode: 'open'});\n  shadowRoot.appendChild(pElem);\n}\n }\n);\ncustomElements.define('closed-shadow',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const pElem = document.createElement('p');\n  pElem.textContent = this.getAttribute('text');\n  const shadowRoot = this.attachShadow({mode: 'closed'});\n  shadowRoot.appendChild(pElem);\n}\n }\n);\ndocument.querySelector('html').addEventListener('click', e => {\n console.log(e.composed);\n console.log(e.composedPath());\n}); customElements.define('open-shadow',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const pElem = document.createElement('p');\n  pElem.textContent = this.getAttribute('text');\n  const shadowRoot = this.attachShadow({mode: 'open'});\n  shadowRoot.appendChild(pElem);\n}\n }\n);\ncustomElements.define('closed-shadow',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const pElem = document.createElement('p');\n  pElem.textContent = this.getAttribute('text');\n  const shadowRoot = this.attachShadow({mode: 'closed'});\n  shadowRoot.appendChild(pElem);\n}\n }\n);\ndocument.querySelector('html').addEventListener('click', e => {\n console.log(e.composed);\n console.log(e.composedPath());\n}); 'open-shadow' class extends HTMLElement class extends HTMLElement constructor() constructor  super const document 'p' this 'text' const this mode 'open' 'closed-shadow' class extends HTMLElement class extends HTMLElement constructor() constructor  super const document 'p' this 'text' const this mode 'closed' document 'html' 'click' e => e console console   Here 2 custom elements are defined <open-shadow> and <closed-shadow> which takes their text content and inserts them into a shadow DOM as content of a <p> element. HTML templates - The markup templates are written using <template> and <slot> elements which can be reused multiple times as the basis of a custom element's structure. HTML templates - The markup templates are written using <template> and <slot> elements which can be reused multiple times as the basis of a custom element's structure. HTML templates <!DOCTYPE html>\n<html>\n<head>\n <meta charset=\"utf-8\">\n <title>Simple template</title>\n <script src=\"main.js\"></script>\n</head>\n<body>\n <h1>Simple template</h1>\n <template id=\"my-paragraph\">\n<style>\n  p {\n    color: white;\n    background-color: #666;\n    padding: 5px;\n  }\n</style>\n<p><slot name=\"my-text\">My default text</slot></p>\n </template>\n <my-paragraph>\n<span slot=\"my-text\">Let's have some different text!</span>\n </my-paragraph>\n <my-paragraph>\n<ul slot=\"my-text\">\n  <li>Let's have some different text!</li>\n  <li>In a list!</li>\n</ul>\n </my-paragraph>\n</body>\n</html> <!DOCTYPE html>\n<html>\n<head>\n <meta charset=\"utf-8\">\n <title>Simple template</title>\n <script src=\"main.js\"></script>\n</head>\n<body>\n <h1>Simple template</h1>\n <template id=\"my-paragraph\">\n<style>\n  p {\n    color: white;\n    background-color: #666;\n    padding: 5px;\n  }\n</style>\n<p><slot name=\"my-text\">My default text</slot></p>\n </template>\n <my-paragraph>\n<span slot=\"my-text\">Let's have some different text!</span>\n </my-paragraph>\n <my-paragraph>\n<ul slot=\"my-text\">\n  <li>Let's have some different text!</li>\n  <li>In a list!</li>\n</ul>\n </my-paragraph>\n</body>\n</html> <!DOCTYPE html> html <html> html <head> head <meta charset=\"utf-8\"> meta charset \"utf-8\" <title> title </title> title <script src=\"main.js\"> script src \"main.js\" </script> script </head> head <body> body <h1> h1 </h1> h1 <template id=\"my-paragraph\"> template id \"my-paragraph\" <style> style p {\n    color: white;\n    background-color: #666;\n    padding: 5px;\n  } p color background-color #666 padding 5px </style> style <p> p <slot name=\"my-text\"> slot name \"my-text\" </slot> slot </p> p </template> template <my-paragraph> my-paragraph <span slot=\"my-text\"> span slot \"my-text\" </span> span </my-paragraph> my-paragraph <my-paragraph> my-paragraph <ul slot=\"my-text\"> ul slot \"my-text\" <li> li </li> li <li> li </li> li </ul> ul </my-paragraph> my-paragraph </body> body </html> html customElements.define('my-paragraph',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const template = document.getElementById('my-paragraph');\n  const templateContent = template.content;\n  this.attachShadow({mode: 'open'}).appendChild(\n    templateContent.cloneNode(true)\n  );\n}\n }\n);\nconst slottedSpan = document.querySelector('my-paragraph span');\nconsole.log(slottedSpan.assignedSlot);\nconsole.log(slottedSpan.slot); customElements.define('my-paragraph',\n class extends HTMLElement {\nconstructor() {\n  super();\n  const template = document.getElementById('my-paragraph');\n  const templateContent = template.content;\n  this.attachShadow({mode: 'open'}).appendChild(\n    templateContent.cloneNode(true)\n  );\n}\n }\n);\nconst slottedSpan = document.querySelector('my-paragraph span');\nconsole.log(slottedSpan.assignedSlot);\nconsole.log(slottedSpan.slot); 'my-paragraph' class extends HTMLElement class extends HTMLElement constructor() constructor  super const document 'my-paragraph' const this mode 'open' true const document 'my-paragraph span' console console   Here we are reusing the <my-paragraph> template. References: Mozilla MDN Mozilla MDN W3C W3C Additional Resource Practice Coding\nFeatures of HTML\nHTML MCQ\nHTML Books\nHTML Projects\nHTML IDE\nHTML5 Features\nDifferent types of css\nTop Web Developer Interview Questions\nHow To Become Front End Developer\nDifference Between HTML and HTML5\nDifference Between Frontend and Backend\nDifference Between HTML and JavaScript\nDifference Between HTML and XML\nDifference Between HTML and XHTML\nDifference Between HTML and CSS\nView All Technical Interview Questions Practice Coding Practice Coding Features of HTML Features of HTML HTML MCQ HTML MCQ HTML Books HTML Books HTML Projects HTML Projects HTML IDE HTML IDE HTML5 Features HTML5 Features Different types of css Different types of css Top Web Developer Interview Questions Top Web Developer Interview Questions How To Become Front End Developer How To Become Front End Developer Difference Between HTML and HTML5 Difference Between HTML and HTML5 Difference Between Frontend and Backend Difference Between Frontend and Backend Difference Between HTML and JavaScript Difference Between HTML and JavaScript Difference Between HTML and XML Difference Between HTML and XML Difference Between HTML and XHTML Difference Between HTML and XHTML Difference Between HTML and CSS Difference Between HTML and CSS View All Technical Interview Questions View All Technical Interview Questions",
        "reference": "interviewbit.com"
    },
    {
        "question": "33. What are some of the advantages of HTML5 over its previous versions?",
        "answer": "Some advantages of HTML5 are:- It has Multimedia Support.\nIt has the capabilities to store offline data using SQL databases and application cache.\nJavascript can be run in the background.\nHTML5 also allows users to draw various shapes like rectangles, circles, triangles, etc.\nIncluded new Semantic tags and form control tags. It has Multimedia Support. It has the capabilities to store offline data using SQL databases and application cache. Javascript can be run in the background. HTML5 also allows users to draw various shapes like rectangles, circles, triangles, etc. Included new Semantic tags and form control tags.",
        "reference": "interviewbit.com"
    }
]