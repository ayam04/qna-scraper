[
    {
        "question": "1. What is Pandas in Python?",
        "answer": "Pandas is an open-source Python package that is most commonly used for data science, data analysis, and machine learning tasks. It is built on top of another library named Numpy. It provides various data structures and operations for manipulating numerical data and time series and is very efficient in performing various functions like data visualization, data manipulation, data analysis, etc. Numpy",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. Mention the different types of Data Structures in Pandas?",
        "answer": "Pandas have three different types of data structures. It is due to these simple and flexible data structures that it is fast and efficient. Series - It is a one-dimensional array-like structure with homogeneous data which means data of different data types cannot be a part of the same series. It can hold any data type such as integers, floats, and strings and its values are mutable i.e. it can be changed but the size of the series is immutable i.e. it cannot be changed.\nDataFrame - It is a two-dimensional array-like structure with heterogeneous data. It can contain data of different data types and the data is aligned in a tabular manner. Both size and values of DataFrame are mutable.\nPanel - The Pandas have a third type of data structure known as Panel, which is a 3D data structure capable of storing heterogeneous data but it isn\u2019t that widely used. Series - It is a one-dimensional array-like structure with homogeneous data which means data of different data types cannot be a part of the same series. It can hold any data type such as integers, floats, and strings and its values are mutable i.e. it can be changed but the size of the series is immutable i.e. it cannot be changed. Series integers floats strings DataFrame - It is a two-dimensional array-like structure with heterogeneous data. It can contain data of different data types and the data is aligned in a tabular manner. Both size and values of DataFrame are mutable. DataFrame Panel - The Pandas have a third type of data structure known as Panel, which is a 3D data structure capable of storing heterogeneous data but it isn\u2019t that widely used. Panel 3D",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. What are the significant features of the pandas Library?",
        "answer": "Pandas library is known for its efficient data analysis and state-of-the-art data visualization.\nThe key features of the panda\u2019s library are as follows:  Fast and efficient DataFrame object with default and customized indexing.\nHigh-performance merging and joining of data.\nData alignment and integrated handling of missing data.\nLabel-based slicing, indexing, and subsetting of large data sets.\nReshaping and pivoting of data sets.\nTools for loading data into in-memory data objects from different file formats.\nColumns from a data structure can be deleted or inserted.\nGroup by data for aggregation and transformations.\nTime Series functionality. Fast and efficient DataFrame object with default and customized indexing. High-performance merging and joining of data. Data alignment and integrated handling of missing data. Label-based slicing, indexing, and subsetting of large data sets. Reshaping and pivoting of data sets. Tools for loading data into in-memory data objects from different file formats. Columns from a data structure can be deleted or inserted. Group by data for aggregation and transformations. Time Series functionality.",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Define Series in Pandas?",
        "answer": "It is a one-dimensional array-like structure with homogeneous data which means data of different data types cannot be a part of the same series. It can hold any data type such as integers, floats, and strings and its values are mutable i.e. it can be changed but the size of the series is immutable i.e. it cannot be changed. By using a \u2018series\u2019 method, we can easily convert the list, tuple, and dictionary into a series. A Series cannot contain multiple columns. integers floats strings",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. Define DataFrame in Pandas?",
        "answer": "It is a two-dimensional array-like structure with heterogeneous data. It can contain data of different data types and the data is aligned in a tabular manner i.e. in rows and columns and the indexes with respect to these are called row index and column index respectively. Both size and values of DataFrame are mutable. The columns can be heterogeneous types like int and bool. It can also be defined as a dictionary of Series. The syntax for creating a dataframe: syntax import pandas as pd\ndataframe = pd.DataFrame( data, index, columns, dtype) import pandas as pd\ndataframe = pd.DataFrame( data, index, columns, dtype) Here: data - It represents various forms like series, map, ndarray, lists, dict, etc.\nindex - It is an optional argument that represents an index to row labels.\ncolumns - Optional argument for column labels.\nDtype - It represents the data type of each column. It is an optional parameter. data - It represents various forms like series, map, ndarray, lists, dict, etc. data index - It is an optional argument that represents an index to row labels. index columns - Optional argument for column labels. columns Dtype - It represents the data type of each column. It is an optional parameter. Dtype",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What are the different ways in which a series can be created?",
        "answer": "There are different ways of creating a series in Pandas. Creating an empty Series: The simplest series that can be created is an empty series. The Series() function of Pandas is used to create a series of any kind. Creating an empty Series: The simplest series that can be created is an empty series. The Series() function of Pandas is used to create a series of any kind. Creating an empty Series: Series() Code Example 1: Code Example 1: # import pandas as pd\nimport pandas as pd\n\n# Creating empty Series\nser = pd.Series()\n\nprint(ser) # import pandas as pd\nimport pandas as pd\n\n# Creating empty Series\nser = pd.Series()\n\nprint(ser) # import pandas as pd import as # Creating empty Series print Output: Output: Series([], dtype: float64) Series([], dtype: float64) Creating a series from an array: Pandas is built on top of the Numpy library. In order to create a series from the NumPy array, we have to import the NumPy module and have to use numpy.array() the function. Creating a series from an array: Pandas is built on top of the Numpy library. In order to create a series from the NumPy array, we have to import the NumPy module and have to use numpy.array() the function. Creating a series from an array: numpy.array() Code Example 2: Code Example 2: # import pandas as pd\nimport pandas as pd\n\n# import numpy as np\nimport numpy as np\n\n# simple array\ndata = np.array(['s', 'c', 'a', 'l', 'a','r'])\n\nser = pd.Series(data)\nprint(ser) # import pandas as pd\nimport pandas as pd\n\n# import numpy as np\nimport numpy as np\n\n# simple array\ndata = np.array(['s', 'c', 'a', 'l', 'a','r'])\n\nser = pd.Series(data)\nprint(ser) # import pandas as pd import as # import numpy as np import as # simple array 's' 'c' 'a' 'l' 'a' 'r' print Output: Output: 0    s\n1    c\n2    a\n3    l\n4    a\n5    r\ndtype: object 0    s\n1    c\n2    a\n3    l\n4    a\n5    r\ndtype: object Creating a series from the array with an index: In order to create a series by exclusively providing an index instead of the default value we need to provide a list of elements to the index parameter with the same number of elements as given in the array. Creating a series from the array with an index: In order to create a series by exclusively providing an index instead of the default value we need to provide a list of elements to the index parameter with the same number of elements as given in the array. Creating a series from the array with an index: Code Example 3: Code Example 3: # import pandas as pd\nimport pandas as pd\n\n# import numpy as np\nimport numpy as np\n\n# simple array\ndata = np.array(['s', 'c', 'a', 'l', 'a','r'])\n\n# providing an index\nser = pd.Series(data, index=[10, 11, 12, 13, 14,15])\nprint(ser) # import pandas as pd\nimport pandas as pd\n\n# import numpy as np\nimport numpy as np\n\n# simple array\ndata = np.array(['s', 'c', 'a', 'l', 'a','r'])\n\n# providing an index\nser = pd.Series(data, index=[10, 11, 12, 13, 14,15])\nprint(ser) # import pandas as pd import as # import numpy as np import as # simple array 's' 'c' 'a' 'l' 'a' 'r' # providing an index 10 11 12 13 14 15 print Output: Output: 10    s\n11    c\n12    a\n13    l\n14    a\n15    r\ndtype: object 10    s\n11    c\n12    a\n13    l\n14    a\n15    r\ndtype: object Creating a series from Lists: In order to create a series from a list, the first step is to create a list, and then we need to create a series from the given list. Creating a series from Lists: In order to create a series from a list, the first step is to create a list, and then we need to create a series from the given list. Creating a series from Lists: Code Example 4: Code Example 4: import pandas as pd\n\n# a simple list\nlist = ['s', 'c', 'a', 'l', 'a','r']\n\n# create series form a list\nser = pd.Series(list)\nprint(ser) import pandas as pd\n\n# a simple list\nlist = ['s', 'c', 'a', 'l', 'a','r']\n\n# create series form a list\nser = pd.Series(list)\nprint(ser) import as # a simple list list 's' 'c' 'a' 'l' 'a' 'r' # create series form a list list print Output: Output: 0    s\n1    c\n2    a\n3    l\n4    a\n5    r\ndtype: object 0    s\n1    c\n2    a\n3    l\n4    a\n5    r\ndtype: object Creating a series from Dictionary: In order to create a series from the dictionary, the first step is to create a dictionary, and only then we can create a series using. The dictionary keys serve as indexes for the Series. Creating a series from Dictionary: In order to create a series from the dictionary, the first step is to create a dictionary, and only then we can create a series using. The dictionary keys serve as indexes for the Series. Creating a series from Dictionary: Code Example 5: Code Example 5: import pandas as pd\n\n# a simple dictionary\ndict = {'A': 101,\n  'B': 202,\n  'C': 303}\n\n# create series from dictionary\nser = pd.Series(dict)\n\nprint(ser) import pandas as pd\n\n# a simple dictionary\ndict = {'A': 101,\n  'B': 202,\n  'C': 303}\n\n# create series from dictionary\nser = pd.Series(dict)\n\nprint(ser) import as # a simple dictionary dict 'A' 101 'B' 202 'C' 303 # create series from dictionary dict print Output: Output: A    101\nB    202\nC    303\ndtype: int64 A    101\nB    202\nC    303\ndtype: int64 Creating a series from Scalar value: In order to create a series from scalar value, an index must be provided. The value repeats itself to fit the length of the series or index given in general. Creating a series from Scalar value: In order to create a series from scalar value, an index must be provided. The value repeats itself to fit the length of the series or index given in general. Creating a series from Scalar value: Code Example 6: Code Example 6: import pandas as pd\n\nimport numpy as np\n\n# giving a scalar value with index\nser = pd.Series(10, index=[0, 1, 2, 3, 4, 5])\n\nprint(ser) import pandas as pd\n\nimport numpy as np\n\n# giving a scalar value with index\nser = pd.Series(10, index=[0, 1, 2, 3, 4, 5])\n\nprint(ser) import as import as # giving a scalar value with index 10 0 1 2 3 4 5 print Output: Output: 0    10\n1    10\n2    10\n3    10\n4    10\n5    10\ndtype: int64 0    10\n1    10\n2    10\n3    10\n4    10\n5    10\ndtype: int64",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. What are the different ways in which a dataframe can be created?",
        "answer": "Creating an empty dataframe: A basic DataFrame, which can be created is an Empty Dataframe. An Empty Dataframe is created just by calling a pandas.DataFrame() constructor. Creating an empty dataframe: A basic DataFrame, which can be created is an Empty Dataframe. An Empty Dataframe is created just by calling a pandas.DataFrame() constructor. Creating an empty dataframe: pandas.DataFrame() Code Example : Code Example : # Importing Pandas to create DataFrame\n\nimport pandas as pd\n\n# Creating Empty DataFrame and Storing it in variable df\ndf = pd.DataFrame()\n\n# Printing Empty DataFrame\nprint(df) # Importing Pandas to create DataFrame\n\nimport pandas as pd\n\n# Creating Empty DataFrame and Storing it in variable df\ndf = pd.DataFrame()\n\n# Printing Empty DataFrame\nprint(df) # Importing Pandas to create DataFrame import as # Creating Empty DataFrame and Storing it in variable df # Printing Empty DataFrame print Output: Output: Empty DataFrame\nColumns: []\nIndex: [] Empty DataFrame\nColumns: []\nIndex: [] Creating a dataframe using List: DataFrame can be created using a single list or by using a list of lists. Creating a dataframe using List: DataFrame can be created using a single list or by using a list of lists. Creating a dataframe using List: Code Example : Code Example : # Import pandas library\nimport pandas as pd\n\n# initialize list elements\ndata = [110,202,303,404,550,650]\n\n# Create the pandas DataFrame with the column name provided explicitly\ndf = pd.DataFrame(data, columns=['Amounts'])\n\n# print dataframe.\nprint(df) # Import pandas library\nimport pandas as pd\n\n# initialize list elements\ndata = [110,202,303,404,550,650]\n\n# Create the pandas DataFrame with the column name provided explicitly\ndf = pd.DataFrame(data, columns=['Amounts'])\n\n# print dataframe.\nprint(df) # Import pandas library import as # initialize list elements 110 202 303 404 550 650 # Create the pandas DataFrame with the column name provided explicitly 'Amounts' # print dataframe. print Output: Output: Amounts\n0 110\n1 202\n2 303\n3 404\n4 550\n5 650 Amounts\n0 110\n1 202\n2 303\n3 404\n4 550\n5 650 Code Example : Code Example : # Import pandas library\nimport pandas as pd\n\n# initialize list of lists\ndata = [['mark', 20], ['zack', 16], ['ron', 24]]\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data, columns=['Name', 'Age'])\n\n# print dataframe.\nprint(df) # Import pandas library\nimport pandas as pd\n\n# initialize list of lists\ndata = [['mark', 20], ['zack', 16], ['ron', 24]]\n\n# Create the pandas DataFrame\ndf = pd.DataFrame(data, columns=['Name', 'Age'])\n\n# print dataframe.\nprint(df) # Import pandas library import as # initialize list of lists 'mark' 20 'zack' 16 'ron' 24 # Create the pandas DataFrame 'Name' 'Age' # print dataframe. print Output: Output: Name Age\n0 mark 20\n1 zack 16\n2 ron 24 Name Age\n0 mark 20\n1 zack 16\n2 ron 24 Creating DataFrame from dict of ndarray/lists: To create a DataFrame from dict of narray/list there are a few conditions to be met.\nFirst, all the arrays must be of the same length.\nSecond, if the index is passed then the length index should be equal to the length of arrays.\nThird, if no index is passed, then by default, the index will be in the range(n) where n is the length of the array. Creating DataFrame from dict of ndarray/lists: To create a DataFrame from dict of narray/list there are a few conditions to be met. Creating DataFrame from dict of ndarray/lists: First, all the arrays must be of the same length. Second, if the index is passed then the length index should be equal to the length of arrays. Third, if no index is passed, then by default, the index will be in the range(n) where n is the length of the array. n n Code Example : Code Example : # Python code demonstrates creating\n# DataFrame from dict narray / lists\n# By default addresses.\n\nimport pandas as pd\n\n# initialize data of lists.\ndata = {'Name': ['Max', 'Lara', 'Koke', 'muller'],\n  'Age': [10, 31, 91, 48]}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Print the output.\nprint(df) # Python code demonstrates creating\n# DataFrame from dict narray / lists\n# By default addresses.\n\nimport pandas as pd\n\n# initialize data of lists.\ndata = {'Name': ['Max', 'Lara', 'Koke', 'muller'],\n  'Age': [10, 31, 91, 48]}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Print the output.\nprint(df) # Python code demonstrates creating # DataFrame from dict narray / lists # By default addresses. import as # initialize data of lists. 'Name' 'Max' 'Lara' 'Koke' 'muller' 'Age' 10 31 91 48 # Create DataFrame # Print the output. print Output: Output: Name Age\n0 Max 10\n1 Lara 31\n2 Koke 91\n3 muller 48 Name Age\n0 Max 10\n1 Lara 31\n2 Koke 91\n3 muller 48 Create pandas dataframe from lists using a dictionary: Creating pandas DataFrame from lists using a dictionary can be achieved in multiple ways. We can create pandas DataFrame from lists using a dictionary by using pandas.DataFrame(). Create pandas dataframe from lists using a dictionary: Creating pandas DataFrame from lists using a dictionary can be achieved in multiple ways. We can create pandas DataFrame from lists using a dictionary by using pandas.DataFrame(). Create pandas dataframe from lists using a dictionary: pandas.DataFrame() Code Example : Code Example : # Python code demonstrates how to create\n# Pandas DataFrame by lists of dicts.\nimport pandas as pd\n\n# Initialize data to lists.\ndata = [{'aa': 1, 'bs': 2, 'cd': 3},\n  {'aa': 10, 'bs': 20, 'cd': 30}]\n\n# Creates DataFrame.\ndf = pd.DataFrame(data)\n\n# Print the data\nprint(df) # Python code demonstrates how to create\n# Pandas DataFrame by lists of dicts.\nimport pandas as pd\n\n# Initialize data to lists.\ndata = [{'aa': 1, 'bs': 2, 'cd': 3},\n  {'aa': 10, 'bs': 20, 'cd': 30}]\n\n# Creates DataFrame.\ndf = pd.DataFrame(data)\n\n# Print the data\nprint(df) # Python code demonstrates how to create # Pandas DataFrame by lists of dicts. import as # Initialize data to lists. 'aa' 1 'bs' 2 'cd' 3 'aa' 10 'bs' 20 'cd' 30 # Creates DataFrame. # Print the data print Output: Output: aa bs cd\n0 1 2 3\n1 10 20 30 aa bs cd\n0 1 2 3\n1 10 20 30 Creating dataframe from series: In order to create a dataframe using series the argument to be passed in a DataFrame() function has to be a Series. Creating dataframe from series: In order to create a dataframe using series the argument to be passed in a DataFrame() function has to be a Series. Creating dataframe from series: DataFrame() Code Example: Code Example: # Python code demonstrates creating\n# Pandas Dataframe from series.\n\nimport pandas as pd\n\n# Initialize data to series.\nd = pd.Series([10, 20, 30, 40])\n# creates Dataframe.\ndf = pd.DataFrame(d)\n\n# print the data.\nprint(df) # Python code demonstrates creating\n# Pandas Dataframe from series.\n\nimport pandas as pd\n\n# Initialize data to series.\nd = pd.Series([10, 20, 30, 40])\n# creates Dataframe.\ndf = pd.DataFrame(d)\n\n# print the data.\nprint(df) # Python code demonstrates creating # Pandas Dataframe from series. import as # Initialize data to series. 10 20 30 40 # creates Dataframe. # print the data. print Output: Output: 0\n0 10\n1 20\n2 30\n3 40 0\n0 10\n1 20\n2 30\n3 40 Creating DataFrame from Dictionary of series: To create a DataFrame from Dict of series, a dictionary needs to be passed as an argument to form a DataFrame. The resultant index is the union of all the series of passed indexed. Creating DataFrame from Dictionary of series: To create a DataFrame from Dict of series, a dictionary needs to be passed as an argument to form a DataFrame. The resultant index is the union of all the series of passed indexed. Creating DataFrame from Dictionary of series: Code Example : Code Example : # Python code demonstrate creating\n# Pandas Dataframe from Dicts of series.\n\nimport pandas as pd\n\n# Initialize data to Dicts of series.\nd = {'one': pd.Series([10, 20, 30, 40],\n     index=['a', 'b', 'c', 'd']),\n 'two': pd.Series([10, 20, 30, 40],\n     index=['a', 'b', 'c', 'd'])}\n\n# creates Dataframe.\ndf = pd.DataFrame(d)\n\n# print the data.\nprint(df) # Python code demonstrate creating\n# Pandas Dataframe from Dicts of series.\n\nimport pandas as pd\n\n# Initialize data to Dicts of series.\nd = {'one': pd.Series([10, 20, 30, 40],\n     index=['a', 'b', 'c', 'd']),\n 'two': pd.Series([10, 20, 30, 40],\n     index=['a', 'b', 'c', 'd'])}\n\n# creates Dataframe.\ndf = pd.DataFrame(d)\n\n# print the data.\nprint(df) # Python code demonstrate creating # Pandas Dataframe from Dicts of series. import as # Initialize data to Dicts of series. 'one' 10 20 30 40 'a' 'b' 'c' 'd' 'two' 10 20 30 40 'a' 'b' 'c' 'd' # creates Dataframe. # print the data. print Output: Output: one two\na 10 10\nb 20 20\nc 30 30\nd 40 40 one two\na 10 10\nb 20 20\nc 30 30\nd 40 40",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. How can we create a copy of the series in Pandas?",
        "answer": "We can create a copy of the series by using the following syntax: Series.copy(deep=True) Series.copy(deep=True) The default value for the deep parameter is set to True. True When the value ofdeep=True, the creation of a new object with a copy of the calling object\u2019s data and indices takes place. Modifications to the data or indices of the copy will not be reflected in the original object whereas when the value of deep=False, the creation of a new object will take place without copying the calling object\u2019s data or index i.e. only the references to the data and index will be copied. Any changes made to the data of the original object will be reflected in the shallow copy and vice versa. deep=True deep=False",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. Explain Categorical data in Pandas?",
        "answer": "Categorical data is a discrete set of values for a particular outcome and has a fixed range. Also, the data in the category need not be numerical, it can be textual in nature. Examples are gender, social class, blood type, country affiliation, observation time, etc. There is no hard and fast rule for how many values a categorical value should have. One should apply one\u2019s domain knowledge to make that determination on the data sets.",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. Explain Reindexing in pandas along with its parameters?",
        "answer": "Reindexing as the name suggests is used to alter the rows and columns in a DataFrame. It is also defined as the process of conforming a dataframe to a new index with optional filling logic. For missing values in a dataframe, the reindex() method assigns NA/NaN as the value. A new object is returned unless a new index is produced that is equivalent to the current one. The copy value is set to False. This is also used for changing the index of rows and columns in the dataframe. reindex() NA/NaN False",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. What is NumPy?",
        "answer": "NumPy is one of the most widely used, versatile, simple, open-source, python-based, general-purpose packages that is used for processing arrays. NumPy is an abbreviation for NUMerical PYthon. Due to its highly optimized tools, it provides high-performance and powerful N-dimensional array processing capabilities that are explicitly designed to handle complex arrays. It is most commonly used in performing scientific computations and various broadcasting functions because of its popularity, powerful performance, and flexibility to perform various operations. NumPy NumPy NUM PY N",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. Give a brief description of time series in Panda?",
        "answer": "A time series is an organized collection of data that depicts the evolution of a quantity through time. Pandas have a wide range of capabilities and tools for working with time-series data in all fields. Supported by pandas: Analyzing time-series data from a variety of sources and formats.\nCreate time and date sequences with preset frequencies.\nDate and time manipulation and conversion with timezone information.\nA time series is resampled or converted to a specific frequency.\nCalculating dates and times using absolute or relative time increments is one way to. Analyzing time-series data from a variety of sources and formats. Create time and date sequences with preset frequencies. Date and time manipulation and conversion with timezone information. A time series is resampled or converted to a specific frequency. Calculating dates and times using absolute or relative time increments is one way to.",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. Explain MultiIndexing in Pandas.",
        "answer": "Multiple indexing is defined as essential indexing because it deals with data analysis and manipulation, especially for working with higher dimensional data. It also enables us to store and manipulate data with an arbitrary number of dimensions in lower-dimensional data structures like Series and DataFrame.",
        "reference": "interviewbit.com"
    },
    {
        "question": "14. How can we convert Series to DataFrame?",
        "answer": "The conversion of Series to DataFrame is quite a simple process. All we need to do is to use the to_frame() function. to_frame() Syntax: Syntax: Series.to_frame(name=None) Series.to_frame(name=None) Parameters: Parameters: name: It accepts data objects as input. It is an optional parameter. The value of the name parameter will be equal to the name of the Series if it has any.\nReturn Type: It returns the DataFrame after converting it from Series. name: It accepts data objects as input. It is an optional parameter. The value of the name parameter will be equal to the name of the Series if it has any. name: Return Type: It returns the DataFrame after converting it from Series. Return Type:",
        "reference": "interviewbit.com"
    },
    {
        "question": "15. How can we convert DataFrame to Numpy Array?",
        "answer": "In order to convert DataFrame to a Numpy array we need to use DataFrame.to_numpy() method. DataFrame.to_numpy() Syntax: Syntax: DataFrame.to_numpy(dtype=None, copy=False, na_value=_NoDefault.no_default) DataFrame.to_numpy(dtype=None, copy=False, na_value=_NoDefault.no_default) Parameters: Parameters: dtype: It accepts string or numpy.dtype. It is an optional parameter.\ncopy: It accepts a boolean value whose default is set to False.\nna_value: It is an optional parameter. It specifies the value to use for missing values. The data type will depend on the data type of the column in the dataframe. dtype: It accepts string or numpy.dtype. It is an optional parameter. dtype: copy: It accepts a boolean value whose default is set to False. copy: False na_value: It is an optional parameter. It specifies the value to use for missing values. The data type will depend on the data type of the column in the dataframe. na_value:",
        "reference": "interviewbit.com"
    },
    {
        "question": "16. How can we convert DataFrame to an excel file?",
        "answer": "In order to convert DataFrame to an excel file we need to use the to_excel() function. There are various parameters to be considered. But initially, all you need is to mention the DataFrame name and the name of the excel sheet. to_excel() Note: To write a single object to an Excel file, you need to provide the target file name. However, if you want to write to multiple sheets, you must create an ExcelWriter object that specifies the target file name and the sheet that needs to be written. Alternatively, you can specify a unique sheet name to write multiple sheets to the same Excel file. Note: To write a single object to an Excel file, you need to provide the target file name. However, if you want to write to multiple sheets, you must create an ExcelWriter object that specifies the target file name and the sheet that needs to be written. Alternatively, you can specify a unique sheet name to write multiple sheets to the same Excel file. Note: Syntax: Syntax: data.to_excel( excel_writer, sheet_name='Sheet1', \\*\\*kwargs ) data.to_excel( excel_writer, sheet_name='Sheet1', \\*\\*kwargs ) Parameters: Parameters: excel_writer: It accepts a string or ExcelWriter object. It specifies the path of the file to be written or an existing ExcelWriter object.\nsheet_name: It accepts a string value. The default value is set to \u2018Sheet1\u2019. It specifies the name of the sheet that will contain the DataFrame.\ncolumns: It accepts a sequence or list of strings as input. It is an optional parameter that specifies the columns that need to be written.\nindex: It accepts a boolean value whose default is set to True. It specifies the rows/index to be written.\nindex_label: It accepts string or sequence of string values. It is an optional parameter. It specifies the column label for index column(s) if required. If nothing is specified, and the header and index are set to True, then the index names are used. A sequence value should be given only if the DataFrame uses MultiIndexing. excel_writer: It accepts a string or ExcelWriter object. It specifies the path of the file to be written or an existing ExcelWriter object. excel_writer: sheet_name: It accepts a string value. The default value is set to \u2018Sheet1\u2019. It specifies the name of the sheet that will contain the DataFrame. sheet_name: columns: It accepts a sequence or list of strings as input. It is an optional parameter that specifies the columns that need to be written. columns: index: It accepts a boolean value whose default is set to True. It specifies the rows/index to be written. index: index_label: It accepts string or sequence of string values. It is an optional parameter. It specifies the column label for index column(s) if required. If nothing is specified, and the header and index are set to True, then the index names are used. A sequence value should be given only if the DataFrame uses MultiIndexing. index_label:",
        "reference": "interviewbit.com"
    },
    {
        "question": "17. What is TimeDelta?",
        "answer": "Timedeltas are differences in times, expressed in different units, e.g. days, hours, minutes, and seconds. They can be both positive and negative.",
        "reference": "interviewbit.com"
    },
    {
        "question": "18. Explain Pandas Timedelta.seconds Property",
        "answer": "Timedelta.seconds in pandas is used to return the number of seconds. Its implementation is simpler than it sounds. We do not need any special parameters and the return type is in the form of seconds. Timedelta.seconds Code Example : Code Example : #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \n# Create the Timedelta object\ntd = pd.Timedelta('5 days 09:08:03.000000312')\n\n# Print the Timedelta object\nprint(td)\n# Print the Timedelta object in seconds format\nprint(td.seconds) #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \n# Create the Timedelta object\ntd = pd.Timedelta('5 days 09:08:03.000000312')\n\n# Print the Timedelta object\nprint(td)\n# Print the Timedelta object in seconds format\nprint(td.seconds) #importing necessary libraries import as import as # Create the Timedelta object '5 days 09:08:03.000000312' # Print the Timedelta object print # Print the Timedelta object in seconds format print Output:- Output:- 5 days 09:08:03.000000312\n32883 5 days 09:08:03.000000312\n32883",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. Is iterating over a Pandas Dataframe a good practice? If not what are the important conditions to keep in mind before iterating?",
        "answer": "Ideally, iterating over pandas DataFrames is definitely not the best practice and one should only consider doing so when it is absolutely necessary and no other function is applicable. The iteration process through DataFrames is very inefficient. Pandas provide a lot of functions using which an operation can be executed without iterating through the dataframe. There are certain conditions that need to be checked before definitely not the best practice Before attempting to iterate through pandas objects, we must first ensure that none of the below-stated conditions aligns with our use case: Applying a function to rows: A common use case of iteration is when it comes to applying a function to every row, which is designed to work only one row at a time and cannot be applied on the full DataFrame or Series. In such cases, it\u2019s always recommended to use apply() method instead of iterating through the pandas object.\nIterative manipulations: In case we need to perform iterative manipulations and at the same time performance is a major area of concern, then we have alternatives like numba and cython.\nPrinting a DataFrame: If we want to print out a DataFrame then instead of iterating through the whole DataFrame we can simply use DataFrame.to_string() method in order to render the DataFrame to a console-friendly tabular output.\nVectorisation over iteration: It is always preferred to choose vectorization over iteration as pandas come with a rich set of built-in methods whose performance is highly optimized and super efficient. Applying a function to rows: A common use case of iteration is when it comes to applying a function to every row, which is designed to work only one row at a time and cannot be applied on the full DataFrame or Series. In such cases, it\u2019s always recommended to use apply() method instead of iterating through the pandas object. Applying a function to rows: apply() Iterative manipulations: In case we need to perform iterative manipulations and at the same time performance is a major area of concern, then we have alternatives like numba and cython. Iterative manipulations: Printing a DataFrame: If we want to print out a DataFrame then instead of iterating through the whole DataFrame we can simply use DataFrame.to_string() method in order to render the DataFrame to a console-friendly tabular output. Printing a DataFrame: DataFrame.to_string() Vectorisation over iteration: It is always preferred to choose vectorization over iteration as pandas come with a rich set of built-in methods whose performance is highly optimized and super efficient. Vectorisation over iteration:",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. How would you iterate over rows in a DataFrame in Pandas?",
        "answer": "Although it is not a good practice to iterate over rows in Pandas if there is no other alternative we do so using either iterrows() or itertuples() built-in methods. iterrows() itertuples() pandas.DataFrame.iterrows(): This method is used to iterate over DataFrame rows as (index, Series) pairs. There is only one drawback for this method it does not preserve the dtypes across rows due to the fact that it converts each row into a Series. If you need to preserve the dtypes of the pandas object, then one should use itertuples() method instead. pandas.DataFrame.iterrows(): This method is used to iterate over DataFrame rows as (index, Series) pairs. There is only one drawback for this method it does not preserve the dtypes across rows due to the fact that it converts each row into a Series. If you need to preserve the dtypes of the pandas object, then one should use itertuples() method instead. pandas.DataFrame.iterrows(): itertuples() Code Example : Code Example : # import pandas package as pd\nimport pandas as pd\n\n# Define a dictionary containing students data\ndata = {'Name': ['Sneha', 'Shreya',\n    'Sabhya', 'Riya'],\n  'Age': [22, 18, 10, 19],\n  'Stream': ['Computer', 'Commerce',\n    'Arts', 'Mechanical'],\n  'Percentage': [89, 93, 97, 73]}\n\n# Convert the dictionary into DataFrame\ndf = pd.DataFrame(data, columns=['Name', 'Age',\n        'Stream', 'Percentage'])\n\nprint(\"Given Dataframe :\\n\", df)\n\nprint(\"\\nIterating over rows using iterrows() method :\\n\")\n\n# iterate through each row and select\n# 'Name' and 'Age' columns respectively.\nfor index, row in df.iterrows():\n print(row[\"Name\"], row[\"Age\"]) # import pandas package as pd\nimport pandas as pd\n\n# Define a dictionary containing students data\ndata = {'Name': ['Sneha', 'Shreya',\n    'Sabhya', 'Riya'],\n  'Age': [22, 18, 10, 19],\n  'Stream': ['Computer', 'Commerce',\n    'Arts', 'Mechanical'],\n  'Percentage': [89, 93, 97, 73]}\n\n# Convert the dictionary into DataFrame\ndf = pd.DataFrame(data, columns=['Name', 'Age',\n        'Stream', 'Percentage'])\n\nprint(\"Given Dataframe :\\n\", df)\n\nprint(\"\\nIterating over rows using iterrows() method :\\n\")\n\n# iterate through each row and select\n# 'Name' and 'Age' columns respectively.\nfor index, row in df.iterrows():\n print(row[\"Name\"], row[\"Age\"]) # import pandas package as pd import as # Define a dictionary containing students data 'Name' 'Sneha' 'Shreya' 'Sabhya' 'Riya' 'Age' 22 18 10 19 'Stream' 'Computer' 'Commerce' 'Arts' 'Mechanical' 'Percentage' 89 93 97 73 # Convert the dictionary into DataFrame 'Name' 'Age' 'Stream' 'Percentage' print \"Given Dataframe :\\n\" print \"\\nIterating over rows using iterrows() method :\\n\" # iterate through each row and select # 'Name' and 'Age' columns respectively. for in print \"Name\" \"Age\" Output:- Output:- Given Dataframe :\n      Name  Age      Stream  Percentage\n0   Sneha   22    Computer          89\n1  Shreya   18    Commerce          93\n2  Sabhya   10        Arts          97\n3    Riya   19  Mechanical          73\n\nIterating over rows using iterrows() method :\n\nSneha 22\nShreya 18\nSabhya 10\nRiya 19 Given Dataframe :\n      Name  Age      Stream  Percentage\n0   Sneha   22    Computer          89\n1  Shreya   18    Commerce          93\n2  Sabhya   10        Arts          97\n3    Riya   19  Mechanical          73\n\nIterating over rows using iterrows() method :\n\nSneha 22\nShreya 18\nSabhya 10\nRiya 19 pandas.DataFrame.itertuples(): This method is used to iterate over DataFrame rows as namedtuples. Also, itertuples() are faster than compared to iterrows(). pandas.DataFrame.itertuples(): This method is used to iterate over DataFrame rows as namedtuples. Also, itertuples() are faster than compared to iterrows(). pandas.DataFrame.itertuples(): namedtuples itertuples() iterrows() Code Example : Code Example : print(\"\\nIterating over rows using itertuples() method :\\n\")\n  \n# iterate through each row and select\n# 'Name' and 'Percentage' column respectively.\nfor row in df.itertuples(index=True, name='Pandas'):\n    print(getattr(row, \"Name\"), getattr(row, \"Percentage\")) print(\"\\nIterating over rows using itertuples() method :\\n\")\n  \n# iterate through each row and select\n# 'Name' and 'Percentage' column respectively.\nfor row in df.itertuples(index=True, name='Pandas'):\n    print(getattr(row, \"Name\"), getattr(row, \"Percentage\")) print \"\\nIterating over rows using itertuples() method :\\n\" # iterate through each row and select # 'Name' and 'Percentage' column respectively. for in True 'Pandas' print getattr \"Name\" getattr \"Percentage\" Output:- Output:- Iterating over rows using itertuples() method :\n\nSneha 89\nShreya 93\nSabhya 97\nRiya 73 Iterating over rows using itertuples() method :\n\nSneha 89\nShreya 93\nSabhya 97\nRiya 73",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. List some statistical functions in Python Pandas?",
        "answer": "Some of the major statistical functions in Python Pandas are: sum() \u2013 It returns the sum of the values.\nmin() \u2013 It returns the minimum value.\nmax() \u2013 It returns the maximum value.\nabs() \u2013 It returns the absolute value.\nmean() \u2013 It returns the mean which is the average of the values.\nstd() \u2013 It returns the standard deviation of the numerical columns.\nprod() \u2013 It returns the product of the values. sum() \u2013 It returns the sum of the values. sum() min() \u2013 It returns the minimum value. min() max() \u2013 It returns the maximum value. max() abs() \u2013 It returns the absolute value. abs() mean() \u2013 It returns the mean which is the average of the values. mean() std() \u2013 It returns the standard deviation of the numerical columns. std() prod() \u2013 It returns the product of the values. prod()",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How to Read Text Files with Pandas?",
        "answer": "There are multiple ways in which we read a text file using Pandas. Using read_csv(): CSV is a comma-separated file i.e. any text file that uses commas as a delimiter to separate the record values for each field. Therefore, in order to load data from a text file we use pandas.read_csv() method.\nUsing read_table(): This function is very much like the read_csv() function, the major difference being that in read_table the delimiter value is \u2018\\t\u2019 and not a comma which is the default value for read_csv(). We will read data with the read_table function making the separator equal to a single space(\u2018 \u2018).\nUsing read_fwf(): It stands for fixed-width lines. This function is used to load DataFrames from files. Another very interesting feature is that it supports optionally iterating or breaking the file into chunks. Since the columns in the text file were separated with a fixed width, this read_fwf() read the contents effectively into separate columns. Using read_csv(): CSV is a comma-separated file i.e. any text file that uses commas as a delimiter to separate the record values for each field. Therefore, in order to load data from a text file we use pandas.read_csv() method. Using read_csv(): pandas.read_csv() Using read_table(): This function is very much like the read_csv() function, the major difference being that in read_table the delimiter value is \u2018\\t\u2019 and not a comma which is the default value for read_csv(). We will read data with the read_table function making the separator equal to a single space(\u2018 \u2018). Using read_table(): read_csv() \\t read_csv() Using read_fwf(): It stands for fixed-width lines. This function is used to load DataFrames from files. Another very interesting feature is that it supports optionally iterating or breaking the file into chunks. Since the columns in the text file were separated with a fixed width, this read_fwf() read the contents effectively into separate columns. Using read_fwf(): read_fwf()",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. How are iloc() and loc() different?",
        "answer": "DataFrame.iloc(): It is a method used to retrieve data from a Data frame, and it is an integer position-based locator (from 0 to length-1 of the axis), but may also be used with a boolean array and this is the major difference factor between iloc() and loc(). It takes input as integers, arrays of integers, an object, boolean arrays, and functions. DataFrame.iloc(): It is a method used to retrieve data from a Data frame, and it is an integer position-based locator (from 0 to length-1 of the axis), but may also be used with a boolean array and this is the major difference factor between iloc() and loc(). It takes input as integers, arrays of integers, an object, boolean arrays, and functions. DataFrame.iloc(): 0 length-1 iloc() loc() integers Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\nprint(df.iloc[[0, 2]]) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\nprint(df.iloc[[0, 2]]) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 14 12 'Marks' 85 77 91 # create DataFrame from dict print print 0 2 Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n2  Sheila   12     91 Name  Age  Marks\n0    Kate   10     85\n2  Sheila   12     91 DataFrame.loc(): It gets rows or columns with particular labels as input. It takes input as a single label, a list of arrays, and objects with labels. It does not work with boolean arrays or values. DataFrame.loc(): It gets rows or columns with particular labels as input. It takes input as a single label, a list of arrays, and objects with labels. It does not work with boolean arrays or values. DataFrame.loc(): Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\nprint(df.loc[(df.Name=='Kate')]) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\nprint(df.loc[(df.Name=='Kate')]) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 14 12 'Marks' 85 77 91 # create DataFrame from dict print print 'Kate' Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\n   Name  Age  Marks\n0  Kate   10     85 Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\n   Name  Age  Marks\n0  Kate   10     85",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. How will you sort a DataFrame?",
        "answer": "The function used for sorting in pandas is called DataFrame.sort_values(). It is used to sort a DataFrame by its column or row values. The function comes with a lot of parameters, but the most important ones to consider for sort are: DataFrame.sort_values() by: It is used to specify the column/row(s) which are used to determine the sorted order. It is an optional parameter.\naxis: It specifies whether the sorting is to be performed for a row or column and the value is 0 and 1 respectively.\nascending: It specifies whether to sort the dataframe in ascending or descending order. The default value is set to ascending. If the value is set as ascending=False it will sort in descending order. by: It is used to specify the column/row(s) which are used to determine the sorted order. It is an optional parameter. by: axis: It specifies whether the sorting is to be performed for a row or column and the value is 0 and 1 respectively. axis: 0 1 ascending: It specifies whether to sort the dataframe in ascending or descending order. The default value is set to ascending. If the value is set as ascending=False it will sort in descending order. ascending: ascending=False",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. How would you convert continuous values into discrete values in Pandas?",
        "answer": "Depending on the problem, continuous values can be discretized using the cut() or qcut() function: cut() qcut() cut() It bins the data based on values. We use it when we need to segment and sort data values into bins that are evenly spaced. cut() will choose the bins to be evenly spaced based on the values themselves and not the frequency of those values. For example, cut could convert ages to groups of age ranges.\nqcut() bins the data based on sample quantiles. We use it when we want to have the same number of records in each bin or simply study the data by quantiles. For example, if in a data we have 30 records, and we want to compute the quintiles, qcut() will divide the data such that we have 6 records in each bin. cut() It bins the data based on values. We use it when we need to segment and sort data values into bins that are evenly spaced. cut() will choose the bins to be evenly spaced based on the values themselves and not the frequency of those values. For example, cut could convert ages to groups of age ranges. cut() cut() qcut() bins the data based on sample quantiles. We use it when we want to have the same number of records in each bin or simply study the data by quantiles. For example, if in a data we have 30 records, and we want to compute the quintiles, qcut() will divide the data such that we have 6 records in each bin. qcut() 30 qcut() 6",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. What is the difference between join() and merge() in Pandas?",
        "answer": "Both join and merge functions are used to combine two dataframes. The major difference is that the join method combines two dataframes on the basis of their indexes whereas the merge method is more flexible and allows us to specify columns along with the index to combine the two dataframes. These are the main differences between df.join() and df.merge(): df.join() df.merge() lookup on right table: When performing a lookup on the right table, the join() method will always use the index of df2 to perform the join operation. However, if you use the merge() method, you can choose to join based on one or more columns of df2 by default, or even the index of df2 if you specify the right_index=True parameter.\nlookup on left table: When performing a lookup on the left table, df1.join(df2) method will use the index of df1 by default, while df1.merge(df2) method will use the column(s) of df1 for the join operation. However, you can override this behavior by specifying the on=key_or_keys parameter in df1.join(df2) or by setting the left_index=True parameter in df1.merge(df2).\nleft vs inner join: By default, the df1.join(df2) method performs a left join (retains all rows of df1), while the df1.merge(df2) method performs an inner join (returns only the matching rows of df1 and df2). lookup on right table: When performing a lookup on the right table, the join() method will always use the index of df2 to perform the join operation. However, if you use the merge() method, you can choose to join based on one or more columns of df2 by default, or even the index of df2 if you specify the right_index=True parameter. lookup on right table: join() df2 merge() df2 df2 right_index=True lookup on left table: When performing a lookup on the left table, df1.join(df2) method will use the index of df1 by default, while df1.merge(df2) method will use the column(s) of df1 for the join operation. However, you can override this behavior by specifying the on=key_or_keys parameter in df1.join(df2) or by setting the left_index=True parameter in df1.merge(df2). lookup on left table: df1.join(df2) df1 df1.merge(df2) df1 on=key_or_keys df1.join(df2) left_index=True df1.merge(df2) left vs inner join: By default, the df1.join(df2) method performs a left join (retains all rows of df1), while the df1.merge(df2) method performs an inner join (returns only the matching rows of df1 and df2). left vs inner join: df1.join(df2) df1 df1.merge(df2) df1 df2",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. What is the difference(s) between merge() and concat() in Pandas?",
        "answer": "Both concat and merge functions are used to combine dataframes. There are three major key differences between these two functions. The Way of Combining: concat() function concatenates dataframes along rows or columns. It is nothing but stacking up of multiple dataframes whereas merge() combines dataframes based on values in shared columns thus it is more flexible compared to concat() as the combination can happen based on the given condition.\nAxis parameter: concat() function has axis parameter. Since merge() function combines dataframes on the basis of shared columns side by side it does not really need an axis parameter. The value of the axis parameter decides in what direction will the concatenation happen. For it to happen row-wise the value of the axis parameter will be \u20180\u2019 and for it to happen side-by-side it will be \u20181\u2019. The default value is 1.\nJoin vs How: Join is a parameter of concat() function and how is a parameter of merge() function. Join can take two values outer and inner whereas how can take four values inner, outer, left, and right. The Way of Combining: concat() function concatenates dataframes along rows or columns. It is nothing but stacking up of multiple dataframes whereas merge() combines dataframes based on values in shared columns thus it is more flexible compared to concat() as the combination can happen based on the given condition. The Way of Combining: concat() merge() concat() Axis parameter: concat() function has axis parameter. Since merge() function combines dataframes on the basis of shared columns side by side it does not really need an axis parameter. The value of the axis parameter decides in what direction will the concatenation happen. For it to happen row-wise the value of the axis parameter will be \u20180\u2019 and for it to happen side-by-side it will be \u20181\u2019. The default value is 1. Axis parameter: concat() merge() Join vs How: Join is a parameter of concat() function and how is a parameter of merge() function. Join can take two values outer and inner whereas how can take four values inner, outer, left, and right. Join vs How: concat() merge()",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. What\u2019s the difference between interpolate() and fillna() in Pandas?",
        "answer": "fillna(): It fills the NaN values with a given number with which you want to substitute. It gives you the option to fill according to the index of rows of a pd.DataFrame or on the name of the columns in the form of a python dict. fillna(): It fills the NaN values with a given number with which you want to substitute. It gives you the option to fill according to the index of rows of a pd.DataFrame or on the name of the columns in the form of a python dict. fillna(): pd.DataFrame Code Example : Code Example : import pandas as pd\nimport numpy as np\n\n#Creating a dataframe\ndf = pd.DataFrame({\"Value_1\":[None, 14, 35, None, 1,12, 74, 65, None, 1],\n                   \"Value_2\":[None, 24, 54, 3, None,None, 2, 54, 3, None],\n                   \"Value_3\":[20, 16, None, 3, 8,None, 2, 54, 3, None],\n                   \"Value_4\":[None, 2, 54, 3, None,14, 3, None, None, 6]})\n\nprint(df)\n\n#Fill the missing value with average values in column Value1.\ndf['Value_1'].fillna(int(df13['Value_1'].mean()), inplace = True)\ndf.head() import pandas as pd\nimport numpy as np\n\n#Creating a dataframe\ndf = pd.DataFrame({\"Value_1\":[None, 14, 35, None, 1,12, 74, 65, None, 1],\n                   \"Value_2\":[None, 24, 54, 3, None,None, 2, 54, 3, None],\n                   \"Value_3\":[20, 16, None, 3, 8,None, 2, 54, 3, None],\n                   \"Value_4\":[None, 2, 54, 3, None,14, 3, None, None, 6]})\n\nprint(df)\n\n#Fill the missing value with average values in column Value1.\ndf['Value_1'].fillna(int(df13['Value_1'].mean()), inplace = True)\ndf.head() import as import as #Creating a dataframe \"Value_1\" None 14 35 None 1 12 74 65 None 1 \"Value_2\" None 24 54 3 None None 2 54 3 None \"Value_3\" 20 16 None 3 8 None 2 54 3 None \"Value_4\" None 2 54 3 None 14 3 None None 6 print #Fill the missing value with average values in column Value1. 'Value_1' int 'Value_1' True Output: Output: Value_1  Value_2  Value_3  Value_4\n0      NaN      NaN     20.0      NaN\n1     14.0     24.0     16.0      2.0\n2     35.0     54.0      NaN     54.0\n3      NaN      3.0      3.0      3.0\n4      1.0      NaN      8.0      NaN\n5     12.0      NaN      NaN     14.0\n6     74.0      2.0      2.0      3.0\n7     65.0     54.0     54.0      NaN\n8      NaN      3.0      3.0      NaN\n9      1.0      NaN      NaN      6.0\n\n# after using fillna method.\n\n Value_1 Value_2 Value_3 Value_4\n0 28 <NA> 20 <NA>\n1 14 24 16 2\n2 35 54 15 54\n3 28 3 3 3\n4 1 <NA> 8 <NA> Value_1  Value_2  Value_3  Value_4\n0      NaN      NaN     20.0      NaN\n1     14.0     24.0     16.0      2.0\n2     35.0     54.0      NaN     54.0\n3      NaN      3.0      3.0      3.0\n4      1.0      NaN      8.0      NaN\n5     12.0      NaN      NaN     14.0\n6     74.0      2.0      2.0      3.0\n7     65.0     54.0     54.0      NaN\n8      NaN      3.0      3.0      NaN\n9      1.0      NaN      NaN      6.0\n\n# after using fillna method.\n\n Value_1 Value_2 Value_3 Value_4\n0 28 <NA> 20 <NA>\n1 14 24 16 2\n2 35 54 15 54\n3 28 3 3 3\n4 1 <NA> 8 <NA> interpolate(): It gives you the flexibility to fill the missing values with many kinds of interpolations between the values like linear, time, etc. interpolate(): It gives you the flexibility to fill the missing values with many kinds of interpolations between the values like linear, time, etc. interpolate(): linear time Code Example : Code Example : import pandas as pd, numpy as np\ndf = pd.Series([1, np.nan, np.nan, 3])\nprint(df.interpolate()) import pandas as pd, numpy as np\ndf = pd.Series([1, np.nan, np.nan, 3])\nprint(df.interpolate()) import as as 1 3 print Output:- Output:- 0    1.000000\n1    1.666667\n2    2.333333\n3    3.000000\ndtype: float64 0    1.000000\n1    1.666667\n2    2.333333\n3    3.000000\ndtype: float64",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. How to reset the index in a Python Pandas DataFrame?",
        "answer": "Inorder to reset the index of the DataFrame we use the Dataframe.reset_index() command. If the DataFrame has a MultiIndex, this method can also remove one or more levels. Dataframe.reset_index() Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df)\n\nstudent_df.reset_index(drop=True, inplace=True)\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df)\n\nstudent_df.reset_index(drop=True, inplace=True)\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print # set index using column 'Name' print True True print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n        Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91\n   Age  Marks\n0   10     85\n1   11     77\n2   12     91 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n        Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91\n   Age  Marks\n0   10     85\n1   11     77\n2   12     91 Conclusion Conclusion In this article, we have seen commonly asked pandas interview questions. These questions along with regular problem practice sessions will help you crack any pandas-based interview. We divided the article into four sections: The BASIC python pandas interview questions section contains questions based on theoretical concepts covering different segments like Data Structures in Pandas, Time Series, Statistical methods, etc.\nThe ADVANCED python pandas interview questions section delves a little deeper into the conceptual section covering various methods like join(), merge(), groupby(), their functionalities, implementation, etc.\nThe DATA SCIENCE python pandas interview questions section focuses on application-based questions the ones that a data scientist might face during his day-to-day work like formatting a dataframe, or working on data aggregation, etc.\nThe CODING python pandas interview section focuses on questions that test the python coding skills along with the general concepts involved. You might be asked to write a code to calculate percentile or to convert a Numpy array to a DataFrame or vice-versa, etc. The BASIC python pandas interview questions section contains questions based on theoretical concepts covering different segments like Data Structures in Pandas, Time Series, Statistical methods, etc. BASIC The ADVANCED python pandas interview questions section delves a little deeper into the conceptual section covering various methods like join(), merge(), groupby(), their functionalities, implementation, etc. ADVANCED join() merge() groupby() The DATA SCIENCE python pandas interview questions section focuses on application-based questions the ones that a data scientist might face during his day-to-day work like formatting a dataframe, or working on data aggregation, etc. DATA SCIENCE The CODING python pandas interview section focuses on questions that test the python coding skills along with the general concepts involved. You might be asked to write a code to calculate percentile or to convert a Numpy array to a DataFrame or vice-versa, etc. CODING Along with theoretical knowledge of pandas, there is an emphasis on the ability to write good-quality code as well. So keep learning and practising problems you\u2019ll no doubt succeed at any pandas interview.",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. How to rename the index in a Pandas DataFrame?",
        "answer": "In order to rename a DataFrame we use the Dataframe.set_index() method to give different values to the columns or the index values of DataFrame. Like in this example we will change the index label from \u2018Name\u2019 to \u2018FirstName\u2019. Dataframe.set_index() Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df)\nstudent_df.index.names = ['FirstName']\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df)\nstudent_df.index.names = ['FirstName']\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict # set index using column 'Name' print 'FirstName' print Output:- Output:- Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91\n           Age  Marks\nFirstName            \nKate        10     85\nHarry       11     77\nSheila      12     91 Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91\n           Age  Marks\nFirstName            \nKate        10     85\nHarry       11     77\nSheila      12     91",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. How to get frequency count of unique items in a Pandas DataFrame?",
        "answer": "In order to get the frequency count of unique items in a Pandas DataFrame we can use the Series.value_counts() method. Series.value_counts() Code Example : Code Example : # importing the module\nimport pandas as pd\n \n# creating the series\ns = pd.Series(data = [1,2,3,4,3,5,3,7,1])\n \n# displaying the series\nprint(s)\n \n# finding the unique count\nprint(s.value_counts()) # importing the module\nimport pandas as pd\n \n# creating the series\ns = pd.Series(data = [1,2,3,4,3,5,3,7,1])\n \n# displaying the series\nprint(s)\n \n# finding the unique count\nprint(s.value_counts()) # importing the module import as # creating the series 1 2 3 4 3 5 3 7 1 # displaying the series print # finding the unique count print Output:- Output:- 0    1\n1    2\n2    3\n3    4\n4    3\n5    5\n6    3\n7    7\n8    1\ndtype: int64\n3    3\n1    2\n2    1\n4    1\n5    1\n7    1\ndtype: int64 0    1\n1    2\n2    3\n3    4\n4    3\n5    5\n6    3\n7    7\n8    1\ndtype: int64\n3    3\n1    2\n2    1\n4    1\n5    1\n7    1\ndtype: int64",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. How to delete a column in Pandas DataFrame?",
        "answer": "The drop() method is used to delete a column in a DataFrame. If we set the value of the axis parameter as \u20181\u2019 it will work for a column if we set the value to \u20180\u2019 it will delete the rows in the DataFrame. drop() Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nstudent_df.drop([\"Age\"], axis = 1, inplace = True)\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nstudent_df.drop([\"Age\"], axis = 1, inplace = True)\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict \"Age\" 1 True print Output:- Output:- Name  Marks\n0    Kate     85\n1   Harry     77\n2  Sheila     91 Name  Marks\n0    Kate     85\n1   Harry     77\n2  Sheila     91",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. How to delete a row in Pandas DataFrame?",
        "answer": "The drop() method is used to delete a row in a DataFrame. If we set the value of the axis parameter as \u20180\u2019 or do not mention it at all it will work for rows as the default value for the axis parameter is set to \u20180\u2019, if we set the value to \u20181\u2019 it will delete the column in the DataFrame. drop() 0 0 1 Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\n\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df)\n\nstudent_df.drop([\"Harry\"], inplace = True)\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\n\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df)\n\nstudent_df.drop([\"Harry\"], inplace = True)\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict # set index using column 'Name' print \"Harry\" True print Output:- Output:- Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91\n        Age  Marks\nName              \nKate     10     85\nSheila   12     91 Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91\n        Age  Marks\nName              \nKate     10     85\nSheila   12     91",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. How can we convert NumPy array into a DataFrame?",
        "answer": "In order to convert a Numpy array into a DataFrame we first need to create a numpy array and then use the pandas.DataFrame the method along with specifying the/labels for rows and columns. pandas.DataFrame Code Example : Code Example : # Python program to Create a\n# Pandas DataFrame from a Numpy\n# array and specify the index\n# column and column headers\n\n# import required libraries\nimport numpy as np\nimport pandas as pd\n\n# creating a numpy array\nnumpyArray = np.array([[115, 222, 343],\n     [323, 242, 356]])\n\n# generating the Pandas dataframe\n# from the Numpy array and specifying\n# name of index and columns\ndataframe = pd.DataFrame(data = numpyArray,\n      index = [\"Row1\", \"Row2\"],\n      columns = [\"Column1\",\n        \"Column2\", \"Column3\"])\n\n# printing the dataframe\nprint(dataframe) # Python program to Create a\n# Pandas DataFrame from a Numpy\n# array and specify the index\n# column and column headers\n\n# import required libraries\nimport numpy as np\nimport pandas as pd\n\n# creating a numpy array\nnumpyArray = np.array([[115, 222, 343],\n     [323, 242, 356]])\n\n# generating the Pandas dataframe\n# from the Numpy array and specifying\n# name of index and columns\ndataframe = pd.DataFrame(data = numpyArray,\n      index = [\"Row1\", \"Row2\"],\n      columns = [\"Column1\",\n        \"Column2\", \"Column3\"])\n\n# printing the dataframe\nprint(dataframe) # Python program to Create a # Pandas DataFrame from a Numpy # array and specify the index # column and column headers # import required libraries import as import as # creating a numpy array 115 222 343 323 242 356 # generating the Pandas dataframe # from the Numpy array and specifying # name of index and columns \"Row1\" \"Row2\" \"Column1\" \"Column2\" \"Column3\" # printing the dataframe print Output:- Output:- Column1  Column2  Column3\nRow1      115      222      343\nRow2      323      242      356 Column1  Column2  Column3\nRow1      115      222      343\nRow2      323      242      356",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. How do you split a DataFrame according to a boolean criterion?",
        "answer": "We can create a mask to separate the dataframe and then use the inverse operator (~) to take the complement of the mask. ~ Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\ndf1 = df[df['Age'] > 10]\n \n# printing df1\ndf1 import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\ndf1 = df[df['Age'] > 10]\n \n# printing df1\ndf1 import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 14 12 'Marks' 85 77 91 # create DataFrame from dict print 'Age' 10 # printing df1 Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\nName Age Marks\n1 Harry 14 77\n2 Sheila 12 91 Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\nName Age Marks\n1 Harry 14 77\n2 Sheila 12 91",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. How to create Timedelta objects in Pandas?",
        "answer": "String: In order to create a timedelta object using a string argument we pass a string literal. String Code Example : Code Example : #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n \n#Conversion from string format to date format takes place using Timedelta method.\nprint (pd.Timedelta('20 days 12 hours 45 minutes 3 seconds')) #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n \n#Conversion from string format to date format takes place using Timedelta method.\nprint (pd.Timedelta('20 days 12 hours 45 minutes 3 seconds')) #importing necessary libraries import as import as #Conversion from string format to date format takes place using Timedelta method. print '20 days 12 hours 45 minutes 3 seconds' Output: Output: 20 days 12:45:03 20 days 12:45:03 *Integer: What differs from string, in this case, is we just need to pass an integer value and the object will be created. Integer Code Example : Code Example : #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \nprint (pd.Timedelta(16,unit='h'))#h here is used for hours. #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \nprint (pd.Timedelta(16,unit='h'))#h here is used for hours. #importing necessary libraries import as import as print 16 'h' #h here is used for hours. Output: Output: 0 days 16:00:00 0 days 16:00:00 Data Offsets: In order to first learn how to create a timedelta object using data offset we first need to understand what data offset actually is. Data offsets are parameters like weeks, days, hours, minutes, seconds, milliseconds, microseconds, and nanoseconds. This when passed as an argument helps in the creation of the timedelta object. Data Offsets Code Example : Code Example : #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \nprint (pd.Timedelta(days=2, hours = 16)) #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \nprint (pd.Timedelta(days=2, hours = 16)) #importing necessary libraries import as import as print 2 16 Output:- Output:- 2 days 16:00:00 2 days 16:00:00 Code Example : Code Example : #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \nprint (pd.Timedelta(days=2, hours = 6, minutes = 23)) #importing necessary libraries\nimport pandas as pd\nimport numpy as np\n    \nprint (pd.Timedelta(days=2, hours = 6, minutes = 23)) #importing necessary libraries import as import as print 2 6 23 Output:- Output:- 2 days 06:23:00 2 days 06:23:00",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. How will you compute the percentile of a numerical series in Pandas?",
        "answer": "In order to compute percentile we use numpy.percentile() method. numpy.percentile() Syntax: Syntax: numpy.percentile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=False, *, interpolation=None) numpy.percentile(a, q, axis=None, out=None, overwrite_input=False, method='linear', keepdims=False, *, interpolation=None) None None False 'linear' False None It will calculate the q-th percentile of the given the data along the mentioned axis. Parameters: Parameters: a: It is an input array or object that can be converted to an array.\nq: It is the percentile or sequence of percentiles to be calculated. The value must be between 0 and 100 both inclusive. a: It is an input array or object that can be converted to an array. a: q: It is the percentile or sequence of percentiles to be calculated. The value must be between 0 and 100 both inclusive. q: 0 100 Code Example : Code Example : import pandas as pd\nimport random\n\nA = [ random.randint(0,100) for i in range(10) ]\nB = [ random.randint(0,100) for i in range(10) ]\n\ndf = pd.DataFrame({ 'field_A': A, 'field_B': B })\ndf\n\n\nprint(df.field_A.quantile(0.1)) # 10th percentile\n\n\nprint(df.field_A.quantile(0.5)) # same as median\n\nprint(df.field_A.quantile(0.9)) # 90th percentile import pandas as pd\nimport random\n\nA = [ random.randint(0,100) for i in range(10) ]\nB = [ random.randint(0,100) for i in range(10) ]\n\ndf = pd.DataFrame({ 'field_A': A, 'field_B': B })\ndf\n\n\nprint(df.field_A.quantile(0.1)) # 10th percentile\n\n\nprint(df.field_A.quantile(0.5)) # same as median\n\nprint(df.field_A.quantile(0.9)) # 90th percentile import as import 0 100 for in range 10 0 100 for in range 10 'field_A' 'field_B' print 0.1 # 10th percentile print 0.5 # same as median print 0.9 # 90th percentile Output:- Output:- 12.1\n52.0\n92.6 12.1\n52.0\n92.6",
        "reference": "interviewbit.com"
    },
    {
        "question": "10. How can we convert DataFrame into a NumPy array?",
        "answer": "In order to convert a dataframe into a NumPy array we use DataFrame.to_numpy() method. DataFrame.to_numpy() Syntax: Syntax: DataFrame.to_numpy(dtype=None, copy=False, na_value=_NoDefault.no_default) DataFrame.to_numpy(dtype=None, copy=False, na_value=_NoDefault.no_default) Parameters: Parameters: dtype: It accepts string or numpy.dtype value. It is an optional parameter.\ncopy: It accepts a boolean value. The default value is set to False.\nIt ensures that the returned value is not a view on another array. Setting the value of copy=False does not ensure that to_numpy() is no-copy. Whereas if copy=True it does ensure that a copy is made.\nna_value: It accepts the parameter of any datatype and it is an optional parameter. It specifies the value to be used for missing values. The default value is of the same data type as the object. dtype: It accepts string or numpy.dtype value. It is an optional parameter. dtype: copy: It accepts a boolean value. The default value is set to False.\nIt ensures that the returned value is not a view on another array. Setting the value of copy=False does not ensure that to_numpy() is no-copy. Whereas if copy=True it does ensure that a copy is made. copy:  copy=False to_numpy() copy=True na_value: It accepts the parameter of any datatype and it is an optional parameter. It specifies the value to be used for missing values. The default value is of the same data type as the object. na_value: Code Example : Code Example : import pandas as pd\n\n# initialize a dataframe\ndf = pd.DataFrame(\n [[10, 12, 33],\n [41, 53, 66],\n [17, 81, 19],\n [10, 11, 12]],\n columns=['X', 'Y', 'Z'])\n\n# convert dataframe to numpy array\narr = df.to_numpy()\n\nprint('\\nNumpy Array\\n----------\\n', arr)\nprint(type(arr)) import pandas as pd\n\n# initialize a dataframe\ndf = pd.DataFrame(\n [[10, 12, 33],\n [41, 53, 66],\n [17, 81, 19],\n [10, 11, 12]],\n columns=['X', 'Y', 'Z'])\n\n# convert dataframe to numpy array\narr = df.to_numpy()\n\nprint('\\nNumpy Array\\n----------\\n', arr)\nprint(type(arr)) import as # initialize a dataframe 10 12 33 41 53 66 17 81 19 10 11 12 'X' 'Y' 'Z' # convert dataframe to numpy array print '\\nNumpy Array\\n----------\\n' print type Output: Output: Numpy Array\n----------\n [[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n<class 'numpy.ndarray'> Numpy Array\n----------\n [[ 1  2  3]\n [ 4  5  6]\n [ 7  8  9]\n [10 11 12]]\n<class 'numpy.ndarray'>",
        "reference": "interviewbit.com"
    },
    {
        "question": "11. How to add a column to a Pandas DataFrame?",
        "answer": "We first create the dataframe and then look into the various methods one by one. Code Example : Code Example : # Add column\nimport pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = ['Chicago', 'London', 'Berlin']\nstudent_df['Address'] = address\n  \n# Observe the result\nprint(student_df) # Add column\nimport pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = ['Chicago', 'London', 'Berlin']\nstudent_df['Address'] = address\n  \n# Observe the result\nprint(student_df) # Add column import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print 'Chicago' 'London' 'Berlin' 'Address' # Observe the result print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  Address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   Berlin Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  Address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   Berlin By declaring a new list as a column. By declaring a new list as a column. By declaring a new list as a column. Code Example : Code Example : # Add column\nimport pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = ['Chicago', 'London', 'Berlin']\nstudent_df['Address'] = address\n  \n# Observe the result\nprint(student_df) # Add column\nimport pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = ['Chicago', 'London', 'Berlin']\nstudent_df['Address'] = address\n  \n# Observe the result\nprint(student_df) # Add column import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print 'Chicago' 'London' 'Berlin' 'Address' # Observe the result print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  Address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   Berlin Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  Address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   Berlin By using DataFrame.insert(): It gives the freedom to add a column at any position we like and not just at the end. It also provides different options for inserting the column values. By using DataFrame.insert(): It gives the freedom to add a column at any position we like and not just at the end. It also provides different options for inserting the column values. By using DataFrame.insert(): Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = ['Chicago', 'London', 'Berlin']\nstudent_df.insert(2, \"Address\", ['Chicago', 'London', 'Berlin'], True)\n# Observe the result\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = ['Chicago', 'London', 'Berlin']\nstudent_df.insert(2, \"Address\", ['Chicago', 'London', 'Berlin'], True)\n# Observe the result\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print 'Chicago' 'London' 'Berlin' 2 \"Address\" 'Chicago' 'London' 'Berlin' True # Observe the result print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Address  Marks\n0    Kate   10  Chicago     85\n1   Harry   11   London     77\n2  Sheila   12   Berlin     91 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Address  Marks\n0    Kate   10  Chicago     85\n1   Harry   11   London     77\n2  Sheila   12   Berlin     91 Using Dataframe.assign() method: This method will create a new dataframe with a new column added to the old dataframe. Using Dataframe.assign() method: This method will create a new dataframe with a new column added to the old dataframe. Using Dataframe.assign() method: Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\ndf2 = student_df.assign(address=['Chicago', 'London', 'Berlin'])\n  \n# Observe the result\nprint(df2) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\ndf2 = student_df.assign(address=['Chicago', 'London', 'Berlin'])\n  \n# Observe the result\nprint(df2) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print 'Chicago' 'London' 'Berlin' # Observe the result print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   Berlin Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   Berlin By using a dictionary: We can use a Python dictionary to add a new column in pandas DataFrame. Use an existing column as the key values and their respective values will be the values for a new column. By using a dictionary: We can use a Python dictionary to add a new column in pandas DataFrame. Use an existing column as the key values and their respective values will be the values for a new column. By using a dictionary: Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = {'Chicago': 'Kate', 'London': 'Harry',\n           'berlin': 'Sheila'}\nstudent_df['Address'] = address\n  \n# Observe the output\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\naddress = {'Chicago': 'Kate', 'London': 'Harry',\n           'berlin': 'Sheila'}\nstudent_df['Address'] = address\n  \n# Observe the output\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print 'Chicago' 'Kate' 'London' 'Harry' 'berlin' 'Sheila' 'Address' # Observe the output print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  Address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   berlin Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks  Address\n0    Kate   10     85  Chicago\n1   Harry   11     77   London\n2  Sheila   12     91   berlin",
        "reference": "interviewbit.com"
    },
    {
        "question": "12. How to add a row to a Pandas DataFrame?",
        "answer": "We can add a single row using DataFrame.loc: We can add the row at the last in our dataframe. We can get the number of rows using len(DataFrame.index) for determining the position at which we need to add the new row. We can add a single row using DataFrame.loc: DataFrame.index Code Example : Code Example : # Add row\nimport pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\nstudent_df.loc[len(student_df.index)] = ['Alex', 19, 93]\nprint(student_df) # Add row\nimport pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\nstudent_df.loc[len(student_df.index)] = ['Alex', 19, 93]\nprint(student_df) Output: Output: Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n3    Alex   19     93 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n     Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n3    Alex   19     93 We can also add a new row using the DataFrame.append() function: We can also add a new row using the DataFrame.append() function: Code Example : Code Example : df2 = {'Name': 'Tom', 'Age': 18, 'Marks': 73}\nstudent_df = student_df.append(df2, ignore_index = True)\nprint(student_df) df2 = {'Name': 'Tom', 'Age': 18, 'Marks': 73}\nstudent_df = student_df.append(df2, ignore_index = True)\nprint(student_df) Output: Output: Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n3    Alex   19     93\n4     Tom   18     73 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n3    Alex   19     93\n4     Tom   18     73 We can also add multiple rows using the pandas.concat(): by creating a new dataframe of all the rows that we need to add and then appending this dataframe to the original dataframe. We can also add multiple rows using the pandas.concat(): Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\ndict = {'Name':['Amy', 'Maddy'],\n        'Age':[19, 12],\n        'Marks':[93, 81]\n       }\ndf2 = pd.DataFrame(dict)\nprint(df2)\ndf3 = pd.concat([df1, df2], ignore_index = True)\n\nprint(df3) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\ndict = {'Name':['Amy', 'Maddy'],\n        'Age':[19, 12],\n        'Marks':[93, 81]\n       }\ndf2 = pd.DataFrame(dict)\nprint(df2)\ndf3 = pd.concat([df1, df2], ignore_index = True)\n\nprint(df3) Output: Output: Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\n    Name  Age  Marks\n0    Amy   19     93\n1  Maddy   12     81\n     Name  Age  Marks\n0   Harry   14     77\n1  Sheila   12     91\n2     Amy   19     93\n3   Maddy   12     81 Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\n    Name  Age  Marks\n0    Amy   19     93\n1  Maddy   12     81\n     Name  Age  Marks\n0   Harry   14     77\n1  Sheila   12     91\n2     Amy   19     93\n3   Maddy   12     81",
        "reference": "interviewbit.com"
    },
    {
        "question": "13. How to set Index to a Pandas DataFrame?",
        "answer": "Changing Index column: In this example, the First Name column has been made the index column of DataFrame. Changing Index column: In this example, the First Name column has been made the index column of DataFrame. Changing Index column: Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\n\n# set index using column\nstudent_df = student_df.set_index('Name')\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print # set index using column 'Name' print Output: Output: Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n        Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n        Age  Marks\nName              \nKate     10     85\nHarry    11     77\nSheila   12     91 Set Index using Multiple Column: In this example, two columns will be made as an index column. The drop parameter is used to Drop the column and the append parameter is used to append passed columns to the already existing index column. Set Index using Multiple Column: In this example, two columns will be made as an index column. The drop parameter is used to Drop the column and the append parameter is used to append passed columns to the already existing index column. Set Index using Multiple Column: Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\n\n# set index using column\nstudent_df = student_df.set_index(['Name', 'Marks'])\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\n\n# set index using column\nstudent_df = student_df.set_index(['Name', 'Marks'])\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print # set index using column 'Name' 'Marks' print Output: Output: Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n              Age\nName   Marks     \nKate   85      10\nHarry  77      11\nSheila 91      12 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n              Age\nName   Marks     \nKate   85      10\nHarry  77      11\nSheila 91      12 Set index using a List: Set index using a List: Set index using a List: Code Example : Code Example : index = pd.Index(['x1', 'x2', 'x3'])\nstudent_df = student_df.set_index(index)\nprint(student_df) index = pd.Index(['x1', 'x2', 'x3'])\nstudent_df = student_df.set_index(index)\nprint(student_df) 'x1' 'x2' 'x3' print Output: Output: Age  Marks\nx1   10     85\nx2   11     77\nx3   12     91 Age  Marks\nx1   10     85\nx2   11     77\nx3   12     91 Set multi-index using a list and column Set multi-index using a list and column Set multi-index using a list and column Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\nindex = pd.Index(['x1', 'x2', 'x3'])\nstudent_df = student_df.set_index([index, 'Name'])\nprint(student_df) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 11, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\nstudent_df = pd.DataFrame(student_dict)\nprint(student_df)\nindex = pd.Index(['x1', 'x2', 'x3'])\nstudent_df = student_df.set_index([index, 'Name'])\nprint(student_df) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 11 12 'Marks' 85 77 91 # create DataFrame from dict print 'x1' 'x2' 'x3' 'Name' print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n           Age  Marks\n   Name              \nx1 Kate     10     85\nx2 Harry    11     77\nx3 Sheila   12     91 Name  Age  Marks\n0    Kate   10     85\n1   Harry   11     77\n2  Sheila   12     91\n           Age  Marks\n   Name              \nx1 Kate     10     85\nx2 Harry    11     77\nx3 Sheila   12     91",
        "reference": "interviewbit.com"
    },
    {
        "question": "1. When to use merge() over concat() and vice-versa in Pandas?",
        "answer": "The use of concat() function comes into play when combining homogeneous DataFrame, while the merge() function is considered first when combining complementary DataFrame. concat() homogeneous merge() If we need to merge vertically, we should always use pandas.concat(). whereas if need to merge horizontally via columns, we should go with pandas.merge(), which by default merges on the columns that are in common between the dataframes. pandas.concat() pandas.merge() Code Example : Code Example : df1 = pd.DataFrame({'Key': ['b', 'b', 'a', 'c'], 'data1': range(4)})\n\ndf2 = pd.DataFrame({'Key': ['a', 'b', 'd'], 'data2': range(3)})\n\n#Merge\n# The 2 dataframes are merged on the basis of values in column \"Key\" as it is \n# a common column in 2 dataframes\n\nprint(pd.merge(df1, df2))\n\n#Concat\n# df2 dataframe is appended at the bottom of df1 \n\nprint(pd.concat([df1, df2])) df1 = pd.DataFrame({'Key': ['b', 'b', 'a', 'c'], 'data1': range(4)})\n\ndf2 = pd.DataFrame({'Key': ['a', 'b', 'd'], 'data2': range(3)})\n\n#Merge\n# The 2 dataframes are merged on the basis of values in column \"Key\" as it is \n# a common column in 2 dataframes\n\nprint(pd.merge(df1, df2))\n\n#Concat\n# df2 dataframe is appended at the bottom of df1 \n\nprint(pd.concat([df1, df2])) 'Key' 'b' 'b' 'a' 'c' 'data1' range 4 'Key' 'a' 'b' 'd' 'data2' range 3 #Merge # The 2 dataframes are merged on the basis of values in column \"Key\" as it is # a common column in 2 dataframes print #Concat # df2 dataframe is appended at the bottom of df1 print Output:- Output:- Key  data1  data2\n0   b      0      1\n1   b      1      1\n2   a      2      0\n  Key  data1  data2\n0   b    0.0    NaN\n1   b    1.0    NaN\n2   a    2.0    NaN\n3   c    3.0    NaN\n0   a    NaN    0.0\n1   b    NaN    1.0\n2   d    NaN    2.0 Key  data1  data2\n0   b      0      1\n1   b      1      1\n2   a      2      0\n  Key  data1  data2\n0   b    0.0    NaN\n1   b    1.0    NaN\n2   a    2.0    NaN\n3   c    3.0    NaN\n0   a    NaN    0.0\n1   b    NaN    1.0\n2   d    NaN    2.0",
        "reference": "interviewbit.com"
    },
    {
        "question": "2. What\u2019s the difference between pivot_table() and groupby()?",
        "answer": "Both pivot_table() and groupby() are used to aggregate your dataframe. The major difference is in the shape of the result. pivot_table() groupby() Code Example: Code Example: import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n \n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\ntable = pd.pivot_table(df, index =['Name', 'Age'])\nprint(table) import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n \n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\ntable = pd.pivot_table(df, index =['Name', 'Age'])\nprint(table) import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 14 12 'Marks' 85 77 91 # create DataFrame from dict print 'Name' 'Age' print Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\n            Marks\n        Name   Age       \nHarry  14      77\nKate   10      85\nSheila 12      91 Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\n            Marks\n        Name   Age       \nHarry  14      77\nKate   10      85\nSheila 12      91 Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\ngk = df.groupby('Age')\ngk.first() import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\ngk = df.groupby('Age')\ngk.first() import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 14 12 'Marks' 85 77 91 # create DataFrame from dict print 'Age' Output: Output: Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\nAge  Name Marks  \n10 Kate 85\n12 Sheila 91\n14 Harry 77 Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\nAge  Name Marks  \n10 Kate 85\n12 Sheila 91\n14 Harry 77",
        "reference": "interviewbit.com"
    },
    {
        "question": "3. Compare the Pandas methods: map(), applymap(), apply()",
        "answer": "The map() method is an elementwise method for only Pandas Series, it maps values of the Series according to input correspondence. The map() method is an elementwise method for only Pandas Series, it maps values of the Series according to input correspondence. map() It accepts dicts, Series, or callable. Values that are not found in the dict are converted to NaN. Code Example: We first create a dataframe and then apply the respective methods to it. Code Example: import pandas as pd\n \n# Series generation\nstr_string = 'scalar'\nstr_series = pd.Series(list(str_string))\nprint(\"Original series\\n\" +\n      str_series.to_string(index=False,\n                           header=False), end='\\n\\n')\n \n# Using apply method for converting characters\n# present in the original series\nnew_str_series = str_series.map(str.upper)\nprint(\"Transformed series:\\n\" +\n      new_str_series.to_string(index=False,\n                               header=False), end='\\n\\n') import pandas as pd\n \n# Series generation\nstr_string = 'scalar'\nstr_series = pd.Series(list(str_string))\nprint(\"Original series\\n\" +\n      str_series.to_string(index=False,\n                           header=False), end='\\n\\n')\n \n# Using apply method for converting characters\n# present in the original series\nnew_str_series = str_series.map(str.upper)\nprint(\"Transformed series:\\n\" +\n      new_str_series.to_string(index=False,\n                               header=False), end='\\n\\n') import as # Series generation 'scalar' list print \"Original series\\n\" False False '\\n\\n' # Using apply method for converting characters # present in the original series map str print \"Transformed series:\\n\" False False '\\n\\n' Output: Output: Original series\ns\nc\na\nl\na\nr\n\nTransformed series:\nS\nC\nA\nL\nA\nR Original series\ns\nc\na\nl\na\nr\n\nTransformed series:\nS\nC\nA\nL\nA\nR The applymap() method is an elementwise function for only DataFrames, it applies a function that accepts and returns a scalar to every element of a DataFrame. The applymap() method is an elementwise function for only DataFrames, it applies a function that accepts and returns a scalar to every element of a DataFrame. applymap() It accepts callables only i.e. a Python function. Code Example : Code Example : import pandas as pd\n\n# initialize a dataframe\ndf = pd.DataFrame(\n [['a', 'b', 'c'],\n ['d','e','f'],\n ],\n columns=['X', 'Y', 'Z'])\n\nprint(df)\n\nnew_df = df.applymap(str.upper)\nprint(\"Transformed dataframe:\\n\" +\n      new_df.to_string(index=False,\n                           header=False), end='\\n\\n') import pandas as pd\n\n# initialize a dataframe\ndf = pd.DataFrame(\n [['a', 'b', 'c'],\n ['d','e','f'],\n ],\n columns=['X', 'Y', 'Z'])\n\nprint(df)\n\nnew_df = df.applymap(str.upper)\nprint(\"Transformed dataframe:\\n\" +\n      new_df.to_string(index=False,\n                           header=False), end='\\n\\n') import as # initialize a dataframe 'a' 'b' 'c' 'd' 'e' 'f' 'X' 'Y' 'Z' print str print \"Transformed dataframe:\\n\" False False '\\n\\n' Output:- Output:- X  Y  Z\n0  a  b  c\n1  d  e  f\n\nTransformed dataframe:\nA B \nD E F X  Y  Z\n0  a  b  c\n1  d  e  f\n\nTransformed dataframe:\nA B \nD E F The apply() method also works elementwise, as it applies a function along the input axis of DataFrame. It is suited to more complex operations and aggregation. The apply() method also works elementwise, as it applies a function along the input axis of DataFrame. It is suited to more complex operations and aggregation. apply() It accepts the callables parameter as well. Code Example : Code Example : import pandas as pd\n\n# initialize a dataframe\ndf = pd.DataFrame(\n [[10, 12, 33],\n [41, 53, 66],\n [17, 81, 19],\n [10, 11, 12]],\n columns=['X', 'Y', 'Z'])\n\nprint(df)\n\nnew_df = df.apply(lambda x:x.sort_values(), axis = 1)\n \nprint(\"Transformed dataframe:\\n\" + \\\n    new_df.to_string(index = False,\n            header = False), end = '\\n\\n') import pandas as pd\n\n# initialize a dataframe\ndf = pd.DataFrame(\n [[10, 12, 33],\n [41, 53, 66],\n [17, 81, 19],\n [10, 11, 12]],\n columns=['X', 'Y', 'Z'])\n\nprint(df)\n\nnew_df = df.apply(lambda x:x.sort_values(), axis = 1)\n \nprint(\"Transformed dataframe:\\n\" + \\\n    new_df.to_string(index = False,\n            header = False), end = '\\n\\n') import as # initialize a dataframe 10 12 33 41 53 66 17 81 19 10 11 12 'X' 'Y' 'Z' print lambda 1 print \"Transformed dataframe:\\n\" False False '\\n\\n' Output:- Output:- X   Y   Z\n0  10  12  33\n1  41  53  66\n2  17  81  19\n3  10  11  12\n\nTransformed dataframe:\n10 12 33\n41 53 66\n17 81 19\n10 11 12 X   Y   Z\n0  10  12  33\n1  41  53  66\n2  17  81  19\n3  10  11  12\n\nTransformed dataframe:\n10 12 33\n41 53 66\n17 81 19\n10 11 12",
        "reference": "interviewbit.com"
    },
    {
        "question": "4. Describe a few data operations in Pandas.",
        "answer": "There are several useful data operations for DataFrame in Pandas, which are as follows: String Operation: Pandas provide a set of string functions for working with string data. The following are the few operations on string data:\nlower(): Any strings in the index or series are converted to lowercase letters.\nupper(): Any strings in the index or series are converted to uppercase letters.\nstrip(): This method eliminates spacing from every string in the Series/index, along with a new line.\nislower(): If all of the characters in the Series/Index string are lowercase, it returns True. Otherwise, False is returned.\nisupper(): If all of the characters in the Series/Index string are uppercase, it returns True. Otherwise, False is returned.\nsplit(\u2019 '): It\u2019s a method that separates a string according to a pattern.\ncat(sep=\u2019 '): With a defined separator, it concatenates series/index items.\ncontains(pattern): If a substring is available in the current element, it returns True; otherwise, it returns False.\nreplace(a,b): It substitutes the value b for the value a.\nstartswith(pattern): If all of the components in the series begin with a pattern, it returns True.\nendswith(pattern): If all of the components in the series terminate in a pattern, it returns True.\nfind(pattern): It can be used to return the pattern\u2019s first occurrence.\nfindall(pattern): It gives you a list of all the times the pattern appears.\nswapcase: It is used to switch the lower/upper case.\nNull values: When no data is being sent to the items, a Null value/missing value can appear. There may be no values in the respective columns, which are commonly represented as NaN. Pandas provide several useful functions for identifying, deleting, and changing null values in Data Frames. The following are the functions.\nisnull(): isnull 's job is to return true if either of the rows has null values.\nnotnull(): It is the inverse of the isnull() function, returning true values for non-null values.\ndropna(): This function evaluates and removes null values from rows and columns.\nfillna(): It enables users to substitute other values for the NaN values.\nreplace(): It\u2019s a powerful function that can take the role of a regex, dictionary, string, series, and more.\ninterpolate(): It\u2019s a useful function for filling null values in a series or data frame.\nRow and column selection: We can retrieve any row and column of the DataFrame by specifying the names of the rows and columns. It is one-dimensional and is regarded as a Series when you select it from the DataFrame.\nFilter Data: By using some of the boolean logic in DataFrame, we can filter the data.\nCount Values: Using the \u2018value counts()\u2019 option, this process is used to count the overall possible combinations. String Operation: Pandas provide a set of string functions for working with string data. The following are the few operations on string data:\nlower(): Any strings in the index or series are converted to lowercase letters.\nupper(): Any strings in the index or series are converted to uppercase letters.\nstrip(): This method eliminates spacing from every string in the Series/index, along with a new line.\nislower(): If all of the characters in the Series/Index string are lowercase, it returns True. Otherwise, False is returned.\nisupper(): If all of the characters in the Series/Index string are uppercase, it returns True. Otherwise, False is returned.\nsplit(\u2019 '): It\u2019s a method that separates a string according to a pattern.\ncat(sep=\u2019 '): With a defined separator, it concatenates series/index items.\ncontains(pattern): If a substring is available in the current element, it returns True; otherwise, it returns False.\nreplace(a,b): It substitutes the value b for the value a.\nstartswith(pattern): If all of the components in the series begin with a pattern, it returns True.\nendswith(pattern): If all of the components in the series terminate in a pattern, it returns True.\nfind(pattern): It can be used to return the pattern\u2019s first occurrence.\nfindall(pattern): It gives you a list of all the times the pattern appears.\nswapcase: It is used to switch the lower/upper case. String Operation: lower(): Any strings in the index or series are converted to lowercase letters.\nupper(): Any strings in the index or series are converted to uppercase letters.\nstrip(): This method eliminates spacing from every string in the Series/index, along with a new line.\nislower(): If all of the characters in the Series/Index string are lowercase, it returns True. Otherwise, False is returned.\nisupper(): If all of the characters in the Series/Index string are uppercase, it returns True. Otherwise, False is returned.\nsplit(\u2019 '): It\u2019s a method that separates a string according to a pattern.\ncat(sep=\u2019 '): With a defined separator, it concatenates series/index items.\ncontains(pattern): If a substring is available in the current element, it returns True; otherwise, it returns False.\nreplace(a,b): It substitutes the value b for the value a.\nstartswith(pattern): If all of the components in the series begin with a pattern, it returns True.\nendswith(pattern): If all of the components in the series terminate in a pattern, it returns True.\nfind(pattern): It can be used to return the pattern\u2019s first occurrence.\nfindall(pattern): It gives you a list of all the times the pattern appears.\nswapcase: It is used to switch the lower/upper case. lower(): Any strings in the index or series are converted to lowercase letters. lower(): upper(): Any strings in the index or series are converted to uppercase letters. upper(): strip(): This method eliminates spacing from every string in the Series/index, along with a new line. strip(): islower(): If all of the characters in the Series/Index string are lowercase, it returns True. Otherwise, False is returned. islower(): isupper(): If all of the characters in the Series/Index string are uppercase, it returns True. Otherwise, False is returned. isupper(): split(\u2019 '): It\u2019s a method that separates a string according to a pattern. split(\u2019 '): cat(sep=\u2019 '): With a defined separator, it concatenates series/index items. cat(sep=\u2019 '): contains(pattern): If a substring is available in the current element, it returns True; otherwise, it returns False. contains(pattern): replace(a,b): It substitutes the value b for the value a. replace(a,b): startswith(pattern): If all of the components in the series begin with a pattern, it returns True. startswith(pattern): endswith(pattern): If all of the components in the series terminate in a pattern, it returns True. endswith(pattern): find(pattern): It can be used to return the pattern\u2019s first occurrence. find(pattern): findall(pattern): It gives you a list of all the times the pattern appears. findall(pattern): swapcase: It is used to switch the lower/upper case. swapcase: Null values: When no data is being sent to the items, a Null value/missing value can appear. There may be no values in the respective columns, which are commonly represented as NaN. Pandas provide several useful functions for identifying, deleting, and changing null values in Data Frames. The following are the functions.\nisnull(): isnull 's job is to return true if either of the rows has null values.\nnotnull(): It is the inverse of the isnull() function, returning true values for non-null values.\ndropna(): This function evaluates and removes null values from rows and columns.\nfillna(): It enables users to substitute other values for the NaN values.\nreplace(): It\u2019s a powerful function that can take the role of a regex, dictionary, string, series, and more.\ninterpolate(): It\u2019s a useful function for filling null values in a series or data frame. Null values: isnull(): isnull 's job is to return true if either of the rows has null values.\nnotnull(): It is the inverse of the isnull() function, returning true values for non-null values.\ndropna(): This function evaluates and removes null values from rows and columns.\nfillna(): It enables users to substitute other values for the NaN values.\nreplace(): It\u2019s a powerful function that can take the role of a regex, dictionary, string, series, and more.\ninterpolate(): It\u2019s a useful function for filling null values in a series or data frame. isnull(): isnull 's job is to return true if either of the rows has null values. isnull(): notnull(): It is the inverse of the isnull() function, returning true values for non-null values. notnull(): dropna(): This function evaluates and removes null values from rows and columns. dropna(): fillna(): It enables users to substitute other values for the NaN values. fillna(): replace(): It\u2019s a powerful function that can take the role of a regex, dictionary, string, series, and more. replace(): interpolate(): It\u2019s a useful function for filling null values in a series or data frame. interpolate(): Row and column selection: We can retrieve any row and column of the DataFrame by specifying the names of the rows and columns. It is one-dimensional and is regarded as a Series when you select it from the DataFrame. Row and column selection: Filter Data: By using some of the boolean logic in DataFrame, we can filter the data. Filter Data: Count Values: Using the \u2018value counts()\u2019 option, this process is used to count the overall possible combinations. Count Values:",
        "reference": "interviewbit.com"
    },
    {
        "question": "5. How to get items of series A not present in series B?",
        "answer": "In order to find items from series A that are not present in series B by using the isin() method combining it with the Bitwise NOT operator in pandas. We can understand this using a code example: A isin() Bitwise NOT Code Example : Code Example : # Importing pandas library\nimport pandas as pd\n\n# Creating 2 pandas Series\nseries1 = pd.Series([12, 24, 38, 210, 110, 147, 929])\nseries2 = pd.Series([17, 83, 76, 54, 110, 929, 510])\n\nprint(\"Series1:\")\nprint(series1)\nprint(\"\\nSeries2:\")\nprint(series2)\n\n# Using Bitwise NOT operator along\n# with pandas.isin()\nprint(\"\\nItems of series1 not present in series2:\")\nres = series1[~series1.isin(series2)]\nprint(res) # Importing pandas library\nimport pandas as pd\n\n# Creating 2 pandas Series\nseries1 = pd.Series([12, 24, 38, 210, 110, 147, 929])\nseries2 = pd.Series([17, 83, 76, 54, 110, 929, 510])\n\nprint(\"Series1:\")\nprint(series1)\nprint(\"\\nSeries2:\")\nprint(series2)\n\n# Using Bitwise NOT operator along\n# with pandas.isin()\nprint(\"\\nItems of series1 not present in series2:\")\nres = series1[~series1.isin(series2)]\nprint(res) # Importing pandas library import as # Creating 2 pandas Series 12 24 38 210 110 147 929 17 83 76 54 110 929 510 print \"Series1:\" print print \"\\nSeries2:\" print # Using Bitwise NOT operator along # with pandas.isin() print \"\\nItems of series1 not present in series2:\" print Output:- Output:- Series1:\n0     12\n1     24\n2     38\n3    210\n4    110\n5    147\n6    929\ndtype: int64\n\nSeries2:\n0     17\n1     83\n2     76\n3     54\n4    110\n5    929\n6    510\ndtype: int64\n\nItems of series1 not present in series2:\n0     12\n1     24\n2     38\n3    210\n5    147\ndtype: int64 Series1:\n0     12\n1     24\n2     38\n3    210\n4    110\n5    147\n6    929\ndtype: int64\n\nSeries2:\n0     17\n1     83\n2     76\n3     54\n4    110\n5    929\n6    510\ndtype: int64\n\nItems of series1 not present in series2:\n0     12\n1     24\n2     38\n3    210\n5    147\ndtype: int64",
        "reference": "interviewbit.com"
    },
    {
        "question": "6. What is the use of pandas.Dataframe.aggregate() function? Explain its syntax and parameters.",
        "answer": "Data Aggregation is defined as the process of applying some aggregation function to one or more columns. It uses the following: sum: It is used to return the sum of the values for the requested axis.\nmin: It is used to return a minimum of the values for the requested axis.\nmax: It is used to return maximum values for the requested axis. sum: It is used to return the sum of the values for the requested axis. sum: min: It is used to return a minimum of the values for the requested axis. min: max: It is used to return maximum values for the requested axis. max: Its Syntax is: Syntax DataFrame.aggregate(func=None, axis=0, *args, **kwargs) DataFrame.aggregate(func=None, axis=0, *args, **kwargs) Aggregate using one or more operations over the specified axis. Parameters: Parameters: func: It takes string, list, dictionary, or function values as input. It represents the function to use for data aggregation.\naxis: It takes in only two values \u20180\u2019 or \u20181\u2019. 0 is for the index and 1 is for columns.\nIf 0 or \u2018index\u2019: The function is applied to each column.\nIf 1 or \u2018columns\u2019: The function is applied to each row.\nThe default value is set to 0. func: It takes string, list, dictionary, or function values as input. It represents the function to use for data aggregation. func: axis: It takes in only two values \u20180\u2019 or \u20181\u2019. 0 is for the index and 1 is for columns.\nIf 0 or \u2018index\u2019: The function is applied to each column.\nIf 1 or \u2018columns\u2019: The function is applied to each row.\nThe default value is set to 0. axis:  If 0 or \u2018index\u2019:  If 1 or \u2018columns\u2019:  It returns the aggregated dataframe as the output. Code Example : Code Example : import pandas as pd\n\ndata = {\n  \"x\": [560, 240, 630],\n  \"y\": [300, 1112, 452]\n}\n\ndf = pd.DataFrame(data)\n\nx = df.aggregate([\"sum\"])\ny = df.aggregate([\"min\"])\nz = df.aggregate([\"max\"])\n\nprint(x)\nprint(y)\nprint(z) import pandas as pd\n\ndata = {\n  \"x\": [560, 240, 630],\n  \"y\": [300, 1112, 452]\n}\n\ndf = pd.DataFrame(data)\n\nx = df.aggregate([\"sum\"])\ny = df.aggregate([\"min\"])\nz = df.aggregate([\"max\"])\n\nprint(x)\nprint(y)\nprint(z) import as \"x\" 560 240 630 \"y\" 300 1112 452 \"sum\" \"min\" \"max\" print print print Output: Output: x     y\nsum  1430  1864\n       x    y\nmin  240  300\n       x     y\nmax  630  1112 x     y\nsum  1430  1864\n       x    y\nmin  240  300\n       x     y\nmax  630  1112",
        "reference": "interviewbit.com"
    },
    {
        "question": "7. How to format data in your Pandas DataFrame?",
        "answer": "When we start working on a dataset or a set of data we need to perform some operations on the values in the DataFrame. At times these values might not be in the right format for you to work on it thus formatting of data is required. There are multiple ways in which we can format data in a Pandas DataFrame. One way is by Replacing All Occurrences of a String in a DataFrame. In order to replace Strings in our DataFrame, we can use replace() method i.e. all we need is to pass the values that we would like to change, followed by the values we want to replace them with.\nOne other way is by Removing Parts From Strings in the Cells of the DataFrame. Removing unwanted parts of strings is cumbersome work. Luckily, there is a solution in place! We can do it easily by using map() function on the column result to apply the lambda function over each element or element-wise of the column.\nSplitting Text in a Column into Multiple Rows in a DataFrame. The process of splitting text into multiple rows is quite a complex task. We can do so by applying a function to the Pandas DataFrame\u2019s Columns or Rows. One way is by Replacing All Occurrences of a String in a DataFrame. In order to replace Strings in our DataFrame, we can use replace() method i.e. all we need is to pass the values that we would like to change, followed by the values we want to replace them with. Replacing All Occurrences of a String in a DataFrame replace() One other way is by Removing Parts From Strings in the Cells of the DataFrame. Removing unwanted parts of strings is cumbersome work. Luckily, there is a solution in place! We can do it easily by using map() function on the column result to apply the lambda function over each element or element-wise of the column. Removing Parts From Strings in the Cells of the DataFrame map() Splitting Text in a Column into Multiple Rows in a DataFrame. The process of splitting text into multiple rows is quite a complex task. We can do so by applying a function to the Pandas DataFrame\u2019s Columns or Rows. Splitting Text in a Column into Multiple Rows in a DataFrame",
        "reference": "interviewbit.com"
    },
    {
        "question": "8. Explain the GroupBy function in Pandas",
        "answer": "Python pandas Dataframe.groupby() function is used for grouping the data according to the categories and applying a function to those categories. It helps in data aggregation in an efficient manner. It splits the data into groups based on some given criteria. The pandas objects can be split on any of their axes. In brief groupby() provides the mapping of labels to their respective group names. Dataframe.groupby() groupby() Syntax: Syntax: DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True, group_keys=_NoDefault.no_default, squeeze=_NoDefault.no_default, observed=False, dropna=True) DataFrame.groupby(by=None, axis=0, level=None, as_index=True, sort=True, group_keys=_NoDefault.no_default, squeeze=_NoDefault.no_default, observed=False, dropna=True) Code Example : Code Example : import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\ngk = df.groupby('Age')\ngk.first() import pandas as pd\n\nstudent_dict = {'Name': ['Kate', 'Harry', 'Sheila'], 'Age': [10, 14, 12], 'Marks': [85, 77, 91]}\n\n# create DataFrame from dict\ndf = pd.DataFrame(student_dict)\nprint(df)\n\ngk = df.groupby('Age')\ngk.first() import as 'Name' 'Kate' 'Harry' 'Sheila' 'Age' 10 14 12 'Marks' 85 77 91 # create DataFrame from dict print 'Age' Output:- Output:- Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\nName Marks\nAge  \n10 Kate 85\n12 Sheila 91\n14 Harry 77 Name  Age  Marks\n0    Kate   10     85\n1   Harry   14     77\n2  Sheila   12     91\nName Marks\nAge  \n10 Kate 85\n12 Sheila 91\n14 Harry 77",
        "reference": "interviewbit.com"
    },
    {
        "question": "9. How can you find the row for which the value of a specific column is max or min?",
        "answer": "We can find the row for which the value of a specific column is by using idxmax and idxmin functions. idxmax idxmin Code Example : Code Example : import pandas as pd\n\ndata = {\n  \"sales\": [23, 34, 56],\n  \"age\": [50, 40, 30]\n}\n\ndf = pd.DataFrame(data)\n\nprint(df.idxmax())\nprint(df.idxmin()) import pandas as pd\n\ndata = {\n  \"sales\": [23, 34, 56],\n  \"age\": [50, 40, 30]\n}\n\ndf = pd.DataFrame(data)\n\nprint(df.idxmax())\nprint(df.idxmin()) import as \"sales\" 23 34 56 \"age\" 50 40 30 print print Output:- Output:- sales    2\nage      0\ndtype: int64\nsales    0\nage      2\ndtype: int64 sales    2\nage      0\ndtype: int64\nsales    0\nage      2\ndtype: int64",
        "reference": "interviewbit.com"
    }
]