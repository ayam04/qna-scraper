[
    {
        "question": "1. What are the characteristics of iOS?",
        "answer": "Criteria Result\nType of operating system Apple proprietary based on Macintosh OS X\nOS fragmentation Tightly integrated with Apple devices\nSecurity Heightened security guaranteed",
        "reference": "intellipaat.com"
    },
    {
        "question": "2. Which JSON framework is supported by iOS (iPhone OS)?",
        "answer": "SBJson framework is supported by iOS. It is a JSON parser and generator for Objective-C (Objective-C is the primary programming language we use when writing software for OS X and iOS. It is a superset of the C programming language and provides object-oriented capabilities and a dynamic runtime).\nSBJson provides flexible APIs and additional control that makes JSON handling easy.",
        "reference": "intellipaat.com"
    },
    {
        "question": "3. Unnamed categories \u2013 what are they?",
        "answer": "The category without a name is no longer favored since the extension of @protocol to support @optional methods. We use the @interface Foo() class extension to declare additional private API, known as the system programming interface (SPI), which is utilized for implementing the internal workings of the class. This declaration is typically placed at the beginning of the .m file. All methods and properties declared within the class extension must be implemented in the @implementation, similar to the methods and properties found in the public @interface. Class extensions also provide the ability to change a publicly read-only @property to read-write before using @synthesize on the accessors. Example:\nFoo.h\n@interface Foo:NSObject\n@property(readonly, copy) NSString *bar;\n-(void) publicSaucing;\n@end\nFoo.m\n@interface Foo()\n@property(readwrite, copy) NSString *bar;\n- (void) superSecretInternalSaucing;\n@end\n@implementation Foo\n@synthesize bar;\n.... must implement the two methods or compiler will warn ....\n@end\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com"
    },
    {
        "question": "4. Give the name of the framework that is employed to create the iOS application's user interface.",
        "answer": "The UIKit framework facilitates the development of the application\u2019s user interface. It enables event handling, drawing models, windows, views, and controls specifically designed for touch-screen interfaces.\nThe UIKit framework (UIKit.framework) plays a crucial role in constructing and managing iOS apps. This framework offers the following key components:\nWindow and view architecture for managing the app\u2019s user interface\nInfrastructure for handling events and responding to user input\nAn application paradigm to control the primary run loop and communicate with the system\nIn addition to these core app behaviors, UIKit supports various features, including:\nA view controller model that encapsulates the user interface\u2019s contents\nSupport for handling touch and motion-based events\nIncorporation of a document model with iCloud integration\nGraphics and windowing support, including external display compatibility\nManagement of the app\u2019s foreground and background execution\nPrinting capabilities\nCustomization options for the appearance of standard UIKit controls\nSupport for displaying text and web content\nCut, copy, and paste functionality\nAnimation of user-interface content\nUsing framework APIs and URL protocols, integration with other applications on the system\nAccessibility features for users with disabilities\nSupport for the Apple Push Notification service\nScheduling and delivery of local notifications\nPDF Creation\nAbility to use custom input views mimicking the system keyboard\nCreation of custom text views that interact with the system keyboard\nContent sharing through Email, Twitter, Facebook, and other services",
        "reference": "intellipaat.com"
    },
    {
        "question": "5. Which is the application thread from where UIKit classes should be used?",
        "answer": "Unless it\u2019s stated, use UIKit classes only from your application\u2019s main thread or main dispatch queue. This restriction applies in particular to classes derived from UIResponder or that require modifying the user interface of your app in some way.",
        "reference": "intellipaat.com"
    },
    {
        "question": "6. What is the difference between Synchronous & Asynchronous tasks?",
        "answer": "Synchronous can also be defined as In order. When you perform the synchronous operation, all that follows must wait for the operation to complete before proceeding.\nIn contrast, \u201casynchronous\u201d can also be defined as \u201cout of order.\u201d When you do something asynchronously, you can run the following code right away, and the asynchronous process will happen someday. It could be run on a separate thread from the rest of the code. It could easily be rescheduled on the same thread at a later date, and you can notify you when it is done.",
        "reference": "intellipaat.com"
    },
    {
        "question": "7. How can you respond to state transitions on your app?",
        "answer": "State transitions can be responded to state changes in an appropriate way by calling corresponding methods on the app\u2019s delegate object.\nFor example:\napplicationDidBecomeActive( ) method: To prepare to run as the foreground app\napplicationDidEnterBackground( ) method: To execute some code when the app is running in the background that may be suspended at any time\napplicationWillEnterForeground( ) method: To execute some code when the app is moving out of the background\napplicationWillTerminate( ) method: Called when the app is being terminated",
        "reference": "intellipaat.com"
    },
    {
        "question": "8. What is Operator Overloading?",
        "answer": "The process of adding new operators and changing existing ones to do various things is known as operator overloading.\n+, *, and / symbols are known as operators.",
        "reference": "intellipaat.com"
    },
    {
        "question": "9. What is TVMLKit?",
        "answer": "TVMLKit serves as a bridge between TVML, JavaScript, and your native tvOS software. You can test TVMLKit JS and TVML files from inside your tvOS app using the TVMLKit framework. The JavaScript environment can be used to build TVML objects, styles, views, and view controllers.\nCheck out our iOS Developers Interview Questions to ace your next interview!",
        "reference": "intellipaat.com"
    },
    {
        "question": "10. What is iOS?",
        "answer": "iOS stands for \u201ciPhone Operating System,\u201d which is used in the devices that Apple manufactures, whether they be iPhones or iPads. It is considered to be the second-most popular operating system in the world.",
        "reference": "intellipaat.com"
    },
    {
        "question": "11. Mention a few key features of the iOS platform.",
        "answer": "The key features of the iOS platform are the following: \nMultitasking capabilities\niCloud is used to store data on the cloud that can be accessed by any other Apple device where your ID is logged in.\niOS is a closed system, which means the source code of Apple\u2019s apps isn\u2019t available to developers.\nSeamless integration with other Apple devices.",
        "reference": "intellipaat.com"
    },
    {
        "question": "12. What are property observers?",
        "answer": "As the name suggests, the Property Observer observes and responds to the change in property value. So wherever a value of the property is set, the property observer gets called.",
        "reference": "intellipaat.com"
    },
    {
        "question": "13. What are UI Elements in iOS?",
        "answer": "The visual elements that we can see in our applications are known as UI elements. Some of these components, such as buttons and text fields, respond to user interactions, while others, such as images and labels, provide information.\n\niOS Interview Questions for Experienced",
        "reference": "intellipaat.com"
    },
    {
        "question": "14. What is Swift and what is Objective-C?",
        "answer": "Swift is a modern programming language created by Apple for iOS, OS X, watchOS, and tvOS apps that combines the best of C and Objective-C but without the C compatibility issues. Swift follows secure programming patterns while also incorporating modern features to make programming simpler, more versatile, and enjoyable. Swift is welcoming to novice programmers and feels familiar with Objective-C developers.\nThe primary programming language for writing applications for OS X and iOS is Objective-C. It\u2019s an object-oriented programming language with a dynamic runtime that\u2019s a superset of the C programming language. Objective-C takes C\u2019s syntax, primitive types, and flow control statements and adds class and process definition syntax.\nDiscover how to protect your devices from Bluetooth Hacking!",
        "reference": "intellipaat.com"
    },
    {
        "question": "15. What is an NSError in Swift?",
        "answer": "The NSError class is a Cocoa class. The knowledge about an error condition is encapsulated in an extendable, object-oriented manner by an NSError object. It includes a predefined error domain, a domain-specific error code, and a user details dictionary with application-specific data.",
        "reference": "intellipaat.com"
    },
    {
        "question": "16. What are the features added in iOS 16?",
        "answer": "The following features are added to iOS 16:\nLock Screen: Customize your Lock Screen by incorporating your preferred photos, applying filters, and altering the font style of the date and time. Stay updated on information from your favorite apps and receive real-time updates effortlessly with Widgets and Live Activities. Access notifications at the bottom of the Lock Screen and explore various viewing options. Furthermore, you have the option to create multiple Lock Screens and switch between them.\nFocus: Match how you want to use your iPhone in the moment by linking a Focus to your Lock Screen. Hide distracting content by expanding your Focus filters across Apple apps like Calendar and Messages, as well as third-party apps.\niCloud Shared Photo Library: (iOS 16.1) Share a library of photos and videos with up to five other family members using an iCloud Shared Photo Library. Family members can contribute photos to the Shared Library from their Personal Library, directly from Camera, or when they are in close proximity to other members of the Shared Library.\nFreeform: The new productivity app, Freeform (iOS 16.2), empowers you to bring your ideas to life on a flexible canvas. With Freeform, you can freely brainstorm on boards without the need to be concerned about layouts or page sizes. Additionally, you can witness real-time contributions and edits from collaborators as they add content to the boards.\nMessages: You can actively edit or unsent a message immediately after sending it, or mark a message as unread for later reference. Collaborate directly within Messages on shared notes, reminders, and other files. Engage in chat conversations with friends using SharePlay while simultaneously watching the newest episode of your favorite show or listening to a new song.\nMail: You can actively edit or unsent a message immediately after sending it, or mark a message as unread for later reference. Collaborate directly within Messages on shared notes, reminders, and other files. Engage in chat conversations with friends using SharePlay while simultaneously watching the newest episode of your favorite show or listening to a new song.\nMaps: You can add multiple stops along your driving route, replenish your transit cards, and view the total cost of your trip, all in one place.\nSafari: In Safari, you can actively utilize Tab Groups, send messages, and initiate FaceTime calls.\nVisual Look-Up: Remove the background from a photo or image to separate the subject, and then transfer the subject to a new document.\nPrivacy and Security: Review and reset the access you have granted others, reset system privacy permissions for apps, and restrict the use of Messages and FaceTime to the device on hand by using Safety Check. Unlock the Hidden and Recently Deleted albums in the Photos app using your iPhone authentication method.\nAccessibility: In the final few feet toward a destination, actively utilize Door Detection to locate the door, determine its distance, and acquire the skill to open it. Enable real-time conversion of audio into text to facilitate easier understanding of conversations and media. Employ the assistive capabilities on your iPhone to manage your Apple Watch and other functions.\nPhotos: You can copy the edits made to one photo and paste them onto another photo or multiple photos. You can swiftly clean up your library by using duplicate detection, alphabetically sort people in your People album, undo and redo edits, and enjoy additional features.\nWeather: Obtain additional information regarding forecast conditions such as air quality, humidity, and UV index. Access hourly forecasts for the upcoming 10 days, receive notifications regarding severe weather alerts issued by the government, and avail of other features.",
        "reference": "intellipaat.com"
    },
    {
        "question": "17. What is the difference between KVC and KVO?",
        "answer": "KVC (Key-Value Coding) is a method for accessing an object\u2019s properties using strings at runtime rather than needing to know the property names statically at development time.\nKVO (Key-Value Observing) allows a controller or class to monitor changes in a property value. In KVO, an object may request to be informed of any adjustments to a particular property, and the observer is automatically notified if that property\u2019s value changes.",
        "reference": "intellipaat.com"
    },
    {
        "question": "18. Explain the different types of iOS Application States.",
        "answer": "You will experience a few app states while using the application. There are five states in the ios application as follows.\nNot Running\nThe application is in the Not running state if the app is not launched yet or if the application is not visible on the screen, or if there is the possibility that the application is terminated by the user or by OS.\nInactive\nAn inactive state occurs when the application is not receiving events, but the app is running in the background. An app transitions to a different state. when the user locks the screen or the system prompts the user to respond to some event, such as a phone call or SMS message, is the only time it stays inactive.\nActive\nIn an ios application, Active State is the main executive state. In this state, the app runs in the foreground, and the UI is accessible.\nBackground\nBefore being suspended, most of all apps enter this state.  If an app requests extra execution time, then that will remain in this state for some more time. Also, an application launched directly in the background enters this background state instead of the inactive state\nSuspended\nIn a suspended state, the application does not execute any code. The system purges suspended apps without notice to make more space for the foreground app when a low-memory condition occurs.",
        "reference": "intellipaat.com"
    },
    {
        "question": "19. What is the difference between retain and assign?",
        "answer": "Assign creates a reference from one object to another without increasing the source\u2019s retain count.\nif (_variable != object)\n{    \n [_variable release];  \n  _variable = nil;  \n  _variable = object;\n }\nRetain creates a reference from one object to another and increases the retain count of the source object.\nif (_variable != object)\n{\n  [_variable release];\n    _variable = nil;  \n_variable = [object retain];  \n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "20. What is Dynamic Dispatch?",
        "answer": "At runtime, Dynamic Dispatch determines which implementation of a polymorphic procedure, such as a method or a function, to call. This means that when we want to call our methods, such as object methods, we must use this syntax. Swift, on the other hand, does not use dynamic dispatch by default.",
        "reference": "intellipaat.com"
    },
    {
        "question": "21. Do private methods exist in Objective-C?",
        "answer": "Yes, Objective-C does contain private methods. Private methods are methods that are only accessible within the class they are defined in, and are not visible to other classes or objects. They can be used to encapsulate implementation details and prevent them from being accessed or modified by external code.",
        "reference": "intellipaat.com"
    },
    {
        "question": "22. What is GCD?",
        "answer": "The GCD stands for Grand Central Dispatch. It is a low-level API that allows you to manage multiple concurrent operations. It will assist you in increasing the responsiveness of your app by deferring computationally intensive tasks to the context. It\u2019s a simpler concurrency model than locks and threads to deal with.",
        "reference": "intellipaat.com"
    },
    {
        "question": "23. What are some iOS implementation options for persistence and storage?",
        "answer": "Persistence involves storing data on the disk in a way that allows retrieval without modification when the app is reopened. There are various methods available for data storage, ranging from simple to complex:\nStoring data using data structures like arrays, dictionaries, sets, and other similar structures is an excellent option for intermediate storage.\nNSUserDefaults and Keychains serve as straightforward key-value stores. However, NSUserDefaults is considered insecure, while Keychains provides secure storage.\nNSFileManager enables the storage and retrieval of data (serialized or not) to and from a disk through file or disk storage.\nRelational databases, such as SQLite, offer a robust solution for implementing complex querying mechanisms.",
        "reference": "intellipaat.com"
    },
    {
        "question": "24. Define SOLID Principles in iOS Development",
        "answer": "The SOLID principles empower developers to create maintainable and scalable software applications by following a set of design principles. In the context of iOS development, these principles enable the creation of clean and robust code. Let\u2019s explore each SOLID principle briefly:\nAccording to the Single Responsibility Principle (SRP), each class or module ought to have a single goal or duty. This principle encourages modularity and enhances code comprehension, testing, and maintenance.\nSoftware entities should, according to the Open/Closed Principle (OCP), be open for expansion but closed for modification. It advocates designing code in a way that allows new functionality to be added without altering existing code. This principle promotes code reuse, and scalability, and minimizes the risk of introducing bugs.\nThe Liskov Substitution Principle (LSP) emphasizes that subtypes must be capable of substituting their base types without disrupting the program\u2019s correctness. Simply put, it should be possible to substitute an object belonging to a superclass with an object belonging to one of its subclasses without creating problems or deviating from expected behavior. This principle ensures well-designed inheritance hierarchies that adhere to the \u201cis-a\u201d relationship.\nThe Interface Segregation Principle (ISP) asserts that clients should not be compelled to depend on interfaces they don\u2019t use. It recommends designing interfaces tailored to the specific needs of clients, preventing the implementation of unnecessary methods. By keeping interfaces focused and concise, this principle encourages loose coupling and eases maintenance.\nAccording to the Dependency Inversion Principle (DIP), high-level modules should depend on abstractions rather than low-level modules. This principle highlights the usage of abstractions (interfaces or protocols) to decouple higher-level and lower-level modules. It promotes dependency injection and inversion of control and facilitates testing and flexibility in code design.\nBy adhering to the SOLID principles in iOS development, developers can create code that is more readable, understandable, and maintainable. This approach fosters the development of modular, flexible, and extensible applications, mitigating the risk of bugs and facilitating collaboration among team members.",
        "reference": "intellipaat.com"
    },
    {
        "question": "25. Explain the term ARC.",
        "answer": "ARC stands for Automatic Reference Counting. It is used to manage the app\u2019s memory usage by initializing and de-initializing memory usage.\nCheck out this video on iOS Development Tutorial:",
        "reference": "intellipaat.com"
    },
    {
        "question": "26. Which programming languages are used for iOS development?",
        "answer": "The following languages are used in iOS development : \nSwift\nObjective-C.\nC++\n.NET\nC\nHTML5\nJavascript",
        "reference": "intellipaat.com"
    },
    {
        "question": "27. What are the advantages of the Realm framework?",
        "answer": "To handle all of the work, only a small amount of code is needed.\nAvailable in both Object C and Swift.\nSQLite and Core Data have slower performance.\nDatabase files can be shared easily between iOS and Android devices.\nThere is no fee, no charge.\nThere is no limit to the data amount that can be stored.\nRegardless of huge data sets or massive storage, consistent speed and consistency",
        "reference": "intellipaat.com"
    },
    {
        "question": "28. What options are there for the UIView element layout specification?",
        "answer": "Here are some common ways to specify the layout of elements in a UIView:\nBy employing InterfaceBuilder, we have the capability to integrate a XIB file into our project, organize its elements, and subsequently load the XIB within our application code, either automatically based on naming conventions or manually.\nWith InterfaceBuilder, we can also design a storyboard for our application.\nWe can write our own code to employ NSLayoutConstraints, which enables us to arrange elements in a view using Auto Layout.\nBy creating CGRects that describe the precise coordinates for each element, we can pass them to the UIView\u2019s (id)initWithFrame:(CGRect)frame method.\nTo learn more about the layout of elements, check out this iOS Tutorial!",
        "reference": "intellipaat.com"
    },
    {
        "question": "29. What is SpriteKit and what is SceneKit?",
        "answer": "SpriteKit is a platform for creating animated 2D objects quickly and easily.\nSceneKit is a platform for 3D graphics rendering that was inherited from OS X.\nSpriteKit, SceneKit, and Metal are expected to boost a new generation of mobile games that push the boundaries of what the powerful GPUs in iOS devices can do.",
        "reference": "intellipaat.com"
    },
    {
        "question": "30. Explain a singleton class.",
        "answer": "When only one instance of a class is created in the application, that class is called a singleton class. See below:\n@interface SomeManager : NSObject\n+ (id)singleton;\n@end\n@implementation SomeManager\n+ (id)singleton {\nstatic id sharedMyManager = nil;\n@synchronized([MyObject class]){\nif (sharedMyManager == nil) {\nsharedMyManager = [[self alloc] init];\n}\n}\nreturn sharedMyManager;\n}\n@end\n//using block\n+ (id) singleton {\nstatic SomeManager *sharedMyManager = nil;\nstatic dispatch_once_t  onceToken;\ndispatch_once(&onceToken, ^{\nsharedMyManager = [[self alloc] init];\n});\nreturn sharedMyManager;\n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "31. Differentiate between UIView\u2019s frame and UIView\u2019s bound?",
        "answer": "A UIView\u2019s frame is a rectangle with a scale (width, height) and position (x,y) relative to the super view it is located within.\nA UIView\u2019s bounds are a rectangle with a size (width, height) and position (x,y) relative to its own coordinate system (0,0).",
        "reference": "intellipaat.com"
    },
    {
        "question": "32. What is method swizzling?",
        "answer": "Method swizzling is a technique in iOS development that allows you to change the implementation of a method at runtime. It involves swapping the implementation of one method with another, typically within a class or its subclasses.\nWith method swizzling, you can modify the behavior of existing methods without directly modifying their original implementation. This technique is often used to add functionality, override behavior, or intercept method calls in iOS applications.\nHere\u2019s how method swizzling works:\nIdentify the target methods: First, you need to identify the methods you want to swizzle, typically by their selectors (method names).\nCreate new methods: Next, you create new methods that will serve as the replacement or swizzled implementation of the original methods. These new methods will contain the desired modifications or additions to the original behavior.\nSwizzle the methods: The actual swizzling process involves exchanging the implementations of the original method and the swizzled method. This is typically done using runtime functions or libraries like Objective-C runtime or Swift runtime.\nInvoke the swizzled methods: Once the swizzling is performed when the original method is called, it will actually execute the swizzled method instead of its original implementation. This allows you to customize the behavior of the method without modifying its original code.\nMethod swizzling can be a powerful technique, but it should be used with caution. It can introduce complexity and make code harder to understand and debug. It\u2019s important to ensure proper handling of concurrency and to document the swizzling changes thoroughly to maintain code clarity and avoid unexpected behavior.",
        "reference": "intellipaat.com"
    },
    {
        "question": "33. How to Prioritize Usability in Design?",
        "answer": "To prioritize usability, the design process has broken down into 4 steps:\nConsider the user\u2019s perspective when designing the user experience.\nUsers, not demographics, are what you should focus on.\nConsider all of the scenarios in which an app might be useful when promoting it.\nEven after the app has been released, continue to improve its functionality.",
        "reference": "intellipaat.com"
    },
    {
        "question": "34. Explain iBeacons?",
        "answer": "Apple\u2019s introduction of Bluetooth low-energy (BLE) wireless technology, iBeacon, is a new way for iPhones and other iOS users to receive location-based information and services.",
        "reference": "intellipaat.com"
    },
    {
        "question": "35. What options are available for networking and HTTP on iOS?",
        "answer": "URLSession: iOS provides the native networking library, which actively supports HTTP and HTTPS protocols, and offers a range of features, including background downloads, authentication, and session management.\nAlamofire: This popular third-party networking library for iOS, which surpasses URLSession in terms of convenience and intuitiveness, actively supports HTTP and HTTPS protocols. Additionally, it offers a range of features, including request and response serialization, error handling, and progress tracking.\nAFNetworking: This is another popular third-party networking library for iOS that provides similar features to Alamofire. It has been around for longer than Alamofire and has a larger community of users, but it may be less actively maintained than Alamofire.\nNSURLSessionWebSocketTask: AFNetworking is a widely used third-party networking library that provides an Objective-C-based API for network operations. It offers features such as request serialization, response validation, reachability monitoring, and SSL pinning. AFNetworking simplifies networking tasks and provides a robust and flexible networking solution.\nURLSessionWebSocketDelegate: This is a delegate protocol that allows you to handle WebSocket events such as connection opening, message reception, and error handling.\nURLSessionStreamTask: This is a native API for creating and managing bi-directional streaming connections over HTTP/2. It was introduced in iOS 9 and allows for efficient, low-latency communication between a client and server.\nThese are just a few of the options available for networking and HTTP on iOS. Depending on your specific needs, there may be other libraries or APIs that are better suited to your application.",
        "reference": "intellipaat.com"
    },
    {
        "question": "36. How can you prevent the iOS 16 app's streaming video media from being captured by QuickTime Player on Yosemite during screen recording?",
        "answer": "There exist several methods to mitigate the risk of QuickTime Player capturing streaming video media from the iOS 16 application during screen recording on the Yosemite operating system.\nUtilize a third-party screen recorder: Choose from various third-party screen recorders that allow you to record the screen of your iOS device. These recorders typically offer encryption for the video stream, effectively preventing QuickTime Player from capturing it.\nEmploy a VPN: Please ensure that all data transmitted from your device, including the video stream originating from the iOS application, is securely encrypted by employing a Virtual Private Network (VPN). When a VPN connection is established, QuickTime Player will be rendered incapable of capturing the video stream. \nDisable screen recording: Navigate to *Settings > General > Restrictions > Allow* on your iOS device and disable the *Screen Recording* feature. By doing so, QuickTime Player will be unable to record the screen of your device.\nNote: If you are utilizing an iOS device operating on iOS 15 or an older iteration, the option to disable screen recording is unavailable. Consequently, you must depend on either a third-party screen recorder or a VPN service to impede QuickTime Player from capturing the video stream.\nConsider the following third-party screen recorders:\nOBS Studio: OBS Studio is a powerful, free, and open-source screen recorder available for Windows, macOS, and Linux. It can record the screen of any device effectively.\nScreenFlow: ScreenFlow is a macOS-compatible screen recorder that is both user-friendly and requires a monetary investment. Its purpose is to facilitate the effortless recording of the screen on your iOS device.\nCamtasia: Camtasia is a robust screen recording software that is available for purchase on both Windows and macOS platforms. It provides comprehensive screen recording features that cater to various devices.",
        "reference": "intellipaat.com"
    },
    {
        "question": "37. Describe managed object context and its function.",
        "answer": "A managed object context (represented by an instance of NSManagedObjectContext) is a temporary \u2018scratchpad\u2019 or \u2018single object space\u2019 in an application for a (presumably) related collection of objects. These objects collectively represent an internally consistent view of one or more persistent stores.\nA single-managed object instance exists in one and only one context, but multiple copies of an object can exist in different contexts.\nThe key functions of the managed object context include the following:\nLife-cycle management: Here, the context provides validation, inverse relationship handling, and undo/redo.\nNotifications: These refer to context posts\u2019 notifications at various points that can be optionally monitored elsewhere in our application.\nConcurrency: Here, the Core Data uses thread (or serialized queue) confinement to protect managed objects and managed object contexts.\n\nAdvanced iOS Senior Developer Interview Questions",
        "reference": "intellipaat.com"
    },
    {
        "question": "38. Why is the design pattern very important?",
        "answer": "Design patterns are important in software design because design patterns are reusable solutions to many common problems. They\u2019re models for writing code that\u2019s simple to comprehend and reuse. The most popular design trends in Cocoa are as follows:\nCreational: Singleton.\nStructural: Decorator, Adapter, Facade.\nBehavioral: Observer and, Memento",
        "reference": "intellipaat.com"
    },
    {
        "question": "39. What is Concurrency?",
        "answer": "Concurrency is a fancy term for \u201crunning several tasks at the same time.\u201d On iOS devices, concurrency is commonly used to allow you to run tasks such as downloading or processing data in the background while keeping your user interface sensitive.",
        "reference": "intellipaat.com"
    },
    {
        "question": "40. Mention various ways to achieve concurrency in iOS?",
        "answer": "Mainly, there are 3 ways to achieve concurrency in iOS. There are:\nGrand Central Dispatch\nOperationQueue\nThreads\n\niOS Developer Interview Questions for 6 Years Experience",
        "reference": "intellipaat.com"
    },
    {
        "question": "41. What is meant by deadlock?",
        "answer": "A deadlock is a situation that occurs when at least two threads are locked on a different resource, and both are waiting for the other resource to finish its job. And no one is able to unlock the resource it is guarding.",
        "reference": "intellipaat.com"
    },
    {
        "question": "42. Explain the lazy property in Swift?",
        "answer": "A lazy stored property is one that does not determine its initial value until it is used for the first time. The lazy modifier is written before the declaration of a lazy stored property.",
        "reference": "intellipaat.com"
    },
    {
        "question": "43. What is the abbreviation of ARC?",
        "answer": "ARC stands for Automatic Reference Counting.",
        "reference": "intellipaat.com"
    },
    {
        "question": "44. What is the difference between strong, weak, read-only, and copy?",
        "answer": "Strong: Through the life of the object, the reference count will be increased, and the reference will be maintained\nWeak: It can be said as a non-strong reference, which means it refers to the fact that we are referring to an object but not adding to its reference count. It\u2019s often used to establish a parent-child relationship. The parent has a strong connection with the infant, but the child has only a small connection with the parent.\nRead-only: Initially, The property will be set, and it can\u2019t be changed.\nCopy: It means that when an object is created, we copy its value. Also prevents its value from changing.",
        "reference": "intellipaat.com"
    },
    {
        "question": "45. Explain QOS?",
        "answer": "QoS stands for the quality of service. It is a class that organizes the work that NSOperation, NSOperationQueue, NSThread artifacts, dispatch queues, and threads do (POSIX threads). By assigning a QoS, you\u2019re telling the system how important it is, and the system prioritizes and schedules it accordingly.",
        "reference": "intellipaat.com"
    },
    {
        "question": "46. What is the use of deinit in swift?",
        "answer": "Deinitialization in Swift is the method of deallocating or cleaning up unused class instance objects in order to free up memory space used by machine resources for better memory management. Until a class instance is deallocated, the deinitialization process is usually named.",
        "reference": "intellipaat.com"
    },
    {
        "question": "47. What is the difference between atomic- and non-atomic properties? Which is the default for synthesized properties? When would you use one over the other?",
        "answer": "Properties specified as atomic are guaranteed to always return a fully initialized object. This also happens to be the default state for synthesized properties. While it is a good practice to specify atomic properties to remove the potential for confusion, if we leave it off, the properties will still be atomic. This guarantee of atomic properties comes at the cost of performance. However, if we have a property for which we know that retrieving an uninitialized value is not a risk (e.g., if all access to the property is already synchronized via other means), then setting it to non-atomic can boost the performance.",
        "reference": "intellipaat.com"
    },
    {
        "question": "48. Does Objective-C contain private methods?",
        "answer": "No, there is nothing called a private method in Object-C programming. If a method is defined in .m only, then it becomes protected; if it is defined in .h, it is public.\nIf we really want a private method, then we need to add a local category/unnamed category/class extension in the class and add the method in the category and define it in class.m.",
        "reference": "intellipaat.com"
    },
    {
        "question": "49. What is a plist?",
        "answer": "Property list or plist refers to a list that organizes data into named values and lists of values using several object types. These types provide us the means to produce data that is meaningfully structured, transportable, storable, and accessible but still as efficient as possible. Property lists are frequently used by applications running on both Mac OS X and iOS. The property-list programming interfaces for Cocoa and Core Foundation allow us to convert hierarchically structured combinations of these basic types of objects to and from standard XML. We can save the XML data to the disk and later use it to reconstruct the original objects.\nThe user defaults system, which we programmatically access through the NSUserDefaults class, uses property lists to store objects representing user preferences. This limitation would seem to exclude many kinds of objects, such as NSColor and NSFont objects, from the user defaults system. However, if objects conform to the NSCoding protocol, they can be archived into NSData objects, which are property-list-compatible objects.\nClick here to learn more about iOS in the iOS Development Training!",
        "reference": "intellipaat.com"
    },
    {
        "question": "50. Explain MVC.",
        "answer": "MVC is the acronym for \u201cModel-View-Controller.\u201d MVC is a design pattern for web applications that consists of three interconnected components.\nModel \u2013 A model is where the data is stored.\nView \u2013 The classes in view are reusable as they don\u2019t have any domain-specific logic.  Controller \u2013  with delegation patterns, the controller act as a communication between the model and the view.\nThe MVC model, also known as the \u201cpattern,\u201d is widely used in the development of modern user interfaces.\n\niOS Interview Questions for Senior Developer with 10 Years Experience",
        "reference": "intellipaat.com"
    },
    {
        "question": "51. What is the purpose of reuseIdentifier? What is the benefit of setting it into a non-nil value?",
        "answer": "The reuseIdentifier is used to group together similar rows in a UITableView, i.e., the rows that differ only in their content, otherwise having similar layouts. A UITableView will normally allocate just enough UITableViewCell objects to display the content visible in the table.\nIf reuseIdentifier is set to a non-nil value, then the UITableView will first attempt to reuse an already allocated UITableViewCell with the same reuseIdentifier when the table view is scrolled. If reuseIdentifier has not been set, then the UITableView will be forced to allocate new UITableViewCell objects for each new item that scrolls into view, potentially leading to laggy animations.",
        "reference": "intellipaat.com"
    },
    {
        "question": "52. What are Swift\u2019s advantages?",
        "answer": "The main advantages of Swift are mentioned below:\nEasy to read\nEasy to maintain\nExtremely fast\nDynamic libraries\nSafe programming language\nEfficient memory management\nConcise code",
        "reference": "intellipaat.com"
    },
    {
        "question": "53. What is the difference between an \u2018App ID\u2019 and a \u2018Bundle ID\u2019? What is each used for?",
        "answer": "An App ID is a two-part string used to identify one or more apps from a single development team. The string consists of a Team ID and a Bundle ID search strings, with a period (.) separating the two.\nThe Team ID is supplied by Apple and is unique to a specific development team, while a Bundle ID is supplied by the developer to match either the Bundle ID of a single app or a set of Bundle IDs of a group of apps.\nSince most users consider the App ID as a string, they think it is interchangeable with the Bundle ID. Once the App ID is created in the Member Center, we can only use the App ID prefix that matches the Bundle ID of the application bundle.\nThe Bundle ID uniquely defines each app. It is specified in Xcode. A single Xcode project can have multiple targets and, therefore, outputs multiple apps. A common use case: an app having both lite/free and pro/full versions or branded multiple ways.",
        "reference": "intellipaat.com"
    },
    {
        "question": "54. What is an abstract class in Cocoa?",
        "answer": "Cocoa doesn\u2019t provide anything called abstract. It can create a class abstract that gets checked only at the runtime while it is not checked at the compile time.\n@interface AbstractClass : NSObject\n@end\n@implementation AbstractClass\n+ (id)alloc{\nif (self == [AbstractClass class]) {\nNSLog(@\"Abstract Class can\u2019t be used\");\n}\nreturn [super alloc];\n@end",
        "reference": "intellipaat.com"
    },
    {
        "question": "55. What is the difference between Cocoa and Cocoa Touch?",
        "answer": "Cocoa Touch is the result of combining the Foundation and AppKit frameworks, while Cocoa is the result of combining the Foundation and UIKit frameworks. To build API stacks, Cocoa and Cocoa Touch sit on top of other application sets. Media, Core Services, and CoreOS are the other layers.\n\nApplication Framework For\n1. Cocoa is the application framework for Mac OS X.\n2. Cocoa Touch is the application framework for iPhone and iPod Touch.\nFrameworks\n1. Cocoa: Foundation and AppKit.\n2. Cocoa Touch: Foundation and UIKit\nAbsence of certain classes\nCocoa has NSHost and Cocoa Touch doesn\u2019t\nAPI\nCocoa: All the classes used in Cocoa have the NS prefix Ex: NSTextField\nCocoa Touch: classes used in Cocoa have the UI prefix Ex: UITextField\nMVC patterns\nCocoa: Cocoa has multiple alternative design patterns \u2013 in addition to MVC\nCocoa Touch: The iPhone SDK has a reinforced MVC system, which performs better than the default MVC in Cocoa",
        "reference": "intellipaat.com"
    },
    {
        "question": "56. Describe the NSURLConnection class. Describe its categories and use scenarios.",
        "answer": "There are two ways of using the NSURLConnection class. One is asynchronous, and the other is synchronous.\nAn asynchronous connection will create a new thread and perform its download process on the new thread. A synchronous connection will block the calling thread while downloading the content and doing it\u2019s communicating.\nMany developers think that a synchronous connection blocks only the main thread, which is not true. A synchronous connection will always block the thread from which it is fired. If we fire a synchronous connection from the main thread, the main thread will be blocked. However, if we fire a synchronous connection from a thread other than the main thread, it will be like an asynchronous connection and won\u2019t block our main thread.\nIn fact, the only difference between synchronous and asynchronous connections is that at runtime, a thread will be created for the asynchronous connection, while it won\u2019t do the same for a synchronous connection.\nIn order to create an asynchronous connection, we need to:\nHave our URL in an instance of NSString\nConvert our string to an instance of NSURL\nPlace our URL in a URL Request of type NSURLRequest or, in the case of mutable URLs, in an instance of NSMutableURLRequest\nCreate an instance of NSURLConnection and pass the URL request to it\nIf you have any doubts or queries related to iOS, get them clarified by iOS experts on our iOS Community",
        "reference": "intellipaat.com"
    },
    {
        "question": "57. Explain Swift\u2019s pattern matching techniques",
        "answer": "Tuple patterns: Values of corresponding tuple forms are matched using tuple patterns.\nType-casting patterns: You can cast or mix styles using type-casting patterns.\nWildcard patterns: Every kind and kind of value is matched by wildcard patterns, which disregard them.\nOptional patterns: To align optional values, optional patterns are used.\nEnumeration case patterns: The cases of existing enumeration forms are matched by enumeration case patterns.\nExpression patterns: You may use expression patterns to compare a given value to a given expression.",
        "reference": "intellipaat.com"
    },
    {
        "question": "58. What is the relation between iVar and @property?",
        "answer": "iVar is an instance variable. It cannot be accessed unless we create accessors, which are generated by @property. iVar and its counterpart @property can be of different names.\n@interface Box : NSObject{\nNSString *boxName;\n}\n@property (strong) NSString *boxDescription;//this will become another ivar\n-(void)aMethod;\n@end\n@implementation Box\n@synthesize boxDescription=boxName;//now boxDescription is accessor for name\n-(void)aMethod {\nNSLog(@\"name=%@\", boxName);\nNSLog(@\"boxDescription=%@\",self.boxDescription);\nNSLog(@\"boxDescription=%@\",boxDescription); //throw an error\n}\n@end",
        "reference": "intellipaat.com"
    },
    {
        "question": "59. What is a Guard statement?",
        "answer": "If one or more requirements aren\u2019t met, a guard statement is used to pass program control out of a domain. The advantages of guard statement are as follows:\nIt is another way to safely unwrap optionals\nIt provides an early exit\nIt avoids pyramids of doom\nThe guard statement is written as:\nguard condition else {\n   statements\n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "60. How is memory management handled on iOS?",
        "answer": "Memory management is crucial in any application, especially important in iOS applications due to memory and other limitations. ARC, MRC, reference forms, and value types are all included. Every iOS developer should be aware of this! Memory leaks and system crashes are all too common in iOS apps due to poor memory management.",
        "reference": "intellipaat.com"
    },
    {
        "question": "61. What are raw strings?",
        "answer": "Raw String in Switf 5 gives us the ability to specify a custom delimiter #.\nFor example, when we write \\n, it should act as an escape sequence, but it will be treated as a backslash, then an \u2018n.\u2019\nlet regularString = \"\\\\Hello \\\\World\"\nlet rawString = #\"\\Hello \\World\"#",
        "reference": "intellipaat.com"
    },
    {
        "question": "62. What do you mean by TDD?",
        "answer": "TDD stands for Test-Driven Development. With the help of this feature, a developer who is creating a feature can plan for the feature, build it, and then test it before it goes to production.\n\nSalary Trends in iOS\n\nIn the past few years, the demand for iOS developers has been increasing, both in India and abroad. The average salary in India as per payscale has been noted to be \u20b95.9 LPA, and in the USA, according to clouddev the average for an iOS developer is $125K, ranging from $105K to $143K.",
        "reference": "intellipaat.com"
    },
    {
        "question": "INDIA",
        "answer": "Role Salary\nJr. Mobile Engineer (0-2 years)  4 LPA- 7 LPA\nSr. Mobile Engineer (2-4 years) 7 LPA \u2013 23 LPA\nLead Mobile Engineer (4-7 years) 17 LPA \u2013 72 LPA",
        "reference": "intellipaat.com"
    }
]