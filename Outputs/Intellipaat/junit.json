[
    {
        "question": "1. What is JUnit?",
        "answer": "JUnit is a unit testing framework for the Java Programming Language. It is written in Java and is an Open Source Software maintained by the JUnit.org community.",
        "reference": "intellipaat.com"
    },
    {
        "question": "2. What are important features of JUnit?",
        "answer": "Import features of JUnit are:\nIt is an open source framework.\nProvides Annotation to identify the test methods.\nProvides Assertions for testing expected results.\nProvides Test runners for running tests.\nJUnit tests can be run automatically and they check their own results and provide immediate feedback.\nJUnit tests can be organized into test suites containing test cases and even other test suites.\nJUnit shows test progress in a bar that is green if test is going fine and it turns red when a test fails.",
        "reference": "intellipaat.com"
    },
    {
        "question": "3. What is a Unit Test Case?",
        "answer": "A Unit Test Case is a part of code which ensures that the another part of code (method) works as expected. A formal written unit test case is characterized by a known input and by an expected output, which is worked out before the test is executed. The known input should test a precondition and the expected output should test a post condition.",
        "reference": "intellipaat.com"
    },
    {
        "question": "4. Why does JUnit only report the first failure in a single test?",
        "answer": "Reporting multiple failures in a single test is generally a sign that the test does too much and it is too big a unit test. JUnit is designed to work best with a number of small tests. It executes each test within a separate instance of the test class. It reports failure on each test.",
        "reference": "intellipaat.com"
    },
    {
        "question": "5. In Java, assert is a keyword. Won\u2019t this conflict with JUnit\u2019sassert() method?",
        "answer": "JUnit 3.7 deprecated assert() and replaced it with assertTrue(), which works exactly the same way. JUnit 4 is compatible with the assert keyword. If you run with the -ea JVM switch, assertions that fail will be reported by JUnit.\n\nAdvanced Junit Interview Questions",
        "reference": "intellipaat.com"
    },
    {
        "question": "6. How do I test things that must be run in a J2EE container (e.g. servlets, EJBs)?",
        "answer": "Refactoring J2EE components to delegate functionality to other objects that don\u2019t have to be run in a J2EE container will improve the design and testability of the software. Cactus is an open source JUnit extension that can be used for unit testing server-side java code.",
        "reference": "intellipaat.com"
    },
    {
        "question": "7. What are JUnit classes? List some of them?",
        "answer": "JUnit classes are important classes which are used in writing and testing JUnits. Some of the important classes are:\nAssert \u2013 A set of assert methods.\nTest Case \u2013 It defines the fixture to run multiple tests.\nTest Result \u2013 It collects the results of executing a test case.\nTest Suite \u2013 It is a Composite of Tests.",
        "reference": "intellipaat.com"
    },
    {
        "question": "8. What are annotations and how are they useful in JUnit?",
        "answer": "Annotations are like meta-tags that you can add to you code and apply them to methods or in class. The annotation in JUnit gives us information about test methods , which methods are going to run before & after test methods, which methods run before & after all the methods, which methods or class will be ignore during execution.",
        "reference": "intellipaat.com"
    },
    {
        "question": "9. What Is JunitTestCase?",
        "answer": "JUnit Test Case is the base class, junit. framework.TestCase, that allows you to create a test case. (Although, TestCase class is no longer supported in JUnit 4.4.)\nA test case defines the fixture to run multiple tests. To define a test case\nImplement a subclass of TestCase\nDefine instance variables that store the state of the fixture\nInitialize the fixture state by overriding setUp\nClean-up after a test by overriding tearDown\nEach test runs in its own fixture so there can be no side effects among test runs.",
        "reference": "intellipaat.com"
    }
]