[
    {
        "question": "1. Compare between Java and Python.",
        "answer": "Criteria Java Python\nEase of use Good Excellent\nSpeed of coding Average Excellent\nData types Static typed Dynamically typed\nData Science and Machine Learning applications Average Excellent",
        "reference": "intellipaat.com"
    },
    {
        "question": "2. Distinguish between StringBuffer and StringBuilder in Java programming.",
        "answer": "StringBuffer StringBuilder\nStringBuffer methods are synchronized. StringBuilder is non-synchronized.\nThe storage area is heap and modified easily. Storage is heap-based and can be modified.\nStringBuffer is thread-safe. StringBuilder is fast as it is not thread-safe.\nThe performance is very slow. The performance is very fast.\nGo through this tutorial to get a better understanding of Java String!",
        "reference": "intellipaat.com"
    },
    {
        "question": "3. Differentiate between JDK, JRE, and JVM.",
        "answer": "JVM stands for Java Virtual Machine which provides the runtime environment for Java bytecodes to be executed.\nJRE (Java Runtime Environment) includes the sets of files required by JVM during runtime.\nJDK (Java Development Kit) consists of JRE along with the development tools required to write and execute a program.\nGet a clear idea of why to get certified in Java!",
        "reference": "intellipaat.com"
    },
    {
        "question": "4. Define inheritance.",
        "answer": "Java includes the feature of inheritance which is an object-oriented programming concept. Inheritance lets a derived class inherit the methods of a base class.",
        "reference": "intellipaat.com"
    },
    {
        "question": "5. Explain method overloading.",
        "answer": "When a Java program contains more than one method with the same name but with different properties, then it is called method overloading.\nCheck our guide on Spring boot interview questions which is specifically developed for boot frameworks.",
        "reference": "intellipaat.com"
    },
    {
        "question": "6. Compare overloading with overriding.",
        "answer": "Overloading refers to the case of having two methods of the same name but different properties; whereas, overriding occurs when there are two methods of the same name and properties, but one is in the child class and the other is in the parent class.",
        "reference": "intellipaat.com"
    },
    {
        "question": "Watch this Java Interview Questions video:",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "7. Explain the creation of a thread-safe singleton in Java using double-checked locking.",
        "answer": "Singleton is created with the double-checked locking as before Java 5 acts as a broker and it\u2019s been possible to have multiple instances of singleton when multiple threads create an instance of the singleton at the same time. Java 5 made it easy to create thread-safe singleton using Enum. Using a volatile variable is essential for the same.",
        "reference": "intellipaat.com"
    },
    {
        "question": "8. What is a class in Java?",
        "answer": "Java encapsulates codes in various classes that define new data types. These new data types are used to create objects.",
        "reference": "intellipaat.com"
    },
    {
        "question": "9. Differentiate between an ArrayList and a Vector.",
        "answer": "ArrayList Vector\nAn ArrayList is not synchronized. A vector is synchronized.\nAn ArrayList is fast. A vector is slow as it is thread-safe.\nIf an element is inserted into an ArrayList, it increases its array size by 50 percent. A vector defaults to doubling the size of its array.\nAn ArrayList does not define the increment size. A vector defines the increment size.\nAn ArrayList can only use Iterator for traversing. Except for hashtable, a vector are the only other class that uses both Enumeration and Iterator.",
        "reference": "intellipaat.com"
    },
    {
        "question": "10. Mention the difference between Iterator and Enumeration.",
        "answer": "Iterator Enumeration\nIterator is an interface found in the java.util package. Enumeration is an object that generates elements one at a time.\nUses three methods to interface:\nhasNext()\nnext()\nremove()\nUses two methods:\nhasMoreElements()\nnextElement()\nIterators allow removing elements from the given collection during the iteration with well-defined semantics. It is used for passing through a collection, usually of unknown size.\nIterator method names have been improved. The traversing of elements can only be done once per creation.",
        "reference": "intellipaat.com"
    },
    {
        "question": "11. Explain the difference between the inner class and the subclass.",
        "answer": "Inner Class Subclass\nAn inner class is a class that is nested within another class. A subclass is a class that inherits from another class called the superclass.\nIt provides access rights for the class, which is nesting it, which can access all variables and methods defined in the outer class. It provides access to all public and protected methods and fields of its superclass.",
        "reference": "intellipaat.com"
    },
    {
        "question": "12. Can we execute any code, even before the main method? Explain.",
        "answer": "Yes, we can execute any code, even before the main method. We will be using a static block of code in the class when creating the objects at load time of the class. Any statements within this static block of code will get executed at once while loading the class, even before the creation of objects in the main method.\nPrepare yourself for Java certification with our comprehensive online Java Training!",
        "reference": "intellipaat.com"
    },
    {
        "question": "13. How can we restrict inheritance for a class?",
        "answer": "We can restrict inheritance for a class by the following steps:\nBy using the final keyword\nIf we make all methods final, then we cannot override that\nBy using private constructors\nBy using the Javadoc comment (\u201d // \u201c)",
        "reference": "intellipaat.com"
    },
    {
        "question": "14. Java doesn't support multiple inheritance. Why?",
        "answer": "Java doesn\u2019t support multiple inheritance because we cannot use different methods in one class; it creates an ambiguity.\nExample:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\nclass Intellipaat1\n{\nvoid test()\n{\nsystem.out.println(\"test() method\");\n}\n}class Intellipaat2\n{\nvoid test()\n{\nsystem.out.println(\"test() method\");\n}\n}Multiple inheritance\nclass C extends Intellipaat1, Intellipaat2\n{\n     /* Code */\n}\nIntellipaat1 and Intellipaat2 test() methods are inheriting to class C. So, which test() method class C will take?\nAs Intellipaat1 and Intellipaat2 class test () methods are different, here we would face ambiguity.",
        "reference": "intellipaat.com"
    },
    {
        "question": "15. Are constructors inherited? Can a subclass call the parent's class constructor?",
        "answer": "We cannot inherit a constructor. We create an instance of a subclass using a constructor of one of its superclasses. Because overriding the superclass constructor is not our wish as if we override a superclass constructor, then we will destroy the encapsulation abilities of the language.\nCheck out this insightful tutorial to learn more about Java Constructors!",
        "reference": "intellipaat.com"
    },
    {
        "question": "16. Define JSON.",
        "answer": "The expansion of JSON is \u2018JavaScript Object Notation.\u2019 It is a much lighter and readable alternative to XML. It is independent and easily parse-able in all programming languages. It is primarily used for client\u2013server and server\u2013server communication.",
        "reference": "intellipaat.com"
    },
    {
        "question": "17. What are the advantages of JSON over XML?",
        "answer": "The advantages of JSON over XML are:\n JSON is lighter and faster than XML.\n It is easily understandable.\n It is easy to parse and convert to objects for information consumption.\nJSON supports multiple data types\u2014string, number, array, or Boolean\u2014but XML data are all strings.",
        "reference": "intellipaat.com"
    },
    {
        "question": "18. What do you understand by Java?",
        "answer": "Java is an object-oriented computer language.\nIt is a high-level programming language developed by James Gosling in Sun Microsystems in the year 1995.\nJava is a fast, secure, and reliable language used for many games, devices, and applications.\nGo through this Java Tutorial to get a better understanding of the concept!",
        "reference": "intellipaat.com"
    },
    {
        "question": "19. Outline the major Java features.",
        "answer": "The major features of Java programming language are explained below:\n\nObject-oriented: Java is based on object-oriented programming where the class and methods describe the state and behavior of an object.\nPortable: A Java program gets converted into Java bytecodes that can be executed on any platform without any dependency.\nPlatform independent: Java works on the \u2018write once, run anywhere\u2019 principle as it supports multiple platforms like Windows, Linux, Mac, Sun Solaris, etc.\nRobust: Java has strong memory management as there are no pointer allocations. It has an automatic garbage collection that prohibits memory leaks.\nInterpreted: As mentioned, Java compiler converts the codes into Java bytecodes which are then interpreted and executed by Java Interpreter.\nBecome a master of Java by enrolling in this online Java Course!\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com"
    },
    {
        "question": "20. What do you mean by an object?",
        "answer": "An object consists of methods and classes that depict its state and perform operations. A Java program contains a lot of objects instructing each other their jobs. This concept is part of core Java.\nCheck out the list of Hibernate Interview Questions to prepare for upcoming interviews.",
        "reference": "intellipaat.com"
    },
    {
        "question": "21. What is the difference between Java and C++?",
        "answer": "Below are the key differences between Java and C++:\nJava C++\nJava supports both compilers and interpreters Supports only the compiler\nMemory management is system controlled Memory management can be accessed by the programmer\nDoesn\u2019t support multiple inheritances Support multiple inheritances\nOffers limited support for the pointers Fully supports the pointers\nShows heavy dependence on automatic garbage collection, but does not support the destructors The user needs to perform manual management using the new and delete keywords",
        "reference": "intellipaat.com"
    },
    {
        "question": "22. What is JIT Compiler?",
        "answer": "The Just-In-Time compiler is an important part of the Java Runtime Environment that optimizes the performance of java based applications at run time. JIT parallelly compiles the bytecodes with similar functionality and reduces the compilation time.\nA method in the java program can be called thousands of times at the startup. Therefore, instead of compiling every method, java OpenJ9 records the number of times a method is initiated. If the initiation count crosses a predefined threshold, the JIT compiler gets triggered.\nEven learn about Queue in Java.",
        "reference": "intellipaat.com"
    },
    {
        "question": "23. What is Classloader?",
        "answer": "It is a part of the Java Runtime Environment which is used to dynamically load the class files into the Java Virtual Machine(JVM). The classloader triggers whenever a java file is executed.\nThere are three types of classloaders in Java:\nBootstrap Classloader: The bootstrap loader is the superclass of extension classloader which loads the standard JDK files from rt.jar and other core classes. The rt.jar file contains all the package classes of java.net, java.lang, java.util, java.io, java.sql, etc.\nExtension Classloader: The extension classloader is known as the parent of the System classloaders and the child of the Bootstrap classloader. It only loads the files available in the extension classpath, that is \u2018ext.dirs/JRE/lib/ext directory. If the file is not available in the mentioned directory the extension classloader will delegate it to the System classloader.\nSystem/Application Classloader: It loads the classes of application type available in the environment variable such as -classpath, or -cp command-line option. The application classloader generates a ClassNotFoundException if the class is not available in the application classpath.",
        "reference": "intellipaat.com"
    },
    {
        "question": "24. How does the == operator function in Java?",
        "answer": "Java uses the == operator to compare the reference equality of two objects, which means that it determines if the two objects refer to the same memory location.",
        "reference": "intellipaat.com"
    },
    {
        "question": "25. What is polymorphism in Java?",
        "answer": "Polymorphism refers to the ability of objects of different classes to be regarded as objects of a common superclass when writing object-oriented programs. This makes it possible for methods from different classes to be applied through one general interface, resulting in flexibility and reuse.",
        "reference": "intellipaat.com"
    },
    {
        "question": "26. What is the purpose of static in Java? Mention an example.",
        "answer": "The static keyword in Java is intended to indicate that a certain variable or method belongs to the class and not its instances. For this reason, even without instantiating an object of the class, such a variable or method can be accessed.\n1\n2\n3\n4\n5\n6\n7\n8\npublic class MathUtils {\n    public static int add(int a, int b) {\n        return a + b;\n    }\n    public static double square(double num) {\n        return num * num;\n    }\n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "27. What is exception handling in Java?",
        "answer": "Exception handling is a way of dealing with runtime errors or unusual situations that may occur during execution in the Java programming language. It involves trapping exceptions with try-catch blocks and managing them gracefully so that no program termination happens or unexpected behavior occurs.",
        "reference": "intellipaat.com"
    },
    {
        "question": "28. What is a try-catch in Java?",
        "answer": "A try-catch block in Java is responsible for this. The code that may throw exceptions has to be written inside the try block, and if any exception occurs, catch it and work on it in the corresponding catch block.",
        "reference": "intellipaat.com"
    },
    {
        "question": "29. Differentiate between checked and unchecked.",
        "answer": "The compiler checks checked exceptions at compile time, meaning that programmers have to handle such exceptions with try-catch blocks or declare them using the method signature. Unlike checked exceptions, unchecked exceptions are not checked at compile-time, hence they do not require explicit handling by a programmer.",
        "reference": "intellipaat.com"
    },
    {
        "question": "30. What is the meaning of 'final' in Java? Give example",
        "answer": "Java uses the final keyword to declare constants, prevent method overriding, and create immutable classes. For example, final int MAX_SIZE = 100; declares a constant MAX_SIZE whose value is 100.",
        "reference": "intellipaat.com"
    },
    {
        "question": "31. Is multithreading part of Java?",
        "answer": "Yes, multithreading is part of Java. It provides built-in support for creating and managing threads, thereby enabling multiple tasks to be executed concurrently within one program.",
        "reference": "intellipaat.com"
    },
    {
        "question": "32. What is the purpose of the 'super' keyword in Java?",
        "answer": "Super is used in the Java programming language to refer to the superclass of an object being manipulated. It can also be used as a bridge between superclass methods/constructors and subclass methods/constructors. For instance, super.methodName() invokes the method defined by the superclass.",
        "reference": "intellipaat.com"
    },
    {
        "question": "33. What is an abstraction in Java? Give an example.",
        "answer": "Java Abstraction is the term in Java, which means encapsulating only the function ability and behavior of methods while not exposing their implementation details to the user. The object design used here focuses on what an object does rather than on how it performs that function. For instance, the List interface in Java is an example of abstraction because it describes general operations for lists without defining how they are implemented by specific list classes such as LinkedList and ArrayList.\n\nJava Developer Interview Questions for Experienced",
        "reference": "intellipaat.com"
    },
    {
        "question": "34. Is an empty .java file name a valid source file name in java?",
        "answer": "Yes, we can save a java file with an empty .java file name. You can compile it in the command prompt by \u2018javac .java\u2019 and run it by typing \u2018java classname\u2019. Here is an example of such a program:\n1\n2\n3\n4\n5\n6\n7\n8\nimport java.util.*;\nclass A\n{\npublic static void main(String args[])\n{\nSystem.out.println(\"Hello World\");\n}\n}\nAfter saving the code, you need to open the command prompt and go to the directory where the file is stored. Then, you need to type \u2018javac .java\u2019 to compile the program, and \u2018java A\u2019 to run the program.",
        "reference": "intellipaat.com"
    },
    {
        "question": "35. What is the difference between Object-oriented and object-based programming language?",
        "answer": "Following are the key differences between the object-oriented and object-based programming languages:\nObject-oriented programming language Object-based programming language\nObject-oriented programming languages support all the features of OOPS, including polymorphism and inheritance Object-based programming language does not support inheritance or polymorphism\nDoesn\u2019t support built-in objects Support built-in objects like JavaScript has the window object\nExample: C#, C++, Java, Python, etc. JavaScript and Visual Basic are examples of object-based programming language",
        "reference": "intellipaat.com"
    },
    {
        "question": "36. Why is the main method static in Java?",
        "answer": "The main method is static in Java because to call the static methods, there is no need for the object. The Java Virtual Machine(JVM) has to create an object to call the non-static main() method, which will result in extra memory allocation.",
        "reference": "intellipaat.com"
    },
    {
        "question": "37. Can we declare the static variables and methods in an abstract class?",
        "answer": "Yes, we can declare the static variables and methods in an abstract class by inheriting the abstract class. In java, the static variables and methods can be accessed without creating an object. You can simply extend the abstract class and use the static context as mentioned below:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nimport java.util.*;\nclass A\n{\n    static int x=110;\n    static void method1()\n    {\n        System.out.println(\"Class A static function called\");\n    }\n     }\n public class prog1 extends A\n{\n    public static void main(String args[])\n    {\n        A.method1();\n        System.out.println(\"Value of x=\"+A.x);\n    }\n}\n The output of the above program will be:\nClass A static function called\nValue of x=110",
        "reference": "intellipaat.com"
    },
    {
        "question": "38. What is Aggregation?",
        "answer": "Aggregation in Java represents Has-A relationship where one class contains the reference of another class. In other words, it refers to a one-way relationship between two classes where the aggregate class has the instance of another class it owns.\nFor example, in the program below the aggregate class student have a one-way relationship with the class Address. Here each student having an address makes sense, but address having the student doesn\u2019t make any sense. So, instead of inheritance, the aggregation is based on the usage of the classes.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\nimport java.util.*;\nclass Address\n{\n    String street, city, state, country;\n    public Address(String street, String city, String state, String country)\n    {\n        this.street=street;\n        this.city=city;\n        this.state=state;\n        this.country=country;\n    }\n}\npublic class student\n{\n    int reg_no;\n    String name;\n    Address address;\n    public student(int id,String name,Address address)\n    {\n        this.reg_no=id;\n        this.name=name;\n        this.address=address;\n    }\n    public void display()\n    {\n        System.out.println(\"Student details: \");\n        System.out.println(\"Name: \"+name);\n        System.out.println(\"Reg_no: \"+reg_no);\n        System.out.println(\"Address: \"+address.street+\", \"+address.city+\", \"+address.state+\", \"+address.country);\n    }\n    public static void main(String args[])\n    {\n        Address address1=new Address(\"Paper Mill Road\",\"SRE\",\"UP\",\"India\");\n        Address address2=new Address(\"Service Road\",\"BNG\",\"KA\",\"India\");\n        student ob1=new student(111,\"Sam\",address1);\n        student ob2=new student(112,\"Alex\",address2);\n        ob1.display();\n        ob2.display();\n    }\n}\n The output of the above program will be:\n Student details: \nName: Sam\nReg_no: 111\nAddress: Paper Mill Road, SRE, UP, India\n Student details: \nName: Alex\nReg_no: 112\nAddress: Service Road, BNG, KA, India",
        "reference": "intellipaat.com"
    },
    {
        "question": "39. What is composition?",
        "answer": "If an object contains another object and the contained can\u2019t exist without the existence of that particular object, then it\u2019s known as the composition. In simple words, the composition is a kind of aggregation used to describe the reference between two classes using the reference variable.\nFor example, a class student contains another class named address. So, if the class address cannot exist without the class student, then there exists a composition between them.",
        "reference": "intellipaat.com"
    },
    {
        "question": "40. Can we overload the main method in Java?",
        "answer": "Yes, you can overload the main() method in Java using the concept of method overloading.\nBelow is an example of main() method overloading:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\nimport java.util.*;\npublic class main_overloading\n{\n   public static void main(String args)\n   {\n       System.out.println(\"Main with String\");\n   }\n   public static void main(String args[])   \n   {\n       System.out.println(\"Main with the String args[]\");\n   }\n   public static void main()\n   {\n       System.out.println(\"main without String\");\n   }\n}\nThe output of the above code will be:\n1\nMain with the String args[]",
        "reference": "intellipaat.com"
    },
    {
        "question": "41. Explain public static void main(String argos[]) in Java?",
        "answer": "The main() method is the entry point for any program in java language. In the expression public static void main(String argos[]), each keyword has significance as mentioned below:\nPublic: It\u2019s an access specifier which is used to specify the accessibility of a method in java. Here, Public means anyone can access the method or the class.\nstatic: the static keyword in java identifies the main method as class-based, which means it can be accessed without creating an object/instance. Static methods can b3e directly called by the Java Virtual Machine(JVM), which in turn saves extra memory allocation.\nvoid: void is a return type in java, which means the main method will not return any value back.\nString args[]: String argos[] or String[] args is an array of String objects which stores the command line arguments. Here the argument is an array of types of java. Therefore, it\u2019s passed as the parameter in the main() method.",
        "reference": "intellipaat.com"
    },
    {
        "question": "42. What is the NullPointerException?",
        "answer": "The NullPointerException occurs when the user attempts to access or modify the fields of a null object. A null object is an instance defined with null values or without any reference.",
        "reference": "intellipaat.com"
    },
    {
        "question": "43. What is the difference between a constructor and a destructor?",
        "answer": "Below is the difference between a constructor and a destructor based on various parameters:\nBase of Comparison Constructor Destructor\nPurpose A constructor is used to allocate the memory. A destructor is used to deallocate or free up the memory.\nArguments Mayor may not accept the arguments. Destructors don\u2019t accept any arguments.\nDeclaration class_name(arguments){\n}\n~class_name(){\n};\nCalling The constructor is called as soon as the object is created. Called at the time of program termination or when the block is exited.\nOrder of execution Constructors are executed in successive order, meaning from parent to child class. Destructors are called in the reverse order, meaning from child to parent class.\nOverloading Can be overloaded. Cannot be overloaded.",
        "reference": "intellipaat.com"
    },
    {
        "question": "44. Can a Java interface have static methods?",
        "answer": "Yes, a Java interface can have static methods, but we cannot override them as they\u2019re static. So, we have to define the static methods in the interface and only perform the calling party in the class.\nBelow is an example of a static method in Java interface:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\nimport java.util.*;\npublic interface A\n{\n    static void staticmethod()\n    {\n        System.out.println(\"Static method of interface A called\");\n    }\n    default void display()\n    {\n        System.out.println(\"Default function of interface A called\");\n    }\n}\nThe above interface has a static method and a default method that can be executed without affecting the class that implements it. However, there is no use in creating the static methods in the Java interface as we cannot override the function by redefining it in the main() method.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nimport java.util.*;\nthe public class demo implements A\n{\n    public static void main(String args[])\n    {\n        demo obj =new demo();\n        A.staticmethod();\n        obj.display();\n    }\n}\nSo, the output of the above program would be:\nStatic method of interface A called\nDefault function of interface A called",
        "reference": "intellipaat.com"
    },
    {
        "question": "45. Differentiate between \u2018==\u2019 and equals()?",
        "answer": "The main difference between \u2018==\u2019 and equals() is that \u2018==\u2019 is an operator, while equal() is a method in java. The == operator is used for reference or addresses comparison, meaning it checks if both the objects or variables are pointing to the same memory location.\nWhereas, equals() method compares the content of two objects or variables. It checks if the value of two objects is the same or not.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\nimport java.util.*;\npublic class B\n{\n    public static void main(String args[])\n    {\n           String str1=new String(\"Alex\");\n           String str2=new String(\"Alex\");\n           System.out.println(\"Output given by == operator: \"+(str1==str2));\n           System.out.println(\"Output by equals() method: \"+(str1.equals(str2)));\n    }\n}\nOutput:\nOutput given by == operator: false\nOutput by equals() method: true",
        "reference": "intellipaat.com"
    },
    {
        "question": "46. What are JAR files?",
        "answer": "Java Archive(JAR) is a file format that aggregates many files into a single file similar in a format similar to a ZIP file. In other words, the JAR is a zipped file comprised of java lass files, metadata, and resources like text, images, audio files, directories, .class files, and more.\nFollowing is the syntax to create a JAR file:\n1\nJar cf file_name input files",
        "reference": "intellipaat.com"
    },
    {
        "question": "47. What is the difference between method overloading and method overriding in Java? Provide examples to illustrate.",
        "answer": "Method overloading is using a single class that has two or more methods with the same name but different parameters. It is solved at compile-time based on the number and types of arguments given. One more instance exists when a subclass provides the specific implementation for some method already defined in its superclass, this is called method overriding, which is used to achieve runtime polymorphism.\nFor example\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nclass Parent {\n    void display() {\n        System.out.println(\"Parent's display method\");\n    }\n}\n class Child extends Parent {\n    void display() {\n        System.out.println(\"Child's display method\");\n    }\n}\n public class Main {\n    public static void main(String[ ] args) {\n        Parent p = new Parent( );\n        p.display( );  // Output: Parent's display method\n         Child child = new Child();\n        child.display();   // Output: Child's display method\n    }\n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "48. Explain the concept of encapsulation in Java. How does it help in achieving data hiding and abstraction?",
        "answer": "Encapsulation in Java is the act of keeping together data and methods that are part of a class to hide the internal state from direct access. The reason behind this approach is to ensure data integrity and promote abstraction by exposing only essential details of the class\u2019s behavior through public methods.\nTo achieve data hiding, encapsulation restricts direct access to an object\u2019s internal state, thus ensuring data integrity. By doing this, it makes abstraction possible as it only exposes some critical behaviors about the object via public methods, thereby enabling simpler interaction and decreased complexity.",
        "reference": "intellipaat.com"
    },
    {
        "question": "49. What is the purpose of the final keyword in Java? How is it used in variables, methods, and classes?",
        "answer": "The final keyword can be added before a variable declaration, any method header, or preceding the class keyword so as not to allow changing their value, to prevent them from being overridden, or before words like \u201cextends\u201d in order not to let inheritance happen.\n1\n2\n3\n4\n5\n6\n7\n8\npublic final class Circle {\n    private final double PI = 3.14;\n     public final void calculateArea(final double radius) {\n        final double area = PI * radius * radius;\n        System.out.println(\"Area of circle: \" + area);\n    }\n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "50. Describe the concept of multithreading in Java. How can you create and manage threads in a Java application?",
        "answer": "Java multithreading refers to the concurrent execution of multiple threads in one Java program. Threads are lightweight processes capable of running independently and sharing common memory space. There are two ways we can create threads in Java: by extending the Thread class or implementing the Runnable interface.\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\nclass MyThread extends Thread {\n    public void run() {\n        System.out.println(\"MyThread is running...\");\n    }\n}\npublic class Main {\n    public static void main(String[] args) {\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n}",
        "reference": "intellipaat.com"
    },
    {
        "question": "51. What is the difference between ArrayList and LinkedList in Java? When would you choose one over the other for storing data?",
        "answer": "ArrayList is a dynamic array that stores elements and supports fast random access. It is better suited for element traversal and frequent access. Conversely, LinkedList is a linked list that stores its elements in the form of nodes, making it very suitable for high-speed insertion and deletion operations. Therefore, it can be useful where there are many additions or removals.\nIf you want fast access and traversal through elements, then use an ArrayList; otherwise, for fast insertion or deletion of elements, use LinkedList.",
        "reference": "intellipaat.com"
    },
    {
        "question": "52. How many types of constructors are there in the Java programming language?",
        "answer": "There are two types of constructors in the Java programming language:\nParameterized Constructor: A constructor that accepts arguments or parameters is known as the parameterized constructor. It initializes the instance variables will the values passed while creating an object.\nBelow is an example of the parameterized constructor:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nimport java.util.*;\nclass A\n{\nint roll_no;\nString name;\nA()\n{\nSystem.out.println(\"Constructor called\");\n}\n public void fun()\n{\nSystem.out.println(\"Class A function called\");\n}\n}\npublic class parameterized_constructor\n{\npublic static void main(String args[])\n{\nA obj=new A();\nobj.fun();\nSystem.out.println(\"The value of instance variables are: \");\nSystem.out.println(\"Name: \"+obj.name);\nSystem.out.println(\"Roll No: \" +obj.roll_no);\n}\n}\nThe output of the above program would be:\nConstructor called\nClass A function called\nThe value of instance variables are:\nName: null\nRoll No: 0\nNon-parameterized/Default constructor: The constructors with no parameters or arguments are known and non-parameterized constructors. In case you don\u2019t define a constructor of any type, the compiler itself creates a default constructor which will be called when the object is created.\nBelow is an example of a non-parameterized constructor:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\nimport java.util.*;\nclass A\n{\nint roll_no;\nString name;\nA(int x,String y)\n{\nthis.roll_no=x;\nthis.name=y;\nSystem.out.println(\"Constructor called\");\n}\n public void fun()\n{\nSystem.out.println(\"Class A function called\");\n}\n}\n public class non_parameterized_constructor\n{\npublic static void main(String args[])\n{\nA obj=new A(10,\"Harry Williams\");\nSystem.out.println(\"The value of instance variables\");\nSystem.out.println(\"Name: \"+obj.name);\nSystem.out.println(\"Roll No: \"+obj.roll_no);\n}\n}\n The output of the above program will be:\n Constructor called\nThe value of instance variables\nName: Harry Williams\nRoll No: 10",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": ": It stands for Java API for XML Binding. This standard defines a system for a script out of Java objects as XML and for creating Java objects from XML structures.",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    },
    {
        "question": "",
        "answer": "",
        "reference": "intellipaat.com"
    }
]