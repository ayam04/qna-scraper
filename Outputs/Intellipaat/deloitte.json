[
    {
        "question": "1. What is the difference between abstraction and encapsulation in object-oriented programming?",
        "answer": "Two primary concepts in object-oriented programming are abstraction and encapsulation. Abstraction is the process of reducing complex real-world entities down to their fundamental characteristics and simply presenting them. It points out the importance of keeping irrelevant information hidden and giving consumers access to only the necessary information.\nAbstraction in programming enables you to design abstract classes or interfaces that specify the shared characteristics and operations of a collection of related objects. It offers a generalized and simplified way to represent real-world entities, concepts, or systems.\nThe main abstraction points are:\ndefining a common set of methods and properties by creating abstract classes or interfaces.\ninternal implementation that is kept secret.\nEncapsulation is the method of merging data and methods into a single entity, referred to as a class. The methods (functions or behaviors) that operate on the data are combined with the data (attributes or properties) and are contained within a class.\nEncapsulation is used to safeguard an object\u2019s internal state and grant regulated access to it. It restricts access to and modification of data, enabling things to preserve their integrity. You can impose data validation, set access limitations, and guarantee consistency by encapsulating data and methods.\nThe main ideas encapsulated are:\ncreating a class from relevant data and techniques.\nuse access modifiers (such as public, private, and protected) to regulate access to internal data.",
        "reference": "intellipaat.com"
    },
    {
        "question": "2. What is the purpose of inheritance in object-oriented programming?",
        "answer": "In object-oriented programming, the purpose of inheritance is to facilitate code reuse, enhance modularity, and establish a hierarchical relationship between classes. Inheritance allows classes to inherit properties and behaviors from a parent class, known as the superclass or base class. By inheriting from a parent class, child classes, or subclasses, it reduces code duplication and promotes a modular approach to software development. \nAdditionally, inheritance enables the extensibility and modification of existing classes without directly altering their original implementation. This promotes code organization, hierarchy, and polymorphism, as objects of different classes can be treated uniformly using a common superclass interface. Moreover, inheritance contributes to code maintenance and flexibility by allowing centralized changes in the base class to automatically propagate to the derived classes, thereby minimizing the need for individual modifications and reducing the likelihood of introducing errors.",
        "reference": "intellipaat.com"
    },
    {
        "question": "3. Describe the difference between a class and an object.",
        "answer": "A class and an object are two concepts that have a connection but are separate in object-oriented programming (OOP).\nAn object of a certain class will have certain properties (data) and characteristics (methods or functions), which are defined by the class. It outlines the composition and functionality of items that fall under that class. \nExample: human being\nA class serves as a template for generating numerous instances of objects exhibiting comparable properties and behaviors. It summarizes the common characteristics and functionalities that objects of that class share.\nExample: class fruit\nLearn the basics of OOPs in Java through this blog!",
        "reference": "intellipaat.com"
    },
    {
        "question": "4. What is polymorphism in object-oriented programming systems (oops)?",
        "answer": "In simple words, we can say polymorphism is a concept of object-oriented programming systems (oops).\nThere are two types of polymorphism: compile-time and runtime.\nCompile-Time Polymorphism: In object-oriented programming, there exists a feature called method overloading, which involves defining multiple methods within a class under the same name but with different parameter lists. The compiler determines which method to execute based on the arguments provided during compilation. This allows the same method name to be used for different behaviors based on the parameters used. The decision on which method to invoke is made by the compiler at compile-time rather than at runtime.\nRuntime Polymorphism: It is also known as method overriding. In runtime polymorphism, a subclass provides the implementation of a method that is already defined in its superclass. This allows the subclass to override or modify the behavior of the superclass method while keeping the same method signature. The decision on which overridden method to execute is made at runtime based on the actual object type.\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com"
    },
    {
        "question": "5. What is Python? Explain its key features.",
        "answer": "Python is a popular programming language known for its simplicity, readability, and flexibility. It was created by Guido van Rossum in 1991. It has gained recognition for its clean syntax and ease of use.\nThe key features of Python are the following:\nPython focuses on code readability and dynamically determines variable types at runtime. \nPython is an interpreted language, which means it does not require compilation and allows for quick development and testing. \nIt supports object-oriented programming and various programming paradigms, offering developers the freedom to choose their preferred style.\nPython comes with an extensive standard library, providing a wide range of modules and functions for various tasks. \nIts cross-platform compatibility allows code to run on different operating systems without modifications. \nThe language has a strong community of developers who contribute to its growth, and it integrates well with other languages. \nOverall, Python\u2019s simplicity, versatility, and supportive community have made it a popular choice for a wide range of applications, from web development to data analysis and machine learning.",
        "reference": "intellipaat.com"
    },
    {
        "question": "6. What makes Python stand out compared to other programming languages?",
        "answer": "Python distinguishes itself from languages like Java and C++ in several aspects:\nSyntax: Python boasts a simpler and more concise syntax than Java and C++. It uses indentation to define code blocks instead of relying on braces and semicolons, making the code easier to read and write.\nReadability: Python places a strong emphasis on code readability and adheres to a \u201cbatteries included\u201d approach. Its syntax is designed to be clear and straightforward, reducing the complexity typically associated with coding.\nDynamic Typing: Unlike Java and C++, Python adopts dynamic typing, where variable types are determined at runtime. This affords greater flexibility, as variables can be assigned different types during program execution.\nMemory Management: Python employs automatic memory management through garbage collection, eliminating the need for manual memory allocation and deallocation tasks commonly found in C++.\nInterpreted Nature: Python is an interpreted language, executing code line by line. This facilitates quick development and testing without the requirement of compiling code before execution, which is a characteristic of Java and C++.\nStandard Library: Python includes an extensive standard library, offering a wide array of modules and functions for diverse tasks. This comprehensive built-in functionality reduces the reliance on external libraries and aids in saving development time.",
        "reference": "intellipaat.com"
    },
    {
        "question": "7. What are decorators in Python?",
        "answer": "Python decorators are a special feature that allows you to modify the behavior of functions or classes without directly changing their code. They act like wrappers around the functions or classes, adding extra functionality to them. In simple terms, a decorator is a way to enhance or extend the behavior of a function or class by applying some modifications. You can think of it as a tool that you can use to easily add extra capabilities to your functions or classes without having to modify their original code.\nLet\u2019s say you have a function that adds two numbers together. With a decorator, you can easily add some extra functionality to this function, such as logging the input and output values, without having to change the original code of the function itself. Decorators provide a convenient and reusable way to modify functions or classes in Python, making it easier to add extra features or behaviors to your code.",
        "reference": "intellipaat.com"
    }
]