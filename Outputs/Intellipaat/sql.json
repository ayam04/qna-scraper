[
    {
        "question": "1. What is a primary key?",
        "answer": "Primary keys are unique values used to identify records. Think of this as a unique identification card such as an Aadhar Card, or PAN Card of the data. It cannot have null values and must have a unique value just like your PAN Card number, or Aadhar Number. Only one primary key is allowed in one table (one Aadhar, or PAN Card per person). It can have one or more fields making the primary key a composite key. Now, we will write a query to demonstrate the use of a primary key for the employee table:\n // CREATE TABLE Employee ( ID int NOT NULL, Employee_name varchar(255) NOT NULL, Employee_designation varchar(255), Employee_Age int, PRIMARY KEY (ID) );",
        "reference": "intellipaat.com"
    },
    {
        "question": "2. Explain the different types of SQL commands.",
        "answer": "Types of SQL Languages\nDDL: DDL is that part of SQL that defines the data structure of the database in the initial stage when the database is about to be created. It is mainly used to create and restructure database objects. Commands in DDL are:\nCreate table\nAlter table\nDrop table\nDML: DML is used to manipulate already existing data in a database, i.e., it helps users to retrieve and manipulate data. It is used to perform operations such as inserting data into the database through the insert command, updating data with the update command, and deleting data from the database through the delete command.\nDCL: DCL is used to control access to the data in the database. DCL commands are normally used to create objects related to user access and to control the distribution of privileges among users. The commands that are used in DCL are Grant and Revoke.\nTCL: TCL is used to control the changes made by DML commands. It also authorizes the statements to assemble in conjunction with logical transactions. The commands that are used in TCL are Commit, Rollback, Savepoint, Begin, and Transaction.\nAlso, Have a look at SQL Command Cheatsheet.",
        "reference": "intellipaat.com"
    },
    {
        "question": "3. Explain the types of SQL joins.",
        "answer": "There are four different types of SQL Joins: (Inner) Join: An inner join is used to retrieve the records that have matching values in tables involved in the join. It combines rows from two tables based on a related column and returns only the matching record. Inner Join is mostly used to join queries.\n SELECT * FROM Table_A JOIN Table_B; SELECT * FROM Table_A INNER JOIN Table_B; \nLeft (Outer) Join: The use of left join is to retrieve all the records or rows from the left and the matched ones from the right.\n SELECT * FROM Table_A A LEFT JOIN Table_B B ON A.col = B.col; \nRight (Outer) Join: The use of Right join is to retrieve all the records or rows from the right and the matched ones from the left.\n SELECT * FROM Table_A A RIGHT JOIN Table_B B ON A.col = B.col; \nFull (Outer) Join: The use of Full join is to retrieve the records that have a match either in the left table or the right table.\n SELECT * FROM Table_A A FULL JOIN Table_B B ON A.col = B.col; \nAce your next SQL interview with our expert-written Sql Join Query Interview Questions.\nGet 100% Hike!\nMaster Most in Demand Skills Now !\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com"
    },
    {
        "question": "4. What are the uses of SQL?",
        "answer": "SQL databases are your data powerhouse. Using them, you can do the following:\nCreate New Databases: It is like planting seeds for future growth.\nInsert Data: You can add new information to your database, like filling out forms.\nDelete Data: Remove outdated information you no longer need. It\u2019s cleaning house.\nUpdate Records: Modify existing data to keep it accurate and relevant.\nRetrieve Data: Fetch relevant data you need; think of it as using a library\u2019s catalogue search.\nCreate/Drop Tables: Build or remove structures to organize your data; imagine setting up or taking down shelves in your garage.\nCreate Functions/Views: Customize how you access your data; this is creating shortcuts or custom views.\nConvert Data Types: Transform data into a different format; think of changing a recipe from metric to imperial.",
        "reference": "intellipaat.com"
    },
    {
        "question": "5. What is the ACID property in a database?",
        "answer": "When we talk about transactions, ACID here stands for Atomicity, Consistency, Isolation and Durability that acts as a checklist to check on reliability.\nAtomicity: It means either the whole transaction succeeds or none of it will do. It is like going to a departmental store and buying a complete range of items if one item is missing, you do not buy anything at all.\nConsistency: It is about how well the data sticks to the rules. Just imagine ensuring your recipe menu does all the steps correctly; in case any step is omitted or done wrongly then you will not serve the dish.\nIsolation: Picture it as managing multiple transactions without interference. For instance, in a busy kitchen where every chef has their own dish; no one will interfere with someone else\u2019s recipe.\nDurability: Look at it as how well the transaction can stand against interruptions. You can think of this as having your message passed through despite harsh weather, once sent always delivered regardless of external factors.\nEnroll now in SQL course in Bangalore to learn more in-depth about SQL.",
        "reference": "intellipaat.com"
    },
    {
        "question": "6. What is normalization and what are its types?",
        "answer": "Data normalization is like tidying your house by arranging it into a city. This way, every information bit has its own storage, and nothing is dependent on something else except for when it\u2019s necessary. Thus, we reduce chaos and ambiguity. It\u2019s like sort of putting all the clothes into different boxes so that you can easily find them whenever you need them.\nThere are various types of Normalization which are discussed below:\nIn the First Normal Form (1NF), each data in your cell should be made up of only indivisible values as if ensuring that every house in your city has a single owner with no shared rooms or multiple keys.\nThe Second Normal Form (2NF) eliminates partial dependencies so that any non-key attribute is fully functionally dependent on the primary key. This is the same as every house in your city having one owner to avoid shared ownership.\nThe Third Normal Form (3NF) deals with transitive dependencies which means a non-key attribute must not transitively depend on another non-key attribute. It\u2019s just like making sure house ownership in your city doesn\u2019t rely on owning other things such as another car.\nBCNF is a stricter version of 3NF, where every functional dependency X -> Y, X is a super key, thus, all the rules are clear, and it makes the organization smooth. It is like a city plan to make sure that all the houses have a single owner who is the owner of the house himself without any intermediaries.",
        "reference": "intellipaat.com"
    },
    {
        "question": "7. What is the difference between DBMS and RDBMS?",
        "answer": "A Database Management System is like a normal paper filing cabinet in that each folder represents a data item. This behaves well when one is keeping a few pieces of information in a simple way. When the data becomes too much or when one wants to get a certain kind of information from the cabinet, it becomes hard to find. This happens because the files are unlinked or are unstructured. \nIn the case of Relational Database Management Systems, they are just like modern libraries that put books into tables with unique identification aspects. Therefore, any kind of data can be linked or grouped together so that we can be able to tap into vast amounts of information. Moreover, this helps us to understand the buried relations between the data.\nParameters DBMS RDBMS\nAccess Data elements need to be accessed separately Multiple data elements can be accessed at the same time\nRelationship Between Data No relationship between data Data in tables are related to each other\nNormalization It is not present It is present\nDistributed Database It does not support distributed databases. It supports distributed database\nData Storage Format Data is stored in either a navigational or hierarchical form Data is stored in a tabular structure with headers being the column names and the rows containing the corresponding values\nAmount of Data It deals with a small quantity of data It deals with a larger amount of data\nData Redundancy It is prevalent Keys and indexes do not allow data redundancy\nNumber of Users It supports a single user It supports multiple users\nData Fetching It is slower for large amounts of data It is speedy due to the relational approach\nData Security Low-security levels when it comes to data manipulation Multiple levels of data security exist\nSoftware and Hardware Requirements Low High\nExamples XML, Window Registry, etc. MySQL, SQL Server, Oracle, Microsoft Access, PostgreSQL, etc.",
        "reference": "intellipaat.com"
    },
    {
        "question": "8. What are the applications of SQL?",
        "answer": "Think of SQL as a toolbox for streamlining your information resources:\nData Integration Scripts: Equally, when writing data integration scripts, think of SQL as your personal data librarian. It helps you to combine various databases and sources into one single output.\nSetting and Running Analytical Queries: SQL allows you to question your data like an intelligent detective who can recognize patterns in the information provided.\nRetrieving Subsets of Information: For instance, it\u2019s like a treasure map guiding you to specific pieces of information you want whether for processing transactions or analyzing while working with it.\nAdding, Updating, and Deleting Data: Using SQL is almost like reshaping and cleaning up raw material with some simple commands. With the help of SQL, inserting new records, modifying ones that already exist or removing some irrelevant information is only a matter of seconds.",
        "reference": "intellipaat.com"
    },
    {
        "question": "9. What are the subsets of SQL?",
        "answer": "Depending on what you want to do, SQL queries come primarily in four flavours:\nDDL (Data Definition Language): This is for defining the database structure.\nCREATE: to construct databases, tables and indexes.\nDROP: to drop databases, tables and views.\nALTER: change the table\u2019s structure (e.g. adding or dropping columns).\nDML (Data Manipulation Language): It is used to manipulate data in the database.\nINSERT: For adding new records\nUPDATE: To modify existing records\nDELETE: Deleting of records\nSELECT INTO: Copying data from one table into another\nDCL (Data Control Language): These control user access rights and permissions.\nGRANT: Assigns privileges to database objects.\nREVOKE: Withdraws privileges granted earlier from a certain object in the database.\nTCL (Transaction Control Language): Basically, it consists of transaction management and commands that are used in the manipulation of that information within a given transaction.\nCOMMIT: To save changes permanently.\nROLLBACK: It undoes changes made during a transaction.\nSAVEPOINT: This defines a point where the current transaction can be rolled back too in case an error occurs. \nSET TRANSACTION: This is used for setting up transaction characteristics. \nTogether they ensure efficient management, security and integrity of your database.",
        "reference": "intellipaat.com"
    },
    {
        "question": "10. What is a DEFAULT constraint?",
        "answer": "Imagine you\u2019re setting up a game with rules, and default constraints in SQL are like the default settings you establish before you start playing.\nDefining Default Values: Think of default constraints as setting the starting point for a game. You establish a default value for a column in a table, so if no other value is specified when you add a new record, it automatically gets this default value.\nExample: Let\u2019s say you have a table for employee data, and you want to set a default salary for new employees. You can add a default constraint to the salary column, specifying that if no salary is provided, it defaults to a specific value, like $85,000.\nCreating a Default Constraint: It\u2019s like creating a rule for your game. You start by creating a new table for your data. Then, when defining the structure of your table, you add a default constraint to the column where you want to apply the rule. This ensures that every time a new record is added to the table without specifying a value for that column, it automatically follows the default rule you\u2019ve set.\nSo, default constraints in SQL act as handy rules that ensure consistency in your data, providing a default value unless you specify otherwise. It\u2019s like having a safety net to catch any missing information and keep your database organized.\nAlso, learn from our blog on MySQL Interview Questions and Answers to crack any Interview.",
        "reference": "intellipaat.com"
    },
    {
        "question": "11. What is a UNIQUE constraint?",
        "answer": "Think of unique constraints as a lottery ticket. Just like we have different lottery numbers for every ticket, in the same manner, in the column where the unique constraint is applied, only unique values will be allowed.\n\nA PRIMARY KEY constraint will automatically have a UNIQUE constraint. However, unlike a PRIMARY KEY, multiple UNIQUE constraints are allowed per table.",
        "reference": "intellipaat.com"
    },
    {
        "question": "12. What is an index?",
        "answer": "The indexes in a database are like the index in a book. They are the ones to assist you in getting the info at a fast pace. For example, take a library where there is no catalogue, you would have to take a long time to find a book. The index is a tool that allows you to find books faster. Also, in the case of SQL, the index creation is the reason of the faster searches by means of the index which is the roadmap to the relevant data.\nSyntax:\nCREATE INDEX INDEX_NAME ON TABLE_NAME (COLUMN)",
        "reference": "intellipaat.com"
    },
    {
        "question": "13. Explain the types of indexes.",
        "answer": "Primary Index: Think of it as the main key to a building. It is unique and provides entrance into all rooms. In the same way that a primary index in a database uniquely identifies each row and speeds up searches.\nSecondary Index: Imagine this like one departmental index in a noticeably big library. Whereas the primary index leads you to the book, the secondary index helps narrow down your search within specific sections, so you find it quicker.\nClustered Index: Picture this as organizing books on shelves with alphabetical titles. Consequently, it organizes data physically in a table that matches the sequence of the index thereby facilitating easy retrieval just like finding them on shelves well arranged.\nNon-Clustered Index: Just like card catalogues, a clustered index sorts out data on the shelf while a non-clustered index gives another lookup for some information that can be narrowed down further for ease in searching.",
        "reference": "intellipaat.com"
    },
    {
        "question": "14. What are entities and relationships?",
        "answer": "Visualize a database as a digital world where entities are the characters and relationships are the connections between them. \nEntities: Visualize entities as the characters in a novel, each one representing an individual, a location, or an item that keeps data. For instance, when considering employees, projects, and wages in company databases they appear as separate entities just like in any novel story.\nRelationships: Relationships are contacts that help to achieve this interconnection of the characters as it is done in stories. For example, within university information systems, the student entity is linked with the department entity because there is an association among them; it could be representative of various departments attended by students.\nSo, for example with regards to the database world, you can say that all casts involved are these entities and their relationships complete plot lines creating a narrative out of data.\n\nIntermediate SQL Interview Questions and Answers",
        "reference": "intellipaat.com"
    },
    {
        "question": "15. What are SQL operators?",
        "answer": "SQL operators are the special keywords or characters that perform specific operations. They are also used in SQL queries. These operators can be used within the WHERE clause of SQL commands. Based on the specified condition, SQL operators filter the data.\nThe SQL operators can be categorized into the following types:\nArithmetic Operators:For mathematical operations on numerical data\naddition (+)\nsubtraction (-)\nmultiplication (*)\ndivision (/)\nremainder/modulus (%)\nLogical Operators: For evaluating the expressions and returning results in True or False\nALL\nAND\nANY\nISNULL\nEXISTS\nBETWEEN\nIN\nLIKE\nNOT\nOR\nUNIQUE\nComparison Operators: For comparisons of two values and checking whether they are the same or not\nequal to (=)\nnot equal to (!= or <>)\nless than (<),\ngreater than (>;)\nless than or equal to (&<=)\ngreater than or equal to (>=)\nnot less than (!<)\nnot greater than (!>)\nBitwise Operators: For bit manipulations between two expressions of integer type. It first performs the conversion of integers into binary bits and then applied operators\nAND (& symbol)\nOR (|, ^)\nNOT (~)\nCompound Operators: For operations on a variable before setting the variable\u2019s result to the operation\u2019s result\nAdd equals (+=)\nsubtract equals (-=)\nmultiply equals (*=)\ndivide equals (/=)\nmodulo equals (%=)\nString Operators: For concatenation and pattern matching of strings\n+ (String concatenation)\n+= (String concatenation assignment)\n% (Wildcard)\n[] (Character(s) matches)\n[^] (Character(s) not to match)\n_ (Wildcard match one character)",
        "reference": "intellipaat.com"
    },
    {
        "question": "16. What do you mean by data integrity?",
        "answer": "Data integrity is like a loyal protector, guaranteeing data accuracy and consistency. It is there from the creation to deletion, like a lifelong companion. Integrity constraints are its rules that make sure that data is following the guidelines. It is your faithful friend, guaranteeing your data is correct and dependable.",
        "reference": "intellipaat.com"
    },
    {
        "question": "17. What is a data warehouse?",
        "answer": "A data warehouse is a large store of accumulated data, from a wide range of sources, within an organization. The data helps drive business decisions.",
        "reference": "intellipaat.com"
    },
    {
        "question": "18. How would you find the second highest salary from the following table?",
        "answer": "Code:\nselect * from employee\nselect max(e_salary) from employee \nwhere e_salary not in (select max(e_salary) \nfrom employee)\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "19. Why is the FLOOR function used in SQL Server?",
        "answer": "The FLOOR() function helps to find the largest integer value for a given number, which can be an equal or lesser number.\nAre you planning to learn SQL Server? Here is the SQL Certification training. Enroll now!",
        "reference": "intellipaat.com"
    },
    {
        "question": "20. State the differences between clustered and non-clustered indexes",
        "answer": "Clustered Index: It is used to sort the rows of data by their key values. A clustered index is like the contents of a phone book. We can directly open the book on David\u2019s index (for \u201cDavid, Thompson\u201d) and find information for all Davids right next to each other. Since the data are located next to each other, it helps a lot in fetching the data based on range-based queries. A clustered index is actually related to how the data is stored; only one clustered index is possible per table.\nNon-Clustered Index: It stores data at one location and indexes at another location. The index has pointers that point to the location of the data. As the indexes in a non-clustered index are stored in a different place, there can be many non-clustered indexes for a table.\n\nState the differences between the Clustered and Non-clustered indexesState the differences between the Clustered and Non-clustered indexes\nNow, we will see the major differences between clustered and non-clustered indexes:\nParameters Clustered Index Non-Clustered Index\nUsed For Sorting and storing records physically in memory Creating a logical order for data rows; pointers are used for physical data files\nMethods for Storing Stores data in the leaf nodes of the index Never stores data in the leaf nodes of the index\nSize Quite large Comparatively, small\nData Accessing Fast Slow\nAdditional Disk Space Not required Required to store indexes separately\nType of Key By default, the primary key of a table is a clustered index It can be used with the unique constraint on the table that acts as a composite key\nMain Feature Improves the performance of data retrieval Should be created on columns used in Joins",
        "reference": "intellipaat.com"
    },
    {
        "question": "21. What do you know about CDC in SQL Server?",
        "answer": "CDC refers to change data capture. It captures recent INSERT, DELETE, and UPDATE activity applied to SQL Server tables. It records changes to SQL Server tables in a compatible format.",
        "reference": "intellipaat.com"
    },
    {
        "question": "22. What is the difference between SQL and MySQL?",
        "answer": "Now Let\u2019s compare the difference between SQL and MySQL.\nSQL MySQL\nIt is a structured query language used in a database It is a database management system\nIt is used for query and operating database systems, It allows data handling, storing, and modification in an organized manner\nIt is always the same It keeps updating\nIt supports only a single storage engine It supports multiple storage engines\nThe server is independent During backup sessions, the server blocks the database",
        "reference": "intellipaat.com"
    },
    {
        "question": "23. State the differences between SQL and PL/SQL",
        "answer": "SQL PL/SQL\nIt is a database structured query language It is a programming language for a database that uses SQL\nIt is an individual query that is used to execute DML and DDL commands It is a block of codes used to write the entire procedure or a function\nIt is a declarative and data-oriented language It is a procedural and application-oriented language\nIt is mainly used for data manipulation It is used for creating applications\nIt provides interaction with the database server It does not provide interaction with the database server\nIt cannot contain PL/SQL code It can contain SQL because it is an extension of SQL",
        "reference": "intellipaat.com"
    },
    {
        "question": "24. What is the need for group functions in SQL?",
        "answer": "Group functions operate on a series of rows and return a single result for each group. COUNT(), MAX(), MIN(), SUM(), AVG(), and VARIANCE() are some of the most widely used group functions.\nEnroll now in SQL course in Bangalore to learn more in-depth about SQL.",
        "reference": "intellipaat.com"
    },
    {
        "question": "25. What do you understand about a character manipulation function?",
        "answer": "Character manipulation functions are used for the manipulation of character data types.\nSome of the character manipulation functions are as follows:\nUPPER: It returns the string in uppercase.\nSyntax:\nUPPER(\u2018string\u2019)\nExample:\nSELECT UPPER(\u2018demo string\u2019) from String;\nOutput:\nDEMO STRING\nLOWER: It returns the string in lowercase.\nSyntax:\nLOWER(\u2018STRING\u2019)\nExample:\nSELECT LOWER (\u2018DEMO STRING\u2019) from String\nOutput:\ndemo string\nINITCAP: It converts the first letter of the string to uppercase and retains others in lowercase.\nSyntax:\nInitcap(\u2018sTRING\u2019)\nExample:\nSELECT Initcap(\u2018dATASET\u2019) from String\nOutput:\nDataset\nCONCAT: It is used to concatenate two strings.\nSyntax:\nCONCAT(\u2018str1\u2019,\u2019str2\u2019)\nExample:\nSELECT CONCAT(\u2018Data\u2019,\u2019Science\u2019) from String\nOutput:\nData Science\nLENGTH: It is used to get the length of a string.\nSyntax:\nLENGTH(\u2018String\u2019)\nExample:\nSELECT LENGTH(\u2018Hello World\u2019) from String\nOutput: 11",
        "reference": "intellipaat.com"
    },
    {
        "question": "26. What is AUTO_INCREMENT?",
        "answer": "AUTO_INCREMENT is used in SQL to automatically generate a unique number whenever a new record is inserted into a table.\nSince the primary key is unique for each record, this primary field is added as the AUTO_INCREMENT field so that it is incremented when a new record is inserted.\nThe AUTO-INCREMENT value starts at 1 and is incremented by 1 whenever a new record is inserted.\nSyntax:\nCREATE TABLE Employee(\nEmployee_id int NOT NULL AUTO-INCREMENT,\nEmployee_name varchar(255) NOT NULL,\nEmployee_designation varchar(255)\nAge int,\nPRIMARY KEY (Employee_id)\n)\nCheck out our Blog on PL/SQL Interview Questions to crack your SQL Interview.",
        "reference": "intellipaat.com"
    },
    {
        "question": "27. What is a \u201cTRIGGER\u201d in SQL?",
        "answer": "Triggers are the silent guardians of the database that are automatically fired upon the occurrence of an event such as data insertion, updating, or deletion. They are protective keepers who enforce the rules and do not tolerate any unauthorized changes likely to alter data illegally. The triggers are sentinels with an invisible break that protects the treasure.\nThe syntax used to generate the trigger function is as follows:\nCREATE TRIGGER trigger_name",
        "reference": "intellipaat.com"
    },
    {
        "question": "28. Where are usernames and passwords stored in SQL Server?",
        "answer": "In SQL Server, usernames and passwords are stored in the main database in the sysxlogins table.",
        "reference": "intellipaat.com"
    },
    {
        "question": "29. What are the types of relationships in SQL Server databases?",
        "answer": "Relationships are developed by interlinking the columns of one table with the column of another table. There are three different types of relationships, which are as follows:\nOne-to-one relationship\nMany-to-one relationship\nMany-to-many relationship",
        "reference": "intellipaat.com"
    },
    {
        "question": "30. How can you handle expectations in SQL Server?",
        "answer": "TRY and CATCH blocks handle exceptions in SQL Server. Put the SQL statement in the TRY block and write the code in the CATCH block to handle expectations. If there is an error in the code in the TRY block, then the control will automatically move to the CATCH block.\n\nAdvanced SQL Interview Questions for Experienced",
        "reference": "intellipaat.com"
    },
    {
        "question": "31. Which command is used to find out the SQL Server version?",
        "answer": "The following command is used to identify the version of SQL Server:\nSelect SERVERPROPERTY('productversion')",
        "reference": "intellipaat.com"
    },
    {
        "question": "32. What is the COALESCE function?",
        "answer": "The COALESCE function takes a set of inputs and returns the first non-null value.\nSyntax:\nCOALESCE(val1,val2,val3,\u2026\u2026,nth val)\nExample:\nSELECT COALESCE(NULL, 1, 2, \u2018MYSQL\u2019)\nOutput:\n1",
        "reference": "intellipaat.com"
    },
    {
        "question": "33. What do you know about magic tables in SQL Server?",
        "answer": "A magic table can be defined as a provisional logical table that is developed by an SQL Server for tasks such as insert, delete, or update (DML) operations. The operations recently performed on the rows are automatically stored in magic tables. Magic tables are not physical tables; they are just temporary internal tables.",
        "reference": "intellipaat.com"
    },
    {
        "question": "34. Explain Inner Join with an example.",
        "answer": "Inner Join gives us those records that have matching values in two tables.\nLet us assume that we have two tables: Table A and Table B. When we apply Inner Join to these two tables, we will get only records common to both Table A and Table B.\nSyntax:\nSELECT columns\nFROM table1\nINNER JOIN table2\nON table1.column_x=table2.column_y;\nExample:\nselect * from employee\nselect * from department\nOutput:\n\nNow, we will apply Inner Join to both these tables, where the e_dept column in the employee table is equal to the d_name column of the department table.\nSyntax:\nselect employee.e_name, employee.e_dept, department.d_name, department.d_location\nfrom employee inner join department\non\nemployee.e_dept=department.d_name\nOutput:\n\nAfter applying Inner Join, we have only those records where the departments match in both tables. As we can see, the matched departments are Support, Analytics, and Sales.",
        "reference": "intellipaat.com"
    },
    {
        "question": "35. What are the types of views in SQL?",
        "answer": "In SQL, the views are classified into four types. They are the following:\nSimple View: It is a view based on a single table and does not have a GROUP BY clause or other features.\nComplex View: It is a view built from several tables and includes a GROUP BY clause as well as functions.\nInline View: It is a view built on a subquery in the FROM clause, which provides a temporary table and simplifies a complicated query.\nMaterialized View: It is a view that saves both the definition and the details. It builds data replicas by physically preserving them.\n\nSQL Interview Questions for 3 Years Experienced",
        "reference": "intellipaat.com"
    },
    {
        "question": "36. How many authentication modes are there in SQL Server? What are they?",
        "answer": "Two authentication modes are available in SQL Server. They are as follows:\nWindows Authentication Mode: It allows authentication for Windows but not for SQL Server.\nMixed Mode: It allows both types of authentication\u2014Windows and SQL Server.",
        "reference": "intellipaat.com"
    },
    {
        "question": "37. What is a function in SQL Server?",
        "answer": "A function is an SQL Server database object. It is basically a set of SQL statements that allow input parameters, perform processing, and return results only. A function can only return a single value or table. The ability to insert, update, and delete records in database tables is not available.",
        "reference": "intellipaat.com"
    },
    {
        "question": "38. What is SQL Server Agent?",
        "answer": "SQL Server Agent plays an important role in the daily work of SQL Server administrators or DBAs. This is one of the important parts of SQL Server. The aim of the server agent is to easily implement tasks using a scheduler engine that enables the tasks to be performed at scheduled times. SQL Server Agent uses SQL Server to store scheduled management task information.",
        "reference": "intellipaat.com"
    },
    {
        "question": "39. What are views? Give an example.",
        "answer": "Views are virtual tables used to limit the tables that we want to display. Views are nothing but the result of an SQL statement that has a name associated with it. Since views are not physically present, they take less space to store.\n\nLet us consider an example. In the following employee table, say we want to perform multiple operations on the records with the gender \u201cFemale\u201d. We can create a view-only table for the female employees from the entire employee table.\nNow, let us implement it on SQL Server.\nThis is the employee table:\nselect * from employee\n\nNow, we will write the syntax for the view.\nSyntax:\ncreate view female_employee as select * from employee where e_gender=\u2019Female\u2019\nselect * from female_employee\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "40. State the differences between views and tables.",
        "answer": "Views Tables\nA view is a virtual table that is extracted from a database. A table is structured with a set number of columns and a boundless number of rows.\nA view does not hold the data itself. A table contains data and stores it in databases.\nA view is utilized to query certain information contained in a few distinct tables. A table holds fundamental client information and cases of a characterized object.\nIn a view, we will get frequently queried information. In a table, changing the information in the database changes the information that appears in the view.",
        "reference": "intellipaat.com"
    },
    {
        "question": "41. What do you understand by Self Join? Explain using an example",
        "answer": "Self Join in SQL is used for joining a table with itself. Here, depending on some conditions, each row of the table is joined with itself and with other rows of the table.\nSyntax:\nSELECT a.column_name, b.column_name\nFROM table a, table b\nWHERE condition\nExample:\nConsider the customer table given below.\nID Name Age Address Salary\n1 Anand 32 Ahmedabad 2,000.00\n2 Abhishek 25 Delhi 1,500.00\n3 Shivam 23 Kota 2,000.00\n4 Vishal 25 Mumbai 6,500.00\n5 Sayeedul 27 Bhopal 8,500.00\n6 Amir 22 MP 4,500.00\n7 Arpit 24 Indore 10,000.00\nWe will now join the table using Self Join:\nSQL > SELECT a.ID, b.NAME, a.SALARY\nFROM CUSTOMERS a, CUSTOMERS b\nWHERE a.SALARY < b.SALARY;[/code] Output:\nID Name Salary\n2 Anand 1,500.00\n2 Abhishek 1,500.00\n1 Vishal 2,000.00\n2 Vishal 1,500.00\n3 Vishal 2,000.00\n6 Vishal 4,500.00\n1 Sayeedul 2,000.00\n2 Sayeedul 1,500.00\n3 Sayeedul 2,000.00\n4 Sayeedul 6,500.00\n6 Sayeedul 4,500.00\n1 Amir 2,000.00\n2 Amir 1,500.00\n3 Amir 2,000.00\n1 Arpit 2,000.00\n2 Arpit 1,500.00\n3 Arpit 2,000.00\n4 Arpit 6,500.00\n5 Arpit 8,500.00\n6 Arpit 4,500.00",
        "reference": "intellipaat.com"
    },
    {
        "question": "42. What is the difference between Union and Union All operators?",
        "answer": "The union operator is used to combine the result set of two or more select statements. For example, the first select statement returns the fish shown in Image A, and the second statement returns the fish shown in Image B. The Union operator will then return the result of the two select statements as shown in Image A U B. If there is a record present in both tables, then we will get only one of them in the final result.\n\nSyntax:\nSELECT column_list FROM table1\nUnion:\nSELECT column_list FROM table2\nNow, we will execute it in the SQL Server.\nThese are the two tables in which we will use the Union operator.\n\nselect * from student_details1\nUnion:\nselect * from student_details2\nOutput:\n\nThe Union All operator gives all the records from both tables including the duplicates.\n\nLet us implement it in the SQL Server.\nSyntax:\nselect * from student_details1\nUnion All:\nselect * from student_details2\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "43. Can you identify the employee who has the third-highest salary from the given employee table (with salary-related data)?",
        "answer": "Consider the following employee table. In the table, Sabid has the third-highest salary (60,000).\nName Salary\nTarun 70,000\nSabid 60,000\nAdarsh 30,000\nVaibhav 80,000\nBelow is a simple query to find out which employee who has the third-highest salary. The functions RANK, DENSE RANK, and ROW NUMBER are used to obtain the increasing integer value by imposing the ORDER BY clause in the SELECT statement, based on the ordering of the rows. The ORDER BY clause is necessary when the RANK, DENSE RANK, or ROW NUMBER functions are used. On the other hand, the PARTITION BY clause is optional.\nWITH CTE AS\n(\nSELECT Name, Salary, RN = ROW_NUMBER() OVER (ORDER BY Salary DESC) FROM EMPLOYEE\n)\nSELECT Name, Salary FROM CTE WHERE RN =3",
        "reference": "intellipaat.com"
    },
    {
        "question": "44. How would you find the second-highest salary in a table?",
        "answer": "There are several ways to find the second highest salary in a table.\nUsing the ORDER BY, LIMIT, and OFFSET Clauses:\nSELECT distinct(salary) from table_name ORDER BY salary DESC LIMIT 1 OFFSET 1;\nUsing Subquery:\nSELECT MAX(salary) AS salary \nFROM table_name WHERE salary <> (SELECT MAX(salary) \nFROM table_name);\n\n\nWhere,\ntable_name: your table name\nsalary: salary column present in your table",
        "reference": "intellipaat.com"
    },
    {
        "question": "45. What is an effective way to prevent SQL injection in your queries?",
        "answer": "The effective way to prevent SQL injection attacks is through input validation and parameterized queries, which include prepared statements. The developer can sanitize all the inputs, not only just the web form input, because the application code should never use the input directly.",
        "reference": "intellipaat.com"
    },
    {
        "question": "46. What is the significance of an index in a database, and how do you use it?",
        "answer": "Database indexing helps the DBMS find the specific rows in a table very quickly. The most common database index is the B-tree Index. A B-tree index is a situation where the data has few distinct values, such as name, dates or state codes.",
        "reference": "intellipaat.com"
    },
    {
        "question": "47. What is the significance of transactions, and how do you ensure their consistency?",
        "answer": "Transactions help to ensure the data consistency and integrity of the data; they also protect against errors by grouping many actions into a single unit.\nTransaction funds from one account to another are the best example of ensuring data consistency;  the total value of the funds in both accounts is the same at the start and end of each transaction.",
        "reference": "intellipaat.com"
    },
    {
        "question": "48. How will you optimize a slow-moving SQL query? What are some of the optimization techniques?",
        "answer": "We can optimize a slow-moving SQL query by using indexing in the DBMS to find the specific rows in a table very quickly.\nThere are several optimization techniques:\nIndexing\nUsing Distinct\nHaving and Where clauses\nAvoiding correlated subqueries\nLimit\nColumn statistics\n\nSQL Interview Questions for 5 Years Experienced",
        "reference": "intellipaat.com"
    },
    {
        "question": "49. What is wrong with the following SQL query?",
        "answer": "SELECT gender, AVG(age) FROM employee WHERE AVG(age)&>30 GROUP BY gender\nWhen this command is executed, it gives the following error:\nMsg 147, Level 16, State 1, Line 1\nAggregation may not appear in the WHERE clause unless it is in a subquery contained in the HAVING clause or a select list; the column being aggregated is an outer reference.\nMsg 147, Level 16, State 1, Line 1\nInvalid column name \u2018gender\u2019.\nThis means that whenever we work with aggregate functions and use the GROUP BY clause, we cannot use the WHERE clause. Therefore, instead of the WHERE clause, we should use the HAVING clause.\nWhen we use the HAVING clause, the GROUP BY clause should come first, followed by the HAVING clause.\nselect e_gender, avg(e_age) from employee group by e_gender having avg(e_age)>30\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "50. What do you know about the stuff() function?",
        "answer": "The stuff() function deletes a part of the string and then inserts another part into the string, starting at a specified position.\nSyntax:\nSTUFF(String1, Position, Length, String2)\nHere, String1 is the one that will be overwritten. The position indicates the starting location for overwriting the string. Length is the length of the substitute string, and String2 is the string that will overwrite String1.\nExample:\nselect stuff(\u2018SQL Tutorial\u2019,1,3,\u2019Python\u2019)\nThis will change \u2018SQL Tutorial\u2019 to \u2018Python Tutorial\u2019\nOutput:\nPython Tutorial",
        "reference": "intellipaat.com"
    },
    {
        "question": "51. What is a stored procedure? Give an example.",
        "answer": "A stored procedure is a prepared SQL code that can be saved and reused. In other words, we can consider a stored procedure to be a function consisting of many SQL statements to access the database system. We can consolidate several SQL statements into a stored procedure and execute them whenever and wherever required.\nA stored procedure can be used as a means of modular programming, i.e., we can create a stored procedure once, store it, and call it multiple times as required. This also supports faster execution when compared to executing multiple queries.\nSyntax:\nCREATE PROCEDURE procedure_name\nAS\nSql_statement\nGO;\nTo execute we will use this:\nEXEC procedure_name\nExample:\nWe are going to create a stored procedure that will help us extract the age of the employees.\ncreate procedure employee_age\nas\nselect e_age from employee\ngo\nNow, we will execute it.\nexec employee_age\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "52. What do you understand about a temporary table? Write a query to create a temporary table",
        "answer": "A temporary table helps us store and process intermediate results. Temporary tables are created and can be automatically deleted when they are no longer used. They are very useful in places where temporary data needs to be stored.\nSyntax:\nCREATE TABLE #table_name();\nThe below query will create a temporary table:\ncreate table #book(b_id int, b_cost int)\nNow, we will insert the records.\ninsert into #book values(1,100)\ninsert into #book values(2,232)\nselect * from #book\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "53. What is a database cursor? How to use a database cursor?",
        "answer": "A database cursor is a control that allows you to navigate around a table\u2019s rows or documents. It can be referred to as a pointer for a row in a set of rows. Cursors are extremely useful for database traversal operations such as extraction, insertion, and elimination.\nAfter any variable declaration, DECLARE a cursor. A SELECT statement must always be aligned with the cursor declaration.\nTo initialize the result set, OPEN statements must be called before fetching the rows from the result table.\nTo grab and switch to the next row in the result set, use the FETCH statement.\nTo deactivate the cursor, use the CLOSE expression.\nFinally, use the DEALLOCATE clause to uninstall the cursor description and clear all the resources associated with it.\nHere is an example SQL cursor:\nDECLARE @name VARCHAR(50)\nDECLARE db_cursor CURSOR FOR\nSELECT name\nFrom myDB.company\nWHERE employee_name IN (\u2018Jay\u2019, \u2018Shyam\u2019)\nOPEN db_cursor\nFETCH next\nFROM db_cursor\nInto @name\nClose db_cursor\nDEALLOCATE db_cursor",
        "reference": "intellipaat.com"
    },
    {
        "question": "54. What is the use of the INTERSECT operator?",
        "answer": "The INTERSECT operator helps combine two select statements and returns only those records that are common to both select statements. After we get Table A and Table B over here, and if we apply the INTERSECT operator on these two tables, then we will get only those records that are common to the result of the select statements of these two tables.\n\nSyntax:\nSELECT column_list FROM table1\nINTERSECT\nSELECT column_list FROM table2\nNow, let us take a look at an example of the INTERSECT operator.\nselect * from student_details1\nselect * from student_details1\nOutput:\n\nselect * from student_details1\nintersect\nselect * from student_details2\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "55. Describe how to delete duplicate rows using a single statement but without any table creation.",
        "answer": "Let us create an employee table where the column names are ID, NAME, DEPARTMENT, and EMAIL. Below are the SQL scripts for generating the sample data:\nCREATE TABLE EMPLOYEE\n(\nID INT,\nNAME Varchar(100),\nDEPARTMENT INT,\nEMAIL Varchar(100)\n)\nINSERT INTO EMPLOYEE VALUES (1,'Tarun',101,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (2,'Sabid',102,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (3,'Adarsh',103,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (4,'Vaibhav',104,'[email protected]')\n\u2013These are the duplicate rows:\nINSERT INTO EMPLOYEE VALUES (5,'Tarun',101,'[email protected]')\nINSERT INTO EMPLOYEE VALUES (6,'Sabid',102,'[email protected]')\n\nWe can see the duplicate rows in the above table.\nDELETE e1 FROM EMPLOYEE e1, EMPLOYEE e2 WHERE e1.name = e2.name AND e1.id > e2.id\nThe SQL query above will delete the rows, where the name fields are duplicated, and it will retain only those unique rows in which the names are unique and the ID fields are the lowest, i.e., the rows with IDs 5 and 6 are deleted, while the rows with IDs 1 and 2 are retained.",
        "reference": "intellipaat.com"
    },
    {
        "question": "56. Explain database white box testing and black box testing.",
        "answer": "The white box testing method mainly deals with the internal structure of a particular database, where users hide specification details. The white box testing method involves the following:\nAs the coding error can be detected by testing the white box, it can eliminate internal errors.\nTo check for the consistency of the database, it selects the default table values.\nThis method verifies the referential integrity rule.\nIt helps perform the module testing of database functions, triggers, views, and SQL queries.\nThe black box testing method generally involves interface testing and database integration. The black box testing method involves the following:\nMapping details\nVerification of incoming data\nVerification of outgoing data from the other query functions",
        "reference": "intellipaat.com"
    },
    {
        "question": "57. What is Blocking and Troubleshooting?",
        "answer": "Blocking: Blocking occurs when one session holds a lock on a specific resource and a second SPID attempts to acquire a conflicting lock type on the same resource.\nTroubleshooting: To start the troubleshooting, you first have to define the symptoms. Troubleshooting starts with identifying the biggest CPU resource users. The most common SQL server performance symptoms are CPU, memory, network, and slow-running queries.",
        "reference": "intellipaat.com"
    },
    {
        "question": "58. What is an Optimal Disk Configuration for a server?",
        "answer": "Optimal Disk Configuration involves strategically organizing and using storage resources on a server, which helps us achieve the best performance and reliability for a specific workload. The main aim of optimal disk configuration is to minimize bottlenecks and ensure efficient support for the read and write demands of the database.",
        "reference": "intellipaat.com"
    },
    {
        "question": "59. What is a Deadlock or a live Deadlock, and how do you resolve it?",
        "answer": "A deadlock is a situation where a set of processes are blocked because each process is holding the resource and waiting for the other resource. A live deadlock is just like a deadlock-like situation where the processes block each other with a repeated state change yet make no progress.\nThere are several ways to prevent a deadlock or live deadlock situation:\nAcquired multiple locks for a thread.\nAbort and restart the process.\nTimeouts\nTransaction Rollback",
        "reference": "intellipaat.com"
    },
    {
        "question": "60. What are statistics in SQL, and how do you update them?",
        "answer": "Statistics in SQL help us compute the standard statistics, which help us execute the SQL queries more efficiently. The statistics will help us understand the total structure of the data. There are various functions that we can use in statistics, such as MEAN, MAX, MIN, MEDIAN, MODE, and Standard Deviation, and we can also use inferential statistics in SQL, like t-test, f-test, ANOVA, and analytics functions.\nUpdating statistics for a specific table\nGo to the menu of the table and choose Definition.\nOpen the Optimizer Statistics tab page.\nChoose the Update option in the context menu of the Table Statistics field.\nDefine the sample type and size that you want to use to generate the statistics.",
        "reference": "intellipaat.com"
    },
    {
        "question": "61. What is an efficient structure to speed up the table reads?",
        "answer": "With the help of Database Indexing we can improve the speed of the table read.\nDatabase indexing helps DBMS find the specific rows in a table very quickly. The most common database index is the B-tree Index.that has few distinct values, such as name, dates, or state codes.\n\nSQL Technical Interview Questions",
        "reference": "intellipaat.com"
    },
    {
        "question": "62. What is the difference between the DELETE and TRUNCATE commands?",
        "answer": "DELETE:This query is used to delete or remove one or more existing tables.\nTRUNCATE:This statement deletes all the data inside a table.\n\nThe differences between DELETE and TRUNCATE commands are the following:\nTRUNCATE is a DDL command, and DELETE is a DML command.\nWith TRUNCATE, we cannot really execute and trigger, while with DELETE, we can accomplish a trigger.\nIf a table is referenced by foreign key constraints, then TRUNCATE will not work. So, if we have a foreign key, we have to use the DELETE command.\nThe syntax for the DELETE command is as follows:\nDELETE FROM table_name\n[WHERE condition];\nExample:\nselect * from stu\nOutput:\ndelete from stu where s_name=\u2019Bob\u2019\nOutput:\n\nThe syntax for the TRUNCATE command:\nTRUNCATE TABLE\nTable_name;\nExample:\nselect * from stu1\nOutput:\n\ntruncate table stu1\nOutput:\n\nThis deletes all the records from a table.",
        "reference": "intellipaat.com"
    },
    {
        "question": "63. What is the difference between the DROP and TRUNCATE commands?",
        "answer": "If a table is dropped, all things associated with that table are dropped as well. This includes the relationships defined on the table with other tables, access privileges, and grants that the table has, as well as the integrity checks and constraints.\nTo create and use the table again in its original form, all the elements associated with the table need to be redefined.\nHowever, if a table is truncated, there are no such problems as mentioned above. The table retains its original structure.",
        "reference": "intellipaat.com"
    },
    {
        "question": "64. What are the third-party tools that are used in SQL Server?",
        "answer": "The following is the list of third-party tools that are used in SQL Server:\nSQL CHECK\nSQL DOC 2\nSQL Backup 5\nSQL Prompt\nLitespeed 5.0",
        "reference": "intellipaat.com"
    },
    {
        "question": "65. Can we link SQL Server with others?",
        "answer": "Yes, SQL Server can be linked with other database systems using various methods. One common method is through the use of linked servers. Linked servers allow SQL Server to establish connections and access data from other database platforms. By configuring appropriate settings and creating the necessary connections, SQL Server can interact with databases such as MySQL, Oracle, PostgreSQL, and more, enabling data integration and querying across multiple systems.\nAlso, check out the blog on PostgreSQL vs. MySQL.",
        "reference": "intellipaat.com"
    },
    {
        "question": "66. What are some common clauses used with SELECT queries in SQL?",
        "answer": "There are many SELECT statement clauses in SQL. Some of the most commonly used clauses with SELECT queries are as follows:\nFROM\nThe FROM clause defines the tables and views from which data can be interpreted. The tables and views listed must exist at the time the question is given.\nWHERE\nThe WHERE clause defines the parameters that are used to limit the contents of the results table. You can test for basic relationships or for relationships between a column and a series of columns using subselects.\nGROUP BY\nThe GROUP BY clause is commonly used for aggregate functions to produce a single outcome row for each set of unique values in a set of columns or expressions.\nORDER BY\nThe ORDER BY clause helps in choosing the columns on which the table\u2019s result should be sorted.\nHAVING\nThe HAVING clause filters the results of the GROUP BY clause by using an aggregate function.",
        "reference": "intellipaat.com"
    },
    {
        "question": "67. Explain the difference between OLTP and OLAP.",
        "answer": "OLTP: It stands for Online transaction processing, and we can consider it a category of software applications that are efficient for supporting transaction-oriented programs. One of the important attributes of the OLTP system is its potential to maintain consistency. The OLTP system often follows decentralized planning to avoid single points of failure. This system is generally designed for a large audience of end users to perform short transactions. The queries involved in such databases are generally simple, require a fast response time, and, in comparison, return only a few records. So, the number of transactions per second acts as an effective measure for those systems.\n\nOLAP: It stands for online analytical processing, and it is a category of software programs that are identified by a comparatively lower frequency of online transactions. For OLAP systems, the efficiency of computing depends heavily on the response time. Hence, such systems are generally used for data mining or maintaining aggregated historical data, and they are usually used in multidimensional schemas.",
        "reference": "intellipaat.com"
    },
    {
        "question": "68. What is Hybrid OLAP?",
        "answer": "Hybrid OLAP (HOLAP) uses a combination of multidimensional data structures and relational database tables to store multidimensional data. The aggregations for a HOLAP partition are stored by analysis services in a multidimensional structure. The facts are stored in a relational database.",
        "reference": "intellipaat.com"
    },
    {
        "question": "69. How can you copy data from one table to another table?",
        "answer": "Here, we have our employee table.\n\nWe have to copy this data into another table. For this purpose, we can use the INSERT INTO SELECT operator. Before we go ahead and do that, we will have to create another table that will have the same structure as the above-given table.\nSyntax:\ncreate table employee_duplicate(\ne_id int,\ne_name varchar(20),\ne_salary int,\ne_age int,\ne_gender varchar(20)\ne_dept varchar(20)\n)\nFor copying the data, we will use the following query:\ninsert into employee_duplicate select * from employees\nLet us take a look at the copied table.\nselect * from employee_duplicate\nOutput:",
        "reference": "intellipaat.com"
    },
    {
        "question": "70. What is the difference between BETWEEN and IN operators in SQL?",
        "answer": "The BETWEEN operator is employed to identify rows that fall within a specified range of values, encompassing numerical, textual, or date values. It returns the count of values that exist between the two defined boundaries.\nOn the other hand, the IN operator serves as a condition operator utilized for searching values within a predetermined range. When multiple values are available for selection, the IN operator is utilized.\nCheck out how to use IN and BETWEEN Operators in SQL with examples.",
        "reference": "intellipaat.com"
    },
    {
        "question": "71. What is the difference between HAVING and WHERE clauses?",
        "answer": "The main difference between the \u2018HAVING\u2019 and \u2018WHERE\u2019 clauses in SQL is that the \u2018WHERE\u2019 clause operates on individual rows of data, while the \u2018HAVING\u2019 clause is used to filter aggregated data. The \u2018WHERE\u2019 clause cannot be used with aggregate functions, whereas the \u2018HAVING\u2019 clause specifically filters results based on aggregate conditions.\nLet us consider the employee table below.\nName Department Salary\nTarun Production 50,000\nTarun Testing 60,000\nSabid Marketing 70,000\nAdarsh Production 80,000\nVaibhav Testing 90,000\nThe following will select the data on a row-by-row basis:\nSELECT Name, Salary FROM Employee WHERE Salary >=50000\nOutput:\nName Salary\nTarun 50,000\nTarun 60,000\nSabid 70,000\nAdarsh 80,000\nVaibhav 90,000\nThe HAVING clause, on the other hand, operates on the aggregated results.\nSELECT Department, SUM(Salary) AS total FROM Employee GROUP BY Department\nOutput:\nDepartment Total\nMarketing 70,000\nProduction 130,000\nTesting 150,000\nNow, let us see the output when we apply HAVING to the above query.\nSELECT Department, SUM(Salary) AS total FROM Employee GROUP BY Department HAVING SUM(Salary)>70000\nOutput:\nDepartment Total\nProduction 130,000\nTesting 150,000",
        "reference": "intellipaat.com"
    },
    {
        "question": "72. How can you create empty tables with the same structure as another table?",
        "answer": "This can be achieved by fetching the records of one table into a new table using the INTO operator while fixing a WHERE clause to be false for all records. In this way, SQL prepares the new table with a duplicate structure to accept the fetched records. However, there are no records that will get fetched due to the WHERE clause in action. Therefore, nothing is inserted into the new table, thus creating an empty table.\nSELECT * INTO Students_copy\nFROM Students WHERE 1 = 2;",
        "reference": "intellipaat.com"
    },
    {
        "question": "73. How will you update the prices in a product column by increasing 5% of the prices in each row?",
        "answer": "We can update the prices of the product columns by using the UPDATE method, which is part of the DML.\nUPDATE table_name SET price = price*1.05;\nWhere,\ntable_name: your table name\nprice: price column present in your table\nWith this code, we can easily modify the price of each product by 5%.",
        "reference": "intellipaat.com"
    },
    {
        "question": "74. How will you fetch the most recent entries in a database?",
        "answer": "We can fetch the most recent entries in a database by using the ORDER BY clause along with the timestamp column in descending order.\nSELECT * FROM table_name ORDER BY timestamp_column DESC;\nWhere,\ntable_name: your table name\ntimestamp_column: datetime column present in your table",
        "reference": "intellipaat.com"
    },
    {
        "question": "75. How will you calculate the average price of products in each category?",
        "answer": "To calculate the average price of products in each category, we can use the aggregate function (AVG) with the price column and group it by the category column.\nSELECT category, AVG(price) as average_price FROM table_name GROUP BY category;\nWhere,\ntable_name: table name\ncategory: category column in your table\nprice: price column in your table",
        "reference": "intellipaat.com"
    },
    {
        "question": "76. How will you calculate the total sales in each category of a product sales table?",
        "answer": "To calculate the total sales in each category of a product sales table, we can use the aggregate function (SUM) with the sales amount column and group it by the category column.\nSELECT category, SUM(sales_amount) as total_sales FROM sales GROUP BY category;\nWhere,\nsales: table name\ncategory: category column in your table\nsales_amount: sales_amount column in your table",
        "reference": "intellipaat.com"
    },
    {
        "question": "77. How will you find the IDs or details where there have been no entries in terms of sales?",
        "answer": "To find the IDs or details where there have been no entries in terms of sales, we can use the LEFT JOIN or NOT EXISTS clause.\nAssume we have two tables: \u2018product\u2019 with product details and \u2018sales\u2019 with sales data.\nLeft Joins:\nSELECT p.product_id, p.product_name FROM product p LEFT JOIN sales s on p.product_id = s.product_id WHERE s.product_id is NULL;\nWhere,\np.product_id: product id in the product table\np.product_name: product name in the product table\ns.product_id: product id in the sales table\nHere, the WHERE s.product_id is NULL condition helps us filter out the rows where a match in the sales table is not found.\nNot Exists:\nSELECT p.product_id, p.product_name FROM products p WHERE NOT EXISTS (SELECT 1 FROM sales s WHERE s.product_id = p.product_id );\n\nWhere,\np.product_id: product id in the product table\np.product_name: product name in the product table\ns.product_id: product id in the sales table\n\nSQL Scenario-Based Interview Questions",
        "reference": "intellipaat.com"
    },
    {
        "question": "78. Suppose there is a database where information about the employees in various verticals is stored. Your task is to find the average salary of each vertical and the highest salary among the lot.",
        "answer": "To find the average salary of each vertical and the highest salary among the employees, we can use the group by clause along with the aggregate functions (AVG and MAX).\nSELECT vertical, AVG(salary) as average_salary, MAX(salary) as highest_salary FROM employees GROUP BY vertical;\nWhere,\nvertical: column that you want to group\nsalary: column in the table\nemployees: table name",
        "reference": "intellipaat.com"
    },
    {
        "question": "79. Given data where store inventory is stored, your task is to find the top 3 products in each category in terms of prices.",
        "answer": "To find the top 3 products in each category in terms of price, we can group by clause along with the  aggregate function (MAX) with the price column and set the limit as 3 in descending order.\nSELECT category, product_name, MAX(price) as max_price FROM inventory GROUP BY category, product_name ORDER BY category, max_price DESC LIMIT 3;\nWhere,\ncategory: column name having different categories\nproduct_name: name of the product column\nprice: column having the price details\ninventory: table name",
        "reference": "intellipaat.com"
    },
    {
        "question": "80. Write an SQL query to find the month-on-month sales of a specific product in a store.",
        "answer": "To calculate the month-on-month sales of a specific product in a store, we can use a combination of date functions and aggregate functions.\nSELECT EXTRACT(YEAR_MONTH FROM sale_date) AS year_month, SUM(quantity_sold) AS total_sales FROM sales WHERE product_id = 'your_product_id' GROUP BY year_month ORDER BY year_month;\nWhere,\nsale_date: date of the sales column\nquantity_sold: number of quantity sold column\nsales: table name\nproduct_id: Id of the product column\nyour_product_id: pass the product ID for which you want to check.",
        "reference": "intellipaat.com"
    },
    {
        "question": "81. Suppose in an organization, employees are mapped under managers. Write a SQL query that will fetch you the managers and employees working under them.",
        "answer": "To fetch the managers and employees working under them, we can use a self-join to fetch the managers and the employees working under them.\nSELECT M.manager_id AS manager_id, M.manager_name AS manager_name, E.employee_id AS employee_id, E.employee_name AS employee_name FROM employees E JOIN employees M ON E.manager_id = M.employee_id ORDER BY M.manager_id, E.employee_id;\nWhere,\nmanager_id: manager id column\nmanager_name: manager name column\nemployee_id: employee id column\nemployee_name: employee name column",
        "reference": "intellipaat.com"
    },
    {
        "question": "82. In a store inventory, your task is to fetch the total quantity of the top product purchased by the customers.",
        "answer": "To fetch the total quantity of the top product purchased by the customers, we can use a group by clause along with the limit in descending order.\nSELECT product_id, SUM(quantity_purchased) AS total_quantity_purchased FROM purchases GROUP BY product_id ORDER BY total_quantity_purchased DESC LIMIT 1;\nWhere,\nproduct_id: product id column\nquantity_purchased: column having the no. of the quantity purchased\npurchases: table name",
        "reference": "intellipaat.com"
    }
]