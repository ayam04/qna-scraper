[
    {
        "question": "1. What is TypeScript?",
        "answer": "TypeScript is an enhanced version of JavaScript, characterized by static typing, which includes optional type annotations and other features aimed at aiding developers in writing code that is more maintainable and scalable.",
        "reference": "intellipaat.com"
    },
    {
        "question": "2. What are the key features of TypeScript?",
        "answer": "TypeScript offers features like static typing, type inference, classes, interfaces, modules, decorators, and support for modern ECMAScript features.",
        "reference": "intellipaat.com"
    },
    {
        "question": "3. How do you define variables and their types in TypeScript?",
        "answer": "In TypeScript, you can declare variables using the let or const keywords, followed by the variable name and its type annotation. For example, let count: number = 5;.",
        "reference": "intellipaat.com"
    },
    {
        "question": "4. What are interfaces in TypeScript?",
        "answer": "In TypeScript, interfaces establish a set of rules for objects, defining the structure of their properties and methods. By doing so, they ensure consistency and enable type-checking for objects that adhere to these rules.",
        "reference": "intellipaat.com"
    },
    {
        "question": "5. What is type inference in TypeScript?",
        "answer": "Type inference is the ability of the TypeScript compiler to automatically determine the type of a variable based on its initialization value. You don\u2019t need to explicitly specify the type in such cases.",
        "reference": "intellipaat.com"
    },
    {
        "question": "6. How does TypeScript help catch errors during development?",
        "answer": "TypeScript performs static type checking, which means it analyzes the code and reports type-related errors before the code is executed. This helps catch potential errors early in the development process.",
        "reference": "intellipaat.com"
    },
    {
        "question": "7. Explain the difference between 'undefined' and 'null' in TypeScript.",
        "answer": "In TypeScript, \u201cundefined\u201d and \u201cnull\u201d are two distinct types. \u201cUndefined\u201d represents the absence of a value, while \u201cnull\u201d represents the intentional absence of an object value.",
        "reference": "intellipaat.com"
    },
    {
        "question": "8. How do you define an array type in TypeScript?",
        "answer": "In TypeScript, you can define an array type by using square brackets after the type annotation. For example, let numbers: number[] = [1, 2, 3]; declares an array of numbers.",
        "reference": "intellipaat.com"
    },
    {
        "question": "9. What is the 'any' type in TypeScript?",
        "answer": "The \u201cany\u201d type in TypeScript allows variables to have any type. It essentially disables type checking for that particular variable. It is often used when working with existing JavaScript code or when the type is unknown.",
        "reference": "intellipaat.com"
    },
    {
        "question": "10. What is the 'tuple' type in TypeScript?",
        "answer": "A tuple type in TypeScript represents an array with a fixed number of elements, where each element can have its type. For example, let person: [string, number] = [\u2018John Doe\u2019, 30]; declares a tuple type for a person\u2019s name and age.",
        "reference": "intellipaat.com"
    },
    {
        "question": "11. How does TypeScript handle type assertions?",
        "answer": "Type assertions in TypeScript allow you to explicitly inform the compiler about the type of a variable when you know more about the value than TypeScript can infer. They are denoted using the angle bracket syntax (<type>) or the \u201cas\u201d keyword.\n\nIntermediate TypeScript Interview Questions\nFind the most relevant TypeScript Interview Questions and Answers for Freshers",
        "reference": "intellipaat.com"
    },
    {
        "question": "12. What benefits does TypeScript offer in terms of code quality, productivity, tooling support, and collaboration in software development?",
        "answer": "Advantages of Using TypeScript:\nEnhanced Code Quality: With static typing, TypeScript helps identify errors early in the development process, leading to more robust and bug-free code.\nImproved Productivity: TypeScript\u2019s IntelliSense and code completion features enable developers to work faster and with greater accuracy.\nStronger Tooling Support: The TypeScript ecosystem offers a wide range of powerful tools and libraries for code analysis, refactoring, and documentation generation.\nBetter Collaboration: The use of types in TypeScript aids in clearer communication between team members, resulting in smoother collaboration on projects.",
        "reference": "intellipaat.com"
    },
    {
        "question": "13. Explain Arrays in TypeScript.",
        "answer": "Arrays are used to store multiple values in TypeScript. We use square brackets [] to create an array. The values in an array do not need to be the same type. We can access values in an array by their number called an index, which starts from zero. Arrays have a length property to know how many items are in them.\nSyntax for declaring an array in TypeScript:\ntype[] = [value1, value2, value3];",
        "reference": "intellipaat.com"
    },
    {
        "question": "14. How to convert a string to a number in TypeScript?",
        "answer": "To change a string to a number in TypeScript, we use the Number function. We pass the string we want to change as a parameter to the Number function. This will return the string as a number type that we can then use in calculations.\nExample:\nlet stringVariable = \"100\";\nlet numberVariable = Number(stringVariable);",
        "reference": "intellipaat.com"
    },
    {
        "question": "15. What are 'type aliases' in TypeScript?",
        "answer": "Type aliases in TypeScript allow you to create custom names for types, making the code more readable and expressive. They are defined using the type keyword. For example, type Point = { x: number, y: number }; creates a type alias for a point object.",
        "reference": "intellipaat.com"
    },
    {
        "question": "16. How does TypeScript support optional function parameters?",
        "answer": "TypeScript allows you to define optional parameters in function declarations by appending a question mark (?) after the parameter name. This enables you to call functions with or without supplying values for those parameters.\nGet 100% Hike!\nMaster Most in Demand Skills Now!\nBy providing your contact details, you agree to our Terms of Use & Privacy Policy",
        "reference": "intellipaat.com"
    },
    {
        "question": "17. What is an 'enum' in TypeScript?",
        "answer": "Enums in TypeScript provide a way to define a set of named constants. They allow you to assign symbolic names to a series of related values, making the code more readable and maintainable.",
        "reference": "intellipaat.com"
    },
    {
        "question": "18. How can you define function types in TypeScript?",
        "answer": "In TypeScript, you can define function types using the arrow function syntax or the \u201cFunction\u201d keyword. For example, type AddFunction = (a: number, b: number) => number; declares a type for a function that takes two numbers and returns a number.",
        "reference": "intellipaat.com"
    },
    {
        "question": "19. What is the 'keyof' operator in TypeScript?",
        "answer": "The \u201ckeyof\u201d operator in TypeScript is a type operator that produces a union type of all property names of a given type. It is commonly used to iterate over the keys of an object or to create generic utility functions.",
        "reference": "intellipaat.com"
    },
    {
        "question": "20. Explain the concept of 'type guards' in TypeScript.",
        "answer": "Type guards in TypeScript are conditional statements or functions that narrow down the type of a variable within a certain block of code. They allow you to perform type-specific operations based on runtime checks.",
        "reference": "intellipaat.com"
    },
    {
        "question": "21. How does TypeScript handle type compatibility?",
        "answer": "TypeScript follows a structural type system, which means that type compatibility is based on the shape or structure of the types rather than their names. If two types have compatible properties, they are considered compatible.",
        "reference": "intellipaat.com"
    },
    {
        "question": "22. What is the 'never' type in TypeScript?",
        "answer": "The \u201cnever\u201d type in TypeScript represents values that never occur. It is often used to indicate functions that never return or cases that are impossible to reach, helping catch potential logical errors.",
        "reference": "intellipaat.com"
    },
    {
        "question": "23. How can you define a type that allows multiple possible types for a property or variable?",
        "answer": "TypeScript provides the \u201cunion type\u201d feature to define a property or variable that can hold values of multiple types. It is denoted by the \u201c|\u201d operator; for example, let value: string | number;.",
        "reference": "intellipaat.com"
    },
    {
        "question": "24. What are generics in TypeScript?",
        "answer": "Generics in TypeScript enable writing reusable and type-safe code by creating functions, classes, or interfaces that can work with different types. They allow us to define placeholders for types that are resolved at runtime.",
        "reference": "intellipaat.com"
    },
    {
        "question": "25. How does TypeScript support decorators?",
        "answer": "TypeScript supports decorators, which are a way to add metadata and modify the behavior of classes, methods, properties, or parameters. They are declared using the @ symbol and applied using the Reflect.decorate function.",
        "reference": "intellipaat.com"
    },
    {
        "question": "26. What is a namespace in TypeScript?",
        "answer": "Namespaces in TypeScript are used to organize code into logical groups and prevent naming conflicts. They provide a way to group related classes, interfaces, functions, and variables under a single name.",
        "reference": "intellipaat.com"
    },
    {
        "question": "27. How can you integrate TypeScript into an existing JavaScript project?",
        "answer": "TypeScript can be integrated into an existing JavaScript project by renaming the JavaScript files to have a .ts extension and gradually adding type annotations. TypeScript can compile both TypeScript and JavaScript files together.",
        "reference": "intellipaat.com"
    },
    {
        "question": "28. How does TypeScript handle module systems?",
        "answer": "TypeScript supports various module systems, such as CommonJS, AMD, and ES modules. You can specify the module system using the \u2013module compiler flag or the module field in the tsconfig.json file.",
        "reference": "intellipaat.com"
    },
    {
        "question": "29. What are abstract classes in TypeScript?",
        "answer": "Abstract classes in TypeScript are base classes that cannot be instantiated directly. They are designed to be inherited and serve as blueprints for subclasses. Abstract classes may contain abstract methods that must be implemented by the derived classes.",
        "reference": "intellipaat.com"
    },
    {
        "question": "30. How can you extend existing types in TypeScript?",
        "answer": "TypeScript allows you to extend existing types using intersection types. By using the & operator, you can combine multiple types into a single type. For example, type ExtendedPerson = Person & { address: string; } adds an \u201caddress\u201d property to the \u201cPerson\u201d type.",
        "reference": "intellipaat.com"
    },
    {
        "question": "31. What is the 'readonly'modifier in TypeScript?",
        "answer": "The \u201creadonly\u201d modifier in TypeScript is used to make properties or array elements read-only, preventing them from being modified after initialization. It ensures that the value remains constant throughout the program.\n\nAdvanced TypeScript Interview Questions\nList of most asked Typescript Interview Questions and Answers for Experienced",
        "reference": "intellipaat.com"
    },
    {
        "question": "32. What is JSX?",
        "answer": "JSX is a syntax for writing HTML tags in JavaScript. It allows embedding HTML tags directly in JavaScript code. React uses JSX which makes it easier to write React components and render HTML. JSX code gets compiled into regular JavaScript that can run anywhere.\nExample:\nconst element = <h1>Hello, world!</h1>;\nThis JSX code gets compiled into regular JavaScript that outputs a HTML heading element.",
        "reference": "intellipaat.com"
    },
    {
        "question": "33. What are getters/setters?",
        "answer": "Getters and setters are special methods that act as accessors for a property. Getters are used to return the value of a property, setters are used to set the property value. They define custom property access logic rather than directly accessing the data property.\nExample:\nclass Person {\nprivate _name: string;\nget name() {\nreturn this._name;\n}\nset name(value: string) {\nthis._name = value;\n}\n}\nThis defines a getter and setter for the \u201cname\u201d property.",
        "reference": "intellipaat.com"
    },
    {
        "question": "34. What is the difference between the internal module and external module?",
        "answer": "Internal modules are defined within a single file using namespaces. External modules are defined across multiple files using import/export. Internal modules group code together but everything is loaded together, external modules load code asynchronously only when imported. External modules are recommended for large apps as they avoid loading unused code.",
        "reference": "intellipaat.com"
    },
    {
        "question": "35. What is the Default Parameters Function in TypeScript?",
        "answer": "Default parameters allow defining default values for function parameters in TypeScript. If a value is not provided during function call, it will use the default defined. This avoids passing undefined values and makes functions more flexible.\nExample:\nfunction greet(name = \u2018Stranger\u2019) {\nconsole.log(\u2018Hello \u2018 + name);\n}\ngreet(); // Hello Stranger\ngreet(\u2018John\u2019); // Hello John\nThis function greet() has a default parameter name with value \u2018Stranger\u2019.",
        "reference": "intellipaat.com"
    },
    {
        "question": "36. How can you create and use decorators in TypeScript?",
        "answer": "Decorators in TypeScript can be created by defining a function that takes a target, property, or parameter as parameters and applies custom logic. They can be used to enhance classes, methods, or properties with additional functionality or metadata.",
        "reference": "intellipaat.com"
    },
    {
        "question": "37. What are 'conditional types' in TypeScript?",
        "answer": "Conditional types in TypeScript allow you to express type relationships based on conditional logic. They enable you to define types that depend on other types or type conditions, allowing for more advanced type manipulations.",
        "reference": "intellipaat.com"
    },
    {
        "question": "38. How does TypeScript handle async/await operations?",
        "answer": "TypeScript provides support for async/await operations, allowing you to write asynchronous code in a more synchronous and readable manner. The async keyword is used to mark a function as asynchronous, and await is used to pause the function until a promise is resolved.",
        "reference": "intellipaat.com"
    },
    {
        "question": "39. How can you extend built-in types in TypeScript?",
        "answer": "TypeScript allows you to extend built-in types, such as Array or String, by using declaration merging and interfaces. You can augment the existing types with additional properties or methods to suit your specific needs.",
        "reference": "intellipaat.com"
    },
    {
        "question": "40. How can you create and use intersection types in TypeScript?",
        "answer": "Intersection types in TypeScript allow you to combine multiple types into a single type, creating a new type that has all the properties and methods of the intersected types. They are denoted using the \u201c&\u201d operator.",
        "reference": "intellipaat.com"
    },
    {
        "question": "41. Explain the concept of 'declaration merging' in TypeScript.",
        "answer": "Declaration merging in TypeScript allows multiple declarations for the same name to be combined into a single definition. It is useful when extending interfaces, adding properties to classes, or merging namespaces.",
        "reference": "intellipaat.com"
    },
    {
        "question": "42. How does TypeScript handle module resolution and module loaders?",
        "answer": "TypeScript supports different module resolution strategies such as \u201cClassic\u201d (CommonJS/AMD), \u201cNode\u201d (Node.js style), and \u201cES2015\u201d (ES modules). It also allows you to configure module loaders like SystemJS or Webpack.",
        "reference": "intellipaat.com"
    },
    {
        "question": "43. How does TypeScript handle 'namespace' conflicts?",
        "answer": "TypeScript provides namespaces as a way to organize code into logical groups. To avoid naming conflicts between namespaces, you can use the \u201cexport\u201d and \u201cimport\u201d keywords to expose and use their members selectively.",
        "reference": "intellipaat.com"
    },
    {
        "question": "44. Explain the concept of 'mapped types' in TypeScript.",
        "answer": "In TypeScript, mapped types permit the creation of new types by modifying the properties of an existing type. They enable you to iterate over and modify the properties of an object type, creating a modified version of the type.",
        "reference": "intellipaat.com"
    },
    {
        "question": "45. How does TypeScript handle 'module augmentation'?",
        "answer": "Module augmentation in TypeScript allows you to extend the functionality of existing modules by adding new declarations or modifying existing ones. It enables you to enhance external modules without modifying their original source code.",
        "reference": "intellipaat.com"
    },
    {
        "question": "46. What is the purpose of the 'NonNullable' type in TypeScript?",
        "answer": "The \u201cNonNullable\u201d type in TypeScript is used to create a new type that excludes null and undefined from the original type. It ensures that a variable of the NonNullable type will always have a defined value.",
        "reference": "intellipaat.com"
    },
    {
        "question": "47. Explain the concept of inheritance in TypeScript.",
        "answer": "In TypeScript, inheritance refers to the ability of a class (subclass) to inherit properties and methods from another class (superclass). The subclass in typescript can extend the functionality of the superclass and add its own unique features. It promotes code reusability and enables hierarchical relationships between classes.\nclass Rectangle {\nlength: number;\nbreadth: number\n\nconstructor(length: number, breadth: number) {\n  this.length = length;\n  this.breadth = breadth\n}\n\narea(): number {\n  return this.length * this.breadth;\n}\n}\n\nclass Square extends Rectangle {\nconstructor(side: number) {\n  super(side, side);\n}\n\nvolume() {\n  return \"Square doesn't have a volume!\"\n}\n}\n\nconst sq = new Square(10);\nconsole.log(sq.area());\nconsole.log(sq.volume());",
        "reference": "intellipaat.com"
    },
    {
        "question": "48. What are Mixins?",
        "answer": "Mixins are reusable blocks of code that can be included in multiple classes to provide common functionality without extending base classes. They allow adding multiple functionalities to a class without relying on inheritance.\nExample:\n// Define a reusable mixin\nfunction Loggable {\nlog() {\nconsole.log(\u201cLogging\u2026\u201d);\n}\n}\n// Class we want to make loggable\nclass Component {\nconstructor() {\n//\u2026\n}\n}\n// Mix Loggable into Component\nObject.assign(Component.prototype, Loggable);\n// Usage\nconst myComponent = new Component();\nmyComponent.log(); // Logs \u201cLogging\u2026\u201d\nThis defines a Loggable mixin with a log() method, and mixes it into the Component class prototype, allowing any Component instance to now call log().",
        "reference": "intellipaat.com"
    },
    {
        "question": "49. Explain the symbol type in TypeScript.",
        "answer": "The symbol type in TypeScript represents unique identifiers. It is used to reference something that is unique like a class, method or property. Symbols are created using Symbol() and each symbol is unique. Symbols provide a way to associate metadata with a value in a way that won\u2019t collide with other keys.\nExample:\nconst sym = Symbol();\nclass C {\n[sym]: string = \u201chello\u201d;\n}\nlet c = new C();\nc[sym]; // \u201chello\u201d\nThis creates and uses a symbol to associate metadata with a class in a unique way.",
        "reference": "intellipaat.com"
    }
]